!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.tg=t():e.tg=t()}(window,function(){return function(e){var t={};function r(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(o,i,function(t){return e[t]}.bind(null,i));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);var o=class{constructor(){this.disposed_=!1}dispose(){this.disposed_||(this.disposed_=!0,this.disposeCore())}disposeCore(){}};var i=class extends o{constructor(){super(),this.listeners_={}}on(e,t){let r=this.listeners_[e];r||(r=this.listeners_[e]=[]),-1===r.indexOf(t)&&r.push(t)}fire(e){const t=this.listeners_[e.type];if(t)for(let r=0;r<t.length;++r)t[r].call(this,e)}un(e,t){const r=this.listeners_[e];if(r){const o=r.indexOf(t);r.splice(o,1),0===r.lengtxlh&&delete this.listeners_[e]}}unAll(){this.listeners_={}}disposeCore(){unAll(this)}};class n{static applyAuthToRequest(e,t,r){return e.forEach(e=>{let o=t[e];switch(o.type){case"basic":if(o.username||o.password){let e=o.username||"",t=o.password||"";r.setHeaderObj.Authorization="Basic "+btoa(`${e}:${t}`)}break;case"apiKey":if(o.apiKey){let e={};o.apiKeyPrefix?e[o.name]=o.apiKeyPrefix+" "+o.apiKey:e[o.name]=o.apiKey,"header"===o.in?r.setHeaderObj["X-API-Key"]=e[o.name]:r.queryObj.apikey=e[o.name]}break;case"oauth2":break;default:throw new Error("Unknown authentication type: "+o.type)}}),r}static paramToString(e){return null==e?"":e instanceof Date?e.toJSON():e.toString()}static buildUrl(e,t,r,o){t.match(/^\//)||(t="/"+t);let i=e+t;i=i.replace(/\{([\w-]+)\}/g,(e,t)=>{let o;return o=r.hasOwnProperty(t)?n.paramToString(r[t]):e,encodeURIComponent(o)});let a="";return Object.keys(o).forEach(e=>{void 0!==o[e]&&null!==o[e]&&""!==o[e]&&(a+=""===a?`?${e}=${o[e]}`:`&${e}=${o[e]}`)}),i+=a}static setRequestHeader(e,t){Object.keys(t).forEach(function(r){e.setRequestHeader(r,t[r])})}static getAccessTokenFromLocalStorage(e){for(let t in e){let r=localStorage.getItem(t);if(void 0===r)throw"Token Item Missing";e[t]=r}}static setAccessTokenToLocalStorage(e){for(let t in e)localStorage.setItem(t,e[t])}static removeAccessTokenFromLocalStorage(e){for(let t in e)localStorage.removeItem(t)}static getLocalStorage(e){return localStorage.getItem(e)}static setLocalStorage(e,t){localStorage.setItem(e,t)}static setCookie(e,t,r){var o=new Date;o.setTime(o.getTime()+1e3*r);var i="expires="+o.toGMTString();document.cookie=e+"="+t+"; "+i}static getCookie(e){for(var t=e+"=",r=document.cookie.split(";"),o=0;o<r.length;o++){var i=r[o].trim();if(0===i.indexOf(t))return i.substring(t.length,i.length)}return""}}var a=n;var s={GETTINGACCESSTOKEN:"gettingaccesstoken",SENDINGREQUEST:"sendingrequest",SENTREQUEST:"sentrequest"};var l=class{constructor(e,t){this.xhr=e,this.cancel=t,this.type=s.SENDINGREQUEST}};var c=class{constructor(e){this.xhr=e,this.type=s.SENTREQUEST}};var u=class extends i{constructor(e){super(),this.baseUrls_=["https://gisservertest.thinkgeo.com"],this.baseUrlIndex_=-1,this.authNames_=[],this.authentications_={"API Key":{type:"apiKey",in:"query",name:"ApiKey"},"Client Credentials":{type:"oauth2"}},e&&(this.authentications_["API Key"].apiKey=e,this.authNames_.push("API Key"))}getNextCandidateBaseUri(){if(this.baseUrlIndex_++,this.baseUrls_){let e=this.baseUrls_.length;return this.baseUrlIndex_>e-1&&(this.baseUrlIndex_=0),this.baseUrls_[this.baseUrlIndex_]}throw new ThinkGeoCloudApplicationException("the urls is empty, please set it in option of client")}callApi(e,t,r,o,i,n,s,u,p){let h={queryObj:o};"post"===t.toLowerCase()&&(h.setHeaderObj={"Content-type":s});let d=void 0===n?this.authNames_:n,m=new XMLHttpRequest;h=a.applyAuthToRequest(d,this.authentications_,h);let g=a.buildUrl(this.getNextCandidateBaseUri(),e,r,h.queryObj);m.open(t,g,!0),void 0!==h.setHeaderObj&&a.setRequestHeader(m,h.setHeaderObj),u&&("blob"===u.toLowerCase()?m.responseType="blob":"arrayBuffer"===u.toLowerCase()?m.responseType="arrayBuffer":"json"===u.toLowerCase()&&(m.responseType="json"));let f=new l(m);this.fire(f),f.cancel||(p&&(f.xhr.onload=(e=>{let t=new c(f.xhr);this.fire(t),p&&p(t.xhr.status,t.xhr.response)}),f.xhr.onerror=(e=>{p&&p("error",e.type)})),i?f.xhr.send(i):f.xhr.send())}formatResponse(e){return e}disposeCore(){}};var p=class extends u{constructor(e){super(e)}getElevationOfPoint(e,t){let r=e||{},o=r.pointX,i={pointY:r.pointY,pointX:o},n={Srid:r.srid,Proj4String:r.proj4String,ElevationUnit:r.elevationUnit};this.callApi("/api/v1/elevation/{pointY},{pointX}","GET",i,n,void 0,void 0,[],"json",t)}getElevationOfPoints(e,t){let r=e||{},o={Srid:r.srid,Proj4String:r.proj4String,ElevationUnit:r.elevationUnit},i=JSON.stringify(r.body);this.callApi("/api/v1/elevation/point/multi","POST",void 0,o,i,void 0,["application/json-patch+json","application/json","text/json","application/_*+json"],"json",t)}getElevationOfLine(e,t){let r=e||{},o={wkt:r.wkt,Srid:r.srid,Proj4String:r.proj4String,NumberOfSegments:r.numberOfSegments,ElevationUnit:r.elevationUnit,IntervalDistance:r.intervalDistance,IntervalDistanceUnit:r.intervalDistanceUnit};this.callApi("/api/v1/elevation/line","GET",{},o,void 0,void 0,[],"json",t)}getGradeOfLine(e,t){let r=e||{},o={wkt:r.wkt,Srid:r.srid,Proj4String:r.proj4String,NumberOfSegments:r.numberOfSegments,ElevationUnit:r.elevationUnit,IntervalDistance:r.intervalDistance,IntervalDistanceUnit:r.intervalDistanceUnit};this.callApi("/api/v1/elevation/grade/line","GET",void 0,o,void 0,void 0,[],"json",t)}getElevationOfArea(e,t){let r=e||{},o={wkt:r.wkt,Srid:r.srid,Proj4String:r.proj4String,IntervalDistance:r.intervalDistance,IntervalDistanceUnit:r.intervalDistanceUnit,ElevationUnit:r.elevationUnit};this.callApi("/api/v1/elevation/area","GET",{},o,void 0,void 0,[],"json",t)}};var h=class extends u{constructor(e){super(e)}project(e,t){let r=e||{},o=r.pointX,i=r.pointY,n=r.wkt,a=(r.body,r.fromProj),s=r.toProj;null!=o&&null!=i?this.projectForPoint(i,o,a,s,t):null!=n?this.projectForGeometry(n,a,s,t):this.projecForGeometries(r,t)}projectForPoint(e,t,r,o,i){if(null==e||""===e)throw new Error("Missing the required parameter 'pointY' when calling projectionForPoint");if(null==t||""===t)throw new Error("Missing the required parameter 'pointX' when calling projectionForPoint");if(null==r||""===r)throw new Error("Missing the required parameter 'fromProj' when calling projectionForPoint");if(null==o||""===o)throw new Error("Missing the required parameter 'toProj' when calling projectionForPoint");let n={pointY:e,pointX:t},a={fromProj:r,toProj:o};this.callApi("/api/v1/projection/{pointY},{pointX}","GET",n,a,{},void 0,[],"json",i)}projectForGeometry(e,t,r,o){if(null==e||""===e)throw new Error("Missing the required parameter 'wkt' when calling projectionForGeometry");if(null==t||""===t)throw new Error("Missing the required parameter 'fromProj' when calling projectionForGeometry");if(null==r||""===r)throw new Error("Missing the required parameter 'toProj' when calling projectionForGeometry");let i={wkt:e,fromProj:t,toProj:r};this.callApi("/api/v1/projection","GET",{},i,{},void 0,[],"json",o)}projectForGeometries(e,t){let r=e||{},o=JSON.stringify(r.body);this.callApi("/api/v1/projection/multi","POST",{},{},o,void 0,["application/json-patch+json","application/json","text/json","application/_*+json"],"json",t)}};var d=class extends u{constructor(e){super(e)}search(e,t){let r=e||{},o=r.location,i=r.body;null!=o?this.searchByPoint(o,t,r):null!=i&&this.searchBatch(r,t)}searchByPoint(e,t,r){if(null==e||""===e)throw new Error("Missing the required parameter 'searchText' when calling searchByPoint");let o=r||{},i={searchText:e},n={LocationType:o.locationType,FuzzyMatch:o.fuzzyMatch,MaxResults:o.maxResults,VerboseResults:o.verboseResults,Srid:o.srid,Proj4String:o.proj4String};this.callApi("/api/v1/location/geocode/{searchText}","GET",i,n,{},void 0,[],"json",t)}searchBatch(e,t){let r=e||{},o={LocationType:r.locationType,FuzzyMatch:r.fuzzyMatch,MaxResults:r.maxResults,VerboseResults:r.verboseResults,Srid:r.srid,Proj4String:r.proj4String},i=r.body;this.callApi("/api/v1/location/geocode/multi","POST",{},o,i,void 0,["application/json-patch+json","application/json","text/json","application/_*+json"],"json",t)}};var m=class extends u{constructor(e){super(e)}search(e,t){let r=e||{},o=r.pointX,i=r.pointY,n=r.body,a=r.placeId;null!=o&&null!=i?this.searchPlaceByPoint(i,o,t,r):null!=r.wkt?r.wkt.indexOf("LINESTRING")>=0||r.wkt.indexOf("linestring")>=0?this.searchPlaceByLine(r.wkt,t,r):this.searchPlaceByArea(r.wkt,t,r):null!=n?this.searchPlaceByPoints(r,t):null!=a&&this.searchPlaceById(a,t,r)}searchPlaceByPoint(e,t,r,o){let i=o||{};if(null==e||""===e)throw new Error("Missing the required parameter 'pointY' when calling searchPlaceByPoint");if(null==t||""===t)throw new Error("Missing the required parameter 'pointX' when calling searchPlaceByPoint");let n={pointY:e,pointX:t},a={Srid:i.srid,Proj4String:i.proj4String,Lang:i.lang,SearchRadius:i.searchRadius,SearchRadiusUnit:i.searchRadiusUnit,MaxResults:i.maxResults,LocationCategories:i.locationCategories,LocationTypes:i.locationTypes,VerboseResults:i.verboseResults,DistanceFromQueryFeatureUnit:i.distanceFromQueryFeatureUnit};this.callApi("/api/v1/location/reverse-geocode/{pointY},{pointX}","GET",n,a,null,void 0,[],"json",r)}searchPlaceByLine(e,t,r){let o=r||{};if(null==e||""===e)throw new Error("Missing the required parameter 'wkt' when calling searchPlaceByLine");let i={wkt:e,Srid:o.srid,Proj4String:o.proj4String,Lang:o.lang,SearchRadius:o.searchRadius,SearchRadiusUnit:o.searchRadiusUnit,MaxResults:o.maxResults,LocationCategories:o.locationCategories,LocationTypes:o.locationTypes,VerboseResults:o.verboseResults,DistanceFromQueryFeatureUnit:o.distanceFromQueryFeatureUnit};this.callApi("/api/v1/location/reverse-geocode/line","GET",{},i,null,void 0,[],"json",t)}searchPlaceByArea(e,t,r){let o=r||{};if(null==e||""===e)throw new Error("Missing the required parameter 'wkt' when calling searchPlaceByArea");let i={wkt:e,Srid:o.srid,Proj4String:o.proj4String,Lang:o.lang,SearchRadius:o.searchRadius,SearchRadiusUnit:o.searchRadiusUnit,MaxResults:o.maxResults,LocationCategories:o.locationCategories,LocationTypes:o.locationTypes,VerboseResults:o.verboseResults,DistanceFromQueryFeatureUnit:o.distanceFromQueryFeatureUnit};this.callApi("/api/v1/location/reverse-geocode/area","GET",{},i,null,void 0,[],"json",t)}searchPlaceByPoints(e,t){let r=e||{},o={Srid:r.srid,Proj4String:r.proj4String,Lang:r.lang,SearchRadius:r.searchRadius,SearchRadiusUnit:r.searchRadiusUnit,MaxResults:r.maxResults,LocationCategories:r.locationCategories,LocationTypes:r.locationTypes,VerboseResults:r.verboseResults,DistanceFromQueryFeatureUnit:r.distanceFromQueryFeatureUnit},i=JSON.stringify(r.body);this.callApi("/api/v1/location/reverse-geocode/multi","POST",{},o,i,void 0,["application/json-patch+json","application/json","text/json","application/_*+json"],"json",t)}searchPlaceById(e,t,r){let o=r||{};if(null==e||""===e)throw new Error("Missing the required parameter 'placeId' when calling searchPlaceById");let i={placeId:e},n={Srid:o.srid,Proj4String:o.proj4String,Lang:o.lang,SearchRadius:o.searchRadius,SearchRadiusUnit:o.searchRadiusUnit,MaxResults:o.maxResults,LocationCategories:o.locationCategories,LocationTypes:o.locationTypes,VerboseResults:o.verboseResults,DistanceFromQueryFeatureUnit:o.distanceFromQueryFeatureUnit};this.callApi("/api/v1/location/place/{placeId}","GET",i,n,null,void 0,[],"json",t)}getPlaceCatergories(e){this.callApi("/api/v1/location/reverse-geocode/location-categories","GET",{},{},null,void 0,[],"json",e)}getCommonCatergories(e){this.callApi("/api/v1/location/reverse-geocode/location-categories/common","GET",{},{},null,void 0,[],"json",e)}};const g={None:"None",Common:"Common",All:"All",Aeroway:"Aeroway",Amenity:"Amenity",Barrier:"Barrier",Boundary:"Boundary",Building:"Building",Education:"Education",Entertainment:"Entertainment",Financial:"Financial",Healthcare:"Healthcare",Historic:"Historic",Leisure:"Leisure",Manmade:"Manmade",Natural:"Natural",Rail:"Rail",Power:"Power",Road:"Road",Shop:"Shop",Sport:"Sport",Sustenance:"Sustenance",Tourism:"Tourism",Transportation:"Transportation",Waterway:"Waterway",Intersection:"Intersection",AddressPoint:"AddressPoint",Others:"Others"};Object.freeze(g);var f=g;var y=class extends u{constructor(e){super(e)}getColorsInAnalogousFamily(e,t){let r=e||{},o=r.color,i=r.numberOfColors;if(null==i||""===i)throw new Error("Missing the required parameter 'numberOfColors' when calling getColorsInAnalogousFamily");let n="/api/v1/color/scheme/analogous/random/{numberOfColors}",a={numberOfColors:i},s={outFormat:r.outFormat};o&&(n="/api/v1/color/scheme/analogous/{inputColor}/{numberOfColors}",a.inputColor=o,s.inFormat=r.inFormat),this.callApi(n,"GET",a,s,{},void 0,[],"json",t)}getColorsInComplementaryFamily(e,t){let r=e||{},o=r.color,i=r.numberOfColors;if(null==i||""===i)throw new Error("Missing the required parameter 'numberOfColors' when calling getColorSchemeComplementaryRandomByNumberOfColorV1");let n="/api/v1/color/scheme/complementary/random/{numberOfColors}",a={numberOfColors:i},s={outFormat:r.outFormat};o&&(n="/api/v1/color/scheme/complementary/{inputColor}/{numberOfColors}",a.inputColor=o,s.inFormat=r.inFormat),this.callApi(n,"GET",a,s,{},void 0,[],"json",t)}getColorsInContrastingFamily(e,t){let r=e||{},o=r.color,i=r.numberOfColors;if(null==i||""===i)throw new Error("Missing the required parameter 'numberOfColors' when calling getColorsInContrastingFamily");let n="/api/v1/color/scheme/contrasting/random/{numberOfColors}",a={numberOfColors:i},s={outFormat:r.outFormat};o&&(n="/api/v1/color/scheme/contrasting/{inputColor}/{numberOfColors}",a.inputColor=o,s.inFormat=r.inFormat),this.callApi(n,"GET",a,s,{},void 0,[],"json",t)}getColorsInHueFamily(e,t){let r=e||{},o=r.color,i=r.numberOfColors;if(null==i||""===i)throw new Error("Missing the required parameter 'numberOfColors' when calling getColorsInHueFamily");let n="/api/v1/color/scheme/sequential/random/{numberOfColors}",a={numberOfColors:i},s={outFormat:r.outFormat};o&&(n="/api/v1/color/scheme/sequential/{inputColor}/{numberOfColors}",a.inputColor=o,s.inFormat=r.inFormat),this.callApi(n,"GET",a,s,{},void 0,[],"json",t)}getColorsInQualityFamily(e,t){let r=e||{},o=r.color,i=r.numberOfColors;if(null==i||""===i)throw new Error("Missing the required parameter 'numberOfColors' when calling getColorsInQualityFamily");let n="/api/v1/color/scheme/qualitative/random/{numberOfColors}",a={numberOfColors:i},s={outFormat:r.outFormat};o&&(n="/api/v1/color/scheme/qualitative/{inputColor}/{numberOfColors}",a.inputColor=o,s.inFormat=r.inFormat),this.callApi(n,"GET",a,s,{},void 0,[],"json",t)}getColorsInTetradFamily(e,t){let r=e||{},o=r.color,i=r.numberOfColors;if(null==i||""===i)throw new Error("Missing the required parameter 'numberOfColors' when calling getColorSchemeTetradRandomByNumberOfColor");let n="/api/v1/color/scheme/tetrad/random/{numberOfColors}",a={numberOfColors:i},s={outFormat:r.outFormat};o&&(n="/api/v1/color/scheme/tetrad/{inputColor}/{numberOfColors}",a.inputColor=o,s.inFormat=r.inFormat),this.callApi(n,"GET",a,s,{},void 0,[],"json",t)}getColorsInTriadFamily(e,t){let r=e||{},o=r.color,i=r.numberOfColors;if(null==i||""===i)throw new Error("Missing the required parameter 'numberOfColors' when calling getColorsInTriadFamily");let n="/api/v1/color/scheme/triad/random/{numberOfColors}",a={numberOfColors:i},s={outFormat:r.outFormat};o&&(n="/api/v1/color/scheme/triad/{inputColor}/{numberOfColors}",a.inputColor=o,s.inFormat=r.inFormat),this.callApi(n,"GET",a,s,{},void 0,[],"json",t)}};const v={Default:"default",Light:"light",Dark:"dark",Hybrid:"hybrid",Aerial:"aerial",TransparentBackground:"transparentBackground"};Object.freeze(v);var w=v;var j=class extends u{constructor(e){super(e)}getRasterTile(e,t){let r=e||{},o=r.z,i=r.x,n=r.y,a=r.projection,s=r.mapType,l=r.tileSize,c=r.tileResolution;if(null==s||""===s)throw new Error("Missing the required parameter 'mapType' when calling getRasterTile");switch(s){case w.Default:s="light";break;case w.Light:case w.Dark:case w.Hybrid:case w.Aerial:break;case w.TransparentBackground:s="transparent-background";break;default:throw new Error("The 'style' didn't match any RasterMapType")}if(null==c||""===c)throw new Error("Missing the required parameter 'tileResolution' when calling getRasterTile");if(null==a||""===a)throw new Error("Missing the required parameter 'projection' when calling getRasterTile");if(null==l||""===l)throw new Error("Missing the required parameter 'tileSize' when calling getRasterTile");if(null==o||""===o)throw new Error("Missing the required parameter 'z' when calling getRasterTile");if(null==i||""===i)throw new Error("Missing the required parameter 'x' when calling getRasterTile");if(null==n||""===n)throw new Error("Missing the required parameter 'y' when calling getRasterTile");var u="jpeg";switch(style){case w.Aerial:case w.Hybrid:u="jpeg";break;case w.Light:case w.Dark:case w.TransparentBackground:default:u="png"}let p={style:s,resolution:c,srid:a,tileSize:l,tileZ:o,tileX:i,tileY:n,fileExtension:u};this.callApi("/api/v1/maps/raster/{style}/x{resolution}/{srid}/{tileSize}/{tileZ}/{tileX}/{tileY}.{fileExtension}","GET",p,{},{},void 0,[],"Blob",t)}getVectorTile(e,t){let r=e||{},o=r.z,i=r.x,n=r.y,a=r.projection;if(null==a||""===a)throw new Error("Missing the required parameter 'projection' when calling getVectorTile");if(null==o||""===o)throw new Error("Missing the required parameter 'z' when calling getVectorTile");if(null==i||""===i)throw new Error("Missing the required parameter 'x' when calling getVectorTile");if(null==n||""===n)throw new Error("Missing the required parameter 'y' when calling getVectorTile");let s={srid:a,tileZ:o,tileX:i,tileY:n};this.callApi("/api/v1/maps/vector/streets/{srid}/{tileZ}/{tileX}/{tileY}.pbf","GET",s,{},{},void 0,[],"arrayBuffer",t)}};const b={SphericalMercator:3857};Object.freeze(b);var C=b;const S={Default:1,Standard:1,High:2};Object.freeze(S);var T=S;const E={Default:512,Small:256,Medium:512};Object.freeze(E);var R=E;var O=class extends u{constructor(e){super(e)}getTimeZoneByCoordinate(e,t,r,o){let i=o||{};if(null==e||""===e)throw new Error("Missing the required parameter 'pointY' when calling getTimeZoneByCoordinate");if(null==t||""===t)throw new Error("Missing the required parameter 'pointX' when calling getTimeZoneByCoordinate");let n={pointY:e,pointX:t},a={Srid:i.srid,Proj4String:i.proj4String};this.callApi("/api/v1/timezones/{pointY},{pointX}","GET",n,a,null,void 0,[],"json",r)}};var F=class extends u{constructor(e){super(e)}getRoutingByWaypoints(e,t,r){let o=r||{};if(null==e||""===e)throw new Error("Missing the required parameter 'coordinates' when calling getRoutingByWaypoints");let i={coordinates:e},n={Coordinates:o.coordinates,TurnByTurn:o.turnByTurn,DistanceUnit:o.distanceUnit,DurationUnit:o.durationUnit,Srid:o.Srid,Proj4String:o.proj4String,CoordinateSnapRadius:o.coordinateSnapRadius,CoordinateSnapRadiusUnit:o.coordinateSnapRadiusUnit,Debug:o.debug};this.callApi("/api/v1/route/{coordinates}","GET",i,n,null,void 0,[],"json",t)}};let P={};P.BaseClient=u,P.ElevationClient=p,P.ProjectionClient=h,P.GeocodingClient=d,P.MapsClient=j,P.MapProjection=C,P.RasterMapType=w,P.TileResolution=T,P.TileSize=R,P.ReverseGeocodingClient=m,P.ColorClient=y,P.LocationCategories=f,P.TimeZoneClient=O,P.RoutingClient=F;t.default=P}]).default});
//# sourceMappingURL=thinkgeocloudclient.js.map