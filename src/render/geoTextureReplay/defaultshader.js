/**
 * @module ol/render/webgl/polygonreplay/defaultshader
 */
// This file is automatically generated, do not edit.
// Run `make shaders` to generate, and commit the result.

export var fragment =  new ol.webgl.Fragment(ol.DEBUG_WEBGL ?
  'precision mediump float;'+
  'varying vec2 v_texCoord;'+
  'varying float v_opacity;'+
  ''+
  'uniform float u_opacity;'+
  'uniform sampler2D u_image;'+
  ''+
  'void main(void) {'+
  '  gl_FragColor = texture2D(u_image, v_texCoord);'+
  
  '}'+
  '' :
  'precision mediump float;varying vec2 a;varying float b;uniform float k;uniform sampler2D l;void main(void){vec4 texColor=texture2D(l,a);gl_FragColor.rgb=texColor.rgb;float alpha=texColor.a*b*k;if(alpha==0.0){discard;}gl_FragColor.a=alpha;}');

export var vertex = new ol.webgl.Vertex(ol.DEBUG_WEBGL ?
  'varying vec2 v_texCoord;'+
  'varying float v_opacity;'+
  ''+
  'attribute vec2 a_position;'+
  'attribute vec2 a_texCoord;'+
  'attribute vec2 a_offsets;'+
  'attribute float a_opacity;'+
  'attribute float a_rotateWithView;'+
  ''+
  'uniform mat4 u_projectionMatrix;'+
  'uniform float u_zIndex;'+
  'uniform mat4 u_offsetScaleMatrix;'+
  'uniform mat4 u_offsetRotateMatrix;'+
  ''+'void main(void) {'+
  '  mat4 offsetMatrix = u_offsetScaleMatrix;'+
  '  if (a_rotateWithView == 1.0) {'+
  '    offsetMatrix = u_offsetScaleMatrix * u_offsetRotateMatrix;'+
  '  }'+
  '  vec4 offsets = offsetMatrix * vec4(a_offsets, 0.0, 0.0);'+
  '  gl_Position = u_projectionMatrix * vec4(a_position, u_zIndex, 1.0) + offsets;'+
  '  v_texCoord = a_texCoord;'+
  '  v_opacity = a_opacity;'+
  '}'+
  ''+
  ''+'' :
  'varying vec2 a;varying float b;attribute vec2 c;attribute vec2 d;attribute vec2 e;attribute float f;attribute float g;uniform mat4 h;uniform mat4 i;uniform mat4 j;void main(void){mat4 offsetMatrix=i;if(g==1.0){offsetMatrix=i*j;}vec4 offsets=offsetMatrix*vec4(e,0.0,0.0);gl_Position=h*vec4(c,0.0,1.0)+offsets;a=d;b=f;}');
