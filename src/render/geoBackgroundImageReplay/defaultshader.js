/**
 * @module ol/render/webgl/geoBackgroundImageReplay/defaultshader
 */
// This file is automatically generated, do not edit.
// Run `make shaders` to generate, and commit the result.

export var fragment =  new ol.webgl.Fragment(ol.DEBUG_WEBGL ?
  `precision mediump float;

  varying vec2 v_texCoord;
  uniform float u_opacity;
  uniform sampler2D u_image;

  void main(void) {
    vec4 texColor = texture2D(u_image, v_texCoord);
    gl_FragColor.rgb = texColor.rgb;
    float alpha = texColor.a * u_opacity;
    if (alpha == 0.0) {
      discard;
    }
    gl_FragColor.a = alpha;
  }` : 'precision mediump float;uniform vec4 e;uniform float f;void main(void){gl_FragColor=e;float alpha=e.a*f;if(alpha==0.0){discard;}gl_FragColor.a=alpha;}');

export var vertex = new ol.webgl.Vertex(ol.DEBUG_WEBGL ?
  `attribute vec2 a_position;
  uniform mat4 u_projectionMatrix;
  uniform mat4 u_projectionTexCoordMatrix;
  uniform mat4 u_offsetScaleMatrix;
  uniform mat4 u_offsetRotateMatrix;  
  varying vec4 texCoord;
  varying vec2 v_texCoord;

  void main(void) {
    gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0);
    texCoord = u_projectionTexCoordMatrix * vec4(a_position, 0.0, 1.0);
    v_texCoord = vec2(texCoord.x, 1.0 - texCoord.y);
  }` : 'attribute vec2 a;uniform mat4 b;uniform mat4 c;uniform mat4 d;void main(void){gl_Position=b*vec4(a,0.0,1.0);}');