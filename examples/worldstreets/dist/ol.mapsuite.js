/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/filter/geoFilter.ts":
/*!*********************************!*\
  !*** ./src/filter/geoFilter.ts ***!
  \*********************************/
/*! exports provided: GeoFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoFilter", function() { return GeoFilter; });
var GeoFilter = /** @class */ (function () {
    function GeoFilter(filterItems) {
        this.filterItems = filterItems || [];
        this.replacedValueToIndex = false;
    }
    GeoFilter.prototype.addFilterItem = function (filterItem) {
        this.filterItems.push(filterItem);
    };
    GeoFilter.prototype.initialize = function () {
        this.initializeCore();
        this.initialized = true;
    };
    GeoFilter.prototype.initializeCore = function () { };
    GeoFilter.prototype.matchOLFeature = function (feature, zoom) {
        if (!this.initialized) {
            this.initialize();
        }
        return this.matchFeatureCore(feature, zoom);
    };
    GeoFilter.prototype.replaceVaulesToPbfIndex = function (pbfLayer) {
        this.replaceVaulesToPbfIndexCore(pbfLayer);
    };
    return GeoFilter;
}());



/***/ }),

/***/ "./src/filter/geoFilterItem.ts":
/*!*************************************!*\
  !*** ./src/filter/geoFilterItem.ts ***!
  \*************************************/
/*! exports provided: GeoFilterItem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoFilterItem", function() { return GeoFilterItem; });
var GeoFilterItem = /** @class */ (function () {
    function GeoFilterItem(key, operator, value) {
        this.key = key;
        this.operator = operator;
        this.value = value;
    }
    GeoFilterItem.createFilterItem = function (filterItemString) {
        var operator = filterItemString.match(this.operatorRegex)[0];
        var parts = filterItemString.split(operator);
        var item = new GeoFilterItem(parts[0], operator, parts[1]);
        return item;
    };
    GeoFilterItem.operatorRegex = new RegExp("[<>!=]+", "g");
    return GeoFilterItem;
}());



/***/ }),

/***/ "./src/filter/geoNumberAttributeFilter.ts":
/*!************************************************!*\
  !*** ./src/filter/geoNumberAttributeFilter.ts ***!
  \************************************************/
/*! exports provided: GeoNumberAttributeFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoNumberAttributeFilter", function() { return GeoNumberAttributeFilter; });
/* harmony import */ var _geoRangeFilter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geoRangeFilter */ "./src/filter/geoRangeFilter.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var GeoNumberAttributeFilter = /** @class */ (function (_super) {
    __extends(GeoNumberAttributeFilter, _super);
    function GeoNumberAttributeFilter(filterItems) {
        return _super.call(this, filterItems) || this;
    }
    return GeoNumberAttributeFilter;
}(_geoRangeFilter__WEBPACK_IMPORTED_MODULE_0__["GeoRangeFilter"]));



/***/ }),

/***/ "./src/filter/geoRangeFilter.ts":
/*!**************************************!*\
  !*** ./src/filter/geoRangeFilter.ts ***!
  \**************************************/
/*! exports provided: GeoRangeFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoRangeFilter", function() { return GeoRangeFilter; });
/* harmony import */ var _geoFilter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geoFilter */ "./src/filter/geoFilter.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var GeoRangeFilter = /** @class */ (function (_super) {
    __extends(GeoRangeFilter, _super);
    function GeoRangeFilter(filterItems) {
        var _this = _super.call(this, filterItems) || this;
        _this.ranges = [];
        _this.allowedValues = [];
        _this.disallowedValues = [];
        return _this;
    }
    GeoRangeFilter.prototype.initializeCore = function () {
        this.filterItems.sort(function (a, b) { return +a.value - +b.value; });
        for (var i = 0; i < this.filterItems.length; i++) {
            var filterItem = this.filterItems[i];
            this.key = filterItem.key;
            var value = +filterItem.value;
            switch (filterItem.operator) {
                case ">":
                    this.ranges.push([value + 0.00001, Number.POSITIVE_INFINITY]);
                    break;
                case ">=":
                    this.ranges.push([value, Number.POSITIVE_INFINITY]);
                    break;
                case "!=":
                    this.disallowedValues.push(value);
                    break;
                case "=":
                    this.allowedValues.push(value);
                    break;
            }
        }
        for (var i = 0; i < this.filterItems.length; i++) {
            var filterItem = this.filterItems[i];
            var value = +filterItem.value;
            var range = GeoRangeFilter.getRange(this.ranges, value);
            switch (filterItem.operator) {
                case "<":
                    if (range) {
                        range[1] = value + 0.00001;
                    }
                    else {
                        range = [Number.NEGATIVE_INFINITY, value + 0.00001];
                        this.ranges.push(range);
                    }
                    break;
                case "<=":
                    if (range) {
                        range[1] = value;
                    }
                    else {
                        range = [Number.NEGATIVE_INFINITY, value];
                        this.ranges.push(range);
                    }
                    break;
            }
        }
    };
    GeoRangeFilter.prototype.matchFeatureCore = function (feature, zoom) {
        var currentValue;
        if (this.replacedValueToIndex) {
            currentValue = feature.properties[this.key];
        }
        else {
            currentValue = feature.properties[this.key];
        }
        return this.isInRange(+currentValue);
    };
    GeoRangeFilter.prototype.replaceVaulesToPbfIndexCore = function (pbfLayer) {
        this.replacedValueToIndex = true;
    };
    GeoRangeFilter.prototype.isInRange = function (currentValue) {
        if (this.disallowedValues.includes(currentValue)) {
            return false;
        }
        if (this.allowedValues.includes(currentValue)) {
            return true;
        }
        for (var i = 0; i < this.ranges.length; i++) {
            var range = this.ranges[i];
            if (range.length === 1) {
                if (currentValue >= range[0]) {
                    return true;
                }
            }
            else {
                if (currentValue >= range[0] && currentValue <= range[1]) {
                    return true;
                }
            }
        }
    };
    GeoRangeFilter.getRange = function (ranges, value) {
        for (var i = 0; i < ranges.length; i++) {
            var range = ranges[i];
            if (value >= range[0] && value <= range[1]) {
                return range;
            }
        }
        return null;
    };
    return GeoRangeFilter;
}(_geoFilter__WEBPACK_IMPORTED_MODULE_0__["GeoFilter"]));



/***/ }),

/***/ "./src/filter/geoRegexFilter.ts":
/*!**************************************!*\
  !*** ./src/filter/geoRegexFilter.ts ***!
  \**************************************/
/*! exports provided: GeoRegexFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoRegexFilter", function() { return GeoRegexFilter; });
/* harmony import */ var _geoFilter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geoFilter */ "./src/filter/geoFilter.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var GeoRegexFilter = /** @class */ (function (_super) {
    __extends(GeoRegexFilter, _super);
    function GeoRegexFilter(filterItems) {
        return _super.call(this, filterItems) || this;
    }
    GeoRegexFilter.prototype.initializeCore = function () {
        var value = this.filterItems[0].value;
        value = value.slice(2, value.length - 1);
        this.regex = new RegExp(value, "g");
        this.key = this.filterItems[0].key;
    };
    GeoRegexFilter.prototype.matchFeatureCore = function (feature, zoom) {
        var currentValue;
        if (this.replacedValueToIndex) {
            currentValue = feature.properties[this.key];
        }
        else {
            currentValue = feature.properties[this.key];
        }
        if (!currentValue) {
            return false;
        }
        return currentValue.toString().match(this.regex) !== null;
    };
    GeoRegexFilter.prototype.replaceVaulesToPbfIndexCore = function (pbfLayer) {
        this.replacedValueToIndex = true;
    };
    return GeoRegexFilter;
}(_geoFilter__WEBPACK_IMPORTED_MODULE_0__["GeoFilter"]));



/***/ }),

/***/ "./src/filter/geoStringAttributeFilter.ts":
/*!************************************************!*\
  !*** ./src/filter/geoStringAttributeFilter.ts ***!
  \************************************************/
/*! exports provided: GeoStringAttributeFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoStringAttributeFilter", function() { return GeoStringAttributeFilter; });
/* harmony import */ var _geoFilter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geoFilter */ "./src/filter/geoFilter.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var GeoStringAttributeFilter = /** @class */ (function (_super) {
    __extends(GeoStringAttributeFilter, _super);
    function GeoStringAttributeFilter(filterItems) {
        return _super.call(this, filterItems) || this;
    }
    GeoStringAttributeFilter.prototype.initializeCore = function () {
        var expectedValue = this.filterItems[0].value;
        expectedValue = expectedValue.slice(1, expectedValue.length - 1);
        this.expectedValues = expectedValue.split(",");
        this.key = this.filterItems[0].key;
    };
    GeoStringAttributeFilter.prototype.matchFeatureCore = function (feature, zoom) {
        var currentValue;
        var currentExpectedValues;
        if (this.replacedValueToIndex) {
            currentValue = feature.propertiesIndex[this.keyIndex];
            currentExpectedValues = this.expectedValueIndexs;
        }
        else {
            currentValue = feature.properties[this.key];
            currentExpectedValues = this.expectedValues;
        }
        switch (this.filterItems[0].operator) {
            case "=":
                return currentExpectedValues.includes(currentValue);
            case "!=":
            default:
                return !currentExpectedValues.includes(currentValue);
        }
    };
    GeoStringAttributeFilter.prototype.replaceVaulesToPbfIndexCore = function (pbfLayer) {
        if (!this.initialized) {
            this.initialize();
        }
        this.keyIndex = pbfLayer.keys.indexOf(this.key);
        var replacedExpectedVaules = [];
        for (var j = 0, jj = this.expectedValues.length; j < jj; j++) {
            var numberValue = +this.expectedValues[j];
            if (isNaN(numberValue)) {
                replacedExpectedVaules.push(pbfLayer.values.indexOf(this.expectedValues[j]));
            }
            else {
                replacedExpectedVaules.push(pbfLayer.values.indexOf(numberValue));
            }
        }
        this.expectedValueIndexs = replacedExpectedVaules;
        this.replacedValueToIndex = true;
    };
    return GeoStringAttributeFilter;
}(_geoFilter__WEBPACK_IMPORTED_MODULE_0__["GeoFilter"]));



/***/ }),

/***/ "./src/filter/geoZoomFilter.ts":
/*!*************************************!*\
  !*** ./src/filter/geoZoomFilter.ts ***!
  \*************************************/
/*! exports provided: GeoZoomFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoZoomFilter", function() { return GeoZoomFilter; });
/* harmony import */ var _geoRangeFilter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geoRangeFilter */ "./src/filter/geoRangeFilter.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var GeoZoomFilter = /** @class */ (function (_super) {
    __extends(GeoZoomFilter, _super);
    function GeoZoomFilter(filterItems) {
        return _super.call(this, filterItems) || this;
    }
    GeoZoomFilter.prototype.matchFeatureCore = function (feature, zoom) {
        return this.isInRange(zoom);
    };
    GeoZoomFilter.prototype.replaceVaulesToPbfIndexCore = function (pbfLayer) {
        this.replacedValueToIndex = true;
    };
    return GeoZoomFilter;
}(_geoRangeFilter__WEBPACK_IMPORTED_MODULE_0__["GeoRangeFilter"]));



/***/ }),

/***/ "./src/format/geoMvt.ts":
/*!******************************!*\
  !*** ./src/format/geoMvt.ts ***!
  \******************************/
/*! exports provided: GeoMVTFormat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoMVTFormat", function() { return GeoMVTFormat; });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GeoMVTFormat = /** @class */ (function (_super) {
    __extends(GeoMVTFormat, _super);
    function GeoMVTFormat(styleJSonCache, options) {
        var _this = this;
        options.layerName = options.layerName ? options.layerName : "layerName";
        _this = _super.call(this, options) || this;
        _this.isMultithread = options.multithread;
        _this.minimalist = options.minimalist;
        _this.maxDataZoom = options.maxDataZoom ? options.maxDataZoom : 14;
        _this.layerName = options.layerName;
        _this.styleJsonCache = styleJSonCache;
        _this.maxDataZoomCache = {};
        _this.registeredLoadEvents = {};
        _this.lruCache = new ol.structs.LRUCache(15);
        _this.sourceCache = {};
        return _this;
    }
    GeoMVTFormat.prototype.getLayerName = function () {
        return this.layerName;
    };
    GeoMVTFormat.prototype.registerTileLoadEvent = function (tile, success, failure, callback) {
        var hasRequested = true;
        var requestKey = tile.requestTileCoord.join(",") + "," + tile.tileCoord[0];
        var loadEventInfo = {
            tile: tile,
            successFunction: success,
            failureFunction: failure,
            callback: callback
        };
        if (this.registeredLoadEvents[requestKey] === undefined) {
            this.registeredLoadEvents[requestKey] = [];
            hasRequested = false;
        }
        this.registeredLoadEvents[requestKey].push(loadEventInfo);
        return hasRequested;
    };
    GeoMVTFormat.prototype.readFeaturesAndCreateInstructsNew = function (source, requestTileCoord, tileCoord) {
        var pbf = new ol.ext.PBF((source));
        var pbfLayers = pbf.readFields(ol.format.MVT.pbfReaders_.layers, {});
        var pbfLayer;
        var features = [];
        var featureIndex = -1;
        var zoomMatchedGeoStylesGroupByLayerId = this.styleJsonCache.geoStyleGroupByZoom[tileCoord[0]];
        if (!zoomMatchedGeoStylesGroupByLayerId) {
            return features;
        }
        var pbfLayerNamesWithGeoStyle = [];
        for (var pbfLayerName in zoomMatchedGeoStylesGroupByLayerId) {
            pbfLayerNamesWithGeoStyle.push(pbfLayerName);
        }
        var instructsCache = [];
        for (var name_1 in pbfLayers) {
            if (this.layers_ && this.layers_.indexOf(name_1) === -1) {
                continue;
            }
            if (pbfLayerNamesWithGeoStyle.indexOf(name_1) === -1) {
                continue;
            }
            pbfLayer = pbfLayers[name_1];
            var cacheTrees = zoomMatchedGeoStylesGroupByLayerId[name_1];
            if (cacheTrees && cacheTrees.length > 0) {
                this.replaceFiltersToIndexOfPbfLayer(cacheTrees, pbfLayer);
                var _loop_1 = function (i) {
                    var rawFeature = ol.format.MVT.readRawFeature_(pbf, pbfLayer, i);
                    var feature_1 = void 0;
                    var _loop_2 = function (j) {
                        var cacheTree = cacheTrees[j];
                        var treeIndex = cacheTree.treeIndex;
                        if (instructsCache[treeIndex] === undefined) {
                            instructsCache[treeIndex] = {
                                min: 10,
                                max: -10
                            };
                        }
                        var matchedNode;
                        var checkNodeMatched = function (node) {
                            var styleJsonCacheItem = node.data;
                            var matched = false;
                            if (styleJsonCacheItem.filterGroup.length > 0) {
                                for (var i_1 = 0; i_1 < styleJsonCacheItem.filterGroup.length; i_1++) {
                                    var filters = styleJsonCacheItem.filterGroup[i_1];
                                    var groupMatched = true;
                                    for (var j_1 = 0; j_1 < filters.length; j_1++) {
                                        var filter = filters[j_1];
                                        if (!filter.matchOLFeature(rawFeature, tileCoord[0])) {
                                            groupMatched = false;
                                            break;
                                        }
                                    }
                                    if (groupMatched) {
                                        matched = true;
                                        break;
                                    }
                                }
                            }
                            else {
                                matched = true;
                            }
                            return matched;
                        };
                        var selectNode = function (node) {
                            matchedNode = node.data;
                        };
                        cacheTree.traverseNode(checkNodeMatched, selectNode);
                        if (matchedNode) {
                            if (feature_1 === undefined) {
                                feature_1 = this_1.createFeature_(pbf, rawFeature);
                                features.push(feature_1);
                                featureIndex += 1;
                            }
                            var zindex = void 0;
                            if (cacheTree.root.data.zIndex) {
                                zindex = rawFeature.properties[cacheTree.root.data.zIndex];
                                feature_1.properties_[cacheTree.root.data.zIndex] = zindex;
                            }
                            if (isNaN(zindex)) {
                                zindex = 0;
                            }
                            if (instructsCache[treeIndex][zindex] === undefined) {
                                instructsCache[treeIndex][zindex] = [];
                                if (zindex < instructsCache[treeIndex]["min"]) {
                                    instructsCache[treeIndex]["min"] = zindex;
                                }
                                if (zindex > instructsCache[treeIndex]["max"]) {
                                    instructsCache[treeIndex]["max"] = zindex;
                                }
                            }
                            instructsCache[treeIndex][zindex].push([featureIndex, matchedNode]);
                            feature_1.extent_ = undefined;
                        }
                    };
                    for (var j = 0; j < cacheTrees.length; j++) {
                        _loop_2(j);
                    }
                };
                var this_1 = this;
                for (var i = 0; i < pbfLayer.length; i++) {
                    _loop_1(i);
                }
            }
            this.extent_ = pbfLayer ? [0, 0, pbfLayer.extent, pbfLayer.extent] : null;
        }
        var instructs = [];
        for (var i = 0; i < instructsCache.length; i++) {
            var instructsInOneTree = instructsCache[i];
            if (instructsInOneTree) {
                for (var j = instructsInOneTree.min, jj = instructsInOneTree.max; j <= jj; j++) {
                    var instructsInOneZIndex = instructsInOneTree[j];
                    if (instructsInOneZIndex) {
                        var childrenInstructs = [];
                        for (var h = 0; h < instructsInOneZIndex.length; h++) {
                            var instruct = instructsInOneZIndex[h];
                            var feature = features[instruct[0]];
                            feature.styleId = feature.styleId ? feature.styleId : {};
                            if (instruct[1].geoStyle) {
                                feature.styleId[instruct[1].geoStyle.id] = 0;
                                instructs.push([instruct[0], instruct[1].geoStyle, i]);
                            }
                            if (instruct[1].childrenGeoStyles) {
                                for (var k = 0; k < instruct[1].childrenGeoStyles.length; k++) {
                                    feature.styleId[instruct[1].childrenGeoStyles[k].id] = 1;
                                    childrenInstructs.push([instruct[0], instruct[1].childrenGeoStyles[k], i]);
                                }
                            }
                        }
                        Array.prototype.push.apply(instructs, childrenInstructs);
                    }
                }
            }
        }
        var subTileCachedInstruct = {};
        var offsetZ = tileCoord[0] - requestTileCoord[0];
        // TODO Get Extent 
        var tileSize = 4096 / Math.pow(2, offsetZ);
        var tileRange = this.getTileRange(requestTileCoord, tileCoord[0]);
        var tiles = {};
        for (var x = tileRange[0]; x <= tileRange[2]; x++) {
            var minX = (x - tileRange[0]) * tileSize;
            var maxX = (x - tileRange[0] + 1) * tileSize;
            for (var y = tileRange[3]; y >= tileRange[1]; y--) {
                var minY = (tileRange[3] - y) * tileSize;
                var maxY = (tileRange[3] - y + 1) * tileSize;
                tiles["" + [x, y]] = [minX, minY, maxX, maxY];
            }
        }
        for (var i = 0; i < instructs.length; i++) {
            var instruct = instructs[i];
            var feature_2 = features[instruct[0]];
            var featureExtent = feature_2.getExtent();
            var featureTileRange = this.getFeatureTileRange(featureExtent, 4096, tileSize, requestTileCoord, offsetZ);
            for (var x = tileRange[0] > featureTileRange[0] ? tileRange[0] : featureTileRange[0], xx = featureTileRange[2] > tileRange[2] ? tileRange[2] : featureTileRange[2]; x <= xx; x++) {
                for (var y = tileRange[1] > featureTileRange[1] ? tileRange[1] : featureTileRange[1], yy = featureTileRange[3] > tileRange[3] ? tileRange[3] : featureTileRange[3]; y <= yy; y++) {
                    var tileKey = "" + [x, y];
                    var tileExtent = tiles[tileKey];
                    if (subTileCachedInstruct[tileKey] === undefined) {
                        subTileCachedInstruct[tileKey] = [];
                    }
                    subTileCachedInstruct[tileKey].push(instruct);
                }
            }
        }
        return [features, subTileCachedInstruct];
    };
    GeoMVTFormat.prototype.getCachedSource = function (tileCoord) {
        return this.sourceCache[tileCoord];
    };
    GeoMVTFormat.prototype.tryLoadTileFromCacheOrRegosterLoadEvent = function (tileCoord, originalZoom, cacheTileInfo) {
        var hasRequested = true;
        var tileCoordKey = tileCoord.join(",") + "," + originalZoom;
        if (this.lruCache.containsKey(tileCoordKey)) {
            var oTile = this.lruCache.get(tileCoordKey);
            this.cachedTileCallback(oTile, [cacheTileInfo]);
        }
        else {
            if (this.registeredLoadEvents[tileCoordKey] === undefined) {
                this.registeredLoadEvents[tileCoordKey] = [];
                hasRequested = false;
            }
            this.registeredLoadEvents[tileCoordKey].push(cacheTileInfo);
        }
        return hasRequested;
    };
    GeoMVTFormat.prototype.addSourceToCache = function (source, zoom, options) {
        if (this.sourceCache[options.tileCoord] === undefined) {
            this.sourceCache[options.tileCoord] = source;
        }
        var instructsTree = this.readFeaturesAndCreateInstructTrees(source, zoom, options);
        var instructs = this.getInstructs(instructsTree);
        var subTileInstructCaches = this.createSubTileInstructCaches(instructs, options);
        var sourceProject = this.readProjection(source);
        var tileCoordKey = options.tileCoord.join(",") + "," + zoom;
        var lastExtent = this.getLastExtent();
        var oTile = { subTileInstructCaches: subTileInstructCaches, sourceProject: sourceProject, lastExtent: lastExtent };
        this.lruCache.set(tileCoordKey, oTile);
        var cachedTileInfo = this.registeredLoadEvents[tileCoordKey];
        delete this.registeredLoadEvents[tileCoordKey];
        this.cachedTileCallback(oTile, cachedTileInfo);
    };
    GeoMVTFormat.prototype.readFeaturesAndCreateInstructTrees = function (source, zoom, options) {
        var pbf = new ol.ext.PBF((source));
        var pbfLayers = pbf.readFields(ol.format.MVT.pbfReaders_.layers, {});
        var features = [];
        var pbfLayer;
        var zoomMatchedGeoStylesGroupByLayerId = this.styleJsonCache.geoStyleGroupByZoom[zoom];
        if (!zoomMatchedGeoStylesGroupByLayerId) {
            return features;
        }
        var pbfLayerNamesWithGeoStyle = [];
        for (var pbfLayerName in zoomMatchedGeoStylesGroupByLayerId) {
            pbfLayerNamesWithGeoStyle.push(pbfLayerName);
        }
        var instructsCache = [];
        for (var name_2 in pbfLayers) {
            if (this.layers_ && this.layers_.indexOf(name_2) === -1) {
                continue;
            }
            if (pbfLayerNamesWithGeoStyle.indexOf(name_2) === -1) {
                continue;
            }
            pbfLayer = pbfLayers[name_2];
            options["extent"] = pbfLayer.extent;
            var cacheTrees = zoomMatchedGeoStylesGroupByLayerId[name_2];
            if (cacheTrees && cacheTrees.length > 0) {
                this.replaceFiltersToIndexOfPbfLayer(cacheTrees, pbfLayer);
                var _loop_3 = function (i) {
                    var rawFeature = ol.format.MVT.readRawFeature_(pbf, pbfLayer, i);
                    var feature = void 0;
                    var _loop_4 = function (j) {
                        var cacheTree = cacheTrees[j];
                        var treeIndex = cacheTree.treeIndex;
                        if (instructsCache[treeIndex] === undefined) {
                            instructsCache[treeIndex] = {
                                min: 10,
                                max: -10
                            };
                        }
                        var matchedNode;
                        var checkNodeMatched = function (node) {
                            var styleJsonCacheItem = node.data;
                            var matched = false;
                            if (styleJsonCacheItem.filterGroup.length > 0) {
                                for (var i_2 = 0; i_2 < styleJsonCacheItem.filterGroup.length; i_2++) {
                                    var filters = styleJsonCacheItem.filterGroup[i_2];
                                    var groupMatched = true;
                                    for (var j_2 = 0; j_2 < filters.length; j_2++) {
                                        var filter = filters[j_2];
                                        if (!filter.matchOLFeature(rawFeature, zoom)) {
                                            groupMatched = false;
                                            break;
                                        }
                                    }
                                    if (groupMatched) {
                                        matched = true;
                                        break;
                                    }
                                }
                            }
                            else {
                                matched = true;
                            }
                            return matched;
                        };
                        var selectNode = function (node) {
                            matchedNode = node.data;
                        };
                        cacheTree.traverseNode(checkNodeMatched, selectNode);
                        if (matchedNode) {
                            if (feature === undefined) {
                                feature = this_2.createFeature_(pbf, rawFeature);
                                if (this_2.minimalist) {
                                    feature.properties_ = {};
                                }
                            }
                            var zindex = void 0;
                            if (cacheTree.root.data.zIndex) {
                                zindex = rawFeature.properties[cacheTree.root.data.zIndex];
                                feature.properties_[cacheTree.root.data.zIndex] = zindex;
                            }
                            if (isNaN(zindex)) {
                                zindex = 0;
                            }
                            if (instructsCache[treeIndex][zindex] === undefined) {
                                instructsCache[treeIndex][zindex] = [];
                                if (zindex < instructsCache[treeIndex]["min"]) {
                                    instructsCache[treeIndex]["min"] = zindex;
                                }
                                if (zindex > instructsCache[treeIndex]["max"]) {
                                    instructsCache[treeIndex]["max"] = zindex;
                                }
                            }
                            instructsCache[treeIndex][zindex].push([feature, matchedNode]);
                            if (this_2.minimalist) {
                                if (matchedNode.geoStyle && (matchedNode.geoStyle.constructor.name === "GeoTextStyle" || matchedNode.geoStyle.constructor.name === "GeoShieldStyle")) {
                                    feature.properties_[matchedNode.geoStyle.name] = rawFeature.properties[matchedNode.geoStyle.name];
                                }
                                if (matchedNode.childrenGeoStyles && matchedNode.childrenGeoStyles.length > 0) {
                                    for (var i_3 = 0; i_3 < matchedNode.childrenGeoStyles.length; i_3++) {
                                        feature.properties_[matchedNode.childrenGeoStyles[i_3].name] = rawFeature.properties[matchedNode.childrenGeoStyles[i_3].name];
                                    }
                                }
                            }
                            feature.extent_ = undefined;
                        }
                    };
                    for (var j = 0; j < cacheTrees.length; j++) {
                        _loop_4(j);
                    }
                };
                var this_2 = this;
                for (var i = 0; i < pbfLayer.length; i++) {
                    _loop_3(i);
                }
            }
            this.extent_ = pbfLayer ? [0, 0, pbfLayer.extent, pbfLayer.extent] : null;
        }
        return instructsCache;
    };
    GeoMVTFormat.prototype.getInstructs = function (instructsTree) {
        var instructs = [];
        // the tress index means the index of SyleId.
        for (var i = 0; i < instructsTree.length; i++) {
            var instructsInOneTree = instructsTree[i];
            if (instructsInOneTree) {
                for (var j = instructsInOneTree.min, jj = instructsInOneTree.max; j <= jj; j++) {
                    var instructsInOneZIndex = instructsInOneTree[j];
                    if (instructsInOneZIndex) {
                        var childrenInstructs = [];
                        for (var h = 0; h < instructsInOneZIndex.length; h++) {
                            var instruct = instructsInOneZIndex[h];
                            instruct[0].styleId = instruct[0].styleId ? instruct[0].styleId : {};
                            if (instruct[1].geoStyle) {
                                instruct[0].styleId[instruct[1].geoStyle.id] = 0;
                                instructs.push([instruct[0], instruct[1].geoStyle, i]);
                            }
                            if (instruct[1].childrenGeoStyles) {
                                for (var k = 0; k < instruct[1].childrenGeoStyles.length; k++) {
                                    instruct[0].styleId[instruct[1].childrenGeoStyles[k].id] = 1;
                                    childrenInstructs.push([instruct[0], instruct[1].childrenGeoStyles[k], i]);
                                }
                            }
                        }
                        Array.prototype.push.apply(instructs, childrenInstructs);
                    }
                }
            }
        }
        return instructs;
    };
    GeoMVTFormat.prototype.createSubTileInstructCaches = function (instructs, options) {
        var subTileCachedInstruct = {};
        var offsetZ = options.originalCoord[0] - options.tileCoord[0];
        var tileSize = options.extent / Math.pow(2, offsetZ);
        var tileRange = this.getTileRange(options.tileCoord, options.originalCoord[0]);
        var tiles = {};
        for (var x = tileRange[0]; x <= tileRange[2]; x++) {
            var minX = (x - tileRange[0]) * tileSize;
            var maxX = (x - tileRange[0] + 1) * tileSize;
            for (var y = tileRange[3]; y >= tileRange[1]; y--) {
                var minY = (tileRange[3] - y) * tileSize;
                var maxY = (tileRange[3] - y + 1) * tileSize;
                tiles["" + [x, y]] = [minX, minY, maxX, maxY];
            }
        }
        for (var i = 0; i < instructs.length; i++) {
            var instruct = instructs[i];
            var featureExtent = instruct[0].getGeometry().getExtent();
            var featureTileRange = this.getFeatureTileRange(featureExtent, options.extent, tileSize, options.tileCoord, offsetZ);
            for (var x = tileRange[0] > featureTileRange[0] ? tileRange[0] : featureTileRange[0], xx = featureTileRange[2] > tileRange[2] ? tileRange[2] : featureTileRange[2]; x <= xx; x++) {
                for (var y = tileRange[1] > featureTileRange[1] ? tileRange[1] : featureTileRange[1], yy = featureTileRange[3] > tileRange[3] ? tileRange[3] : featureTileRange[3]; y <= yy; y++) {
                    var tileKey = "" + [x, y];
                    var tileExtent = tiles[tileKey];
                    if (subTileCachedInstruct[tileKey] === undefined) {
                        subTileCachedInstruct[tileKey] = [];
                    }
                    subTileCachedInstruct[tileKey].push(instruct);
                }
            }
        }
        return subTileCachedInstruct;
    };
    GeoMVTFormat.prototype.cachedTileCallback = function (oTile, cacheTileInfos) {
        for (var i = 0; i < cacheTileInfos.length; i++) {
            var cacheTileInfo = cacheTileInfos[i];
            var tileKey = "" + cacheTileInfo.tile.tileCoord[1] + "," + cacheTileInfo.tile.tileCoord[2];
            cacheTileInfo.callback(cacheTileInfo.tile, cacheTileInfo.successFunction, [], oTile.subTileInstructCaches[tileKey], oTile.sourceProject, oTile.lastExtent);
        }
    };
    GeoMVTFormat.prototype.getTileRange = function (tileCoord, zoom) {
        var x = tileCoord[1];
        var y = tileCoord[2];
        var minX = x;
        var maxX = x;
        var minY = y;
        var maxY = y;
        for (var i = tileCoord[0]; i < zoom; i++) {
            minX = minX * 2;
            maxX = maxX * 2 + 1;
            minY = minY * 2;
            maxY = maxY * 2 + 1;
        }
        return [minX, minY, maxX, maxY];
    };
    GeoMVTFormat.prototype.getFeatureTileRange = function (featureExtent, extent, tileSize, requestTileCoord, offsetZ) {
        var minX = requestTileCoord[1] * Math.pow(2, offsetZ) + Math.floor(featureExtent[0] / tileSize);
        var maxX = requestTileCoord[1] * Math.pow(2, offsetZ) + Math.floor(featureExtent[2] / tileSize);
        var minY = requestTileCoord[2] * Math.pow(2, offsetZ) + Math.floor((extent - featureExtent[3]) / tileSize);
        var maxY = requestTileCoord[2] * Math.pow(2, offsetZ) + Math.floor((extent - featureExtent[1]) / tileSize);
        return [minX, minY, maxX, maxY];
    };
    GeoMVTFormat.prototype.getExtent = function (originalCoord, tilecoord, extent) {
        var ox = originalCoord[1];
        var x = tilecoord[1];
        var xPath = [];
        while (ox !== x) {
            var remainder = ox % 2;
            xPath.push(remainder);
            ox = Math.floor(ox / 2);
        }
        var newExtent = extent;
        var offsetX = 0;
        for (var i = xPath.length - 1; i >= 0; i--) {
            newExtent = newExtent / 2;
            if (xPath[i] === 1) {
                offsetX += newExtent;
            }
        }
        var oy = originalCoord[2];
        var y = tilecoord[2];
        var yPath = [];
        while (oy !== y) {
            var remainder = oy % 2;
            yPath.push(remainder);
            oy = Math.floor(oy / 2);
        }
        newExtent = extent;
        var offsetY = 0;
        for (var i = yPath.length - 1; i >= 0; i--) {
            newExtent = newExtent / 2;
            if (yPath[i] === 0) {
                offsetY += newExtent;
            }
        }
        // TODO: add the buffer
        return [offsetX, offsetY, offsetX + newExtent, offsetY + newExtent];
    };
    GeoMVTFormat.prototype.replaceFiltersToIndexOfPbfLayer = function (cacheTrees, pbfLayer) {
        for (var i = 0, ii = cacheTrees.length; i < ii; i++) {
            var cacheTree = cacheTrees[i];
            this.replaceCacheItemFiltersToIndexOfPbfLayer(cacheTree.root, pbfLayer);
        }
    };
    GeoMVTFormat.prototype.replaceCacheItemFiltersToIndexOfPbfLayer = function (node, pbfLayer) {
        var data = node.data;
        for (var i = 0; i < data.filterGroup.length; i++) {
            var filters = data.filterGroup[i];
            var geoFilter = void 0;
            for (var j = 0; j < filters.length; j++) {
                geoFilter = filters[j];
                geoFilter.replaceVaulesToPbfIndex(pbfLayer);
            }
        }
        if (node.children) {
            for (var i = 0, ii = node.children.length; i < ii; i++) {
                this.replaceCacheItemFiltersToIndexOfPbfLayer(node.children[i], pbfLayer);
            }
        }
    };
    GeoMVTFormat.prototype.readFeaturesAndCreateInstructs = function (source, zoom, options) {
        var pbf = new ol.ext.PBF((source));
        var pbfLayers = pbf.readFields(ol.format.MVT.pbfReaders_.layers, {});
        var features = [];
        var pbfLayer;
        var zoomMatchedGeoStylesGroupByLayerId = this.styleJsonCache.geoStyleGroupByZoom[zoom];
        if (!zoomMatchedGeoStylesGroupByLayerId) {
            return features;
        }
        var pbfLayerNamesWithGeoStyle = [];
        for (var pbfLayerName in zoomMatchedGeoStylesGroupByLayerId) {
            pbfLayerNamesWithGeoStyle.push(pbfLayerName);
        }
        var instructsCache = [];
        for (var name_3 in pbfLayers) {
            if (this.layers_ && this.layers_.indexOf(name_3) === -1) {
                continue;
            }
            if (pbfLayerNamesWithGeoStyle.indexOf(name_3) === -1) {
                continue;
            }
            pbfLayer = pbfLayers[name_3];
            var cacheTrees = zoomMatchedGeoStylesGroupByLayerId[name_3];
            if (cacheTrees && cacheTrees.length > 0) {
                this.replaceFiltersToIndexOfPbfLayer(cacheTrees, pbfLayer);
                var _loop_5 = function (i) {
                    var rawFeature = ol.format.MVT.readRawFeature_(pbf, pbfLayer, i);
                    var feature = void 0;
                    var _loop_6 = function (j) {
                        var cacheTree = cacheTrees[j];
                        var treeIndex = cacheTree.treeIndex;
                        if (instructsCache[treeIndex] === undefined) {
                            instructsCache[treeIndex] = {
                                min: 10,
                                max: -10
                            };
                        }
                        var matchedNode;
                        var checkNodeMatched = function (node) {
                            var styleJsonCacheItem = node.data;
                            var matched = false;
                            if (styleJsonCacheItem.filterGroup.length > 0) {
                                for (var i_4 = 0; i_4 < styleJsonCacheItem.filterGroup.length; i_4++) {
                                    var filters = styleJsonCacheItem.filterGroup[i_4];
                                    var groupMatched = true;
                                    for (var j_3 = 0; j_3 < filters.length; j_3++) {
                                        var filter = filters[j_3];
                                        if (!filter.matchOLFeature(rawFeature, zoom)) {
                                            groupMatched = false;
                                            break;
                                        }
                                    }
                                    if (groupMatched) {
                                        matched = true;
                                        break;
                                    }
                                }
                            }
                            else {
                                matched = true;
                            }
                            return matched;
                        };
                        var selectNode = function (node) {
                            matchedNode = node.data;
                        };
                        cacheTree.traverseNode(checkNodeMatched, selectNode);
                        if (matchedNode) {
                            if (feature === undefined) {
                                feature = this_3.createFeature_(pbf, rawFeature);
                                if (this_3.minimalist) {
                                    feature.properties_ = {};
                                }
                            }
                            var zindex = void 0;
                            if (cacheTree.root.data.zIndex) {
                                zindex = rawFeature.properties[cacheTree.root.data.zIndex];
                                feature.properties_[cacheTree.root.data.zIndex] = zindex;
                            }
                            if (isNaN(zindex)) {
                                zindex = 0;
                            }
                            if (instructsCache[treeIndex][zindex] === undefined) {
                                instructsCache[treeIndex][zindex] = [];
                                if (zindex < instructsCache[treeIndex]["min"]) {
                                    instructsCache[treeIndex]["min"] = zindex;
                                }
                                if (zindex > instructsCache[treeIndex]["max"]) {
                                    instructsCache[treeIndex]["max"] = zindex;
                                }
                            }
                            instructsCache[treeIndex][zindex].push([feature, matchedNode]);
                            if (this_3.minimalist) {
                                if (matchedNode.geoStyle && matchedNode.geoStyle.constructor.name === "GeoTextStyle") {
                                    feature.properties_[matchedNode.geoStyle.name] = rawFeature.properties[matchedNode.geoStyle.name];
                                }
                                if (matchedNode.childrenGeoStyles && matchedNode.childrenGeoStyles.length > 0) {
                                    for (var i_5 = 0; i_5 < matchedNode.childrenGeoStyles.length; i_5++) {
                                        feature.properties_[matchedNode.childrenGeoStyles[i_5].name] = rawFeature.properties[matchedNode.childrenGeoStyles[i_5].name];
                                    }
                                }
                            }
                            feature.extent_ = undefined;
                        }
                    };
                    for (var j = 0; j < cacheTrees.length; j++) {
                        _loop_6(j);
                    }
                };
                var this_3 = this;
                for (var i = 0; i < pbfLayer.length; i++) {
                    _loop_5(i);
                }
            }
            this.extent_ = pbfLayer ? [0, 0, pbfLayer.extent, pbfLayer.extent] : null;
        }
        var instructs = [];
        // the tress index means the index of SyleId.
        for (var i = 0; i < instructsCache.length; i++) {
            var instructsInOneTree = instructsCache[i];
            if (instructsInOneTree) {
                for (var j = instructsInOneTree.min, jj = instructsInOneTree.max; j <= jj; j++) {
                    var instructsInOneZIndex = instructsInOneTree[j];
                    if (instructsInOneZIndex) {
                        var childrenInstructs = [];
                        for (var h = 0; h < instructsInOneZIndex.length; h++) {
                            var instruct = instructsInOneZIndex[h];
                            instruct[0].styleId = instruct[0].styleId ? instruct[0].styleId : {};
                            if (instruct[1].geoStyle) {
                                instruct[0].styleId[instruct[1].geoStyle.id] = 0;
                                instructs.push([instruct[0], instruct[1].geoStyle, i]);
                            }
                            if (instruct[1].childrenGeoStyles) {
                                for (var k = 0; k < instruct[1].childrenGeoStyles.length; k++) {
                                    instruct[0].styleId[instruct[1].childrenGeoStyles[k].id] = 1;
                                    childrenInstructs.push([instruct[0], instruct[1].childrenGeoStyles[k], i]);
                                }
                            }
                        }
                        Array.prototype.push.apply(instructs, childrenInstructs);
                    }
                }
            }
        }
        return [features, instructs];
    };
    GeoMVTFormat.readRawFeature_ = function (pbf, layer, i) {
        pbf.pos = layer.features[i];
        var end = pbf.readVarint() + pbf.pos;
        var feature = {
            layer: layer,
            type: 0,
            properties: {},
            propertiesIndex: {}
        };
        pbf.readFields(ol.format.MVT.pbfReaders_.featureColumnValue, feature, end);
        return feature;
    };
    GeoMVTFormat.featureColumnValue = function (tag, feature, pbf) {
        if (tag === 1) {
            feature.id = pbf.readVarint();
        }
        else if (tag === 2) {
            var end = pbf.readVarint() + pbf.pos;
            while (pbf.pos < end) {
                var key = pbf.readVarint();
                var value = pbf.readVarint();
                feature.propertiesIndex[key] = value;
                key = feature.layer.keys[key];
                value = feature.layer.values[value];
                feature.properties[key] = value;
            }
        }
        else if (tag === 3) {
            feature.type = pbf.readVarint();
        }
        else if (tag === 4) {
            feature.geometry = pbf.pos;
        }
    };
    return GeoMVTFormat;
}(ol.format.MVT));

ol.format.MVT.readRawFeature_ = GeoMVTFormat.readRawFeature_;
ol.format.MVT.pbfReaders_["featureColumnValue"] = GeoMVTFormat.featureColumnValue;


/***/ }),

/***/ "./src/geoVectorTile.ts":
/*!******************************!*\
  !*** ./src/geoVectorTile.ts ***!
  \******************************/
/*! exports provided: GeoVectorTile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoVectorTile", function() { return GeoVectorTile; });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GeoVectorTile = /** @class */ (function (_super) {
    __extends(GeoVectorTile, _super);
    function GeoVectorTile(tileCoord, state, src, format, tileLoadFunction) {
        var _this = _super.call(this, tileCoord, state, src, format, tileLoadFunction) || this;
        _this.disposeInternal = _this.disposeInternalCustom;
        return _this;
    }
    GeoVectorTile.prototype.disposeInternalCustom = function () {
        this.features_ = null;
        this.replayGroups_ = {};
        // this.state = ol.TileState.ABORT;
        this.state = ol.TileState.IDLE;
        this.changed();
        if (this["xhr"] != undefined) {
            this["xhr"].abort();
        }
        if (this.workerId !== undefined) {
            var disposeInfo = {
                formatId: ol.getUid(this.getFormat()),
                maxDataZoom: this.getFormat().maxDataZoom,
                tileCoord: this.tileCoord,
                requestTileCoord: this.requestTileCoord
            };
            this.getFormat().workerManager.postMessage(this.tileCoord + ol.getUid(disposeInfo), "vectorTileDispose", disposeInfo, null, this.workerId);
        }
        ol.Tile.prototype.disposeInternal.call(this);
    };
    GeoVectorTile.prototype.onLoad = function (dataProjection, extent) {
        this.setProjection(dataProjection);
        this.setFeatures();
        this.setExtent(extent);
    };
    GeoVectorTile.prototype.setRenderFeatureInstructs = function (instructs) {
        this.instructs = instructs;
    };
    GeoVectorTile.prototype.getRenderFeatureInstructs = function (instructs) {
        return this.instructs;
    };
    return GeoVectorTile;
}(ol.VectorTile));



/***/ }),

/***/ "./src/layer/vectorTileLayer.ts":
/*!**************************************!*\
  !*** ./src/layer/vectorTileLayer.ts ***!
  \**************************************/
/*! exports provided: VectorTileLayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VectorTileLayer", function() { return VectorTileLayer; });
/* harmony import */ var _source_geoVectorTileSource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../source/geoVectorTileSource */ "./src/source/geoVectorTileSource.ts");
/* harmony import */ var _geoVectorTile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geoVectorTile */ "./src/geoVectorTile.ts");
/* harmony import */ var _style_geoStyle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../style/geoStyle */ "./src/style/geoStyle.ts");
/* harmony import */ var _format_geoMvt__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../format/geoMvt */ "./src/format/geoMvt.ts");
/* harmony import */ var _tree_styleJsonCache__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../tree/styleJsonCache */ "./src/tree/styleJsonCache.ts");
/* harmony import */ var _tree_styleJsonCacheItem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../tree/styleJsonCacheItem */ "./src/tree/styleJsonCacheItem.ts");
/* harmony import */ var _render_geoVectorTilelayerRender__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../render/geoVectorTilelayerRender */ "./src/render/geoVectorTilelayerRender.ts");
/* harmony import */ var _tree_TreeNode__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../tree/TreeNode */ "./src/tree/TreeNode.ts");
/* harmony import */ var _tree_tree__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../tree/tree */ "./src/tree/tree.ts");
/* harmony import */ var _worker_workerManager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../worker/workerManager */ "./src/worker/workerManager.ts");
/* harmony import */ var _worker_webglManager__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../worker/webglManager */ "./src/worker/webglManager.ts");
/* harmony import */ var _worker_vectorTileLayerThreadMode__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../worker/vectorTileLayerThreadMode */ "./src/worker/vectorTileLayerThreadMode.ts");
/* harmony import */ var _webgl_polygon__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./../webgl/polygon */ "./src/webgl/polygon.ts");
/* harmony import */ var _webgl_lineString__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./../webgl/lineString */ "./src/webgl/lineString.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();














var VectorTileLayer = /** @class */ (function (_super) {
    __extends(VectorTileLayer, _super);
    function VectorTileLayer(styleJson, opt_options) {
        var _this = this;
        // default
        if (opt_options !== undefined) {
            opt_options["declutter"] = opt_options["declutter"] === undefined ? true : opt_options["declutter"];
            opt_options["minimalist"] = opt_options["minimalist"] === undefined ? true : opt_options["minimalist"];
            _this = _super.call(this, opt_options) || this;
        }
        else {
            var options = {};
            options["declutter"] = true;
            options["minimalist"] = true;
            _this = _super.call(this, options) || this;
        }
        if (opt_options !== undefined) {
            // temp Emil
            var tempIsMultithread = opt_options["multithread"] === undefined ? true : opt_options["multithread"];
            _this.threadMode = opt_options["threadMode"] === undefined ? true : opt_options["threadMode"];
            _this.isMultithread = _this.threadMode !== _worker_vectorTileLayerThreadMode__WEBPACK_IMPORTED_MODULE_11__["VectorTileLayerThreadMode"].SingleThread;
            _this.backgroundWorkerCount = opt_options["backgroundWorkerCount"];
            // temp Emil
            if (tempIsMultithread) {
                _this.threadMode = _worker_vectorTileLayerThreadMode__WEBPACK_IMPORTED_MODULE_11__["VectorTileLayerThreadMode"].Default;
                _this.backgroundWorkerCount = 1;
            }
            _this.minimalist = opt_options["minimalist"] === undefined ? true : opt_options["minimalist"];
            _this.maxDataZoom = opt_options["maxDataZoom"] === undefined ? 14 : opt_options["maxDataZoom"];
            _this.proxy = opt_options["proxy"];
            _this.clientId = opt_options["clientId"];
            _this.clientSecret = opt_options["clientSecret"];
            _this.apiKey = opt_options["apiKey"];
        }
        else {
            _this.isMultithread = true;
            _this.minimalist = true;
            _this.maxDataZoom = 14;
        }
        _this.registerGeoVector();
        if (_this.isStyleJsonUrl(styleJson)) {
            _this.loadStyleJsonAsyn(styleJson);
        }
        else {
            _this.loadStyleJson(styleJson);
        }
        _this.type = ol.LayerType.MAPSUITE_VECTORTILE;
        // create webworker for webgl        
        if (!window.webglManager) {
            window.webglManager = new _worker_webglManager__WEBPACK_IMPORTED_MODULE_10__["WebglManager"]();
        }
        return _this;
    }
    VectorTileLayer.prototype.loadStyleJsonAsyn = function (styleJsonUrl) {
        var xhr = new XMLHttpRequest();
        // FIXME Eric
        xhr.open("GET", styleJsonUrl);
        xhr.onload = function (event) {
            if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {
                var source = void 0;
                source = xhr.responseText;
                this.styleJson = JSON.parse(source);
                this.loadStyleJson(JSON.parse(source));
            }
        }.bind(this);
        xhr.onerror = function () {
        }.bind(this);
        xhr.send();
    };
    VectorTileLayer.prototype.loadStyleJson = function (inputStyleJson) {
        var styleJson = this.styleJson = JSON.parse(JSON.stringify(inputStyleJson));
        this.version = styleJson["version"];
        this.owner = styleJson["owner"];
        this.dateTime = styleJson["dateTime"];
        this.variables = this.getVariables(styleJson["variables"]);
        this.background = styleJson["background"];
        this.replaceVariables(styleJson, this.variables);
        this.geoSources = {};
        if (styleJson["layers"] && styleJson["layers"].length > 0) {
            var layerJson = styleJson["layers"][0];
            var sourceId = layerJson["source"];
            var source = this.getGeoSource(sourceId);
            if (source) {
                this.setSource(source);
                if (this.background) {
                    var backgroundColor = _style_geoStyle__WEBPACK_IMPORTED_MODULE_2__["GeoStyle"].toRGBAColor(this.background);
                    if (backgroundColor) {
                        this["background"] = backgroundColor;
                    }
                }
                var styleJsons = styleJson["styles"];
                var styleIds = layerJson["styles"];
                var minZoom = 0;
                var maxZoom = 22;
                var layerName = source.getGeoFormat().getLayerName();
                var styleJsonCache = new _tree_styleJsonCache__WEBPACK_IMPORTED_MODULE_4__["StyleJsonCache"]();
                var styleIdIndex = 0;
                for (var _i = 0, styleIds_1 = styleIds; _i < styleIds_1.length; _i++) {
                    var styleId = styleIds_1[_i];
                    var styleJson_1 = void 0;
                    for (var index = 0; index < styleJsons.length; index++) {
                        if (styleJsons[index].id === styleId) {
                            styleJson_1 = styleJsons[index];
                        }
                    }
                    if (styleJson_1) {
                        styleJsonCache.styleJson[styleId] = styleJson_1;
                        var item = new _tree_styleJsonCacheItem__WEBPACK_IMPORTED_MODULE_5__["StyleJsonCacheItem"](styleJson_1, minZoom, maxZoom, layerName);
                        for (var zoom = item.minZoom; zoom <= item.maxZoom; zoom++) {
                            var treeNode = new _tree_TreeNode__WEBPACK_IMPORTED_MODULE_7__["TreeNode"](item);
                            this.createChildrenNode(treeNode, item, zoom);
                            styleJsonCache.add(zoom, item.dataLayerName, new _tree_tree__WEBPACK_IMPORTED_MODULE_8__["Tree"](treeNode, styleIdIndex));
                        }
                        styleIdIndex += 1;
                    }
                }
                var geoFormat = source.getGeoFormat();
                geoFormat["styleJsonCache"] = styleJsonCache;
                if (this.isMultithread) {
                    if (this.workerManager) {
                        var messageData = {
                            formatId: ol.getUid(geoFormat),
                            styleJson: styleJsonCache.styleJson,
                            geoTextStyleInfos: styleJsonCache.geoTextStyleInfo
                        };
                        for (var i = 0; i < this.workerManager.workerCount; i++) {
                            this.workerManager.postMessage(ol.getUid(messageData), "initStyleJSON", messageData, undefined, i);
                        }
                    }
                }
            }
        }
    };
    VectorTileLayer.prototype.getGeoSource = function (sourceId) {
        var _this = this;
        if (this.geoSources && this.geoSources[sourceId]) {
            return this.geoSources[sourceId];
        }
        if (this.styleJson["sources"]) {
            this.styleJson['sources'].forEach(function (sourceJson) {
                if (sourceId === sourceJson['id']) {
                    if (!sourceJson['urls'] && sourceJson['url']) {
                        sourceJson['urls'] = [sourceJson['url']];
                        delete sourceJson['url'];
                    }
                    sourceJson['urls'] = sourceJson['urls'].map(function (url) {
                        if (url.indexOf('http') === -1 && url.indexOf('https') === -1) {
                            var host = location.host;
                            var protocol = location.protocol;
                            if (url.indexOf('/') !== 0) {
                                url = protocol + '//' + host + '/' + url;
                            }
                            else if (url.indexOf('/') === 0) {
                                url = protocol + '//' + host + url;
                            }
                        }
                        // apiKey
                        if (url.indexOf('apiKey') === -1 && _this.apiKey) {
                            url = url + '?apiKey=' + _this.apiKey;
                        }
                        // proxy
                        if (_this.proxy) {
                            url = _this.proxy + encodeURIComponent(url);
                        }
                        return url;
                    });
                    _this.geoSources[sourceJson["id"]] = _this.createVectorTileSource(sourceJson);
                    return true;
                }
            });
            return this.geoSources[sourceId];
        }
        return false;
    };
    VectorTileLayer.prototype.createVectorTileSource = function (sourceJson) {
        if (sourceJson["type"] === "MVT") {
            var format = this.getVectorSourceFormat();
            var source = new _source_geoVectorTileSource__WEBPACK_IMPORTED_MODULE_0__["GeoVectorTileSource"]({
                tileClass: _geoVectorTile__WEBPACK_IMPORTED_MODULE_1__["GeoVectorTile"],
                urls: sourceJson["urls"],
                clientId: this.clientId,
                clientSecret: this.clientSecret,
                format: format,
                projection: "EPSG:3857",
                tileGrid: this.createVectorTileGrid(),
                cacheSize: 1024,
                multithread: this.isMultithread,
                minimalist: this.minimalist,
                maxDataZoom: this.maxDataZoom
            });
            format['source'] = source;
            return source;
        }
    };
    VectorTileLayer.prototype.getVectorSourceFormat = function () {
        var format = new _format_geoMvt__WEBPACK_IMPORTED_MODULE_3__["GeoMVTFormat"](undefined, { multithread: this.isMultithread, minimalist: this.minimalist });
        if (this.isMultithread) {
            if (!this.workerManager || !this.workerManager.inited) {
                this.workerManager = new _worker_workerManager__WEBPACK_IMPORTED_MODULE_9__["WorkerManager"](this.threadMode, this.backgroundWorkerCount);
                this.workerManager.initWorkers();
            }
            if (this.workerManager.inited) {
                format["workerManager"] = this.workerManager;
            }
        }
        return format;
    };
    VectorTileLayer.prototype.createVectorTileGrid = function () {
        return ol.tilegrid.createXYZ({ tileSize: 512, maxZoom: 22 });
    };
    VectorTileLayer.prototype.getVariables = function (variablesJson) {
        var variables = {};
        for (var variablesName in variablesJson) {
            if (variablesName.indexOf(",") > 0) {
                var variableNames = variablesName.split(",");
                for (var i = 0; i < variableNames.length; i++) {
                    variables[variableNames[i]] = variablesJson[variablesName];
                }
            }
            else {
                variables[variablesName] = variablesJson[variablesName];
            }
        }
        return variables;
    };
    VectorTileLayer.prototype.replaceVariables = function (styleJson, variables) {
        for (var propertyName in styleJson) {
            var property = styleJson[propertyName];
            if (typeof property === "object") {
                this.replaceVariables(property, variables);
            }
            else if (typeof property === "string") {
                var keyWordIndex = property.indexOf("@");
                if (keyWordIndex >= 0) {
                    var lines = property.split(" ");
                    if (lines.length > 1) {
                        var tempWord = void 0;
                        var results = [];
                        for (var i = 0; i < lines.length; i++) {
                            tempWord = lines[i];
                            if (tempWord.indexOf("@") === 0) {
                                tempWord = variables[tempWord];
                            }
                            results.push(tempWord);
                        }
                        styleJson[propertyName] = results.join(" ");
                    }
                    else {
                        styleJson[propertyName] = variables[lines[0]];
                    }
                }
            }
        }
    };
    VectorTileLayer.prototype.createChildrenNode = function (currentNode, item, zoom) {
        if (item.subStyleCacheItems && item.subStyleCacheItems.length > 0) {
            for (var i = 0, ii = item.subStyleCacheItems.length; i < ii; i++) {
                var subStyleItem = item.subStyleCacheItems[i];
                if (zoom >= subStyleItem.minZoom && zoom <= subStyleItem.maxZoom) {
                    var node = new _tree_TreeNode__WEBPACK_IMPORTED_MODULE_7__["TreeNode"](subStyleItem);
                    currentNode.children.push(node);
                    this.createChildrenNode(node, subStyleItem, zoom);
                }
            }
        }
    };
    VectorTileLayer.prototype.isStyleJsonUrl = function (styleJson) {
        if (styleJson) {
            if (typeof styleJson !== "object") {
                return true;
            }
        }
        return false;
    };
    VectorTileLayer.prototype.registerGeoVector = function () {
        ol.LayerType["GEOVECTORTILE"] = "GEOVECTORTILE";
        // TODO: check the plugin had been registed.
        ol.plugins.register(ol.PluginType.LAYER_RENDERER, _render_geoVectorTilelayerRender__WEBPACK_IMPORTED_MODULE_6__["GeoVectorTileLayerRender"]);
        // (<any>ol.VectorTile).Event = function (type, xhr) {
        //     ol.events.Event.call(this, type);
        //     this.xhr = xhr;
        // };
        // ol.inherits((<any>ol.VectorTile), (<any>ol.events).Event);
        ol.VectorImageTile.prototype.disposeInternal = function () {
            for (var i = 0, ii = this.tileKeys.length; i < ii; ++i) {
                var sourceTileKey = this.tileKeys[i];
                var sourceTile = this.getTile(sourceTileKey);
                sourceTile.consumers--;
                if (sourceTile.consumers == 0) {
                    delete this.sourceTiles_[sourceTileKey];
                    sourceTile.dispose();
                }
            }
            this.sourceTiles_ = null;
            this.loadListenerKeys_.forEach(ol.events.unlistenByKey);
            this.loadListenerKeys_.length = 0;
            if (this.interimTile) {
                this.interimTile.dispose();
            }
            this.state = ol.TileState.ABORT;
            this.changed();
            // for the disposeInternal
            this.tileKeys.length = 0;
            this.sourceTileListenerKeys_.forEach(ol.events.unlistenByKey);
            this.sourceTileListenerKeys_.length = 0;
            ol.Tile.prototype.disposeInternal.call(this);
        };
        ol.TileQueue.prototype.handleTileChange = function (event) {
            var tile = /** @type {ol.Tile} */ (event.target);
            var state = tile.getState();
            if (state === ol.TileState.LOADED || state === ol.TileState.ERROR ||
                state === ol.TileState.EMPTY || state === ol.TileState.ABORT ||
                state === ol.TileState.CANCEL) {
                if (state === ol.TileState.ABORT || state === ol.TileState.ERROR) {
                    ol.events.unlisten(tile, ol.events.EventType.CHANGE, this.handleTileChange, this);
                }
                var tileKey = tile.getKey();
                if (tileKey in this.tilesLoadingKeys_) {
                    delete this.tilesLoadingKeys_[tileKey];
                    --this.tilesLoading_;
                }
                // Remove the enqueue records, if the tile has been dispose before load
                if (tileKey in this.queuedElements_) {
                    delete this.queuedElements_[tileKey];
                }
                this.tileChangeCallback_();
            }
        };
        // remove quickZoom when animation complete
        ol.View.prototype.updateAnimations_ = function () {
            if (this.updateAnimationKey_ !== undefined) {
                cancelAnimationFrame(this.updateAnimationKey_);
                this.updateAnimationKey_ = undefined;
            }
            if (!this.getAnimating()) {
                return;
            }
            var now = Date.now();
            var more = false;
            for (var i = this.animations_.length - 1; i >= 0; --i) {
                var series = this.animations_[i];
                var seriesComplete = true;
                for (var j = 0, jj = series.length; j < jj; ++j) {
                    var animation = series[j];
                    if (animation.complete) {
                        continue;
                    }
                    var elapsed = now - animation.start;
                    var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;
                    if (fraction >= 1) {
                        animation.complete = true;
                        fraction = 1;
                    }
                    else {
                        seriesComplete = false;
                    }
                    var progress = animation.easing(fraction);
                    if (animation.sourceCenter) {
                        var x0 = animation.sourceCenter[0];
                        var y0 = animation.sourceCenter[1];
                        var x1 = animation.targetCenter[0];
                        var y1 = animation.targetCenter[1];
                        var x = x0 + progress * (x1 - x0);
                        var y = y0 + progress * (y1 - y0);
                        this.set(ol.ViewProperty.CENTER, [x, y]);
                    }
                    if (animation.sourceResolution && animation.targetResolution) {
                        var resolution = progress === 1 ?
                            animation.targetResolution :
                            animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);
                        if (animation.anchor) {
                            this.set(ol.ViewProperty.CENTER, this.calculateCenterZoom(resolution, animation.anchor));
                        }
                        this.set(ol.ViewProperty.RESOLUTION, resolution);
                    }
                    if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {
                        var rotation = progress === 1 ?
                            ol.math.modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI :
                            animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);
                        if (animation.anchor) {
                            this.set(ol.ViewProperty.CENTER, this.calculateCenterRotate(rotation, animation.anchor));
                        }
                        this.set(ol.ViewProperty.ROTATION, rotation);
                    }
                    more = true;
                    if (!animation.complete) {
                        break;
                    }
                }
                if (seriesComplete) {
                    this.animations_[i] = null;
                    this.setHint(ol.ViewHint.ANIMATING, -1);
                    var callback = series[0].callback;
                    if (callback) {
                        callback(true);
                    }
                }
            }
            // prune completed series
            this.animations_ = this.animations_.filter(Boolean);
            if (more && this.updateAnimationKey_ === undefined) {
                this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_);
            }
        };
        // Get quickZoom zoom in/out
        ol.View.prototype.animate = function (var_args) {
            var animationCount = arguments.length;
            var callback;
            if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {
                callback = arguments[animationCount - 1];
                --animationCount;
            }
            if (!this.isDef()) {
                // if view properties are not yet set, shortcut to the final state
                var state = arguments[animationCount - 1];
                if (state.center) {
                    this.setCenter(state.center);
                }
                if (state.zoom !== undefined) {
                    this.setZoom(state.zoom);
                }
                if (state.rotation !== undefined) {
                    this.setRotation(state.rotation);
                }
                if (callback) {
                    callback(true);
                }
                return;
            }
            var start = Date.now();
            var center = this.getCenter().slice();
            var resolution = this.getResolution();
            var rotation = this.getRotation();
            var series = [];
            var quickZoom = false;
            for (var i = 0; i < animationCount; ++i) {
                var options = /** @type {olx.AnimationOptions} */ (arguments[i]);
                var animation = /** @type {ol.ViewAnimation} */ ({
                    start: start,
                    complete: false,
                    anchor: options.anchor,
                    duration: options.duration !== undefined ? options.duration : 1000,
                    easing: options.easing || ol.easing.inAndOut
                });
                if (options.center) {
                    animation["sourceCenter"] = center;
                    animation["targetCenter"] = options.center;
                    center = animation["targetCenter"];
                }
                if (options.zoom !== undefined) {
                    animation["sourceResolution"] = resolution;
                    animation["targetResolution"] = this.constrainResolution(this.maxResolution_, options.zoom - this.minZoom_, 0);
                    resolution = animation["targetResolution"];
                    if (!quickZoom) {
                        quickZoom = Math.abs(animation["sourceResolution"] - animation["targetResolution"]) * 2 >= animation["sourceResolution"];
                    }
                }
                else if (options.resolution) {
                    animation["sourceResolution"] = resolution;
                    animation["targetResolution"] = options.resolution;
                    resolution = animation["targetResolution"];
                    if (!quickZoom) {
                        quickZoom = Math.abs(animation["sourceResolution"] - animation["targetResolution"]) * 2 >= animation["sourceResolution"];
                    }
                }
                if (options.rotation !== undefined) {
                    animation["sourceRotation"] = rotation;
                    var delta = ol.math.modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;
                    animation["targetRotation"] = rotation + delta;
                    rotation = animation["targetRotation"];
                }
                animation["callback"] = callback;
                // check if animation is a no-op
                if (ol.View.isNoopAnimation(animation)) {
                    animation.complete = true;
                    // we still push it onto the series for callback handling
                }
                else {
                    start += animation.duration;
                }
                series.push(animation);
            }
            this.animations_.push(series);
            this["quickZoom"] = quickZoom;
            this.setHint(ol.ViewHint.ANIMATING, 1);
            this.updateAnimations_();
        };
        // add quickZoom into frameState
        ol.PluggableMap.prototype.renderFrame_ = function (time) {
            var i, ii, viewState;
            var size = this.getSize();
            var view = this.getView();
            var extent = ol.extent.createEmpty();
            var previousFrameState = this.frameState_;
            /** @type {?olx.FrameState} */
            var frameState = null;
            if (size !== undefined && ol.size.hasArea(size) && view && view.isDef()) {
                var viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);
                var quickZoom = view["quickZoom"];
                var layerStatesArray = this.getLayerGroup().getLayerStatesArray();
                var layerStates = {};
                for (i = 0, ii = layerStatesArray.length; i < ii; ++i) {
                    layerStates[ol.getUid(layerStatesArray[i].layer)] = layerStatesArray[i];
                }
                viewState = view.getState();
                var center = viewState.center;
                var pixelResolution = viewState.resolution / this.pixelRatio_;
                center[0] = Math.round(center[0] / pixelResolution) * pixelResolution;
                center[1] = Math.round(center[1] / pixelResolution) * pixelResolution;
                frameState = /** @type {olx.FrameState} */ ({
                    animate: false,
                    coordinateToPixelTransform: this.coordinateToPixelTransform_,
                    extent: extent,
                    focus: !this.focus_ ? center : this.focus_,
                    index: this.frameIndex_++,
                    layerStates: layerStates,
                    layerStatesArray: layerStatesArray,
                    logos: ol.obj.assign({}, this.logos_),
                    pixelRatio: this.pixelRatio_,
                    pixelToCoordinateTransform: this.pixelToCoordinateTransform_,
                    postRenderFunctions: [],
                    size: size,
                    skippedFeatureUids: this.skippedFeatureUids_,
                    tileQueue: this.tileQueue_,
                    time: time,
                    usedTiles: {},
                    viewState: viewState,
                    viewHints: viewHints,
                    quickZoom: quickZoom,
                    currentResolution: viewState.resolution,
                    wantedTiles: {}
                });
            }
            if (frameState) {
                frameState.extent = ol.extent.getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, frameState.size, extent);
            }
            this.frameState_ = frameState;
            this.renderer_.renderFrame(frameState);
            if (frameState) {
                if (frameState.animate) {
                    this.render();
                }
                Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);
                if (previousFrameState) {
                    var moveStart = !this.previousExtent_ ||
                        (!ol.extent.isEmpty(this.previousExtent_) &&
                            !ol.extent.equals(frameState.extent, this.previousExtent_));
                    if (moveStart) {
                        this.dispatchEvent(new ol.MapEvent(ol.MapEventType.MOVESTART, this, previousFrameState));
                        this.previousExtent_ = ol.extent.createOrUpdateEmpty(this.previousExtent_);
                    }
                }
                var idle = this.previousExtent_ &&
                    !frameState.viewHints[ol.ViewHint.ANIMATING] &&
                    !frameState.viewHints[ol.ViewHint.INTERACTING] &&
                    !ol.extent.equals(frameState.extent, this.previousExtent_);
                if (idle) {
                    this.dispatchEvent(new ol.MapEvent(ol.MapEventType.MOVEEND, this, frameState));
                    ol.extent.clone(frameState.extent, this.previousExtent_);
                }
            }
            this.dispatchEvent(new ol.MapEvent(ol.MapEventType.POSTRENDER, this, frameState));
            setTimeout(this.handlePostRender.bind(this), 0);
        };
        // refine drawImage performance
        ol.renderer.canvas.TileLayer.prototype.drawTileImage = function (tile, frameState, layerState, x, y, w, h, gutter, transition) {
            var image = tile.getImage(this.getLayer());
            if (!image) {
                return;
            }
            var uid = ol.getUid(this);
            var alpha = transition ? tile.getAlpha(uid, frameState.time) : 1;
            if (alpha === 1 && !this.getLayer().getSource().getOpaque(frameState.viewState.projection)) {
                this.context.clearRect(x, y, w, h);
            }
            var alphaChanged = alpha !== this.context.globalAlpha;
            if (alphaChanged) {
                this.context.save();
                this.context.globalAlpha = alpha;
            }
            this.context.drawImage(image, gutter, gutter, image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);
            if (alphaChanged) {
                this.context.restore();
            }
            if (alpha !== 1) {
                frameState.animate = true;
            }
            else if (transition) {
                tile.endTransition(uid);
            }
        };
        //refine drawing, and remove instructions after using
        ol.render.canvas.Replay.prototype.replay_ = function (context, transform, skippedFeaturesHash, instructions, featureCallback, opt_hitExtent) {
            /** @type {Array.<number>} */
            var pixelCoordinates;
            if (this.instructions != instructions) {
                // hit instructions
                if (this.pixelCoordinates_ && ol.array.equals(transform, this.renderedTransform_)) {
                    pixelCoordinates = this.pixelCoordinates_;
                }
                else {
                    pixelCoordinates = ol.geom.flat.transform.transform2D(this.coordinates, 0, this.coordinates.length, 2, transform, []);
                }
            }
            else {
                // instructions
                if (this.pixelCoordinates_ && ol.array.equals(transform, this.renderedTransform_)) {
                    pixelCoordinates = this.pixelCoordinates_;
                }
                else {
                    if (!this.pixelCoordinates_) {
                        this.pixelCoordinates_ = [];
                    }
                    pixelCoordinates = ol.geom.flat.transform.transform2D(this.coordinates, 0, this.coordinates.length, 2, transform, this.pixelCoordinates_);
                    ol.transform.setFromArray(this.renderedTransform_, transform);
                }
            }
            if (this.webglIndexObj) {
                var webglContext = ol.webglContext;
                // let webglContext=this.webglContext;
                var width_1 = webglContext.canvas.width;
                var height_1 = webglContext.canvas.height;
                if (this.webglDrawType === 'polygonReplay') {
                    Object(_webgl_polygon__WEBPACK_IMPORTED_MODULE_12__["default"])(webglContext.gl, {
                        webglIndexObj: this.webglIndexObj,
                        webglProgram: webglContext['polyProgram']
                    });
                    context.drawImage(webglContext.canvas, 0, 0, width_1, height_1);
                }
                else if (this.webglDrawType === 'lineStringReplay') {
                    Object(_webgl_lineString__WEBPACK_IMPORTED_MODULE_13__["default"])(webglContext.gl, {
                        webglLineIndex: this.webglIndexObj,
                        webglProgram: webglContext['lineProgram']
                    });
                    context.drawImage(webglContext.canvas, 0, 0, width_1, height_1);
                }
            }
            else {
                var skipFeatures = !ol.obj.isEmpty(skippedFeaturesHash);
                var i = 0; // instruction index
                var ii = instructions.length; // end of instructions
                var d = 0; // data index
                var dd; // end of per-instruction data
                var anchorX, anchorY, prevX, prevY, roundX, roundY, declutterGroup, image;
                var pendingFill = 0;
                var pendingStroke = 0;
                var lastFillInstruction = null;
                var lastStrokeInstruction = null;
                var coordinateCache = this.coordinateCache_;
                var viewRotation = this.viewRotation_;
                var state = /** @type {olx.render.State} */ ({
                    context: context,
                    pixelRatio: this.pixelRatio,
                    resolution: this.resolution,
                    rotation: viewRotation
                });
                // When the batch size gets too big, performance decreases. 200 is a good
                // balance between batch size and number of fill/stroke instructions.
                var batchSize = this.instructions != instructions || this.overlaps ? 0 : 200;
                while (i < ii) {
                    var instruction = instructions[i];
                    var type = /** @type {ol.render.canvas.Instruction} */ (instruction[0]);
                    var /** @type {ol.Feature|ol.render.Feature} */ feature, x, y;
                    switch (type) {
                        case ol.render.canvas.Instruction.BEGIN_GEOMETRY:
                            feature = /** @type {ol.Feature|ol.render.Feature} */ (instruction[1]);
                            if ((skipFeatures &&
                                skippedFeaturesHash[ol.getUid(feature).toString()]) ||
                                !feature.getGeometry()) {
                                i = /** @type {number} */ (instruction[2]);
                            }
                            else if (opt_hitExtent !== undefined && !ol.extent.intersects(opt_hitExtent, feature.getGeometry().getExtent())) {
                                i = /** @type {number} */ (instruction[2]) + 1;
                            }
                            else {
                                ++i;
                            }
                            break;
                        case ol.render.canvas.Instruction.BEGIN_PATH:
                            if (pendingFill > batchSize) {
                                this.fill_(context);
                                pendingFill = 0;
                            }
                            if (pendingStroke > batchSize) {
                                context.stroke();
                                pendingStroke = 0;
                            }
                            if (!pendingFill && !pendingStroke) {
                                context.beginPath();
                                prevX = prevY = NaN;
                            }
                            ++i;
                            break;
                        case ol.render.canvas.Instruction.CIRCLE:
                            d = /** @type {number} */ (instruction[1]);
                            var x1 = pixelCoordinates[d];
                            var y1 = pixelCoordinates[d + 1];
                            var x2 = pixelCoordinates[d + 2];
                            var y2 = pixelCoordinates[d + 3];
                            var dx = x2 - x1;
                            var dy = y2 - y1;
                            var r = Math.sqrt(dx * dx + dy * dy);
                            context.moveTo(x1 + r, y1);
                            context.arc(x1, y1, r, 0, 2 * Math.PI, true);
                            ++i;
                            break;
                        case ol.render.canvas.Instruction.CLOSE_PATH:
                            context.closePath();
                            ++i;
                            break;
                        case ol.render.canvas.Instruction.CUSTOM:
                            d = /** @type {number} */ (instruction[1]);
                            dd = instruction[2];
                            var geometry = /** @type {ol.geom.SimpleGeometry} */ (instruction[3]);
                            var renderer = instruction[4];
                            var fn = instruction.length == 6 ? instruction[5] : undefined;
                            state["geometry"] = geometry;
                            state["feature"] = feature;
                            if (!(i in coordinateCache)) {
                                coordinateCache[i] = [];
                            }
                            var coords = coordinateCache[i];
                            if (fn) {
                                fn(pixelCoordinates, d, dd, 2, coords);
                            }
                            else {
                                coords[0] = pixelCoordinates[d];
                                coords[1] = pixelCoordinates[d + 1];
                                coords.length = 2;
                            }
                            renderer(coords, state);
                            ++i;
                            break;
                        case ol.render.canvas.Instruction.DRAW_IMAGE:
                            d = /** @type {number} */ (instruction[1]);
                            dd = /** @type {number} */ (instruction[2]);
                            image = /** @type {HTMLCanvasElement|HTMLVideoElement|Image} */
                                (instruction[3]);
                            // Remaining arguments in DRAW_IMAGE are in alphabetical order
                            anchorX = /** @type {number} */ (instruction[4]);
                            anchorY = /** @type {number} */ (instruction[5]);
                            declutterGroup = featureCallback ? null : /** @type {ol.DeclutterGroup} */ (instruction[6]);
                            var height = /** @type {number} */ (instruction[7]);
                            var opacity = /** @type {number} */ (instruction[8]);
                            var originX = /** @type {number} */ (instruction[9]);
                            var originY = /** @type {number} */ (instruction[10]);
                            var rotateWithView = /** @type {boolean} */ (instruction[11]);
                            var rotation = /** @type {number} */ (instruction[12]);
                            var scale = /** @type {number} */ (instruction[13]);
                            var snapToPixel = /** @type {boolean} */ (instruction[14]);
                            var width = /** @type {number} */ (instruction[15]);
                            var padding, backgroundFill, backgroundStroke;
                            if (instruction.length > 16) {
                                padding = /** @type {Array.<number>} */ (instruction[16]);
                                backgroundFill = /** @type {boolean} */ (instruction[17]);
                                backgroundStroke = /** @type {boolean} */ (instruction[18]);
                            }
                            else {
                                padding = ol.render.canvas.defaultPadding;
                                backgroundFill = backgroundStroke = false;
                            }
                            if (rotateWithView) {
                                rotation += viewRotation;
                            }
                            for (; d < dd; d += 2) {
                                this.replayImage_(context, pixelCoordinates[d], pixelCoordinates[d + 1], image, anchorX, anchorY, declutterGroup, height, opacity, originX, originY, rotation, scale, snapToPixel, width, padding, backgroundFill ? /** @type {Array.<*>} */ (lastFillInstruction) : null, backgroundStroke ? /** @type {Array.<*>} */ (lastStrokeInstruction) : null);
                            }
                            this.renderDeclutter_(declutterGroup, feature);
                            ++i;
                            break;
                        case ol.render.canvas.Instruction.DRAW_CHARS:
                            var begin = /** @type {number} */ (instruction[1]);
                            var end = /** @type {number} */ (instruction[2]);
                            var baseline = /** @type {number} */ (instruction[3]);
                            declutterGroup = featureCallback ? null : /** @type {ol.DeclutterGroup} */ (instruction[4]);
                            var overflow = /** @type {number} */ (instruction[5]);
                            var fillKey = /** @type {string} */ (instruction[6]);
                            var maxAngle = /** @type {number} */ (instruction[7]);
                            var measure = /** @type {function(string):number} */ (instruction[8]);
                            var offsetY = /** @type {number} */ (instruction[9]);
                            var strokeKey = /** @type {string} */ (instruction[10]);
                            var strokeWidth = /** @type {number} */ (instruction[11]);
                            var text = /** @type {string} */ (instruction[12]);
                            var textKey = /** @type {string} */ (instruction[13]);
                            var textScale = /** @type {number} */ (instruction[14]);
                            var pathLength = ol.geom.flat.length.lineString(pixelCoordinates, begin, end, 2);
                            var textLength = measure(text);
                            if (overflow || textLength <= pathLength) {
                                var textAlign = /** @type {ol.render.canvas.TextReplay} */ (this).textStates[textKey].textAlign;
                                var startM = (pathLength - textLength) * ol.render.replay.TEXT_ALIGN[textAlign];
                                var parts = ol.geom.flat.textpath.lineString(pixelCoordinates, begin, end, 2, text, measure, startM, maxAngle);
                                if (parts) {
                                    var c, cc, chars, label, part;
                                    if (strokeKey) {
                                        for (c = 0, cc = parts.length; c < cc; ++c) {
                                            part = parts[c]; // x, y, anchorX, rotation, chunk
                                            chars = /** @type {string} */ (part[4]);
                                            label = /** @type {ol.render.canvas.TextReplay} */ (this).getImage(chars, textKey, '', strokeKey);
                                            anchorX = /** @type {number} */ (part[2]) + strokeWidth;
                                            anchorY = baseline * label.height + (0.5 - baseline) * 2 * strokeWidth - offsetY;
                                            this.replayImage_(context, 
                                            /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), label, anchorX, anchorY, declutterGroup, label.height, 1, 0, 0, 
                                            /** @type {number} */ (part[3]), textScale, false, label.width, ol.render.canvas.defaultPadding, null, null);
                                        }
                                    }
                                    if (fillKey) {
                                        for (c = 0, cc = parts.length; c < cc; ++c) {
                                            part = parts[c]; // x, y, anchorX, rotation, chunk
                                            chars = /** @type {string} */ (part[4]);
                                            label = /** @type {ol.render.canvas.TextReplay} */ (this).getImage(chars, textKey, fillKey, '');
                                            anchorX = /** @type {number} */ (part[2]);
                                            anchorY = baseline * label.height - offsetY;
                                            this.replayImage_(context, 
                                            /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), label, anchorX, anchorY, declutterGroup, label.height, 1, 0, 0, 
                                            /** @type {number} */ (part[3]), textScale, false, label.width, ol.render.canvas.defaultPadding, null, null);
                                        }
                                    }
                                }
                            }
                            this.renderDeclutter_(declutterGroup, feature);
                            ++i;
                            break;
                        case ol.render.canvas.Instruction.END_GEOMETRY:
                            if (featureCallback !== undefined) {
                                feature = /** @type {ol.Feature|ol.render.Feature} */ (instruction[1]);
                                var result = featureCallback(feature);
                                if (result) {
                                    return result;
                                }
                            }
                            ++i;
                            break;
                        case ol.render.canvas.Instruction.FILL:
                            if (batchSize) {
                                pendingFill++;
                            }
                            else {
                                this.fill_(context);
                            }
                            ++i;
                            break;
                        case ol.render.canvas.Instruction.MOVE_TO_LINE_TO:
                            d = /** @type {number} */ (instruction[1]);
                            dd = /** @type {number} */ (instruction[2]);
                            x = pixelCoordinates[d];
                            y = pixelCoordinates[d + 1];
                            roundX = (x + 0.5) | 0;
                            roundY = (y + 0.5) | 0;
                            if (roundX !== prevX || roundY !== prevY) {
                                context.moveTo(x, y);
                                prevX = roundX;
                                prevY = roundY;
                            }
                            for (d += 2; d < dd; d += 2) {
                                x = pixelCoordinates[d];
                                y = pixelCoordinates[d + 1];
                                roundX = (x + 0.5) | 0;
                                roundY = (y + 0.5) | 0;
                                if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {
                                    context.lineTo(x, y);
                                    prevX = roundX;
                                    prevY = roundY;
                                }
                            }
                            ++i;
                            break;
                        case ol.render.canvas.Instruction.SET_FILL_STYLE:
                            lastFillInstruction = instruction;
                            this.fillOrigin_ = instruction[2];
                            if (pendingFill) {
                                this.fill_(context);
                                pendingFill = 0;
                                if (pendingStroke) {
                                    context.stroke();
                                    pendingStroke = 0;
                                }
                            }
                            context.fillStyle = /** @type {ol.ColorLike} */ (instruction[1]);
                            ++i;
                            break;
                        case ol.render.canvas.Instruction.SET_STROKE_STYLE:
                            lastStrokeInstruction = instruction;
                            if (pendingStroke) {
                                context.stroke();
                                pendingStroke = 0;
                            }
                            this.setStrokeStyle_(context, /** @type {Array.<*>} */ (instruction));
                            ++i;
                            break;
                        case ol.render.canvas.Instruction.STROKE:
                            if (batchSize) {
                                pendingStroke++;
                            }
                            else {
                                context.stroke();
                            }
                            ++i;
                            break;
                        default:
                            ++i; // consume the instruction anyway, to avoid an infinite loop
                            break;
                    }
                }
                if (pendingFill) {
                    this.fill_(context);
                }
                if (pendingStroke) {
                    context.stroke();
                }
            }
            return undefined;
        };
        ol.renderer.canvas.VectorTileLayer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, thisArg) {
            var resolution = frameState.viewState.resolution;
            var rotation = frameState.viewState.rotation;
            hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;
            var layer = this.getLayer();
            /** @type {Object.<string, boolean>} */
            var features = {};
            /** @type {Array.<ol.VectorImageTile>} */
            var renderedTiles = this.renderedTiles;
            var source = /** @type {ol.source.VectorTile} */ (layer.getSource());
            var tileGrid = source.getTileGridForProjection(frameState.viewState.projection);
            var bufferedExtent, found;
            var i, ii, replayGroup;
            var tile, tileCoord, tileExtent;
            for (i = 0, ii = renderedTiles.length; i < ii; ++i) {
                tile = renderedTiles[i];
                tileCoord = tile.wrappedTileCoord;
                tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);
                bufferedExtent = ol.extent.buffer(tileExtent, hitTolerance * resolution, bufferedExtent);
                if (!ol.extent.containsCoordinate(bufferedExtent, coordinate)) {
                    continue;
                }
                for (var t = 0, tt = tile.tileKeys.length; t < tt; ++t) {
                    var sourceTile = tile.getTile(tile.tileKeys[t]);
                    if (sourceTile.getState() == ol.TileState.ERROR) {
                        continue;
                    }
                    replayGroup = sourceTile.getReplayGroup(layer, tileCoord.toString());
                    found = found || replayGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, {}, 
                    /**
                     * @param {ol.Feature|ol.render.Feature} feature Feature.
                     * @return {?} Callback result.
                     */
                    function (feature) {
                        var key = ol.getUid(feature).toString();
                        if (!(key in features)) {
                            features[key] = true;
                            return callback.call(thisArg, feature, layer);
                        }
                    }, null);
                }
            }
            return found;
        };
    };
    return VectorTileLayer;
}(ol.layer.VectorTile));



/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _layer_vectorTileLayer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layer/vectorTileLayer */ "./src/layer/vectorTileLayer.ts");
/* harmony import */ var _worker_vectorTileLayerThreadMode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./worker/vectorTileLayerThreadMode */ "./src/worker/vectorTileLayerThreadMode.ts");
/* harmony import */ var _worker_webgl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./worker/webgl */ "./src/worker/webgl.js");



ol.mapsuite = {};
ol.mapsuite["VectorTileLayer"] = _layer_vectorTileLayer__WEBPACK_IMPORTED_MODULE_0__["VectorTileLayer"];
ol.mapsuite["VectorTileLayerThreadMode"] = _worker_vectorTileLayerThreadMode__WEBPACK_IMPORTED_MODULE_1__["VectorTileLayerThreadMode"];
window["ol"] = ol;
window["webglCaculate"] = _worker_webgl__WEBPACK_IMPORTED_MODULE_2__["webglCaculate"];


/***/ }),

/***/ "./src/render/geoVectorTilelayerRender.ts":
/*!************************************************!*\
  !*** ./src/render/geoVectorTilelayerRender.ts ***!
  \************************************************/
/*! exports provided: GeoVectorTileLayerRender */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoVectorTileLayerRender", function() { return GeoVectorTileLayerRender; });
/* harmony import */ var _replayGroupCustom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./replayGroupCustom */ "./src/render/replayGroupCustom.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var GeoVectorTileLayerRender = /** @class */ (function (_super) {
    __extends(GeoVectorTileLayerRender, _super);
    function GeoVectorTileLayerRender(layer) {
        var _this = _super.call(this, layer) || this;
        _this.VECTOR_REPLAYS_CUSTOM = {
            "image": [ol.render.ReplayType.DEFAULT],
            "hybrid": [ol.render.ReplayType.IMAGE, ol.render.ReplayType.TEXT, ol.render.ReplayType.DEFAULT],
            "vector": ol.render.replay.ORDER
        };
        _this.VECTOR_REPLAYS = _this.VECTOR_REPLAYS_CUSTOM;
        _this.prepareFrame = _this.prepareFrameCustom;
        _this.renderTileImage_ = _this.renderTileImageCustom;
        return _this;
    }
    GeoVectorTileLayerRender.prototype.tileLayerPrepareFrameCustom = function (frameState, layerState) {
        var pixelRatio = frameState.pixelRatio;
        var size = frameState.size;
        var viewState = frameState.viewState;
        var projection = viewState.projection;
        var viewResolution = viewState.resolution;
        var viewCenter = viewState.center;
        var tileLayer = this.getLayer();
        var tileSource = /** @type {ol.source.Tile} */ (tileLayer.getSource());
        var sourceRevision = tileSource.getRevision();
        var tileGrid = tileSource.getTileGridForProjection(projection);
        var z = tileGrid.getZForResolution(viewResolution, this.zDirection);
        var tileResolution = tileGrid.getResolution(z);
        var oversampling = Math.round(viewResolution / tileResolution) || 1;
        var extent = frameState.extent;
        if (layerState.extent !== undefined) {
            extent = ol.extent.getIntersection(extent, layerState.extent);
        }
        if (ol.extent.isEmpty(extent)) {
            // Return false to prevent the rendering of the layer.
            return false;
        }
        var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
        // Adjust tile cache size according to tile Range, TODO: add a property for that
        var xOffset = (tileRange.maxX - tileRange.minX);
        var yOffset = (tileRange.maxY - tileRange.minY);
        xOffset = xOffset <= 0 ? 1 : xOffset * 2 + 3;
        yOffset = yOffset <= 0 ? 1 : yOffset * 2 + 3;
        var cacheSize = xOffset * yOffset;
        tileSource.tileCache.highWaterMark = cacheSize <= 15 ? 15 : cacheSize;
        //// Adjust vectorTileData cache size according to the tile Range in data max zoom. it will pass 
        var dataTileRand = tileGrid.getTileRangeForExtentAndZ(extent, tileSource.maxDataZoom);
        var offsetX = dataTileRand.maxX - dataTileRand.minX;
        var offsetY = dataTileRand.maxY - dataTileRand.minY;
        offsetX = offsetX <= 0 ? 1 : offsetX + 3;
        offsetY = offsetY <= 0 ? 1 : offsetY + 3;
        var vectorTileDataCahceSize = offsetX * offsetY;
        tileSource["vectorTileDataCahceSize"] = vectorTileDataCahceSize;
        tileSource.getGeoFormat()["vectorTileDataCahceSize"] = vectorTileDataCahceSize;
        var imageExtent = tileGrid.getTileRangeExtent(z, tileRange);
        var tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);
        /**
         * @type {Object.<number, Object.<string, ol.Tile>>}
         */
        var tilesToDrawByZ = {};
        tilesToDrawByZ[z] = {};
        var findLoadedTiles = this.createLoadedTileFinder(tileSource, projection, tilesToDrawByZ);
        var tmpExtent = this.tmpExtent;
        var tmpTileRange = this.tmpTileRange_;
        var newTiles = false;
        var tile, x, y;
        for (x = tileRange.minX; x <= tileRange.maxX; ++x) {
            for (y = tileRange.minY; y <= tileRange.maxY; ++y) {
                tile = tileSource.getTile(z, x, y, pixelRatio, projection);
                // FIXME Eric
                tile.tileRange = tileRange;
                tile.pixelRatio = pixelRatio;
                if (tile.getState() === ol.TileState.ERROR) {
                    if (!tileLayer.getUseInterimTilesOnError()) {
                        // When useInterimTilesOnError is false, we consider the error tile as loaded.
                        tile.setState(ol.TileState.LOADED);
                    }
                    else if (tileLayer.getPreload() > 0) {
                        // Preloaded tiles for lower resolutions might have finished loading.
                        newTiles = true;
                    }
                }
                if (!this.isDrawableTile_(tile)) {
                    tile = tile.getInterimTile();
                }
                if (this.isDrawableTile_(tile)) {
                    var uid = ol.getUid(this);
                    if (tile.getState() === ol.TileState.LOADED) {
                        tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;
                        var inTransition = tile.inTransition(uid);
                        if (!newTiles && (inTransition || this.renderedTiles.indexOf(tile) === -1)) {
                            newTiles = true;
                        }
                    }
                    if (tile.getAlpha(uid, frameState.time) === 1) {
                        // don't look for alt tiles if alpha is 1
                        continue;
                    }
                }
                var childTileRange = tileGrid.getTileCoordChildTileRange(tile.tileCoord, tmpTileRange, tmpExtent);
                var covered = false;
                if (childTileRange) {
                    covered = findLoadedTiles(z + 1, childTileRange);
                }
                if (!covered) {
                    tileGrid.forEachTileCoordParentTileRange(tile.tileCoord, findLoadedTiles, null, tmpTileRange, tmpExtent);
                }
            }
        }
        var renderedResolution = tileResolution * pixelRatio / tilePixelRatio * oversampling;
        var hints = frameState.viewHints;
        var animatingOrInteracting = hints[ol.ViewHint.ANIMATING] || hints[ol.ViewHint.INTERACTING];
        if (!(this.renderedResolution && Date.now() - frameState.time > 16 && animatingOrInteracting) && (newTiles ||
            !(this.renderedExtent_ && ol.extent.containsExtent(this.renderedExtent_, extent)) ||
            this.renderedRevision !== sourceRevision ||
            oversampling !== this.oversampling_ ||
            !animatingOrInteracting && renderedResolution !== this.renderedResolution)) {
            var context = this.context;
            if (context) {
                var tilePixelSize = tileSource.getTilePixelSize(z, pixelRatio, projection);
                var width = Math.round(tileRange.getWidth() * tilePixelSize[0] / oversampling);
                var height = Math.round(tileRange.getHeight() * tilePixelSize[1] / oversampling);
                var canvas = context.canvas;
                if (canvas.width !== width || canvas.height !== height) {
                    this.oversampling_ = oversampling;
                    canvas.width = width;
                    canvas.height = height;
                }
                else {
                    if (this.renderedExtent_ && !ol.extent.equals(imageExtent, this.renderedExtent_)) {
                        context.clearRect(0, 0, width, height);
                    }
                    oversampling = this.oversampling_;
                }
            }
            this.renderedTiles.length = 0;
            /** @type {Array.<number>} */
            var zs = Object.keys(tilesToDrawByZ).map(Number);
            zs.sort(function (a, b) {
                if (a === z) {
                    return 1;
                }
                else if (b === z) {
                    return -1;
                }
                else {
                    return a > b ? 1 : a < b ? -1 : 0;
                }
            });
            var currentResolution = void 0, currentScale = void 0, currentTilePixelSize = void 0, currentZ = void 0, i = void 0, ii = void 0;
            var tileExtent = void 0, tileGutter = void 0, tilesToDraw = void 0, w = void 0, h = void 0;
            for (i = 0, ii = zs.length; i < ii; ++i) {
                currentZ = zs[i];
                currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);
                currentResolution = tileGrid.getResolution(currentZ);
                currentScale = currentResolution / tileResolution;
                tileGutter = tilePixelRatio * tileSource.getGutter(projection);
                tilesToDraw = tilesToDrawByZ[currentZ];
                for (var tileCoordKey in tilesToDraw) {
                    tile = tilesToDraw[tileCoordKey];
                    tileExtent = tileGrid.getTileCoordExtent(tile.getTileCoord(), tmpExtent);
                    x = (tileExtent[0] - imageExtent[0]) / tileResolution * tilePixelRatio / oversampling;
                    y = (imageExtent[3] - tileExtent[3]) / tileResolution * tilePixelRatio / oversampling;
                    w = currentTilePixelSize[0] * currentScale / oversampling;
                    h = currentTilePixelSize[1] * currentScale / oversampling;
                    this.drawTileImage(tile, frameState, layerState, x, y, w, h, tileGutter, z === currentZ);
                    this.renderedTiles.push(tile);
                }
            }
            this.renderedRevision = sourceRevision;
            this.renderedResolution = tileResolution * pixelRatio / tilePixelRatio * oversampling;
            this.renderedExtent_ = imageExtent;
        }
        var scale = this.renderedResolution / viewResolution;
        var transform = ol.transform.compose(this.imageTransform_, pixelRatio * size[0] / 2, pixelRatio * size[1] / 2, scale, scale, 0, (this.renderedExtent_[0] - viewCenter[0]) / this.renderedResolution * pixelRatio, (viewCenter[1] - this.renderedExtent_[3]) / this.renderedResolution * pixelRatio);
        ol.transform.compose(this.coordinateToCanvasPixelTransform, pixelRatio * size[0] / 2 - transform[4], pixelRatio * size[1] / 2 - transform[5], pixelRatio / viewResolution, -pixelRatio / viewResolution, 0, -viewCenter[0], -viewCenter[1]);
        this.updateUsedTiles(frameState.usedTiles, tileSource, z, tileRange);
        this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio, projection, extent, z, tileLayer.getPreload());
        this.scheduleExpireCache(frameState, tileSource);
        this.updateLogos(frameState, tileSource);
        return this.renderedTiles.length > 0;
    };
    // public manageTilePyramidCustom = function (
    //     frameState, tileSource, tileGrid, pixelRatio, projection, extent,
    //     currentZ, preload, opt_tileCallback, opt_this) {
    //     var tileSourceKey = (<any>ol).getUid(tileSource).toString();
    //     if (!(tileSourceKey in frameState.wantedTiles)) {
    //         frameState.wantedTiles[tileSourceKey] = {};
    //     }
    //     var wantedTiles = frameState.wantedTiles[tileSourceKey];
    //     var tileQueue = frameState.tileQueue;
    //     var minZoom = tileGrid.getMinZoom();
    //     var tile, tileRange, tileResolution, x, y, z;
    //     for (z = minZoom; z <= currentZ; ++z) {
    //         tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);
    //         tileResolution = tileGrid.getResolution(z);
    //         for (x = tileRange.minX; x <= tileRange.maxX; ++x) {
    //             for (y = tileRange.minY; y <= tileRange.maxY; ++y) {
    //                 if (currentZ - z <= preload) {
    //                     tile = tileSource.getTile(z, x, y, pixelRatio, projection);
    //                     // FIXME Eric
    //                     if (tile.getState() == (<any>ol).TileState.IDLE || tile.getState() == (<any>ol).TileState.CANCEL) {
    //                         wantedTiles[tile.getKey()] = true;
    //                         if (!tileQueue.isKeyQueued(tile.getKey())) {
    //                             tileQueue.enqueue([tile, tileSourceKey,
    //                                 tileGrid.getTileCoordCenter(tile.tileCoord), tileResolution]);
    //                         }
    //                     }
    //                     if (opt_tileCallback !== undefined) {
    //                         opt_tileCallback.call(opt_this, tile);
    //                     }
    //                 } else {
    //                     tileSource.useTile(z, x, y, projection);
    //                 }
    //             }
    //         }
    //     }
    // };
    GeoVectorTileLayerRender.prototype.prepareFrameCustom = function (frameState, layerState) {
        var layer = this.getLayer();
        var layerRevision = layer.getRevision();
        if (this.renderedLayerRevision_ !== layerRevision) {
            this.renderedTiles.length = 0;
            var renderMode = layer.getRenderMode();
            if (!this.context && renderMode !== ol.layer.VectorTileRenderType.VECTOR) {
                this.context = ol.dom.createCanvasContext2D();
            }
            if (this.context && renderMode === ol.layer.VectorTileRenderType.VECTOR) {
                this.context = null;
            }
        }
        this.renderedLayerRevision_ = layerRevision;
        return this.tileLayerPrepareFrameCustom.apply(this, arguments);
    };
    GeoVectorTileLayerRender.prototype.postCompose = function (context, frameState, layerState) {
        var layer = this.getLayer();
        var declutterReplays = layer.getDeclutter() ? {} : null;
        var source = /** @type {ol.source.VectorTile} */ (layer.getSource());
        var renderMode = layer.getRenderMode();
        var replayTypes = this.VECTOR_REPLAYS_CUSTOM[renderMode];
        var pixelRatio = frameState.pixelRatio;
        var rotation = frameState.viewState.rotation;
        var size = frameState.size;
        var offsetX, offsetY;
        if (rotation) {
            offsetX = Math.round(pixelRatio * size[0] / 2);
            offsetY = Math.round(pixelRatio * size[1] / 2);
            ol.render.canvas.rotateAtOffset(context, -rotation, offsetX, offsetY);
        }
        if (declutterReplays) {
            this.declutterTree_.clear();
        }
        var tiles = this.renderedTiles;
        var tileGrid = source.getTileGridForProjection(frameState.viewState.projection);
        var clips = [];
        var zs = [];
        for (var i = tiles.length - 1; i >= 0; --i) {
            var tile = /** @type {ol.VectorImageTile} */ (tiles[i]);
            if (tile.getState() === ol.TileState.ABORT) {
                continue;
            }
            var tileCoord = tile.tileCoord;
            var worldOffset = tileGrid.getTileCoordExtent(tileCoord)[0] -
                tileGrid.getTileCoordExtent(tile.wrappedTileCoord)[0];
            var transform = undefined;
            for (var t = 0, tt = tile.tileKeys.length; t < tt; ++t) {
                var sourceTile = tile.getTile(tile.tileKeys[t]);
                if (sourceTile.getState() === ol.TileState.ERROR) {
                    continue;
                }
                //// reuse replayGroup of source Tile to reduce the memory.
                // let replayGroup = sourceTile.getReplayGroup(layer, tileCoord.toString());
                var replayGroup = sourceTile.getReplayGroup(layer, sourceTile.tileCoord.toString());
                if (renderMode !== ol.layer.VectorTileRenderType.VECTOR && !replayGroup.hasReplays(replayTypes)) {
                    continue;
                }
                if (!transform) {
                    transform = this.getTransform(frameState, worldOffset);
                }
                var currentZ = sourceTile.tileCoord[0];
                var currentClip = replayGroup.getClipCoords(transform);
                context.save();
                context.globalAlpha = layerState.opacity;
                // Create a clip mask for regions in this low resolution tile that are
                // already filled by a higher resolution tile
                for (var j = 0, jj = clips.length; j < jj; ++j) {
                    var clip = clips[j];
                    if (currentZ < zs[j]) {
                        context.beginPath();
                        // counter-clockwise (outer ring) for current tile
                        context.moveTo(currentClip[0], currentClip[1]);
                        context.lineTo(currentClip[2], currentClip[3]);
                        context.lineTo(currentClip[4], currentClip[5]);
                        context.lineTo(currentClip[6], currentClip[7]);
                        // clockwise (inner ring) for higher resolution tile
                        context.moveTo(clip[6], clip[7]);
                        context.lineTo(clip[4], clip[5]);
                        context.lineTo(clip[2], clip[3]);
                        context.lineTo(clip[0], clip[1]);
                        context.clip();
                    }
                }
                replayGroup.replay(context, transform, rotation, {}, replayTypes, declutterReplays);
                context.restore();
                clips.push(currentClip);
                zs.push(currentZ);
            }
        }
        if (declutterReplays) {
            var hints = frameState.viewHints;
            var animatingOrInteracting = hints[ol.ViewHint.ANIMATING] || hints[ol.ViewHint.INTERACTING];
            delete context["quickZoom"];
            if (animatingOrInteracting) {
                context["quickZoom"] = frameState["quickZoom"];
            }
            context["currentResolution"] = frameState["currentResolution"];
            ol.render.canvas.ReplayGroup.replayDeclutter(declutterReplays, context, rotation);
        }
        if (rotation) {
            ol.render.canvas.rotateAtOffset(context, rotation, 
            /** @type {number} */ (offsetX), /** @type {number} */ (offsetY));
        }
        ol.renderer.canvas.TileLayer.prototype.postCompose.apply(this, arguments);
    };
    GeoVectorTileLayerRender.prototype.createReplayGroup_ = function (tile, frameState) {
        var layer = this.getLayer();
        var pixelRatio = frameState.pixelRatio;
        var projection = frameState.viewState.projection;
        var revision = layer.getRevision();
        var renderOrder = /** @type {ol.RenderOrderFunction} */ (layer.getRenderOrder()) || null;
        var replayState = tile.getReplayState(layer);
        if (!replayState.dirty && replayState.renderedRevision === revision &&
            replayState.renderedRenderOrder === renderOrder) {
            return;
        }
        var source = /** @type {ol.source.VectorTile} */ (layer.getSource());
        var sourceTileGrid = source.getTileGrid();
        var tileGrid = source.getTileGridForProjection(projection);
        var resolution = tileGrid.getResolution(tile.tileCoord[0]);
        var tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
        var zIndexKeys = {};
        var _loop_1 = function (t, tt) {
            var sourceTile = tile.getTile(tile.tileKeys[t]);
            if (sourceTile.getState() === ol.TileState.ERROR) {
                return "continue";
            }
            var sourceTileCoord = sourceTile.requestTileCoord;
            var sourceTileExtent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);
            var sharedExtent = ol.extent.getIntersection(tileExtent, sourceTileExtent);
            var bufferedExtent = ol.extent.equals(sourceTileExtent, sharedExtent) ? null :
                ol.extent.buffer(sharedExtent, layer.getRenderBuffer() * resolution);
            var tileProjection = sourceTile.getProjection();
            var reproject = true;
            replayState.dirty = false;
            //// reuse replayGroup of source Tile to reduce the memory.
            var distReplayGroup = sourceTile.getReplayGroup(layer, tile.wrappedTileCoord.toString());
            if (distReplayGroup) {
                // Check replayGroup has  replays
                var replaysZindexCount = 0;
                if (distReplayGroup.replaysByZIndex_) {
                    for (var zindex in distReplayGroup.replaysByZIndex_) {
                        replaysZindexCount++;
                    }
                }
                if (source.isMultithread && replaysZindexCount === 0) {
                    // the replays did not created, it will create after web worker call back
                    if (sourceTile)
                        if (sourceTile["reuseVectorImageTile"] === undefined) {
                            sourceTile["reuseVectorImageTile"] = [];
                        }
                    sourceTile["reuseVectorImageTile"].push(tile);
                }
                else {
                    replayState.renderedRevision = revision;
                    replayState.renderedRenderOrder = renderOrder;
                    replayState.renderedTileLoaded = true;
                }
            }
            else {
                var replayGroup_1 = new _replayGroupCustom__WEBPACK_IMPORTED_MODULE_0__["ReplayGroupCustom"](0, sharedExtent, resolution, pixelRatio, source.getOverlaps(), this_1.declutterTree_, layer.getRenderBuffer());
                var squaredTolerance_1 = ol.renderer.vector.getSquaredTolerance(resolution, pixelRatio);
                var strategyTree_1 = ol.ext.rbush(9);
                /**
                 * @param {ol.Feature|ol.render.Feature} feature Feature.
                 * @this {ol.renderer.canvas.VectorTileLayer}
                 */
                var renderFeature_1 = function (feature, geoStyles, options) {
                    var styles;
                    if (geoStyles) {
                        if (geoStyles && geoStyles.length > 0) {
                            for (var i = 0, ii = geoStyles.length; i < ii; i++) {
                                if (geoStyles[i]) {
                                    var ol4Styles = geoStyles[i].getStyles(feature, resolution, options);
                                    if (styles === undefined) {
                                        styles = [];
                                    }
                                    Array.prototype.push.apply(styles, ol4Styles);
                                }
                            }
                        }
                    }
                    else {
                        var styleFunction = feature.getStyleFunction();
                        if (styleFunction) {
                            styles = styleFunction.call(/** @type {ol.Feature} */ (feature), resolution);
                        }
                        else {
                            styleFunction = layer.getStyleFunction();
                            if (styleFunction) {
                                styles = styleFunction(feature, resolution);
                            }
                        }
                    }
                    if (styles) {
                        var dirty = this.renderFeature(feature, squaredTolerance_1, styles, replayGroup_1);
                        this.dirty_ = this.dirty_ || dirty;
                        replayState.dirty = replayState.dirty || dirty;
                    }
                };
                var instructs = void 0;
                var features = void 0;
                if (sourceTile.featuresAndInstructs) {
                    instructs = sourceTile.featuresAndInstructs["instructs"];
                    features = sourceTile.featuresAndInstructs["features"];
                }
                if (source.isMultithread) {
                    var render = this_1;
                    if (tileProjection.getUnits() === ol.proj.Units.TILE_PIXELS) {
                        tileProjection.setWorldExtent(sourceTileExtent);
                        tileProjection.setExtent(sourceTile.getExtent());
                    }
                    var tileProjectionInfo = {};
                    for (var name_1 in tileProjection) {
                        if (typeof tileProjection[name_1] !== "function") {
                            tileProjectionInfo[name_1] = tileProjection[name_1];
                        }
                    }
                    var projectInfo = {};
                    for (var name_2 in projection) {
                        if (typeof projection[name_2] !== "function") {
                            projectInfo[name_2] = projection[name_2];
                        }
                    }
                    var geoStyles_1 = source.getGeoFormat().styleJsonCache.geoStyles;
                    if (features && instructs) {
                        for (var i = 0; i < instructs.length; i++) {
                            var geoStyleId = instructs[i][1];
                            var geoStyle = geoStyles_1[geoStyleId];
                            var featureInfo = features[instructs[i][0]];
                            var feature = new ol.render.Feature(featureInfo.type_, featureInfo.flatCoordinates_, featureInfo.ends_, featureInfo.properties_);
                            if (featureInfo["projected"] === undefined) {
                                if (tileProjection.getUnits() === ol.proj.Units.TILE_PIXELS) {
                                    // projected tile extent
                                    tileProjection.setWorldExtent(sourceTileExtent);
                                    // tile extent in tile pixel space
                                    tileProjection.setExtent(sourceTile.getExtent());
                                }
                                feature.getGeometry().transform(tileProjection, projection);
                                feature.extent_ = null;
                                featureInfo["projected"] = "";
                            }
                            feature["tempTreeZindex"] = instructs[i][2];
                            feature["styleId"] = geoStyleId;
                            renderFeature_1.call(this_1, feature, [geoStyle], { strategyTree: strategyTree_1, frameState: frameState });
                        }
                    }
                    var messageData = [
                        [0, tileExtent, resolution, pixelRatio, source.getOverlaps(), this_1.declutterTree_, layer.getRenderBuffer(), source.getGeoFormat().minimalist],
                        sourceTile.requestTileCoord,
                        sourceTile.tileCoord,
                        tileProjectionInfo,
                        projectInfo,
                        squaredTolerance_1,
                        window.devicePixelRatio,
                        ol.getUid(source.getGeoFormat()),
                        frameState["coordinateToPixelTransform"],
                        source.getGeoFormat().maxDataZoom,
                        source["vectorTileDataCahceSize"]
                    ];
                    rendera = this_1;
                    var callabck = function (messageData) {
                        var replaysByZIndex_ = messageData["replays"];
                        var features = messageData["features"];
                        var instructs = messageData["instructs"];
                        if (features && instructs) {
                            for (var i_1 = 0; i_1 < instructs.length; i_1++) {
                                var geoStyleId = instructs[i_1][1];
                                var geoStyle = geoStyles_1[geoStyleId];
                                var featureInfo = features[instructs[i_1][0]];
                                var feature = new ol.render.Feature(featureInfo.type_, featureInfo.flatCoordinates_, featureInfo.ends_, featureInfo.properties_);
                                feature["tempTreeZindex"] = instructs[i_1][2];
                                feature["styleId"] = geoStyleId;
                                renderFeature_1.call(rendera, feature, [geoStyle], { strategyTree: strategyTree_1, frameState: frameState });
                            }
                        }
                        for (var zindex_1 in replaysByZIndex_) {
                            for (var replayType in replaysByZIndex_[zindex_1]) {
                                var replay = replayGroup_1.getReplayCustom(zindex_1, replayType);
                                var workReplay = replaysByZIndex_[zindex_1][replayType];
                                if (!source.getGeoFormat().minimalist && workReplay.instructions) {
                                    for (var i_2 = 0; i_2 < workReplay.instructions.length; i_2++) {
                                        var instruction = workReplay.instructions[i_2];
                                        if (instruction[0] === ol.render.canvas.Instruction.SET_FILL_STYLE && instruction[1].indexOf("hatch") === 0) {
                                            var hatchInstruction = instruction[1];
                                            var geoStyleId = hatchInstruction.split("|")[1];
                                            var geoStyle = geoStyles_1[geoStyleId];
                                            if (geoStyle) {
                                                geoStyle.initialize();
                                                instruction[1] = geoStyle.geoBrush;
                                            }
                                        }
                                        if (instruction[0] === ol.render.canvas.Instruction.BEGIN_GEOMETRY || instruction[0] === ol.render.canvas.Instruction.END_GEOMETRY) {
                                            var featureInfo = instruction[1];
                                            var feature = new ol.render.Feature(featureInfo.type_, featureInfo.flatCoordinates_, featureInfo.ends_, featureInfo.properties_);
                                            feature["styleId"] = featureInfo.styleId;
                                            instruction[1] = feature;
                                        }
                                    }
                                    for (var i_3 = 0; i_3 < workReplay.hitDetectionInstructions.length; i_3++) {
                                        var hitInstruction = workReplay.hitDetectionInstructions[i_3];
                                        if (hitInstruction[0] === ol.render.canvas.Instruction.SET_FILL_STYLE && hitInstruction[1].indexOf("hatch") === 0) {
                                            var hatchInstruction = hitInstruction[1];
                                            var geoStyleId = hatchInstruction.split("|")[1];
                                            var geoStyle = geoStyles_1[geoStyleId];
                                            if (geoStyle) {
                                                geoStyle.initialize();
                                                hitInstruction[1] = geoStyle.geoBrush;
                                            }
                                        }
                                        if (hitInstruction[0] === ol.render.canvas.Instruction.BEGIN_GEOMETRY || hitInstruction[0] === ol.render.canvas.Instruction.END_GEOMETRY) {
                                            var hitfeatureInfo = hitInstruction[1];
                                            var hitfeature = new ol.render.Feature(hitfeatureInfo.type_, hitfeatureInfo.flatCoordinates_, hitfeatureInfo.ends_, hitfeatureInfo.properties_);
                                            hitfeature["styleId"] = hitfeatureInfo.styleId;
                                            hitInstruction[1] = hitfeature;
                                        }
                                    }
                                }
                                for (var key in workReplay) {
                                    // if (key === "pixelCoordinates_") {
                                    //     replay[key] = new Int32Array(workReplay[key]);
                                    // }
                                    // else {
                                    replay[key] = workReplay[key];
                                    // }
                                }
                            }
                        }
                        for (var r in replayGroup_1.getReplays()) {
                            zIndexKeys[r] = true;
                        }
                        replayState.renderedTileLoaded = true;
                        sourceTile.state = ol.TileState.LOADED;
                        if (sourceTile["reuseVectorImageTile"]) {
                            for (var i = 0; i < sourceTile["reuseVectorImageTile"].length; i++) {
                                var reusedVectorImageTile = sourceTile["reuseVectorImageTile"][i];
                                delete sourceTile["reuseVectorImageTile"][i];
                                var vectorImageTileReplayState = reusedVectorImageTile.getReplayState(layer);
                                vectorImageTileReplayState.renderedRevision = revision;
                                vectorImageTileReplayState.renderedRenderOrder = renderOrder;
                                vectorImageTileReplayState.renderedTileLoaded = true;
                                reusedVectorImageTile.setState(ol.TileState.LOADED);
                            }
                        }
                        tile.setState(ol.TileState.LOADED);
                    };
                    //// reuse replayGroup of source Tile to reduce the memory.
                    sourceTile.setReplayGroup(layer, sourceTile.tileCoord.toString(), replayGroup_1);
                    source.getGeoFormat().workerManager.postMessage(sourceTile.tileCoord + ol.getUid(callabck), "createReplay", messageData, callabck, sourceTile.workerId);
                    replayState.renderedRevision = revision;
                    replayState.renderedTileLoaded = false;
                }
                else {
                    if (instructs && instructs.length > 0) {
                        for (var i = 0; i < instructs.length; i++) {
                            var featureIndex = instructs[i][0];
                            var feature = features[featureIndex];
                            if (feature["projected"] === undefined) {
                                if (reproject) {
                                    if (tileProjection.getUnits() === ol.proj.Units.TILE_PIXELS) {
                                        // projected tile extent
                                        tileProjection.setWorldExtent(sourceTileExtent);
                                        // tile extent in tile pixel space
                                        tileProjection.setExtent(sourceTile.getExtent());
                                    }
                                    feature.getGeometry().transform(tileProjection, projection);
                                    feature.extent_ = null;
                                    feature.getExtent();
                                }
                                feature["projected"] = "";
                            }
                            feature["tempTreeZindex"] = instructs[i][2];
                            renderFeature_1.call(this_1, feature, [instructs[i][1]], { strategyTree: strategyTree_1, frameState: frameState });
                        }
                    }
                    replayGroup_1.finish();
                    for (var r in replayGroup_1.getReplays()) {
                        zIndexKeys[r] = true;
                    }
                    sourceTile.setReplayGroup(layer, sourceTile.tileCoord.toString(), replayGroup_1);
                    replayState.renderedRevision = revision;
                    replayState.renderedRenderOrder = renderOrder;
                    replayState.renderedTileLoaded = true;
                }
            }
        };
        var this_1 = this, rendera;
        for (var t = 0, tt = tile.tileKeys.length; t < tt; ++t) {
            _loop_1(t, tt);
        }
    };
    GeoVectorTileLayerRender.prototype.renderTileImageCustom = function (tile, frameState, layerState) {
        var layer = this.getLayer();
        var replayState = tile.getReplayState(layer);
        var revision = layer.getRevision();
        var replays = ol.renderer.canvas.VectorTileLayer.IMAGE_REPLAYS[layer.getRenderMode()];
        if (replays && replayState.renderedTileLoaded && replayState.renderedTileRevision !== revision) {
            replayState.renderedTileRevision = revision;
            var tileCoord = tile.wrappedTileCoord;
            var z = tileCoord[0];
            var pixelRatio = frameState.pixelRatio;
            var source = /** @type {ol.source.VectorTile} */ (layer.getSource());
            var tileGrid = source.getTileGridForProjection(frameState.viewState.projection);
            var resolution = tileGrid.getResolution(z);
            var context = tile.getContext(layer);
            var size = source.getTilePixelSize(z, pixelRatio, frameState.viewState.projection);
            context.canvas.width = size[0];
            context.canvas.height = size[1];
            var tileExtent = tileGrid.getTileCoordExtent(tileCoord);
            if (layer.background) {
                context.rect(0, 0, size[0], size[1]);
                context.fillStyle = layer.background;
                context.fill();
            }
            for (var i = 0, ii = tile.tileKeys.length; i < ii; ++i) {
                var sourceTile = tile.getTile(tile.tileKeys[i]);
                if (sourceTile.getState() === ol.TileState.ERROR) {
                    continue;
                }
                var pixelScale = pixelRatio / resolution;
                var transform = ol.transform.reset(this.tmpTransform_);
                ol.transform.scale(transform, pixelScale, -pixelScale);
                ol.transform.translate(transform, -tileExtent[0], -tileExtent[3]);
                //// reuse replayGroup of source Tile to reduce the memory.
                var replayGroup = sourceTile.getReplayGroup(layer, tileCoord);
                replayGroup.replay(context, transform, 0, {}, replays);
            }
        }
    };
    GeoVectorTileLayerRender.handles = function (type, layer) {
        return type === ol.renderer.Type.CANVAS && layer.getType() === ol.LayerType.MAPSUITE_VECTORTILE;
    };
    GeoVectorTileLayerRender.create = function (mapRenderer, layer) {
        return new GeoVectorTileLayerRender(layer);
    };
    GeoVectorTileLayerRender.prototype.disposeInternal = function () {
        ol.events.unlisten(ol.render.canvas.labelCache, ol.events.EventType.CLEAR, this.handleFontsChanged_, this);
        var workerManager = this.getLayer().getSource().getGeoFormat().workerManager;
        workerManager.close();
        ol.renderer.canvas.TileLayer.prototype.disposeInternal.call(this);
    };
    ;
    return GeoVectorTileLayerRender;
}(ol.renderer.canvas.VectorTileLayer));



/***/ }),

/***/ "./src/render/replayGroupCustom.ts":
/*!*****************************************!*\
  !*** ./src/render/replayGroupCustom.ts ***!
  \*****************************************/
/*! exports provided: ReplayGroupCustom */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReplayGroupCustom", function() { return ReplayGroupCustom; });
/* harmony import */ var _textReplayCustom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./textReplayCustom */ "./src/render/textReplayCustom.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var ReplayGroupCustom = /** @class */ (function (_super) {
    __extends(ReplayGroupCustom, _super);
    function ReplayGroupCustom(tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree, opt_renderBuffer) {
        var _this = _super.call(this, tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree, opt_renderBuffer) || this;
        _this.BATCH_CONSTRUCTORS_CUSTOM = {
            "Circle": ol.render.canvas.PolygonReplay,
            "Default": ol.render.canvas.Replay,
            "Image": ol.render.canvas.ImageReplay,
            "LineString": ol.render.canvas.LineStringReplay,
            "Polygon": ol.render.canvas.PolygonReplay,
            "Text": _textReplayCustom__WEBPACK_IMPORTED_MODULE_0__["TextReplayCustom"]
        };
        _this.getReplay = _this.getReplayCustom;
        _this.BATCH_CONSTRUCTORS_ = _this.BATCH_CONSTRUCTORS_CUSTOM;
        // this.replay = this.replayCustom;
        _this.forEachFeatureAtCoordinate = _this.forEachFeatureAtCoordinateCustom;
        return _this;
    }
    ReplayGroupCustom.prototype.forEachFeatureAtCoordinateCustom = function (coordinate, resolution, rotation, hitTolerance, skippedFeaturesHash, callback, declutterReplays) {
        hitTolerance = Math.round(hitTolerance);
        var contextSize = hitTolerance * 2 + 1;
        var transform = ol.transform.compose(this.hitDetectionTransform_, hitTolerance + 0.5, hitTolerance + 0.5, 1 / resolution, -1 / resolution, -rotation, -coordinate[0], -coordinate[1]);
        var context = this.hitDetectionContext_;
        if (context.canvas.width !== contextSize || context.canvas.height !== contextSize) {
            context.canvas.width = contextSize;
            context.canvas.height = contextSize;
        }
        else {
            context.clearRect(0, 0, contextSize, contextSize);
        }
        /**
         * @type {ol.Extent}
         */
        var hitExtent;
        if (this.renderBuffer_ !== undefined) {
            hitExtent = ol.extent.createEmpty();
            ol.extent.extendCoordinate(hitExtent, coordinate);
            ol.extent.buffer(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);
        }
        var mask = ol.render.canvas.ReplayGroup.getCircleArray_(hitTolerance);
        var declutteredFeatures;
        // if (this.declutterTree_) {
        //     declutteredFeatures = this.declutterTree_.all().map(function (entry) {
        //         return entry.value;
        //     });
        // }
        /**
         * @param {ol.Feature|ol.render.Feature} feature Feature.
         * @return {?} Callback result.
         */
        function hitDetectionCallback(feature) {
            var imageData = context.getImageData(0, 0, contextSize, contextSize).data;
            for (var i = 0; i < contextSize; i++) {
                for (var j = 0; j < contextSize; j++) {
                    if (mask[i][j]) {
                        if (imageData[(j * contextSize + i) * 4 + 3] > 0) {
                            var result = void 0;
                            if (!declutteredFeatures || declutteredFeatures.indexOf(feature) !== -1) {
                                result = callback(feature);
                            }
                            if (result) {
                                return result;
                            }
                            else {
                                context.clearRect(0, 0, contextSize, contextSize);
                                return undefined;
                            }
                        }
                    }
                }
            }
        }
        return this.replayHitDetection_(context, transform, rotation, skippedFeaturesHash, hitDetectionCallback, hitExtent, declutterReplays);
    };
    ReplayGroupCustom.prototype.replayCustom = function (context, transform, viewRotation, skippedFeaturesHash, opt_replayTypes, opt_declutterReplays) {
        /** @type {Array.<number>} */
        var zs = Object.keys(this.replaysByZIndex_).map(Number);
        zs.sort(ol.array.numberSafeCompareFunction);
        // setup clipping so that the parts of over-simplified geometries are not
        // visible outside the current extent when panning
        context.save();
        this.clip(context, transform);
        var replayTypes = opt_replayTypes ? opt_replayTypes : ol.render.replay.ORDER;
        var i, ii, j, jj, replays, replay;
        for (i = 0, ii = zs.length; i < ii; ++i) {
            var zIndexKey = zs[i].toString();
            replays = this.replaysByZIndex_[zIndexKey];
            for (j = 0, jj = replayTypes.length; j < jj; ++j) {
                var replayType = replayTypes[j];
                replay = replays[replayType];
                if (replay !== undefined) {
                    if (opt_declutterReplays &&
                        (replayType === ol.render.ReplayType.IMAGE || replayType === ol.render.ReplayType.TEXT)) {
                        var declutter = opt_declutterReplays[zIndexKey];
                        if (!declutter) {
                            opt_declutterReplays[zIndexKey] = [replay, transform.slice(0)];
                        }
                        else {
                            declutter.push(replay, transform.slice(0));
                        }
                    }
                    else {
                        replay.replay(context, transform, viewRotation, skippedFeaturesHash);
                    }
                }
            }
        }
        context.restore();
    };
    ReplayGroupCustom.prototype.getReplayCustom = function (zIndex, replayType) {
        var zIndexKey = zIndex !== undefined ? zIndex.toString() : "0";
        var replays = this.replaysByZIndex_[zIndexKey];
        if (replays === undefined) {
            replays = {};
            this.replaysByZIndex_[zIndexKey] = replays;
        }
        var replay = replays[replayType];
        if (replay === undefined) {
            var Constructor = this.BATCH_CONSTRUCTORS_[replayType];
            replay = new Constructor(this.tolerance_, this.maxExtent_, this.resolution_, this.pixelRatio_, this.overlaps_, this.declutterTree_);
            replays[replayType] = replay;
        }
        return replay;
    };
    return ReplayGroupCustom;
}(ol.render.canvas.ReplayGroup));



/***/ }),

/***/ "./src/render/textReplayCustom.ts":
/*!****************************************!*\
  !*** ./src/render/textReplayCustom.ts ***!
  \****************************************/
/*! exports provided: TextReplayCustom */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextReplayCustom", function() { return TextReplayCustom; });
/* harmony import */ var _style_textLabelingStrategy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../style/textLabelingStrategy */ "./src/style/textLabelingStrategy.ts");
/* harmony import */ var _style_detectTextLabelingStrategy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../style/detectTextLabelingStrategy */ "./src/style/detectTextLabelingStrategy.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var TextReplayCustom = /** @class */ (function (_super) {
    __extends(TextReplayCustom, _super);
    function TextReplayCustom(tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {
        var _this = _super.call(this, tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) || this;
        _this.renderDeclutterChar_ = function (declutterGroup, feature) {
            if (declutterGroup && declutterGroup.length > 5) {
                var groupCount = declutterGroup[4];
                if (groupCount == 1 || groupCount == declutterGroup.length - 5) {
                    /** @type {ol.RBushEntry} */
                    var box = {
                        minX: /** @type {number} */ (declutterGroup[0]),
                        minY: /** @type {number} */ (declutterGroup[1]),
                        maxX: /** @type {number} */ (declutterGroup[2]),
                        maxY: /** @type {number} */ (declutterGroup[3]),
                        value: feature
                    };
                    if (!this.declutterTree.collides(box)) {
                        this.declutterTree.insert(box);
                        var drawImage = ol.render.canvas.drawImage;
                        for (var j = 5, jj = declutterGroup.length; j < jj; ++j) {
                            var declutterData = /** @type {Array} */ (declutterGroup[j]);
                            if (declutterData) {
                                if (declutterData.length > 11) {
                                    this.replayTextBackground_(declutterData[0], declutterData[13], declutterData[14], declutterData[15], declutterData[16], declutterData[11], declutterData[12]);
                                }
                                var labelInfo = declutterData[3];
                                var labelImage = this.getImage(labelInfo["text"], labelInfo["textKey"], labelInfo["fillKey"], labelInfo["strokeKey"]);
                                declutterData[3] = labelImage;
                                drawImage.apply(undefined, declutterData);
                            }
                        }
                    }
                    declutterGroup.length = 5;
                    ol.extent.createOrUpdateEmpty(declutterGroup);
                }
            }
        };
        _this.BATCH_CONSTRUCTORS_CUSTOM = {
            "Point": _style_detectTextLabelingStrategy__WEBPACK_IMPORTED_MODULE_1__["DetectTextLabelingStrategy"],
            "MultiPoint": _style_textLabelingStrategy__WEBPACK_IMPORTED_MODULE_0__["TextLabelingStrategy"],
            "LineString": _style_textLabelingStrategy__WEBPACK_IMPORTED_MODULE_0__["TextLabelingStrategy"],
            "Circle": _style_textLabelingStrategy__WEBPACK_IMPORTED_MODULE_0__["TextLabelingStrategy"],
            "MultiLineString": _style_textLabelingStrategy__WEBPACK_IMPORTED_MODULE_0__["TextLabelingStrategy"],
            "Polygon": _style_textLabelingStrategy__WEBPACK_IMPORTED_MODULE_0__["TextLabelingStrategy"],
            "MultiPolygon": _style_textLabelingStrategy__WEBPACK_IMPORTED_MODULE_0__["TextLabelingStrategy"]
        };
        _this.drawText = _this.drawTextCustom;
        _this.setTextStyle = _this.setTextStyleCustom;
        _this.replay_ = _this.replayCustom;
        _this.labelInfoCache = new ol.structs.LRUCache();
        return _this;
    }
    TextReplayCustom.prototype.replayCustom = function (context, transform, skippedFeaturesHash, instructions, featureCallback, opt_hitExtent) {
        /** @type {Array.<number>} */
        var pixelExten;
        pixelExten = ol.geom.flat.transform.transform2D(this.maxExtent, 0, this.maxExtent.length, 2, transform, this["pixelExten"]);
        var pixelCoordinates;
        if (this.pixelCoordinates_ && ol.array.equals(transform, this.renderedTransform_)) {
            pixelCoordinates = this.pixelCoordinates_;
        }
        else {
            if (!this.pixelCoordinates_) {
                this.pixelCoordinates_ = [];
            }
            pixelCoordinates = ol.geom.flat.transform.transform2D(this.coordinates, 0, this.coordinates.length, 2, transform, this.pixelCoordinates_);
            ol.transform.setFromArray(this.renderedTransform_, transform);
        }
        var quickZoom = false;
        if (context["quickZoom"] !== undefined) {
            quickZoom = context["quickZoom"];
        }
        var skipFeatures = !ol.obj.isEmpty(skippedFeaturesHash);
        var i = 0; // instruction index
        var ii = instructions.length; // end of instructions
        var d = 0; // data index
        var dd; // end of per-instruction data
        var anchorX, anchorY, prevX, prevY, roundX, roundY, declutterGroup, image;
        var pendingFill = 0;
        var pendingStroke = 0;
        var lastFillInstruction = null;
        var lastStrokeInstruction = null;
        var coordinateCache = this.coordinateCache_;
        var viewRotation = this.viewRotation_;
        var state = /** @type {olx.render.State} */ ({
            context: context,
            pixelRatio: this.pixelRatio,
            resolution: this.resolution,
            rotation: viewRotation
        });
        // When the batch size gets too big, performance decreases. 200 is a good
        // balance between batch size and number of fill/stroke instructions.
        var batchSize = this.instructions !== instructions || this.overlaps ? 0 : 200;
        var currentResolution = context["currentResolution"];
        var ratio = window.devicePixelRatio * 1.194328566955879 / currentResolution;
        if (ratio >= 3) {
            ratio /= 2;
        }
        while (i < ii) {
            var instruction = instructions[i];
            var type = /** @type {ol.render.canvas.Instruction} */ (instruction[0]);
            var /** @type {ol.Feature|ol.render.Feature} */ feature = void 0, x = void 0, y = void 0;
            switch (type) {
                case ol.render.canvas.Instruction.BEGIN_GEOMETRY:
                    feature = /** @type {ol.Feature|ol.render.Feature} */ (instruction[1]);
                    if ((skipFeatures && skippedFeaturesHash[ol.getUid(feature).toString()]) || !feature.getGeometry()) {
                        i = /** @type {number} */ (instruction[2]);
                    }
                    else if (opt_hitExtent !== undefined && !ol.extent.intersects(opt_hitExtent, feature.getGeometry().getExtent())) {
                        i = /** @type {number} */ (instruction[2]) + 1;
                    }
                    else {
                        ++i;
                    }
                    break;
                case ol.render.canvas.Instruction.BEGIN_PATH:
                    if (pendingFill > batchSize) {
                        this.fill_(context);
                        pendingFill = 0;
                    }
                    if (pendingStroke > batchSize) {
                        context.stroke();
                        pendingStroke = 0;
                    }
                    if (!pendingFill && !pendingStroke) {
                        context.beginPath();
                        prevX = prevY = NaN;
                    }
                    ++i;
                    break;
                case ol.render.canvas.Instruction.CIRCLE:
                    d = /** @type {number} */ (instruction[1]);
                    var x1 = pixelCoordinates[d];
                    var y1 = pixelCoordinates[d + 1];
                    var x2 = pixelCoordinates[d + 2];
                    var y2 = pixelCoordinates[d + 3];
                    var dx = x2 - x1;
                    var dy = y2 - y1;
                    var r = Math.sqrt(dx * dx + dy * dy);
                    context.moveTo(x1 + r, y1);
                    context.arc(x1, y1, r, 0, 2 * Math.PI, true);
                    ++i;
                    break;
                case ol.render.canvas.Instruction.CLOSE_PATH:
                    context.closePath();
                    ++i;
                    break;
                case ol.render.canvas.Instruction.CUSTOM:
                    d = /** @type {number} */ (instruction[1]);
                    dd = instruction[2];
                    var geometry = /** @type {ol.geom.SimpleGeometry} */ (instruction[3]);
                    var renderer = instruction[4];
                    var fn = instruction.length === 6 ? instruction[5] : undefined;
                    state.geometry = geometry;
                    state.feature = feature;
                    if (!(i in coordinateCache)) {
                        coordinateCache[i] = [];
                    }
                    var coords = coordinateCache[i];
                    if (fn) {
                        fn(pixelCoordinates, d, dd, 2, coords);
                    }
                    else {
                        coords[0] = pixelCoordinates[d];
                        coords[1] = pixelCoordinates[d + 1];
                        coords.length = 2;
                    }
                    renderer(coords, state);
                    ++i;
                    break;
                case ol.render.canvas.Instruction.DRAW_IMAGE:
                    d = /** @type {number} */ (instruction[1]);
                    dd = /** @type {number} */ (instruction[2]);
                    image = /** @type {HTMLCanvasElement|HTMLVideoElement|Image} */ (instruction[3]);
                    // Remaining arguments in DRAW_IMAGE are in alphabetical order
                    anchorX = /** @type {number} */ (instruction[4]);
                    anchorY = /** @type {number} */ (instruction[5]);
                    declutterGroup = featureCallback ? null : /** @type {ol.DeclutterGroup} */ (instruction[6]);
                    var height = /** @type {number} */ (instruction[7]);
                    var opacity = /** @type {number} */ (instruction[8]);
                    var originX = /** @type {number} */ (instruction[9]);
                    var originY = /** @type {number} */ (instruction[10]);
                    var rotateWithView = /** @type {boolean} */ (instruction[11]);
                    var rotation = /** @type {number} */ (instruction[12]);
                    var scale = /** @type {number} */ (instruction[13]);
                    var snapToPixel = /** @type {boolean} */ (instruction[14]);
                    var width = /** @type {number} */ (instruction[15]);
                    var padding = void 0, backgroundFill = void 0, backgroundStroke = void 0;
                    if (instruction.length > 16) {
                        padding = /** @type {Array.<number>} */ (instruction[16]);
                        backgroundFill = /** @type {boolean} */ (instruction[17]);
                        backgroundStroke = /** @type {boolean} */ (instruction[18]);
                    }
                    else {
                        padding = ol.render.canvas.defaultPadding;
                        backgroundFill = backgroundStroke = false;
                    }
                    if (rotateWithView) {
                        rotation += viewRotation;
                    }
                    for (; d < dd; d += 2) {
                        this.replayImage_(context, pixelCoordinates[d], pixelCoordinates[d + 1], image, anchorX, anchorY, declutterGroup, height, opacity, originX, originY, rotation, scale, snapToPixel, width, padding, backgroundFill ? /** @type {Array.<*>} */ (lastFillInstruction) : null, backgroundStroke ? /** @type {Array.<*>} */ (lastStrokeInstruction) : null);
                    }
                    this.renderDeclutter_(declutterGroup, feature);
                    ++i;
                    break;
                case ol.render.canvas.Instruction.DRAW_CHARS:
                    if (!quickZoom) {
                        var begin = /** @type {number} */ (instruction[1]);
                        var end = /** @type {number} */ (instruction[2]);
                        var baseline = /** @type {number} */ (instruction[3]);
                        declutterGroup = featureCallback ? null : /** @type {ol.DeclutterGroup} */ (instruction[4]);
                        var overflow = /** @type {number} */ (instruction[5]);
                        var fillKey = /** @type {string} */ (instruction[6]);
                        var maxAngle = /** @type {number} */ (instruction[7]);
                        var measure = /** @type {function(string):number} */ (instruction[8]);
                        var offsetY = /** @type {number} */ (instruction[9]);
                        var strokeKey = /** @type {string} */ (instruction[10]);
                        var strokeWidth = /** @type {number} */ (instruction[11]);
                        var text = /** @type {string} */ (instruction[12]);
                        var textKey = /** @type {string} */ (instruction[13]);
                        var textScale = /** @type {number} */ (instruction[14]);
                        var declutterGroups = [];
                        var pathLength = ol.geom.flat.length.lineString(pixelCoordinates, begin, end, 2);
                        var textLength = measure(text);
                        if (overflow || textLength * 1.2 <= pathLength) {
                            // The original logical is create label image --> declutterGroup --> draw label image to context
                            // The newest logical is  create label info and create image instruction --> declutterGroup --> create label image --> draw label image to context
                            var labelInstructions = [];
                            var labelIndex = 0;
                            if (currentResolution < 1) {
                                var distance = 180 * ratio;
                                var tmpLength = pathLength - textLength;
                                var centerPoint = tmpLength / 2;
                                var leftPoint = centerPoint;
                                var rightPoint = centerPoint;
                                var pointArray = [];
                                pointArray.push(centerPoint);
                                while (leftPoint > ((textLength / 2) + distance)) {
                                    leftPoint = leftPoint - distance;
                                    pointArray.push(leftPoint);
                                }
                                while (rightPoint < ((pathLength - textLength / 2) - distance)) {
                                    rightPoint = rightPoint + distance;
                                    pointArray.push(rightPoint);
                                }
                                for (var len = 0; len < pointArray.length; len++) {
                                    var tempDeclutterGroup = void 0;
                                    if (declutterGroup) {
                                        tempDeclutterGroup = featureCallback ? null : declutterGroup.slice(0);
                                    }
                                    var startM = pointArray[len];
                                    var parts = ol.geom.flat.textpath.lineString(pixelCoordinates, begin, end, 2, text, measure, startM, maxAngle);
                                    if (parts) {
                                        var c = void 0, cc = void 0, chars = void 0, label = void 0, part = void 0;
                                        if (strokeKey) {
                                            for (c = 0, cc = parts.length; c < cc; ++c) {
                                                part = parts[c]; // x, y, anchorX, rotation, chunk
                                                chars = /** @type {string} */ (part[4]);
                                                var labelInfo = undefined;
                                                if (tempDeclutterGroup) {
                                                    labelInfo = this.getImageInfo(chars, textKey, "", strokeKey);
                                                    labelInstructions[labelIndex] = {
                                                        chars: chars,
                                                        textKey: textKey,
                                                        fillKey: fillKey,
                                                        strokeKey: ""
                                                    };
                                                    labelIndex += 1;
                                                }
                                                else {
                                                    labelInfo = /** @type {ol.render.canvas.TextReplay} */ (this).getImage(chars, textKey, "", strokeKey);
                                                }
                                                anchorX = /** @type {number} */ (part[2]) + strokeWidth;
                                                anchorY = baseline * labelInfo["height"] + (0.5 - baseline) * 2 * strokeWidth - offsetY;
                                                this.replayImage_(context, /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), labelInfo, anchorX, anchorY, tempDeclutterGroup, labelInfo["height"], 1, 0, 0, /** @type {number} */ (part[3]), textScale, false, labelInfo["width"], ol.render.canvas.defaultPadding, null, null);
                                            }
                                        }
                                        if (fillKey) {
                                            for (c = 0, cc = parts.length; c < cc; ++c) {
                                                part = parts[c]; // x, y, anchorX, rotation, chunk
                                                chars = /** @type {string} */ (part[4]);
                                                var labelInfo = undefined;
                                                if (tempDeclutterGroup) {
                                                    labelInfo = this.getImageInfo(chars, textKey, fillKey, "");
                                                    labelInstructions[labelIndex] = {
                                                        chars: chars,
                                                        textKey: textKey,
                                                        fillKey: fillKey,
                                                        strokeKey: ""
                                                    };
                                                    labelIndex += 1;
                                                }
                                                else {
                                                    labelInfo = /** @type {ol.render.canvas.TextReplay} */ (this).getImage(chars, textKey, fillKey, "");
                                                }
                                                anchorX = /** @type {number} */ (part[2]);
                                                anchorY = baseline * labelInfo["height"] - offsetY;
                                                this.replayImage_(context, /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), labelInfo, anchorX, anchorY, tempDeclutterGroup, labelInfo["height"], 1, 0, 0, /** @type {number} */ (part[3]), textScale, false, labelInfo["width"], ol.render.canvas.defaultPadding, null, null);
                                            }
                                        }
                                        declutterGroups.push(tempDeclutterGroup);
                                    }
                                }
                            }
                            else {
                                var tempDeclutterGroup = void 0;
                                if (declutterGroup) {
                                    tempDeclutterGroup = featureCallback ? null : declutterGroup.slice(0);
                                }
                                var textAlign = /** @type {ol.render.canvas.TextReplay} */ (this).textStates[textKey].textAlign;
                                var startM_1 = (pathLength - textLength) * ol.render.replay.TEXT_ALIGN[textAlign];
                                var parts = ol.geom.flat.textpath.lineString(pixelCoordinates, begin, end, 2, text, measure, startM_1, maxAngle);
                                if (parts) {
                                    var c = void 0, cc = void 0, chars = void 0, label = void 0, part = void 0;
                                    if (strokeKey) {
                                        for (c = 0, cc = parts.length; c < cc; ++c) {
                                            part = parts[c]; // x, y, anchorX, rotation, chunk
                                            chars = /** @type {string} */ (part[4]);
                                            var labelInfo = undefined;
                                            if (tempDeclutterGroup) {
                                                labelInfo = this.getImageInfo(chars, textKey, "", strokeKey);
                                                labelInstructions[labelIndex] = {
                                                    chars: chars,
                                                    textKey: textKey,
                                                    fillKey: fillKey,
                                                    strokeKey: ""
                                                };
                                                labelIndex += 1;
                                            }
                                            else {
                                                labelInfo = /** @type {ol.render.canvas.TextReplay} */ (this).getImage(chars, textKey, "", strokeKey);
                                            }
                                            // label = /** @type {ol.render.canvas.TextReplay} */ (this).getImage(chars, textKey, "", strokeKey);
                                            anchorX = /** @type {number} */ (part[2]) + strokeWidth;
                                            anchorY = baseline * labelInfo["height"] + (0.5 - baseline) * 2 * strokeWidth - offsetY;
                                            this.replayImage_(context, /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), labelInfo, anchorX, anchorY, tempDeclutterGroup, labelInfo["height"], 1, 0, 0, /** @type {number} */ (part[3]), textScale, false, labelInfo["width"], ol.render.canvas.defaultPadding, null, null);
                                        }
                                    }
                                    if (fillKey) {
                                        for (c = 0, cc = parts.length; c < cc; ++c) {
                                            part = parts[c]; // x, y, anchorX, rotation, chunk
                                            chars = /** @type {string} */ (part[4]);
                                            var labelInfo = undefined;
                                            if (tempDeclutterGroup) {
                                                labelInfo = this.getImageInfo(chars, textKey, fillKey, "");
                                                labelInstructions[labelIndex] = {
                                                    chars: chars,
                                                    textKey: textKey,
                                                    fillKey: fillKey,
                                                    strokeKey: ""
                                                };
                                                labelIndex += 1;
                                            }
                                            else {
                                                labelInfo = /** @type {ol.render.canvas.TextReplay} */ (this).getImage(chars, textKey, fillKey, "");
                                            }
                                            anchorX = /** @type {number} */ (part[2]);
                                            anchorY = baseline * labelInfo["height"] - offsetY;
                                            this.replayImage_(context, /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), labelInfo, anchorX, anchorY, tempDeclutterGroup, labelInfo["height"], 1, 0, 0, /** @type {number} */ (part[3]), textScale, false, labelInfo["width"], ol.render.canvas.defaultPadding, null, null);
                                        }
                                    }
                                    declutterGroups.push(tempDeclutterGroup);
                                }
                            }
                        }
                        for (var d_1 = 0; d_1 < declutterGroups.length; d_1++) {
                            var targetDeclutterGroup = declutterGroups[d_1];
                            if (targetDeclutterGroup && targetDeclutterGroup.length > 5) {
                                var targetExtent = [targetDeclutterGroup[0], targetDeclutterGroup[1], targetDeclutterGroup[2], targetDeclutterGroup[3]];
                                if (targetExtent[0] > pixelExten[0] && targetExtent[1] > pixelExten[3] && targetExtent[2] < pixelExten[2] && targetExtent[3] < pixelExten[1]) {
                                    this.renderDeclutterChar_(targetDeclutterGroup, feature);
                                }
                            }
                        }
                    }
                    ++i;
                    break;
                case ol.render.canvas.Instruction.END_GEOMETRY:
                    if (featureCallback !== undefined) {
                        feature = /** @type {ol.Feature|ol.render.Feature} */ (instruction[1]);
                        var result = featureCallback(feature);
                        if (result) {
                            return result;
                        }
                    }
                    ++i;
                    break;
                case ol.render.canvas.Instruction.FILL:
                    if (batchSize) {
                        pendingFill++;
                    }
                    else {
                        this.fill_(context);
                    }
                    ++i;
                    break;
                case ol.render.canvas.Instruction.MOVE_TO_LINE_TO:
                    d = /** @type {number} */ (instruction[1]);
                    dd = /** @type {number} */ (instruction[2]);
                    x = pixelCoordinates[d];
                    y = pixelCoordinates[d + 1];
                    roundX = (x + 0.5) | 0;
                    roundY = (y + 0.5) | 0;
                    if (roundX !== prevX || roundY !== prevY) {
                        context.moveTo(x, y);
                        prevX = roundX;
                        prevY = roundY;
                    }
                    for (d += 2; d < dd; d += 2) {
                        x = pixelCoordinates[d];
                        y = pixelCoordinates[d + 1];
                        roundX = (x + 0.5) | 0;
                        roundY = (y + 0.5) | 0;
                        if (d === dd - 2 || roundX !== prevX || roundY !== prevY) {
                            context.lineTo(x, y);
                            prevX = roundX;
                            prevY = roundY;
                        }
                    }
                    ++i;
                    break;
                case ol.render.canvas.Instruction.SET_FILL_STYLE:
                    lastFillInstruction = instruction;
                    this.fillOrigin_ = instruction[2];
                    if (pendingFill) {
                        this.fill_(context);
                        pendingFill = 0;
                        if (pendingStroke) {
                            context.stroke();
                            pendingStroke = 0;
                        }
                    }
                    context.fillStyle = /** @type {ol.ColorLike} */ (instruction[1]);
                    ++i;
                    break;
                case ol.render.canvas.Instruction.SET_STROKE_STYLE:
                    lastStrokeInstruction = instruction;
                    if (pendingStroke) {
                        context.stroke();
                        pendingStroke = 0;
                    }
                    this.setStrokeStyle_(context, /** @type {Array.<*>} */ (instruction));
                    ++i;
                    break;
                case ol.render.canvas.Instruction.STROKE:
                    if (batchSize) {
                        pendingStroke++;
                    }
                    else {
                        context.stroke();
                    }
                    ++i;
                    break;
                default:
                    ++i; // consume the instruction anyway, to avoid an infinite loop
                    break;
            }
        }
        if (pendingFill) {
            this.fill_(context);
        }
        if (pendingStroke) {
            context.stroke();
        }
        return undefined;
    };
    TextReplayCustom.prototype.replayImage_ = function (context, x, y, labelInfo, anchorX, anchorY, declutterGroup, height, opacity, originX, originY, rotation, scale, snapToPixel, width, padding, fillInstruction, strokeInstruction) {
        var fillStroke = fillInstruction || strokeInstruction;
        var localTransform = this.tmpLocalTransform_;
        anchorX *= scale;
        anchorY *= scale;
        x -= anchorX;
        y -= anchorY;
        if (snapToPixel) {
            x = Math.ceil(x);
            y = Math.ceil(y);
        }
        var w = (width + originX > labelInfo.width) ? labelInfo.width - originX : width;
        var h = (height + originY > labelInfo.height) ? labelInfo.height - originY : height;
        var box = this.tmpExtent_;
        var boxW = padding[3] + w * scale + padding[1];
        var boxH = padding[0] + h * scale + padding[2];
        var boxX = x - padding[3];
        var boxY = y - padding[0];
        /** @type {ol.Coordinate} */
        var p1;
        /** @type {ol.Coordinate} */
        var p2;
        /** @type {ol.Coordinate} */
        var p3;
        /** @type {ol.Coordinate} */
        var p4;
        if (fillStroke || rotation !== 0) {
            p1 = [boxX, boxY];
            p2 = [boxX + boxW, boxY];
            p3 = [boxX + boxW, boxY + boxH];
            p4 = [boxX, boxY + boxH];
        }
        var transform = null;
        if (rotation !== 0) {
            var centerX = x + anchorX;
            var centerY = y + anchorY;
            transform = ol.transform.compose(localTransform, centerX, centerY, 1, 1, rotation, -centerX, -centerY);
            ol.extent.createOrUpdateEmpty(box);
            ol.extent.extendCoordinate(box, ol.transform.apply(localTransform, p1));
            ol.extent.extendCoordinate(box, ol.transform.apply(localTransform, p2));
            ol.extent.extendCoordinate(box, ol.transform.apply(localTransform, p3));
            ol.extent.extendCoordinate(box, ol.transform.apply(localTransform, p4));
        }
        else {
            ol.extent.createOrUpdate(boxX, boxY, boxX + boxW, boxY + boxH, box);
        }
        var canvas = context.canvas;
        var intersects = box[0] <= canvas.width && box[2] >= 0 && box[1] <= canvas.height && box[3] >= 0;
        if (declutterGroup) {
            if (!intersects && declutterGroup[4] == 1) {
                return;
            }
            ol.extent.extend(declutterGroup, box);
            var declutterArgs = intersects ?
                [context, transform ? transform.slice(0) : null, opacity, labelInfo, originX, originY, w, h, x, y, scale] :
                null;
            if (declutterArgs && fillStroke) {
                declutterArgs.push(fillInstruction, strokeInstruction, p1, p2, p3, p4);
            }
            declutterGroup.push(declutterArgs);
        }
        else if (intersects) {
            if (fillStroke) {
                this.replayTextBackground_(context, p1, p2, p3, p4, 
                /** @type {Array.<*>} */ (fillInstruction), 
                /** @type {Array.<*>} */ (strokeInstruction));
            }
            ol.render.canvas.drawImage(context, transform, opacity, labelInfo, originX, originY, w, h, x, y, scale);
        }
    };
    ;
    // Get the image info, such as width, height
    TextReplayCustom.prototype.getImageInfo = function (text, textKey, fillKey, strokeKey) {
        var labelInfo = {};
        labelInfo["text"] = text;
        labelInfo["textKey"] = textKey;
        labelInfo["fillKey"] = fillKey;
        labelInfo["strokeKey"] = strokeKey;
        var label;
        var key = strokeKey + textKey + text + fillKey + this.pixelRatio;
        if (!this.labelInfoCache.containsKey(key)) {
            var strokeState = strokeKey ? this.strokeStates[strokeKey] || this.textStrokeState_ : null;
            var fillState = fillKey ? this.fillStates[fillKey] || this.textFillState_ : null;
            var textState = this.textStates[textKey] || this.textState_;
            var pixelRatio = this.pixelRatio;
            var scale = textState.scale * pixelRatio;
            var align = ol.render.replay.TEXT_ALIGN[textState.textAlign || ol.render.canvas.defaultTextAlign];
            var strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;
            var lines = text.split('\n');
            var numLines = lines.length;
            var widths = [];
            var width = ol.render.canvas.TextReplay.measureTextWidths(textState.font, lines, widths);
            var lineHeight = textState.lineHeight;
            var height = lineHeight * numLines;
            var renderWidth = (width + strokeWidth);
            labelInfo["width"] = Math.ceil(renderWidth * scale);
            labelInfo["widths"] = widths;
            labelInfo["height"] = Math.ceil((height + strokeWidth) * scale);
            this.labelInfoCache.set(key, labelInfo);
            return labelInfo;
        }
        return this.labelInfoCache.get(key);
    };
    TextReplayCustom.prototype.getImage = function (text, textKey, fillKey, strokeKey) {
        var label;
        var key = strokeKey + textKey + text + fillKey + this.pixelRatio;
        var labelCache = ol.render.canvas.labelCache;
        if (!labelCache.containsKey(key)) {
            var labelInfo = this.labelInfoCache["key"];
            var strokeState = strokeKey ? this.strokeStates[strokeKey] || this.textStrokeState_ : null;
            var fillState = fillKey ? this.fillStates[fillKey] || this.textFillState_ : null;
            var textState = this.textStates[textKey] || this.textState_;
            var pixelRatio = this.pixelRatio;
            var scale = textState.scale * pixelRatio;
            var align = ol.render.replay.TEXT_ALIGN[textState.textAlign || ol.render.canvas.defaultTextAlign];
            var strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;
            var lines = text.split('\n');
            var numLines = lines.length;
            var widths = [];
            var width;
            var lineHeight;
            if (labelInfo) {
                width = labelInfo["width"];
            }
            else {
                width = ol.render.canvas.TextReplay.measureTextWidths(textState.font, lines, widths);
            }
            var lineHeight = textState["lineHeight"];
            var height = lineHeight * numLines;
            var renderWidth = (width + strokeWidth);
            var context = ol.dom.createCanvasContext2D(Math.ceil(renderWidth * scale), Math.ceil((height + strokeWidth) * scale));
            label = context.canvas;
            labelCache.set(key, label);
            if (scale != 1) {
                context.scale(scale, scale);
            }
            context.font = textState.font;
            if (strokeKey) {
                context.strokeStyle = strokeState.strokeStyle;
                context.lineWidth = strokeWidth * (ol.has.SAFARI ? scale : 1);
                context.lineCap = strokeState.lineCap;
                context.lineJoin = strokeState.lineJoin;
                context.miterLimit = strokeState.miterLimit;
                if (ol.has.CANVAS_LINE_DASH && strokeState.lineDash.length) {
                    context.setLineDash(strokeState.lineDash);
                    context.lineDashOffset = strokeState.lineDashOffset;
                }
            }
            if (fillKey) {
                context.fillStyle = fillState.fillStyle;
            }
            context.textBaseline = 'middle';
            context.textAlign = 'center';
            var leftRight = (0.5 - align);
            var x = align * label.width / scale + leftRight * strokeWidth;
            var i;
            if (strokeKey) {
                for (i = 0; i < numLines; ++i) {
                    context.strokeText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);
                }
            }
            if (fillKey) {
                for (i = 0; i < numLines; ++i) {
                    context.fillText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);
                }
            }
        }
        return labelCache.get(key);
    };
    ;
    TextReplayCustom.prototype.drawChars_ = function (begin, end, declutterGroup) {
        var strokeState = this.textStrokeState_;
        var textState = this.textState_;
        var fillState = this.textFillState_;
        var strokeKey = this.strokeKey_;
        if (strokeState) {
            if (!(strokeKey in this.strokeStates)) {
                this.strokeStates[strokeKey] = /** @type {ol.CanvasStrokeState} */ ({
                    strokeStyle: strokeState.strokeStyle,
                    lineCap: strokeState.lineCap,
                    lineDashOffset: strokeState.lineDashOffset,
                    lineWidth: strokeState.lineWidth,
                    lineJoin: strokeState.lineJoin,
                    miterLimit: strokeState.miterLimit,
                    lineDash: strokeState.lineDash
                });
            }
        }
        var textKey = this.textKey_;
        if (!(this.textKey_ in this.textStates)) {
            this.textStates[this.textKey_] = /** @type {ol.CanvasTextState} */ ({
                font: textState.font,
                lineHeight: ol.render.canvas.measureTextHeight(textState.font),
                textAlign: textState.textAlign || ol.render.canvas.defaultTextAlign,
                scale: textState.scale
            });
        }
        var fillKey = this.fillKey_;
        if (fillState) {
            if (!(fillKey in this.fillStates)) {
                this.fillStates[fillKey] = /** @type {ol.CanvasFillState} */ ({
                    fillStyle: fillState.fillStyle
                });
            }
        }
        var pixelRatio = this.pixelRatio;
        var baseline = ol.render.replay.TEXT_ALIGN[textState.textBaseline];
        var offsetY = this.textOffsetY_ * pixelRatio;
        var text = this.text_;
        var font = textState.font;
        var textScale = textState.scale;
        var strokeWidth = strokeState ? strokeState.lineWidth * textScale / 2 : 0;
        var widths = this.widths_[font];
        if (!widths) {
            this.widths_[font] = widths = {};
        }
        this.instructions.push([ol.render.canvas.Instruction.DRAW_CHARS,
            begin, end, baseline, declutterGroup,
            textState.overflow, fillKey, textState.maxAngle,
            function (text) {
                var width = widths[text];
                if (!width) {
                    width = widths[text] = ol.render.canvas.measureTextWidth(font, text);
                }
                return width * textScale * pixelRatio;
            },
            offsetY, strokeKey, strokeWidth * pixelRatio, text, textKey, 1
        ]);
        this.hitDetectionInstructions.push([ol.render.canvas.Instruction.DRAW_CHARS,
            begin, end, baseline, declutterGroup,
            textState.overflow, fillKey, textState.maxAngle,
            function (text) {
                var width = widths[text];
                if (!width) {
                    width = widths[text] = ol.render.canvas.measureTextWidth(font, text);
                }
                return width * textScale;
            },
            offsetY, strokeKey, strokeWidth, text, textKey, 1 / pixelRatio
        ]);
    };
    ;
    TextReplayCustom.prototype.setTextStyleCustom = function (textStyle, declutterGroup) {
        var textState, fillState, strokeState;
        if (!textStyle) {
            this.text_ = "";
        }
        else {
            this.declutterGroup_ = /** @type {ol.DeclutterGroup} */ (declutterGroup);
            var textFillStyle = textStyle.getFill();
            if (!textFillStyle) {
                fillState = this.textFillState_ = null;
            }
            else {
                fillState = this.textFillState_;
                if (!fillState) {
                    fillState = this.textFillState_ = /** @type {ol.CanvasFillState} */ ({});
                }
                fillState.fillStyle = ol.colorlike.asColorLike(textFillStyle.getColor() || ol.render.canvas.defaultFillStyle);
            }
            var textStrokeStyle = textStyle.getStroke();
            if (!textStrokeStyle) {
                strokeState = this.textStrokeState_ = null;
            }
            else {
                strokeState = this.textStrokeState_;
                if (!strokeState) {
                    strokeState = this.textStrokeState_ = /** @type {ol.CanvasStrokeState} */ ({});
                }
                var lineDash = textStrokeStyle.getLineDash();
                var lineDashOffset = textStrokeStyle.getLineDashOffset();
                var lineWidth = textStrokeStyle.getWidth();
                var miterLimit = textStrokeStyle.getMiterLimit();
                strokeState.lineCap = textStrokeStyle.getLineCap() || ol.render.canvas.defaultLineCap;
                strokeState.lineDash = lineDash ? lineDash.slice() : ol.render.canvas.defaultLineDash;
                strokeState.lineDashOffset =
                    lineDashOffset === undefined ? ol.render.canvas.defaultLineDashOffset : lineDashOffset;
                strokeState.lineJoin = textStrokeStyle.getLineJoin() || ol.render.canvas.defaultLineJoin;
                strokeState.lineWidth =
                    lineWidth === undefined ? ol.render.canvas.defaultLineWidth : lineWidth;
                strokeState.miterLimit =
                    miterLimit === undefined ? ol.render.canvas.defaultMiterLimit : miterLimit;
                strokeState.strokeStyle = ol.colorlike.asColorLike(textStrokeStyle.getColor() || ol.render.canvas.defaultStrokeStyle);
            }
            textState = this.textState_;
            var font = textStyle.getFont() || ol.render.canvas.defaultFont;
            ol.render.canvas.checkFont(font);
            var textScale = textStyle.getScale();
            textState.overflow = textStyle.getOverflow();
            textState.font = font;
            textState.maxAngle = textStyle.getMaxAngle();
            textState.placement = textStyle.getPlacement();
            textState.textAlign = textStyle.getTextAlign();
            textState.textBaseline = textStyle.getTextBaseline() || ol.render.canvas.defaultTextBaseline;
            textState.backgroundFill = textStyle.getBackgroundFill();
            textState.backgroundStroke = textStyle.getBackgroundStroke();
            textState.padding = textStyle.getPadding() || ol.render.canvas.defaultPadding;
            textState.scale = textScale === undefined ? 1 : textScale;
            var textOffsetX = textStyle.getOffsetX();
            var textOffsetY = textStyle.getOffsetY();
            var textRotateWithView = textStyle.getRotateWithView();
            var textRotation = textStyle.getRotation();
            this.text_ = textStyle.getText() || "";
            this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;
            this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;
            this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;
            this.textRotation_ = textRotation === undefined ? 0 : textRotation;
            this.strokeKey_ = strokeState ?
                (typeof strokeState.strokeStyle === "string" ? strokeState.strokeStyle : ol.getUid(strokeState.strokeStyle)) +
                    strokeState.lineCap + strokeState.lineDashOffset + "|" + strokeState.lineWidth +
                    strokeState.lineJoin + strokeState.miterLimit + "[" + strokeState.lineDash.join() + "]" :
                "";
            this.textKey_ = textState.font + textState.scale + (textState.textAlign || "?");
            this.fillKey_ = fillState ?
                (typeof fillState.fillStyle === "string" ? fillState.fillStyle : ("|" + ol.getUid(fillState.fillStyle))) :
                "";
            this.label = textStyle.label;
            this.labelPosition = textStyle.labelPosition;
        }
    };
    TextReplayCustom.prototype.drawTextCustom = function (geometry, feature) {
        var fillState = this.textFillState_;
        var strokeState = this.textStrokeState_;
        var textState = this.textState_;
        var geometryType = geometry.getType();
        if (this.text_ === "" || !textState || (!fillState && !strokeState)) {
            return;
        }
        if (this.labelPosition === undefined) {
            return;
        }
        if ((geometryType === ol.geom.GeometryType.LINE_STRING || geometryType === ol.geom.GeometryType.MULTI_LINE_STRING) && !this.label) {
            var begin_1 = this.coordinates.length;
            var geometryType_1 = geometry.getType();
            var flatCoordinates_1 = this.labelPosition;
            var end_1 = 2;
            var stride_1 = 2;
            var i = void 0, ii = void 0;
            // if (!ol.extent.intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {
            //     return;
            // }
            var ends = void 0;
            // flatCoordinates = geometry.getFlatCoordinates();
            stride_1 = geometry.getStride();
            if (geometryType_1 === ol.geom.GeometryType.LINE_STRING) {
                ends = [flatCoordinates_1.length];
            }
            else if (geometryType_1 === ol.geom.GeometryType.MULTI_LINE_STRING) {
                ends = geometry.getEnds();
            }
            else if (geometryType_1 === ol.geom.GeometryType.POLYGON) {
                ends = geometry.getEnds().slice(0, 1);
            }
            else if (geometryType_1 === ol.geom.GeometryType.MULTI_POLYGON) {
                var endss = geometry.getEndss();
                ends = [];
                for (i = 0, ii = endss.length; i < ii; ++i) {
                    ends.push(endss[i][0]);
                }
            }
            this.beginGeometry(geometry, feature);
            var textAlign = textState.textAlign;
            var flatOffset = 0;
            var flatEnd = void 0;
            for (var o = 0, oo = ends.length; o < oo; ++o) {
                if (textAlign === undefined) {
                    var range = ol.geom.flat.straightchunk.lineString(textState.maxAngle, flatCoordinates_1, flatOffset, ends[o], stride_1);
                    flatOffset = range[0];
                    flatEnd = range[1];
                }
                else {
                    flatEnd = ends[o];
                }
                for (i = flatOffset; i < flatEnd; i += stride_1) {
                    this.coordinates.push(flatCoordinates_1[i], flatCoordinates_1[i + 1]);
                }
                end_1 = this.coordinates.length;
                flatOffset = ends[o];
                this.drawChars_(begin_1, end_1, this.declutterGroup_);
                begin_1 = end_1;
            }
            this.endGeometry(geometry, feature);
            return;
        }
        // if (this.label === undefined) { return; }
        var begin = this.coordinates.length;
        var flatCoordinates = this.labelPosition;
        var end = 2;
        var stride = 2;
        var label = this.label;
        if (geometry.getType() === ol.geom.GeometryType.POLYGON) {
            stride = 3;
        }
        end = this.appendFlatCoordinates(flatCoordinates, 0, end, stride, false, false);
        this.beginGeometry(geometry, feature);
        if (textState.backgroundFill || textState.backgroundStroke) {
            this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);
            this.updateFillStyle(this.state, this.applyFill, geometry);
            this.updateStrokeStyle(this.state, this.applyStroke);
        }
        this.drawTextImage_(label, begin, end);
        this.endGeometry(geometry, feature);
        // }
    };
    return TextReplayCustom;
}(ol.render.canvas.TextReplay));



/***/ }),

/***/ "./src/source/geoVectorTileSource.ts":
/*!*******************************************!*\
  !*** ./src/source/geoVectorTileSource.ts ***!
  \*******************************************/
/*! exports provided: GeoVectorTileSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoVectorTileSource", function() { return GeoVectorTileSource; });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GeoVectorTileSource = /** @class */ (function (_super) {
    __extends(GeoVectorTileSource, _super);
    function GeoVectorTileSource(options) {
        var _this = _super.call(this, options) || this;
        _this.maxDataZoom = options.maxDataZoom;
        if (options["tileUrlFunction"] === undefined) {
            _this.setTileUrlFunction(_this.getGeoTileUrlFunction());
        }
        _this.clientId = options.clientId;
        _this.clientSecret = options.clientSecret;
        _this.geoFormat = options.format;
        _this.tileLoadFunction = _this.vectorTileLoadFunction.bind(_this);
        _this.isMultithread = options["multithread"] === undefined ? true : options["multithread"];
        return _this;
    }
    GeoVectorTileSource.prototype.getGeoFormat = function () {
        return this.geoFormat;
    };
    GeoVectorTileSource.prototype.getGeoTileUrlFunction = function () {
        var zRegEx = /\{z\}/g;
        var xRegEx = /\{x\}/g;
        var yRegEx = /\{y\}/g;
        var dashYRegEx = /\{-y\}/g;
        var urls = this.urls;
        var tileGrid = this.tileGrid;
        var maxDataZoom = this.maxDataZoom;
        return function (tileCoord) {
            if (!tileCoord) {
                return undefined;
            }
            else {
                var requestCoord_1 = [tileCoord[0], tileCoord[1], tileCoord[2]];
                if (maxDataZoom && requestCoord_1[0] > maxDataZoom) {
                    while (requestCoord_1[0] !== maxDataZoom) {
                        requestCoord_1[0] -= 1;
                        requestCoord_1[1] = Math.floor(requestCoord_1[1] / 2);
                        requestCoord_1[2] = Math.floor(requestCoord_1[2] / 2);
                    }
                }
                var h = ol.tilecoord.hash(tileCoord);
                var index = ol.math.modulo(h, urls.length);
                var template = urls[index];
                return template.replace(zRegEx, requestCoord_1[0].toString())
                    .replace(xRegEx, requestCoord_1[1].toString())
                    .replace(yRegEx, function () {
                    var y = -requestCoord_1[2] - 1;
                    return y.toString();
                })
                    .replace(dashYRegEx, function () {
                    var z = requestCoord_1[0];
                    var range = tileGrid.getFullTileRange(z);
                    ol.asserts.assert(range, 55); // The {-y} placeholder requires a tile grid with extent
                    var y = range.getHeight() + requestCoord_1[2];
                    return y.toString();
                });
            }
        };
    };
    GeoVectorTileSource.prototype.vectorTileLoadFunction = function (tile, url) {
        var loader = this.loadFeaturesXhr(url, tile.getFormat(), tile.onLoad.bind(tile), tile.onError.bind(tile), this);
        tile.setLoader(loader);
    };
    GeoVectorTileSource.prototype.getIDAndSecret = function (self) {
        var xhr = new XMLHttpRequest();
        var url = 'https://gisserver.thinkgeo.com/api/v1/auth/token';
        var content = 'ApiKey=' + self.clientId + '&ApiSecret=' + self.clientSecret;
        xhr.open("POST", url, false);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhr.onload = function (event) {
            if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {
                var token = JSON.parse(xhr.responseText).data.access_token;
                self.token = token;
            }
        }.bind(this);
        xhr.onerror = function () {
        }.bind(this);
        xhr.send(content);
    };
    GeoVectorTileSource.prototype.loadFeaturesXhr = function (url, format, success, failure, self) {
        return (function (extent, resolution, projection) {
            var sourceTile = this;
            var maxDataZoom = format.maxDataZoom;
            var requestTileCoord = [this.tileCoord[0], this.tileCoord[1], this.tileCoord[2]];
            if (maxDataZoom && requestTileCoord[0] > maxDataZoom) {
                while (requestTileCoord[0] !== maxDataZoom) {
                    requestTileCoord[0] -= 1;
                    requestTileCoord[1] = Math.floor(requestTileCoord[1] / 2);
                    requestTileCoord[2] = Math.floor(requestTileCoord[2] / 2);
                }
            }
            this.requestTileCoord = requestTileCoord;
            var tileGrid = self.getTileGrid();
            var tileExtent = tileGrid.getTileCoordExtent(sourceTile.tileCoord);
            var tileResolution = tileGrid.getResolution(sourceTile.tileCoord[0]);
            var callback = function (tile, callbackFunction, sourceProjection, lastExtent) {
                callbackFunction.call(tile, sourceProjection, lastExtent);
            };
            var hasRequested = false;
            hasRequested = format.registerTileLoadEvent(this, success, failure, callback);
            if (!hasRequested) {
                // Client ID and Client Secret   
                if (url.indexOf('apiKey') === -1 && self.clientId && self.clientSecret && !self.token) {
                    self.getIDAndSecret(self);
                }
                if (format.isMultithread && format.workerManager) {
                    var requestInfo = {
                        url: typeof url === "function" ? url(extent, resolution, projection) : url,
                        type: format.getType(),
                        tileCoord: this.tileCoord,
                        requestCoord: requestTileCoord,
                        minimalist: format.minimalist,
                        maxDataZoom: format.maxDataZoom,
                        formatId: ol.getUid(format),
                        layerName: format.layerName,
                        token: self.token,
                        vectorTileDataCahceSize: format["vectorTileDataCahceSize"],
                        tileRange: sourceTile.tileRange,
                        // tileCoordWithSourceCoord: sourceTile.tileCoordWithSourceCoord,
                        vectorImageTileCoord: sourceTile.vectorImageTileCoord,
                        tileExtent: tileExtent,
                        tileResolution: tileResolution,
                        tileSize: this.format_.source.tileGrid.tileSize_ * sourceTile.pixelRatio
                    };
                    var loadedCallback = function (data, methodInfo) {
                        var requestKey = data.requestKey;
                        var tileLoadEventInfos = format.registeredLoadEvents[requestKey];
                        delete format.registeredLoadEvents[requestKey];
                        for (var i = 0; i < tileLoadEventInfos.length; i++) {
                            var loadEventInfo = tileLoadEventInfos[i];
                            loadEventInfo.tile.workerId = methodInfo.workerId; // Currently, we just one web worker for one layer.
                            // let tileKey = "" + loadEventInfo.tile.tileCoord[1] + "," + loadEventInfo.tile.tileCoord[2];
                            // FIXME Eric
                            if (data.status === "cancel") {
                                loadEventInfo.tile.setState(ol.TileState.CANCEL);
                            }
                            else if (data.status === "succeed") {
                                loadEventInfo.callback(loadEventInfo.tile, loadEventInfo.successFunction, format.readProjection());
                            }
                            else {
                                loadEventInfo.callback(loadEventInfo.tile, loadEventInfo.failureFunction, format.readProjection());
                            }
                        }
                    };
                    format.workerManager.postMessage(this.tileCoord + ol.getUid(loadedCallback), "request", requestInfo, loadedCallback, undefined);
                }
                else {
                    var tileCoord_1 = this.tileCoord;
                    var tile_1 = this;
                    var xhr_1 = new XMLHttpRequest();
                    xhr_1.open("GET", typeof url === "function" ? url(extent, resolution, projection) : url, true);
                    if (self.token) {
                        xhr_1.setRequestHeader('Authorization', 'Bearer ' + self.token);
                    }
                    if (format.getType() === ol.format.FormatType.ARRAY_BUFFER) {
                        xhr_1.responseType = "arraybuffer";
                    }
                    xhr_1.onload = function (event) {
                        if (!xhr_1.status || xhr_1.status >= 200 && xhr_1.status < 300) {
                            var type = format.getType();
                            /** @type {Document|Node|Object|string|undefined} */
                            var source = void 0;
                            if (type === ol.format.FormatType.JSON ||
                                type === ol.format.FormatType.TEXT) {
                                source = xhr_1.responseText;
                            }
                            else if (type === ol.format.FormatType.XML) {
                                source = xhr_1.responseXML;
                                if (!source) {
                                    source = ol.xml.parse(xhr_1.responseText);
                                }
                            }
                            else if (type === ol.format.FormatType.ARRAY_BUFFER) {
                                source = /** @type {ArrayBuffer} */ (xhr_1.response);
                            }
                            if (source) {
                                // ReadFeature
                                var data = format.readFeaturesAndCreateInstructsNew(source, requestTileCoord, tileCoord_1);
                                // Call Load Event
                                var requestKey = tile_1.requestTileCoord.join(",") + "," + tile_1.tileCoord[0];
                                var tileLoadEventInfos = format.registeredLoadEvents[requestKey];
                                delete format.registeredLoadEvents[requestKey];
                                for (var i = 0; i < tileLoadEventInfos.length; i++) {
                                    var loadEventInfo = tileLoadEventInfos[i];
                                    var tileKey = "" + loadEventInfo.tile.tileCoord[1] + "," + loadEventInfo.tile.tileCoord[2];
                                    loadEventInfo.tile.featuresAndInstructs = { features: data[0], instructs: data[1][tileKey] };
                                    loadEventInfo.callback(loadEventInfo.tile, loadEventInfo.successFunction, format.readProjection());
                                }
                            }
                            else {
                                failure.call(this);
                            }
                        }
                        else {
                            failure.call(this);
                        }
                    }.bind(this);
                    xhr_1.onerror = function () {
                        failure.call(this);
                    }.bind(this);
                    this["xhr"] = xhr_1;
                    format.source.dispatchEvent(new ol.VectorTile.Event("sendingTileRequest", xhr_1));
                    xhr_1.send();
                }
            }
        });
    };
    return GeoVectorTileSource;
}(ol.source.VectorTile));



/***/ }),

/***/ "./src/style/detectTextLabelingStrategy.ts":
/*!*************************************************!*\
  !*** ./src/style/detectTextLabelingStrategy.ts ***!
  \*************************************************/
/*! exports provided: DetectTextLabelingStrategy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DetectTextLabelingStrategy", function() { return DetectTextLabelingStrategy; });
/* harmony import */ var _textLabelingStrategy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./textLabelingStrategy */ "./src/style/textLabelingStrategy.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var DetectTextLabelingStrategy = /** @class */ (function (_super) {
    __extends(DetectTextLabelingStrategy, _super);
    function DetectTextLabelingStrategy() {
        var _this = _super.call(this) || this;
        _this.markLocationCore = _this.markLocationCoreCustom;
        return _this;
    }
    DetectTextLabelingStrategy.prototype.markLocationCoreCustom = function (flatCoordinates, width, height, resolution, geometryType, textStyle, grid, frameState) {
        switch (geometryType) {
            case ol.geom.GeometryType.POINT:
            case ol.geom.GeometryType.MULTI_POINT:
            case ol.geom.GeometryType.CIRCLE:
                if (this.isOverlapping(flatCoordinates, width, height, textStyle.margin, textStyle.minDistance, textStyle.minPadding, textStyle.spacing, grid, frameState)) {
                    flatCoordinates = this.movePointLabel(flatCoordinates, width, height, resolution, textStyle, grid, frameState);
                }
                break;
            case ol.geom.GeometryType.LINE_STRING:
            case ol.geom.GeometryType.MULTI_LINE_STRING:
            case ol.geom.GeometryType.POLYGON:
            case ol.geom.GeometryType.MULTI_POLYGON:
                if (this.isOverlapping(flatCoordinates, width, height, textStyle.margin, textStyle.minDistance, textStyle.minPadding, textStyle.spacing, grid, frameState)) {
                    flatCoordinates = undefined;
                }
        }
        return flatCoordinates;
    };
    DetectTextLabelingStrategy.prototype.movePointLabel = function (flatCoordinates, width, height, resolution, textStyle, grid, frameState) {
        var gridSize = 50;
        var distance = gridSize * resolution;
        if (textStyle.placements) {
            var placements = textStyle.placements.split(",");
            for (var _i = 0, placements_1 = placements; _i < placements_1.length; _i++) {
                var placement = placements_1[_i];
                var newFlatCoordinates = this.getMovedPosition(flatCoordinates, placement, distance);
                if (!this.isOverlapping(newFlatCoordinates, width, height, textStyle.margin, textStyle.minDistance, textStyle.minPadding, textStyle.spacing, grid, frameState)) {
                    return newFlatCoordinates;
                }
            }
        }
        return undefined;
    };
    DetectTextLabelingStrategy.prototype.getMovedPosition = function (flatCoordinates, placement, distance) {
        var newFlatCoordinates;
        switch (placement) {
            case "UR":
                newFlatCoordinates = this.moveToUR(flatCoordinates, distance);
                break;
            case "U":
                newFlatCoordinates = this.moveToU(flatCoordinates, distance);
                break;
            case "UL":
                newFlatCoordinates = this.moveToUL(flatCoordinates, distance);
                break;
            case "B":
                newFlatCoordinates = this.moveToB(flatCoordinates, distance);
                break;
            case "BR":
                newFlatCoordinates = this.moveToBR(flatCoordinates, distance);
                break;
            case "BL":
                newFlatCoordinates = this.moveToBL(flatCoordinates, distance);
                break;
            case "L":
                newFlatCoordinates = this.moveToL(flatCoordinates, distance);
                break;
            case "R":
                newFlatCoordinates = this.moveToR(flatCoordinates, distance);
                break;
        }
        return newFlatCoordinates;
    };
    DetectTextLabelingStrategy.prototype.moveToUR = function (flatCoordinates, distance) {
        var newFlatCoordinates = new Array();
        newFlatCoordinates.push(flatCoordinates[0] + distance);
        newFlatCoordinates.push(flatCoordinates[1] + distance);
        newFlatCoordinates.push(flatCoordinates[2]);
        return newFlatCoordinates;
    };
    DetectTextLabelingStrategy.prototype.moveToU = function (flatCoordinates, distance) {
        var newFlatCoordinates = new Array();
        newFlatCoordinates.push(flatCoordinates[0]);
        newFlatCoordinates.push(flatCoordinates[1] + distance);
        newFlatCoordinates.push(flatCoordinates[2]);
        return newFlatCoordinates;
    };
    DetectTextLabelingStrategy.prototype.moveToUL = function (flatCoordinates, distance) {
        var newFlatCoordinates = new Array();
        newFlatCoordinates.push(flatCoordinates[0] - distance);
        newFlatCoordinates.push(flatCoordinates[1] + distance);
        newFlatCoordinates.push(flatCoordinates[2]);
        return newFlatCoordinates;
    };
    DetectTextLabelingStrategy.prototype.moveToB = function (flatCoordinates, distance) {
        var newFlatCoordinates = new Array();
        newFlatCoordinates.push(flatCoordinates[0]);
        newFlatCoordinates.push(flatCoordinates[1] - distance);
        newFlatCoordinates.push(flatCoordinates[2]);
        return newFlatCoordinates;
    };
    DetectTextLabelingStrategy.prototype.moveToBR = function (flatCoordinates, distance) {
        var newFlatCoordinates = new Array();
        newFlatCoordinates.push(flatCoordinates[0] + distance);
        newFlatCoordinates.push(flatCoordinates[1] - distance);
        newFlatCoordinates.push(flatCoordinates[2]);
        return newFlatCoordinates;
    };
    DetectTextLabelingStrategy.prototype.moveToBL = function (flatCoordinates, distance) {
        var newFlatCoordinates = new Array();
        newFlatCoordinates.push(flatCoordinates[0] - distance);
        newFlatCoordinates.push(flatCoordinates[1] - distance);
        newFlatCoordinates.push(flatCoordinates[2]);
        return newFlatCoordinates;
    };
    DetectTextLabelingStrategy.prototype.moveToL = function (flatCoordinates, distance) {
        var newFlatCoordinates = new Array();
        newFlatCoordinates.push(flatCoordinates[0] - distance);
        newFlatCoordinates.push(flatCoordinates[1]);
        newFlatCoordinates.push(flatCoordinates[2]);
        return newFlatCoordinates;
    };
    DetectTextLabelingStrategy.prototype.moveToR = function (flatCoordinates, distance) {
        var newFlatCoordinates = new Array();
        newFlatCoordinates.push(flatCoordinates[0] + distance);
        newFlatCoordinates.push(flatCoordinates[1]);
        newFlatCoordinates.push(flatCoordinates[2]);
        return newFlatCoordinates;
    };
    return DetectTextLabelingStrategy;
}(_textLabelingStrategy__WEBPACK_IMPORTED_MODULE_0__["TextLabelingStrategy"]));



/***/ }),

/***/ "./src/style/geoAreaStyle.ts":
/*!***********************************!*\
  !*** ./src/style/geoAreaStyle.ts ***!
  \***********************************/
/*! exports provided: GeoAreaStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoAreaStyle", function() { return GeoAreaStyle; });
/* harmony import */ var _geoStyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geoStyle */ "./src/style/geoStyle.ts");
/* harmony import */ var _style_geoBrush__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../style/geoBrush */ "./src/style/geoBrush.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var GeoAreaStyle = /** @class */ (function (_super) {
    __extends(GeoAreaStyle, _super);
    function GeoAreaStyle(styleJson) {
        var _this = _super.call(this, styleJson) || this;
        if (styleJson) {
            _this.brushType = styleJson["polygon-brush-type"];
            _this.rotateAngle = styleJson["polygon-rotate-angle"];
            _this.dx = styleJson["polygon-dx"];
            _this.dy = styleJson["polygon-dy"];
            _this.fill = styleJson["polygon-fill"];
            _this.foregroundFill = styleJson["polygon-foreground-fill"];
            _this.gamma = styleJson["polygon-gamma"] ? styleJson["polygon-gamma"] : true;
            _this.geometryTransform = styleJson["polygon-geometry-transform"];
            _this.hatchStyle = styleJson["polygon-hatch-style"];
            _this.opacity = styleJson["polygon-opacity"];
            _this.outlineColor = styleJson["polygon-outline-color"];
            _this.outlineDashArray = styleJson["polygon-outline-dasharray"];
            _this.outlineOpacity = styleJson["polygon-outline-opacity"];
            _this.outlineWidth = styleJson["polygon-outline-width"];
            _this.linearGradient = styleJson["polygon-linear-gradient"];
            _this.radialGradient = styleJson["polygon-radial-gradient"];
            _this.textureFile = styleJson["polygon-texture-file"];
            _this.shadowColor = styleJson["polygon-shadow-color"];
            _this.shadowDx = styleJson["polygon-shadow-dx"];
            _this.shadowDy = styleJson["polygon-shadow-dy"];
        }
        return _this;
    }
    GeoAreaStyle.prototype.initializeCore = function () {
        this.brushType = this.brushType || "solid";
        this.brushOptions = {
            fillColor: this.fill,
            fillOpacity: this.opacity,
            linearGradient: this.linearGradient,
            radialGradient: this.radialGradient,
            textureFile: this.textureFile,
            foregroundFill: this.foregroundFill,
            hatchStyle: this.hatchStyle
        };
        if (this.geometryTransform) {
            this.geometryTransformValue = this.getTransformValues(this.geometryTransform);
        }
        if (this.brushType === "solid" || this.brushType === "hatch") {
            this.geoBrush = _style_geoBrush__WEBPACK_IMPORTED_MODULE_1__["GeoBrush"].createBrushByType(this.brushType, null, null, this.brushOptions);
        }
        if (this.outlineColor) {
            this.convertedOutlineColor = _geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(this.outlineColor, this.outlineOpacity);
        }
        if (this.outlineDashArray) {
            this.convertedOutlineDashArray = this.outlineDashArray.split(",");
        }
        if (this.shadowColor) {
            this.convertedShadowColor = _geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(this.shadowColor);
        }
        this.shadowTranslateValueByResolution = {};
    };
    GeoAreaStyle.prototype.getTransformValues = function (transform) {
        // get transform values which look like transform(value1, value2)
        var start = transform.indexOf("(");
        var end = transform.indexOf(")");
        var valueString = transform.substring(start + 1, end);
        var values = [];
        if (valueString.includes(",")) {
            values = valueString.split(",");
        }
        else {
            values.push(valueString);
        }
        return values;
    };
    GeoAreaStyle.prototype.GetTransformedCoordinates = function (feature) {
        var tmpFlatCoordinates = feature.getFlatCoordinates();
        var tmpCoordinates = [[]];
        var index = 0;
        for (var i = 0; i < tmpFlatCoordinates.length; i += 2) {
            tmpCoordinates[index] || (tmpCoordinates[index] = []);
            tmpCoordinates[index].push([tmpFlatCoordinates[i], tmpFlatCoordinates[i + 1]]);
            if (tmpCoordinates[index].length > 3 && tmpCoordinates[index][0][0] === tmpFlatCoordinates[i] && tmpCoordinates[index][0][1] === tmpFlatCoordinates[i + 1]) {
                index++;
            }
        }
        var geometry = new ol.geom.Polygon(tmpCoordinates, "XY");
        if (this.geometryTransform.indexOf("translate") === 0) {
            geometry.translate(+this.geometryTransformValue[0].trim(), +this.geometryTransformValue[1].trim());
        }
        else if (this.geometryTransform.indexOf("scale") === 0) {
            geometry.scale(+this.geometryTransformValue[0].trim(), +this.geometryTransformValue[1].trim());
        }
        else if (this.geometryTransform.indexOf("rotate") === 0) {
            var center = ol.extent.getCenter(geometry.getExtent());
            var angle = +this.geometryTransformValue[0].trim() * Math.PI / 180;
            geometry.rotate(angle, center);
        }
        else if (this.geometryTransform.indexOf("skew") === 0) {
            this.skewGeometry(geometry, +this.geometryTransformValue[0].trim(), +this.geometryTransformValue[1].trim());
        }
        return geometry.flatCoordinates;
    };
    GeoAreaStyle.prototype.getConvertedStyleCore = function (feature, resolution, options) {
        var length = 0;
        this.styles = [];
        if (this.fill || (this.outlineColor && this.outlineWidth) || this.linearGradient || this.radialGradient) {
            if (this.geometryTransform) {
                feature.flatCoordinates_ = this.GetTransformedCoordinates(feature);
            }
            if (this.shadowDx || this.shadowDy) {
                var shadowTranslateValue = this.shadowTranslateValueByResolution[resolution];
                if (shadowTranslateValue === undefined) {
                    var tmpResolution = Math.round(resolution * 100000000) / 100000000;
                    this.shadowTranslate = ("translate(" + (this.shadowDx ? this.shadowDx : 0) * tmpResolution + "," + (this.shadowDy ? this.shadowDy : 0) * tmpResolution + ")");
                    shadowTranslateValue = this.getTransformValues(this.shadowTranslate);
                    this.shadowTranslateValueByResolution[resolution] = shadowTranslateValue;
                }
                var tmpFlatCoordinates = feature.getFlatCoordinates();
                var newFlatCoordinates = ol.geom.flat.transform.translate(tmpFlatCoordinates, 0, tmpFlatCoordinates.length, 2, +shadowTranslateValue[0].trim(), +shadowTranslateValue[1].trim(), undefined);
                var tmpCoordinates = [[]];
                var index = 0;
                for (var i = 0; i < newFlatCoordinates.length; i += 2) {
                    tmpCoordinates[index] || (tmpCoordinates[index] = []);
                    tmpCoordinates[index].push([newFlatCoordinates[i], newFlatCoordinates[i + 1]]);
                    if (tmpCoordinates[index].length > 3 && tmpCoordinates[index][0][0] === newFlatCoordinates[i] && tmpCoordinates[index][0][1] === newFlatCoordinates[i + 1]) {
                        index++;
                    }
                }
                var geometry = new ol.geom.Polygon(tmpCoordinates, "XY");
                GeoAreaStyle.areaShadowStyle.getFill().setColor(this.convertedShadowColor);
                GeoAreaStyle.areaShadowStyle.setGeometry(geometry);
                this.styles[length++] = GeoAreaStyle.areaShadowStyle;
            }
            if (this.fill) {
                this.geoBrush = _style_geoBrush__WEBPACK_IMPORTED_MODULE_1__["GeoBrush"].createBrushByType(this.brushType, feature, resolution, this.brushOptions);
                GeoAreaStyle.areaStyle.getFill().setColor(this.geoBrush);
            }
            // stroke to handle outlineColor, outlineDashArray, outlineOpacity and outlineWidth
            if (this.outlineColor || this.outlineDashArray || this.outlineWidth) {
                var newStroke = new ol.style.Stroke();
                newStroke.setColor(this.convertedOutlineColor);
                newStroke.setLineDash(this.convertedOutlineDashArray);
                newStroke.setWidth(this.outlineWidth);
                GeoAreaStyle.areaStyle.setStroke(newStroke);
            }
            else {
                GeoAreaStyle.areaStyle.setStroke(undefined);
            }
            GeoAreaStyle.areaStyle.setGeometry(feature);
            this.styles[length++] = GeoAreaStyle.areaStyle;
            if (this.gamma !== undefined && options.layer) {
                var styleGamma_1 = this.gamma;
                options.layer.on("precompose", function (evt) {
                    evt.context.imageSmoothingEnabled = styleGamma_1;
                    evt.context.webkitImageSmoothingEnabled = styleGamma_1;
                    evt.context.mozImageSmoothingEnabled = styleGamma_1;
                    evt.context.msImageSmoothingEnabled = styleGamma_1;
                });
            }
        }
        return this.styles;
    };
    GeoAreaStyle.areaStyle = new ol.style.Style({
        fill: new ol.style.Fill({}),
        stroke: new ol.style.Stroke({})
    });
    GeoAreaStyle.areaShadowStyle = new ol.style.Style({
        fill: new ol.style.Fill({}),
    });
    return GeoAreaStyle;
}(_geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"]));



/***/ }),

/***/ "./src/style/geoBrush.ts":
/*!*******************************!*\
  !*** ./src/style/geoBrush.ts ***!
  \*******************************/
/*! exports provided: GeoBrush */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoBrush", function() { return GeoBrush; });
/* harmony import */ var _geoStyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geoStyle */ "./src/style/geoStyle.ts");

var GeoBrush = /** @class */ (function () {
    function GeoBrush() {
    }
    GeoBrush.createBrushByType = function (brushType, feature, resolution, brushTypeOptions) {
        var geoBrushFunction = this.geoBrushFunctions[brushType];
        if (typeof geoBrushFunction === "function") {
            return geoBrushFunction(feature, resolution, brushTypeOptions);
        }
        else {
            return null;
        }
    };
    GeoBrush.registerGeoBrushFunction = function (key, geoBrushFunction) {
        this.geoBrushFunctions[key] = geoBrushFunction;
    };
    GeoBrush.createGeoSolidBrush = function (feature, resolution, geoBrushOptions) {
        if (geoBrushOptions.fillColor) {
            return _geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(geoBrushOptions.fillColor, geoBrushOptions.fillOpacity);
        }
    };
    GeoBrush.createRadialGradientColor = function (feature, resolution, geoBrushOptions) {
        var extent = feature.getExtent();
        // TODO: try to create it when creating the GeoStyle.
        var canvas = document.createElement("canvas");
        var context = canvas.getContext("2d");
        // TODO: check if there is a difference by srid.
        var width = ol.extent.getWidth(extent) / resolution * ol.has.DEVICE_PIXEL_RATIO;
        var height = ol.extent.getHeight(extent) / resolution * ol.has.DEVICE_PIXEL_RATIO;
        // TODO: the (x0,y0) is the center of feature extent, optimize it
        var x0 = width / 2;
        var y0 = height / 2;
        var r1 = x0;
        var grd = context.createRadialGradient(x0, y0, 0, x0, y0, r1);
        var gradientColors = geoBrushOptions.radialGradient.split(",");
        for (var _i = 0, gradientColors_1 = gradientColors; _i < gradientColors_1.length; _i++) {
            var gradientColor = gradientColors_1[_i];
            gradientColor = gradientColor.trim();
            var colorStop = gradientColor.substr(1, gradientColor.length - 2);
            var cs = colorStop.split(":");
            grd.addColorStop(Number(cs[0].trim()), _geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(cs[1].trim(), geoBrushOptions.fillOpacity));
        }
        return grd;
    };
    GeoBrush.createLinearGradientColor = function (feature, resolution, geoBrushOptions) {
        var extent = feature.getExtent();
        var canvas = document.createElement("canvas");
        var context = canvas.getContext("2d");
        // TODO: the direction Angle by x0,y0,x1,y1. this.directionAngle
        var grd = context.createLinearGradient(0, 0, ol.extent.getWidth(extent) / resolution * ol.has.DEVICE_PIXEL_RATIO, ol.extent.getHeight(extent) / resolution * ol.has.DEVICE_PIXEL_RATIO);
        var gradientColors = geoBrushOptions.linearGradient.split(",");
        for (var _i = 0, gradientColors_2 = gradientColors; _i < gradientColors_2.length; _i++) {
            var gradientColor = gradientColors_2[_i];
            gradientColor = gradientColor.trim();
            var colorStop = gradientColor.substr(1, gradientColor.length - 2);
            var cs = colorStop.split(":");
            grd.addColorStop(Number(cs[0].trim()), _geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(cs[1].trim(), geoBrushOptions.fillOpacity));
        }
        return grd;
    };
    GeoBrush.createImageCanvasPattern = function (feature, resolution, geoBrushOptions) {
        var canvas = document.createElement("canvas");
        var context = canvas.getContext("2d");
        var imageElement = document.createElement("img");
        imageElement.src = geoBrushOptions.textureFile;
        return context.createPattern(imageElement, "repeat");
    };
    GeoBrush.createPatternColor = function (feature, resolution, geoBrushOptions) {
        var createPatternFunction = GeoBrush.geoPatternFunctions[geoBrushOptions.hatchStyle];
        if (typeof createPatternFunction === "function") {
            return createPatternFunction(geoBrushOptions.fillColor, geoBrushOptions.foregroundFill);
        }
        else {
            return _geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(geoBrushOptions.fillColor, geoBrushOptions.fillOpacity);
        }
    };
    GeoBrush.getCrossPattern = function (fill, foregroundFill) {
        var size = 6;
        var ratio = ol.has.DEVICE_PIXEL_RATIO;
        var canvas = document.createElement("canvas");
        canvas.width = size * 2 * ratio;
        canvas.height = size * 2 * ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = fill;
        context.fillRect(0, 0, canvas.width, canvas.height);
        // horizon line
        context.fillStyle = foregroundFill;
        context.fillRect(0, canvas.height / 2, canvas.width, 1);
        // vertical line
        context.fillRect(canvas.width / 2, 0, 1, canvas.height);
        return context.createPattern(canvas, "repeat");
    };
    GeoBrush.getHorizontalPattern = function (fill, foregroundFill) {
        var size = 6;
        var ratio = ol.has.DEVICE_PIXEL_RATIO;
        var canvas = document.createElement("canvas");
        canvas.width = size * 2 * ratio;
        canvas.height = size * 2 * ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = fill;
        context.fillRect(0, 0, canvas.width, canvas.height);
        // horizon line
        context.fillStyle = foregroundFill;
        context.fillRect(0, canvas.height / 2, canvas.width, 1);
        return context.createPattern(canvas, "repeat");
    };
    GeoBrush.getVerticalPattern = function (fill, foregroundFill) {
        var size = 6;
        var ratio = ol.has.DEVICE_PIXEL_RATIO;
        var canvas = document.createElement("canvas");
        canvas.width = size * 2 * ratio;
        canvas.height = size * 2 * ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = fill;
        context.fillRect(0, 0, canvas.width, canvas.height);
        // vertical line
        context.fillStyle = foregroundFill;
        context.fillRect(canvas.width / 2, 0, 1, canvas.height);
        return context.createPattern(canvas, "repeat");
    };
    GeoBrush.getForwardDiagonalPattern = function (fill, foregroundFill) {
        var size = 6;
        var ratio = ol.has.DEVICE_PIXEL_RATIO;
        var canvas = document.createElement("canvas");
        canvas.width = size * 2 * ratio;
        canvas.height = size * 2 * ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = fill;
        context.fillRect(0, 0, canvas.width, canvas.height);
        // vertical line
        context.strokeStyle = foregroundFill;
        context.moveTo(0, 0);
        context.lineTo(canvas.width, canvas.height);
        context.stroke();
        // context.fillStyle = foregroundFill;
        // context.moveTo(-1, -1);
        // context.lineTo(1, -1);
        // context.lineTo(canvas.width + 1, canvas.height);
        // context.lineTo(canvas.width + 1, canvas.height + 1);
        // context.lineTo(canvas.width, canvas.height + 1);
        // context.lineTo(-1, 0);
        // context.lineTo(-1, -1);
        // context.closePath();
        // context.fill();
        return context.createPattern(canvas, "repeat");
    };
    GeoBrush.getBackwardDiagonalPattern = function (fill, foregroundFill) {
        var size = 6;
        var ratio = ol.has.DEVICE_PIXEL_RATIO;
        var canvas = document.createElement("canvas");
        canvas.width = size * 2 * ratio;
        canvas.height = size * 2 * ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = fill;
        context.fillRect(0, 0, canvas.width, canvas.height);
        // vertical line
        context.strokeStyle = foregroundFill;
        context.moveTo(canvas.width, 0);
        context.lineTo(0, canvas.height);
        context.stroke();
        return context.createPattern(canvas, "repeat");
    };
    GeoBrush.getPercent05Pattern = function (fill, foregroundFill) {
        var size = 5;
        var ratio = ol.has.DEVICE_PIXEL_RATIO;
        var canvas = document.createElement("canvas");
        canvas.width = size * (2 * 0.95 + 1) * ratio;
        canvas.height = size * (2 * 0.95 + 1) * ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = fill;
        context.fillRect(0, 0, canvas.width, canvas.height);
        // percentage region
        context.fillStyle = foregroundFill;
        context.beginPath();
        context.moveTo(canvas.width * 0.5, canvas.height * 0.45);
        context.lineTo(canvas.width * 0.55, canvas.height * 0.5);
        context.lineTo(canvas.width * 0.5, canvas.height * 0.55);
        context.lineTo(canvas.width * 0.45, canvas.height * 0.5);
        context.lineTo(canvas.width * 0.5, canvas.height * 0.45);
        context.closePath();
        context.fill();
        return context.createPattern(canvas, "repeat");
    };
    GeoBrush.getPercent10Pattern = function (fill, foregroundFill) {
        var size = 5;
        var ratio = ol.has.DEVICE_PIXEL_RATIO;
        var canvas = document.createElement("canvas");
        canvas.width = size * (2 * 0.9 + 1) * ratio;
        canvas.height = size * (2 * 0.9 + 1) * ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = fill;
        context.fillRect(0, 0, canvas.width, canvas.height);
        // percentage region
        context.fillStyle = foregroundFill;
        context.beginPath();
        context.moveTo(canvas.width * 0.5, canvas.height * 0.4);
        context.lineTo(canvas.width * 0.6, canvas.height * 0.5);
        context.lineTo(canvas.width * 0.5, canvas.height * 0.6);
        context.lineTo(canvas.width * 0.4, canvas.height * 0.5);
        context.lineTo(canvas.width * 0.5, canvas.height * 0.4);
        context.closePath();
        context.fill();
        return context.createPattern(canvas, "repeat");
    };
    GeoBrush.getPercent20Pattern = function (fill, foregroundFill) {
        var size = 5;
        var ratio = ol.has.DEVICE_PIXEL_RATIO;
        var canvas = document.createElement("canvas");
        canvas.width = size * (2 * 0.8 + 1) * ratio;
        canvas.height = size * (2 * 0.8 + 1) * ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = fill;
        context.fillRect(0, 0, canvas.width, canvas.height);
        // percentage region
        context.fillStyle = foregroundFill;
        context.beginPath();
        context.moveTo(canvas.width * 0.5, canvas.height * 0.3);
        context.lineTo(canvas.width * 0.7, canvas.height * 0.5);
        context.lineTo(canvas.width * 0.5, canvas.height * 0.7);
        context.lineTo(canvas.width * 0.3, canvas.height * 0.5);
        context.lineTo(canvas.width * 0.5, canvas.height * 0.3);
        context.closePath();
        context.fill();
        return context.createPattern(canvas, "repeat");
    };
    GeoBrush.getPercent25Pattern = function (fill, foregroundFill) {
        var size = 5;
        var ratio = ol.has.DEVICE_PIXEL_RATIO;
        var canvas = document.createElement("canvas");
        canvas.width = size * 0.4 * ratio;
        canvas.height = size * 0.4 * ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = fill;
        context.fillRect(0, 0, canvas.width, canvas.height);
        // percentage region
        context.fillStyle = foregroundFill;
        context.strokeStyle = foregroundFill;
        context.beginPath();
        context.ellipse(canvas.width * 0.25, canvas.height * 0.25, 0.8, 0.8, 0, 0, 2 * Math.PI);
        // context.stroke();
        context.fill();
        return context.createPattern(canvas, "repeat");
    };
    GeoBrush.getPercent30Pattern = function (fill, foregroundFill) {
        var size = 5;
        var ratio = ol.has.DEVICE_PIXEL_RATIO;
        var canvas = document.createElement("canvas");
        canvas.width = size * (2 * 0.7 + 1) * ratio;
        canvas.height = size * (2 * 0.7 + 1) * ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = fill;
        context.fillRect(0, 0, canvas.width, canvas.height);
        // percentage region
        context.fillStyle = foregroundFill;
        context.beginPath();
        context.moveTo(canvas.width * 0.5, canvas.height * 0.2);
        context.lineTo(canvas.width * 0.8, canvas.height * 0.5);
        context.lineTo(canvas.width * 0.5, canvas.height * 0.8);
        context.lineTo(canvas.width * 0.2, canvas.height * 0.5);
        context.lineTo(canvas.width * 0.5, canvas.height * 0.2);
        context.closePath();
        context.fill();
        return context.createPattern(canvas, "repeat");
    };
    GeoBrush.getPercent40Pattern = function (fill, foregroundFill) {
        var size = 5;
        var ratio = ol.has.DEVICE_PIXEL_RATIO;
        var canvas = document.createElement("canvas");
        canvas.width = size * (2 * 0.4 + 1) * ratio;
        canvas.height = size * (2 * 0.4 + 1) * ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = fill;
        context.fillRect(0, 0, canvas.width, canvas.height);
        // percentage region
        context.fillStyle = foregroundFill;
        context.beginPath();
        context.moveTo(canvas.width * 0.5, canvas.height * 0.1);
        context.lineTo(canvas.width * 0.9, canvas.height * 0.5);
        context.lineTo(canvas.width * 0.5, canvas.height * 0.9);
        context.lineTo(canvas.width * 0.1, canvas.height * 0.5);
        context.lineTo(canvas.width * 0.5, canvas.height * 0.1);
        context.closePath();
        context.fill();
        return context.createPattern(canvas, "repeat");
    };
    GeoBrush.getPercent50Pattern = function (fill, foregroundFill) {
        var size = 5;
        var ratio = ol.has.DEVICE_PIXEL_RATIO;
        var canvas = document.createElement("canvas");
        canvas.width = size * (2 * 0.5 + 1) * ratio;
        canvas.height = size * (2 * 0.5 + 1) * ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = fill;
        context.fillRect(0, 0, canvas.width, canvas.height);
        // percentage region
        context.fillStyle = foregroundFill;
        context.beginPath();
        context.moveTo(canvas.width * 0.5, 0);
        context.lineTo(canvas.width, canvas.height * 0.5);
        context.lineTo(canvas.width * 0.5, canvas.height);
        context.lineTo(0, canvas.height * 0.5);
        context.lineTo(canvas.width * 0.5, 0);
        context.closePath();
        context.fill();
        return context.createPattern(canvas, "repeat");
    };
    GeoBrush.getPercent60Pattern = function (fill, foregroundFill) {
        var size = 5;
        var ratio = ol.has.DEVICE_PIXEL_RATIO;
        var canvas = document.createElement("canvas");
        canvas.width = size * (2 * 0.4 + 1) * ratio;
        canvas.height = size * (2 * 0.4 + 1) * ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = fill;
        context.fillRect(0, 0, canvas.width, canvas.height);
        // percentage region
        context.fillStyle = foregroundFill;
        context.beginPath();
        context.moveTo(canvas.width * 0.4, 0);
        context.lineTo(canvas.width * 0.6, 0);
        context.lineTo(canvas.width, canvas.height * 0.4);
        context.lineTo(canvas.width, canvas.height * 0.6);
        context.lineTo(canvas.width * 0.6, canvas.height);
        context.lineTo(canvas.width * 0.4, canvas.height);
        context.lineTo(0, canvas.height * 0.6);
        context.lineTo(0, canvas.height * 0.4);
        context.lineTo(canvas.width * 0.4, 0);
        context.closePath();
        context.fill();
        return context.createPattern(canvas, "repeat");
    };
    GeoBrush.getPercent70Pattern = function (fill, foregroundFill) {
        var size = 5;
        var ratio = ol.has.DEVICE_PIXEL_RATIO;
        var canvas = document.createElement("canvas");
        canvas.width = size * (2 * 0.3 + 1) * ratio;
        canvas.height = size * (2 * 0.3 + 1) * ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = fill;
        context.fillRect(0, 0, canvas.width, canvas.height);
        // percentage region
        context.fillStyle = foregroundFill;
        context.beginPath();
        context.moveTo(canvas.width * 0.3, 0);
        context.lineTo(canvas.width * 0.7, 0);
        context.lineTo(canvas.width, canvas.height * 0.3);
        context.lineTo(canvas.width, canvas.height * 0.7);
        context.lineTo(canvas.width * 0.7, canvas.height);
        context.lineTo(canvas.width * 0.3, canvas.height);
        context.lineTo(0, canvas.height * 0.7);
        context.lineTo(0, canvas.height * 0.3);
        context.lineTo(canvas.width * 0.3, 0);
        context.closePath();
        context.fill();
        return context.createPattern(canvas, "repeat");
    };
    GeoBrush.getPercent75Pattern = function (fill, foregroundFill) {
        var size = 5;
        var ratio = ol.has.DEVICE_PIXEL_RATIO;
        var canvas = document.createElement("canvas");
        canvas.width = size * (2 * 0.25 + 1) * ratio;
        canvas.height = size * (2 * 0.25 + 1) * ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = fill;
        context.fillRect(0, 0, canvas.width, canvas.height);
        // percentage region
        context.fillStyle = foregroundFill;
        context.beginPath();
        context.moveTo(canvas.width * 0.25, 0);
        context.lineTo(canvas.width * 0.75, 0);
        context.lineTo(canvas.width, canvas.height * 0.25);
        context.lineTo(canvas.width, canvas.height * 0.75);
        context.lineTo(canvas.width * 0.75, canvas.height);
        context.lineTo(canvas.width * 0.25, canvas.height);
        context.lineTo(0, canvas.height * 0.75);
        context.lineTo(0, canvas.height * 0.25);
        context.lineTo(canvas.width * 0.25, 0);
        context.closePath();
        context.fill();
        return context.createPattern(canvas, "repeat");
    };
    GeoBrush.getPercent80Pattern = function (fill, foregroundFill) {
        var size = 5;
        var ratio = ol.has.DEVICE_PIXEL_RATIO;
        var canvas = document.createElement("canvas");
        canvas.width = size * 0.8 * ratio;
        canvas.height = size * 0.8 * ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = fill;
        context.fillRect(0, 0, canvas.width, canvas.height);
        // percentage region
        context.fillStyle = foregroundFill;
        context.strokeStyle = foregroundFill;
        context.beginPath();
        context.ellipse(canvas.width * 0.1, canvas.height * 0.1, 0.8, 0.8, 0, 0, 2 * Math.PI);
        // context.stroke();
        context.fill();
        return context.createPattern(canvas, "repeat");
    };
    GeoBrush.getPercent90Pattern = function (fill, foregroundFill) {
        var size = 5;
        var ratio = ol.has.DEVICE_PIXEL_RATIO;
        var canvas = document.createElement("canvas");
        canvas.width = size * (2 * 0.1 + 1) * ratio;
        canvas.height = size * (2 * 0.1 + 1) * ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = fill;
        context.fillRect(0, 0, canvas.width, canvas.height);
        // percentage region
        context.fillStyle = foregroundFill;
        context.strokeStyle = foregroundFill;
        context.beginPath();
        context.ellipse(canvas.width * 0.1, canvas.height * 0.1, 0.4, 0.4, 0, 0, 2 * Math.PI);
        // context.stroke();
        context.fill();
        return context.createPattern(canvas, "repeat");
    };
    GeoBrush.getLargeGridPattern = function (fill, foregroundFill) {
        var size = 6;
        var ratio = ol.has.DEVICE_PIXEL_RATIO;
        var canvas = document.createElement("canvas");
        canvas.width = size * 2 * ratio;
        canvas.height = size * 2 * ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = fill;
        context.fillRect(0, 0, canvas.width, canvas.height);
        // grid rect
        context.strokeStyle = foregroundFill;
        context.strokeRect(0, 0, canvas.width, canvas.height);
        return context.createPattern(canvas, "repeat");
    };
    GeoBrush.getDiagonalCrossPattern = function (fill, foregroundFill) {
        var size = 6;
        var ratio = ol.has.DEVICE_PIXEL_RATIO;
        var canvas = document.createElement("canvas");
        canvas.width = size * 2 * ratio;
        canvas.height = size * 2 * ratio;
        var context = canvas.getContext("2d");
        context.fillStyle = fill;
        context.fillRect(0, 0, canvas.width, canvas.height);
        // left to right diagonal line
        context.strokeStyle = foregroundFill;
        context.moveTo(0, 0);
        context.lineTo(canvas.width, canvas.height);
        context.stroke();
        // right to left diagonal line
        context.strokeStyle = foregroundFill;
        context.moveTo(canvas.width, 0);
        context.lineTo(0, canvas.height);
        context.stroke();
        return context.createPattern(canvas, "repeat");
    };
    GeoBrush.geoBrushFunctions = {
        solid: GeoBrush.createGeoSolidBrush,
        radialgradient: GeoBrush.createRadialGradientColor,
        lineargradient: GeoBrush.createLinearGradientColor,
        hatch: GeoBrush.createPatternColor,
        texture: GeoBrush.createImageCanvasPattern
    };
    GeoBrush.geoPatternFunctions = {
        Cross: GeoBrush.getCrossPattern,
        Horizontal: GeoBrush.getHorizontalPattern,
        Vertical: GeoBrush.getVerticalPattern,
        ForwardDiagonal: GeoBrush.getForwardDiagonalPattern,
        BackwardDiagonal: GeoBrush.getBackwardDiagonalPattern,
        LargeGrid: GeoBrush.getLargeGridPattern,
        DiagonalCross: GeoBrush.getDiagonalCrossPattern,
        Percent05: GeoBrush.getPercent05Pattern,
        Percent10: GeoBrush.getPercent10Pattern,
        Percent20: GeoBrush.getPercent20Pattern,
        Percent25: GeoBrush.getPercent25Pattern,
        Percent30: GeoBrush.getPercent30Pattern,
        Percent40: GeoBrush.getPercent40Pattern,
        Percent50: GeoBrush.getPercent50Pattern,
        Percent60: GeoBrush.getPercent60Pattern,
        Percent70: GeoBrush.getPercent70Pattern,
        Percent75: GeoBrush.getPercent75Pattern,
        Percent80: GeoBrush.getPercent80Pattern,
        Percent90: GeoBrush.getPercent90Pattern,
    };
    return GeoBrush;
}());



/***/ }),

/***/ "./src/style/geoLineStyle.ts":
/*!***********************************!*\
  !*** ./src/style/geoLineStyle.ts ***!
  \***********************************/
/*! exports provided: GeoLineStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoLineStyle", function() { return GeoLineStyle; });
/* harmony import */ var _geoStyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geoStyle */ "./src/style/geoStyle.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var GeoLineStyle = /** @class */ (function (_super) {
    __extends(GeoLineStyle, _super);
    function GeoLineStyle(styleJson) {
        var _this = _super.call(this, styleJson) || this;
        _this.geometryLineCaps = [
            "triangle",
            "squareanchor",
            "roundanchor",
            "diamondanchor",
            "arrowanchor"
        ];
        _this.olLineCapsMap = {
            butt: "butt",
            flat: "square",
            square: "square",
            round: "round",
            noanchor: "square",
            anchormask: "square",
            custom: "square"
        };
        _this.convertedDashArray = new Array();
        _this.convertedInnerDashArray = new Array();
        _this.convertedCenterDashArray = new Array();
        _this.lineStroke = new ol.style.Stroke();
        _this.lineStyle = new ol.style.Style({ stroke: _this.lineStroke });
        _this.lineCapFill = new ol.style.Fill();
        _this.lineCapStyle = new ol.style.Style({ fill: _this.lineCapFill });
        _this.lineInnerStroke = new ol.style.Stroke();
        _this.lineInnerStyle = new ol.style.Style({ stroke: _this.lineInnerStroke });
        _this.lineCapInnerFill = new ol.style.Fill();
        _this.lineCapInnerStyle = new ol.style.Style({
            fill: _this.lineCapInnerFill
        });
        _this.lineCenterStroke = new ol.style.Stroke();
        _this.lineCenterStyle = new ol.style.Style({
            stroke: _this.lineCenterStroke
        });
        _this.lineCapCenterFill = new ol.style.Fill();
        _this.lineCapCenterStyle = new ol.style.Style({
            fill: _this.lineCapCenterFill
        });
        if (styleJson) {
            _this.lineCap = styleJson["line-cap"];
            _this.color = styleJson["line-color"];
            _this.dashArray = styleJson["line-dasharray"];
            _this.gamma = styleJson["line-gamma"];
            _this.geometryTransform = styleJson["line-geometry-transform"];
            _this.lineJoin = styleJson["line-join"];
            _this.miterLimit = styleJson["line-miterlimit"];
            _this.offset = styleJson["line-offset"];
            _this.opacity = styleJson["line-opacity"];
            _this.width = styleJson["line-width"];
            _this.lineCapInner = styleJson["line-cap-inner"];
            _this.colorInner = styleJson["line-color-inner"];
            _this.dashArrayInner = styleJson["line-dasharray-inner"];
            _this.lineJoinInner = styleJson["line-join-inner"];
            _this.miterLimitInner = styleJson["line-miterlimit-inner"];
            _this.widthInner = styleJson["line-width-inner"];
            _this.lineCapCenter = styleJson["line-cap-center"];
            _this.colorCenter = styleJson["line-color-center"];
            _this.dashArrayCenter = styleJson["line-dasharray-center"];
            _this.lineJoinCenter = styleJson["line-join-center"];
            _this.miterLimitCenter = styleJson["line-miterlimit-center"];
            _this.widthCenter = styleJson["line-width-center"];
            _this.onewaySymbol = styleJson["line-oneway-symbol"];
        }
        return _this;
    }
    GeoLineStyle.prototype.initializeCore = function () {
        if (this.color) {
            this.olColor = _geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(this.color, this.opacity);
            this.lineStroke.setColor(this.olColor);
            this.lineCapFill.setColor(this.olColor);
        }
        if (this.dashArray) {
            var tmpArray = this.dashArray.split(",");
            for (var _i = 0, tmpArray_1 = tmpArray; _i < tmpArray_1.length; _i++) {
                var a = tmpArray_1[_i];
                this.convertedDashArray.push(parseFloat(a));
            }
        }
        // Drawing inner
        if (this.colorInner) {
            this.olInnerColor = _geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(this.colorInner, this.opacity);
            this.lineInnerStroke.setColor(this.olInnerColor);
            this.lineCapInnerFill.setColor(this.olInnerColor);
        }
        if (this.dashArrayInner) {
            var tmpArray = this.dashArrayInner.split(",");
            for (var _a = 0, tmpArray_2 = tmpArray; _a < tmpArray_2.length; _a++) {
                var a = tmpArray_2[_a];
                this.convertedInnerDashArray.push(parseFloat(a));
            }
        }
        // Drawing center
        if (this.colorCenter) {
            this.olCenterColor = _geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(this.colorCenter, this.opacity);
            this.lineCenterStroke.setColor(this.olCenterColor);
            this.lineCapCenterFill.setColor(this.olCenterColor);
        }
        if (this.dashArrayCenter) {
            var tmpArray = this.dashArrayCenter.split(",");
            for (var _b = 0, tmpArray_3 = tmpArray; _b < tmpArray_3.length; _b++) {
                var a = tmpArray_3[_b];
                this.convertedCenterDashArray.push(parseFloat(a));
            }
        }
        if (this.onewaySymbol) {
            this.onewayIcon = new ol.style.Icon({
                src: this.onewaySymbol,
                imgSize: [18, 5],
                anchor: [0.5, 0.5],
                rotateWithView: true
            });
            this.onewayStyle = new ol.style.Style({
                image: this.onewayIcon
            });
        }
    };
    GeoLineStyle.prototype.getTransformValues = function (transform) {
        // get transform values which look like transform(value1, value2)
        var start = transform.indexOf("(");
        var end = transform.indexOf(")");
        var valueString = transform.substring(start + 1, end);
        var values = [];
        if (valueString.includes(",")) {
            values = valueString.split(",");
        }
        else {
            values.push(valueString);
        }
        return values;
    };
    GeoLineStyle.prototype.getConvertedStyleCore = function (feature, resolution, options) {
        var _this = this;
        var length = 0;
        this.styles = [];
        if (this.color && this.width) {
            if (this.olLineCapsMap[this.lineCap]) {
                this.lineStroke.setLineCap(this.olLineCapsMap[this.lineCap]);
            }
            if (this.color) {
                this.lineStroke.setColor(this.olColor);
                this.lineCapFill.setColor(this.olColor);
            }
            if (this.dashArray) {
                this.lineStroke.setLineDash(this.convertedDashArray);
            }
            if (this.lineJoin) {
                this.lineStroke.setLineJoin(this.lineJoin);
            }
            if (this.miterLimit !== 4) {
                this.lineStroke.setMiterLimit(this.miterLimit);
            }
            if (this.width) {
                this.lineStroke.setWidth(this.width);
            }
            // Set inner
            if (this.colorInner) {
                this.lineInnerStroke.setColor(this.olInnerColor);
                this.lineCapInnerFill.setColor(this.olInnerColor);
            }
            if (this.dashArrayInner) {
                this.lineInnerStroke.setLineDash(this.convertedInnerDashArray);
            }
            if (this.lineJoinInner) {
                this.lineInnerStroke.setLineJoin(this.lineJoinInner);
            }
            if (this.miterLimitInner !== 4) {
                this.lineInnerStroke.setMiterLimit(this.miterLimitInner);
            }
            if (this.widthInner) {
                this.lineInnerStroke.setWidth(this.widthInner);
            }
            // Set center
            if (this.colorCenter) {
                this.lineCenterStroke.setColor(this.olCenterColor);
                this.lineCapCenterFill.setColor(this.olCenterColor);
                this.lineCenterStroke.setLineCap("butt");
            }
            if (this.dashArrayCenter) {
                this.lineCenterStroke.setLineDash(this.convertedCenterDashArray);
            }
            if (this.lineJoinCenter) {
                this.lineCenterStroke.setLineJoin(this.lineJoinCenter);
            }
            if (this.miterLimitCenter !== 4) {
                this.lineCenterStroke.setMiterLimit(this.miterLimitCenter);
            }
            if (this.widthCenter) {
                this.lineCenterStroke.setWidth(this.widthCenter);
            }
            var geometryFunction = function (feature) {
                if (_this.geometryTransform) {
                    var geometry = _this.getGeometry(feature);
                    if (_this.geometryTransform) {
                        var values = _this.getTransformValues(_this.geometryTransform);
                        if (_this.geometryTransform.indexOf("translate") === 0) {
                            geometry.translate(+values[0].trim(), +values[1].trim());
                        }
                        else if (_this.geometryTransform.indexOf("scale") === 0) {
                            geometry.scale(+values[0].trim(), +values[1].trim());
                        }
                        else if (_this.geometryTransform.indexOf("rotate") === 0) {
                            var center = ol.extent.getCenter(geometry.getExtent());
                            var angle = +values[0].trim() * Math.PI / 180;
                            geometry.rotate(angle, center);
                        }
                        else if (_this.geometryTransform.indexOf("skew") === 0) {
                            _this.skewGeometry(geometry, +values[0].trim(), +values[1].trim());
                        }
                    }
                }
                return feature.getGeometry();
            };
            this.lineStyle.setGeometry(geometryFunction);
            this.styles[length++] = this.lineStyle;
            if (this.gamma !== undefined && options.layer) {
                var styleGamma_1 = this.gamma;
                options.layer.on("precompose", function (evt) {
                    evt.context.imageSmoothingEnabled = styleGamma_1;
                    evt.context.webkitImageSmoothingEnabled = styleGamma_1;
                    evt.context.mozImageSmoothingEnabled = styleGamma_1;
                    evt.context.msImageSmoothingEnabled = styleGamma_1;
                });
            }
            if (this.geometryLineCaps.includes(this.lineCap)) {
                var geometryFunction_1 = function (feature) {
                    var geometry = _this.getGeometry(feature);
                    return GeoLineStyle.createAnchoredGeometry(geometry, _this.lineCap, _this.width, resolution);
                };
                this.lineCapStyle.setGeometry(geometryFunction_1);
                this.styles[length++] = this.lineCapStyle;
            }
            // Drawing inner
            if (this.colorInner && this.widthInner) {
                var geometryFunction_2 = function (feature) {
                    var geometry = _this.getGeometry(feature);
                    if (_this.geometryTransform) {
                        var values = _this.getTransformValues(_this.geometryTransform);
                        if (_this.geometryTransform.indexOf("translate") === 0) {
                            geometry.translate(+values[0].trim(), +values[1].trim());
                        }
                        else if (_this.geometryTransform.indexOf("scale") === 0) {
                            geometry.scale(+values[0].trim(), +values[1].trim());
                        }
                        else if (_this.geometryTransform.indexOf("rotate") === 0) {
                            var center = ol.extent.getCenter(geometry.getExtent());
                            var angle = +values[0].trim() * Math.PI / 180;
                            geometry.rotate(angle, center);
                        }
                        else if (_this.geometryTransform.indexOf("skew") === 0) {
                            _this.skewGeometry(geometry, +values[0].trim(), +values[1].trim());
                        }
                    }
                    return feature.getGeometry();
                };
                this.lineInnerStyle.setGeometry(geometryFunction_2);
                this.styles[length++] = this.lineInnerStyle;
                if (this.geometryLineCaps.includes(this.lineCapInner)) {
                    var geometryFunction_3 = function (feature) {
                        var geometry = _this.getGeometry(feature);
                        return GeoLineStyle.createAnchoredGeometry(geometry, _this.lineCapInner, _this.widthInner, resolution);
                    };
                    this.lineCapInnerStyle.setGeometry(geometryFunction_3);
                    this.styles[length++] = this.lineCapInnerStyle;
                }
            }
            // Drawing center
            if (this.colorCenter && this.widthCenter) {
                var geometryFunction_4 = function (feature) {
                    var geometry = _this.getGeometry(feature);
                    if (_this.geometryTransform) {
                        var values = _this.getTransformValues(_this.geometryTransform);
                        if (_this.geometryTransform.indexOf("translate") === 0) {
                            geometry.translate(+values[0].trim(), +values[1].trim());
                        }
                        else if (_this.geometryTransform.indexOf("scale") === 0) {
                            geometry.scale(+values[0].trim(), +values[1].trim());
                        }
                        else if (_this.geometryTransform.indexOf("rotate") === 0) {
                            var center = ol.extent.getCenter(geometry.getExtent());
                            var angle = +values[0].trim() * Math.PI / 180;
                            geometry.rotate(angle, center);
                        }
                        else if (_this.geometryTransform.indexOf("skew") === 0) {
                            _this.skewGeometry(geometry, +values[0].trim(), +values[1].trim());
                        }
                    }
                    return feature.getGeometry();
                };
                this.lineCenterStyle.setGeometry(geometryFunction_4);
                this.styles[length++] = this.lineCenterStyle;
                if (this.geometryLineCaps.includes(this.lineCapCenter)) {
                    var geometryFunction_5 = function (feature) {
                        var geometry = _this.getGeometry(feature);
                        return GeoLineStyle.createAnchoredGeometry(geometry, _this.lineCapCenter, _this.widthCenter, resolution);
                    };
                    this.lineCapCenterStyle.setGeometry(geometryFunction_5);
                    this.styles[length++] = this.lineCapCenterStyle;
                }
            }
        }
        if (this.onewaySymbol) {
            var flatCoordinates = feature.getFlatCoordinates();
            var longest = 0;
            var longestIndex = void 0;
            for (var i = 0; i <= flatCoordinates.length - 4; i += 2) {
                var dX = Math.abs(flatCoordinates[i] - flatCoordinates[i + 2]);
                var dY = Math.abs(flatCoordinates[i + 1] - flatCoordinates[i + 3]);
                var distance = dX + dY;
                if (distance > longest) {
                    longest = distance;
                    longestIndex = i;
                }
            }
            var start = [flatCoordinates[longestIndex], flatCoordinates[longestIndex + 1]];
            var end = [flatCoordinates[longestIndex + 2], flatCoordinates[longestIndex + 3]];
            var dx = end[0] - start[0];
            var dy = end[1] - start[1];
            var rotation = Math.atan2(dy, dx);
            var centerPoint = [(start[0] + end[0]) * 0.5, (start[1] + end[1]) * 0.5];
            var geometry = new ol.geom.Point(centerPoint, "XY");
            this.onewayIcon.rotation_ = -rotation;
            this.onewayStyle.setGeometry(geometry);
            this.styles[length++] = this.onewayStyle;
        }
        return this.styles;
    };
    GeoLineStyle.prototype.getGeometry = function (feature) {
        var tmpFlatCoordinates = feature.getFlatCoordinates();
        var tmpCoordinates = [];
        for (var i = 0; i < tmpFlatCoordinates.length; i += 2) {
            tmpCoordinates.push([tmpFlatCoordinates[i], tmpFlatCoordinates[i + 1]]);
        }
        return new ol.geom.LineString(tmpCoordinates);
    };
    GeoLineStyle.createAnchoredGeometry = function (geometry, lineCap, lineWidth, resolution) {
        var segments = GeoLineStyle.getTerminalSegments(geometry);
        var linearRing = undefined;
        var multiPolygon = new ol.geom.MultiPolygon([]);
        for (var _i = 0, segments_1 = segments; _i < segments_1.length; _i++) {
            var segment = segments_1[_i];
            var first = segment[0];
            var last = segment[1];
            var delta = lineWidth * resolution / 2;
            var translateDelta = (lineWidth - 1) * resolution / 2;
            switch (lineCap) {
                case "triangle":
                    linearRing = new ol.geom.LinearRing([
                        [last[0], last[1] + delta],
                        [last[0] + delta, last[1]],
                        [last[0], last[1] - delta],
                        [last[0], last[1] + delta]
                    ]);
                    break;
                case "squareanchor":
                    delta *= 1.5;
                    linearRing = new ol.geom.LinearRing([
                        [last[0] - delta, last[1] + delta],
                        [last[0] + delta, last[1] + delta],
                        [last[0] + delta, last[1] - delta],
                        [last[0] - delta, last[1] - delta],
                        [last[0] - delta, last[1] + delta]
                    ]);
                    break;
                case "roundanchor":
                    delta *= 2;
                    var radiusDelta = Math.PI / 18;
                    var coordinates = [];
                    var radius = 0;
                    for (var i = 0; i < 36; i++) {
                        coordinates.push([
                            Math.cos(radius) * delta + last[0],
                            Math.sin(radius) * delta + last[1]
                        ]);
                        radius += radiusDelta;
                    }
                    coordinates.push(coordinates[0]);
                    linearRing = new ol.geom.LinearRing(coordinates);
                    break;
                case "diamondanchor":
                    delta *= 1.5;
                    linearRing = new ol.geom.LinearRing([
                        [last[0] - delta, last[1] + delta],
                        [last[0] + delta, last[1] + delta],
                        [last[0] + delta, last[1] - delta],
                        [last[0] - delta, last[1] - delta],
                        [last[0] - delta, last[1] + delta]
                    ]);
                    linearRing.rotate(Math.PI / 4, last);
                    break;
                case "arrowanchor":
                    delta *= 2;
                    linearRing = new ol.geom.LinearRing([
                        [last[0], last[1] + delta],
                        [last[0] + delta * Math.cos(Math.PI / 6) * 2, last[1]],
                        [last[0], last[1] - delta],
                        [last[0], last[1] + delta]
                    ]);
                    break;
            }
            if (first[0] === last[0]) {
                if (first[1] > last[1]) {
                    linearRing.rotate(-Math.PI / 2, last);
                    linearRing.translate(0, -translateDelta);
                }
                else {
                    linearRing.rotate(Math.PI / 2, last);
                    linearRing.translate(0, translateDelta);
                }
            }
            else if (first[1] === last[1]) {
                if (last[0] < first[0]) {
                    linearRing.rotate(Math.PI, last);
                    linearRing.translate(-translateDelta, 0);
                }
                else {
                    linearRing.translate(translateDelta, 0);
                }
            }
            else {
                var dx = last[0] - first[0];
                var dy = last[1] - first[1];
                var radians = Math.atan(dy / dx);
                if (last[0] > first[0]) {
                    linearRing.rotate(radians, last);
                    linearRing.translate(Math.cos(radians) * translateDelta, Math.sin(radians) * translateDelta);
                }
                else {
                    linearRing.rotate(radians + Math.PI, last);
                    linearRing.translate(-Math.cos(radians) * translateDelta, -Math.sin(radians) * translateDelta);
                }
            }
            var polygon = new ol.geom.Polygon([]);
            polygon.appendLinearRing(linearRing);
            multiPolygon.appendPolygon(polygon);
        }
        return multiPolygon;
    };
    GeoLineStyle.getTerminalSegments = function (geometry) {
        var type = geometry.getType();
        var results = [];
        var geometryType = ol.geom.GeometryType;
        switch (type) {
            case geometryType.LINE_STRING:
                var coords = geometry.getCoordinates();
                var start = [coords[1], coords[0]];
                var end = [coords[coords.length - 2], coords[coords.length - 1]];
                results.push(start);
                results.push(end);
                break;
            case geometryType.MULTI_LINE_STRING:
                var lines = geometry.getLineStrings();
                for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
                    var line = lines_1[_i];
                    Array.prototype.push.apply(results, GeoLineStyle.getTerminalSegments(line));
                }
                break;
            case geometryType.GEOMETRY_COLLECTION:
                var geometries = geometry.getGeometries();
                for (var _a = 0, geometries_1 = geometries; _a < geometries_1.length; _a++) {
                    var geom = geometries_1[_a];
                    Array.prototype.push.apply(results, GeoLineStyle.getTerminalSegments(geom));
                }
                break;
        }
        return results;
    };
    return GeoLineStyle;
}(_geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"]));



/***/ }),

/***/ "./src/style/geoPointStyle.ts":
/*!************************************!*\
  !*** ./src/style/geoPointStyle.ts ***!
  \************************************/
/*! exports provided: GeoPointStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoPointStyle", function() { return GeoPointStyle; });
/* harmony import */ var _geoStyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geoStyle */ "./src/style/geoStyle.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var GeoPointStyle = /** @class */ (function (_super) {
    __extends(GeoPointStyle, _super);
    function GeoPointStyle(styleJson) {
        var _this = _super.call(this, styleJson) || this;
        if (styleJson) {
            _this.glyph = styleJson["point-glyph"];
            _this.linearGradient = styleJson["point-linear-gradient"];
            _this.radialGradient = styleJson["point-radial-gradient"];
            _this.fill = styleJson["point-fill"];
            _this.glyphName = styleJson["point-glyph-name"];
            _this.glyphMaskColor = styleJson["point-glyph-mask-color"];
            _this.glyphMaskMargin = styleJson["point-glyph-mask-margin"];
            _this.glyphMaskOutlineColor = styleJson["point-glyph-mask-outline-color"];
            _this.glyphMaskOutlineWidth = styleJson["point-glyph-mask-outline-width"];
            _this.glyphMaskType = styleJson["point-glyph-mask-type"];
            _this.outlineColor = styleJson["point-outline-color"];
            _this.outlineWidth = styleJson["point-outline-width"];
            _this.size = styleJson["point-size"];
            _this.angle = styleJson["point-rotate-angle"] ? styleJson["point-rotate-angle"] : 0;
            _this.dx = styleJson["point-dx"];
            _this.dy = styleJson["point-dy"];
            _this.pointFile = styleJson["point-file"];
            _this.opacity = styleJson["point-opacity"];
            _this.symbolType = styleJson["point-symbol-type"];
            _this.transform = styleJson["point-transform"];
            _this.pointType = styleJson["point-type"];
            if (_this.outlineColor) {
                _this.convertedGlyphOutLineColor = _geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(_this.outlineColor, _this.opacity);
            }
            if (_this.fill) {
                _this.convertedGlyphFill = _geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(_this.fill, _this.opacity);
            }
            if (_this.linearGradient) {
                if (GeoPointStyle.linearGradientDictionary.hasOwnProperty(_this.linearGradient)) {
                    _this.convertedGlyphFill = GeoPointStyle.linearGradientDictionary[_this.linearGradient];
                }
                else {
                    _this.convertedGlyphFill = _geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toOLLinearGradient(_this.linearGradient, _this.opacity, _this.size);
                    GeoPointStyle.linearGradientDictionary[_this.linearGradient] = _this.convertedGlyphFill;
                }
            }
            if (_this.radialGradient) {
                if (GeoPointStyle.radialGradientDictionary.hasOwnProperty(_this.radialGradient)) {
                    _this.convertedGlyphFill = GeoPointStyle.radialGradientDictionary[_this.radialGradient];
                }
                else {
                    _this.convertedGlyphFill = _geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toOLRadialGradient(_this.radialGradient, _this.opacity, _this.size);
                    GeoPointStyle.radialGradientDictionary[_this.radialGradient] = _this.convertedGlyphFill;
                }
            }
        }
        return _this;
    }
    GeoPointStyle.prototype.initializeCore = function () {
        this.style = new ol.style.Style();
        switch (this.pointType) {
            case "symbol":
                this.initSymbolStyle();
                break;
            case "image":
                this.initBitmapStyle();
                break;
            case "glyph":
                this.initGlyphStyle();
            default:
                break;
        }
        if (this.pointType === "glyph") {
            if (this.glyph && this.glyphName) {
                this.textStyle.label = this.getGlyphImage(this.textStyle);
                this.style.setImage(null);
                this.style.setText(this.textStyle);
            }
        }
        else {
            this.style.setImage(this.imageStyle);
        }
    };
    GeoPointStyle.prototype.getConvertedStyleCore = function (feature, resolution, options) {
        if (this.pointType === "glyph") {
            if (this.glyph && this.glyphName) {
                this.textStyle.labelPosition = feature.getFlatCoordinates();
            }
        }
        var featureZindex = feature["tempTreeZindex"];
        if (featureZindex === undefined) {
            featureZindex = 0;
        }
        this.style.setZIndex(featureZindex);
        this.styles = [];
        this.styles[0] = this.style;
        return this.styles;
    };
    GeoPointStyle.prototype.getGlyphImage = function (textState) {
        var font = textState.font_;
        var strokeColor;
        var outlineWidth = 0;
        var textStrok = textState.getStroke();
        if (textStrok) {
            strokeColor = textStrok.getColor();
            outlineWidth = textStrok.getWidth();
        }
        var scale = window.devicePixelRatio;
        // here
        var width = ol.render.canvas.TextReplay.measureTextWidths(font, [textState.text_], []) + outlineWidth * 2;
        var height = ol.render.canvas.measureTextHeight(font) + outlineWidth * 2;
        var tmpMaskMargin = (this.glyphMaskMargin ? this.glyphMaskMargin : "0").split(',');
        var tmpMaskHeightMargin = 0;
        var tmpMaskWidthMargin = 0;
        switch (tmpMaskMargin.length) {
            case 1:
                tmpMaskHeightMargin = parseInt(tmpMaskMargin[0]) * 2;
                tmpMaskWidthMargin = parseInt(tmpMaskMargin[0]) * 2;
                break;
            case 2:
                tmpMaskHeightMargin = parseInt(tmpMaskMargin[0]) * 2;
                tmpMaskWidthMargin = parseInt(tmpMaskMargin[1]) * 2;
                break;
            case 3:
                tmpMaskHeightMargin = parseInt(tmpMaskMargin[0]) + parseInt(tmpMaskMargin[2]);
                tmpMaskWidthMargin = parseInt(tmpMaskMargin[1]) * 2;
                break;
            case 4:
                tmpMaskHeightMargin = parseInt(tmpMaskMargin[0]) + parseInt(tmpMaskMargin[2]);
                tmpMaskWidthMargin = parseInt(tmpMaskMargin[1]) + parseInt(tmpMaskMargin[3]);
                break;
            default:
                break;
        }
        var tmpMaskOutlineWidth = (this.glyphMaskOutlineWidth ? this.glyphMaskOutlineWidth : 0) * 2;
        var renderWidth = width + tmpMaskWidthMargin;
        var renderHeight = height + tmpMaskWidthMargin;
        var canvasWidth = width + tmpMaskWidthMargin + tmpMaskOutlineWidth;
        var canvasHeight = height + tmpMaskHeightMargin + tmpMaskOutlineWidth;
        var context = ol.dom.createCanvasContext2D(canvasWidth * scale, canvasHeight * scale);
        if (scale !== 1) {
            context.scale(scale, scale);
        }
        this.drawMask(context, 0, 0, renderWidth, renderHeight);
        context.font = font;
        context.textBaseline = "middle";
        context.textAlign = "center";
        if (textStrok) {
            if (strokeColor && outlineWidth > 0) {
                context.strokeStyle = strokeColor;
                context.lineWidth = outlineWidth * (ol.has.SAFARI ? scale : 1);
                context.strokeText(textState.text_, canvasWidth / 2, canvasHeight / 2);
            }
        }
        var textFill = textState.getFill();
        if (textFill) {
            var color = textFill.getColor();
            if (color) {
                context.fillStyle = color;
                context.fillText(textState.text_, canvasWidth / 2, canvasHeight / 2);
            }
        }
        return context.canvas;
    };
    GeoPointStyle.prototype.drawMask = function (context, x, y, width, height) {
        var fill = undefined;
        var stroke = undefined;
        if (this.glyphMaskColor) {
            fill = new ol.style.Fill();
            fill.setColor(_geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(this.glyphMaskColor, this.opacity ? this.opacity : 1));
        }
        if (this.glyphMaskOutlineColor && this.glyphMaskOutlineWidth) {
            stroke = new ol.style.Stroke();
            if (this.glyphMaskOutlineColor) {
                stroke.setColor(_geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(this.glyphMaskOutlineColor, this.opacity ? this.opacity : 1));
            }
            if (this.glyphMaskOutlineWidth) {
                stroke.setWidth(this.glyphMaskOutlineWidth ? this.glyphMaskOutlineWidth : 0);
            }
        }
        switch (this.glyphMaskType) {
            case "default":
            case "Default":
            case "rectangle":
            case "Rectangle":
                this.drawRectangle(context, x, y, width, height, fill, stroke);
                break;
            case "roundedCorners":
            case "RoundedCorners":
                this.drawRoundRectangle(context, x, y, width, height, fill, stroke);
                break;
            case "roundedEnds":
            case "RoundedEnds":
                this.drawRoundedEnds(context, x, y, width, height, fill, stroke);
                break;
            case "circle":
            case "Circle":
                this.drawCircle(context, x, y, width, height, fill, stroke);
                break;
        }
    };
    GeoPointStyle.prototype.drawRectangle = function (context, x, y, width, height, fill, stroke) {
        if (fill) {
            context.fillStyle = fill.getColor();
            context.fillRect(x, y, width, height);
        }
        if (stroke) {
            context.lineWidth = stroke.getWidth();
            context.strokeStyle = stroke.getColor();
            context.strokeRect(x + stroke.getWidth(), y + stroke.getWidth(), width, height);
        }
    };
    GeoPointStyle.prototype.drawRoundRectangle = function (context, x, y, width, height, fill, stroke) {
        var radius = (width < height ? width : height) * 0.3;
        // width *= 0.9;
        // height *= 0.8;
        if (stroke) {
            x = x + (stroke.getWidth() ? stroke.getWidth() : 0);
            y = y + (stroke.getWidth() ? stroke.getWidth() : 0);
        }
        context.beginPath();
        context.moveTo(x + radius, y);
        context.lineTo(x + width - radius, y);
        context.quadraticCurveTo(x + width, y, x + width, y + radius);
        context.lineTo(x + width, y + height - radius);
        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
        context.lineTo(x + radius, y + height);
        context.quadraticCurveTo(x, y + height, x, y + height - radius);
        context.lineTo(x, y + radius);
        context.quadraticCurveTo(x, y, x + radius, y);
        context.closePath();
        if (fill) {
            context.fillStyle = fill.getColor();
            context.fill();
        }
        if (stroke) {
            context.lineWidth = stroke.getWidth();
            context.strokeStyle = stroke.getColor();
            context.stroke();
        }
    };
    GeoPointStyle.prototype.drawRoundedEnds = function (context, x, y, width, height, fill, stroke) {
        var radius = (width < height ? width : height) * 0.2;
        // width *= 0.9;
        // height *= 0.8;
        if (stroke) {
            x = x + (stroke.getWidth() ? stroke.getWidth() : 0);
            y = y + (stroke.getWidth() ? stroke.getWidth() : 0);
        }
        context.beginPath();
        context.moveTo(x + radius, y);
        context.lineTo(x + width - radius, y);
        context.quadraticCurveTo(x + width, y + height * 0.5, x + width - radius, y + height);
        context.lineTo(x + radius, y + height);
        context.quadraticCurveTo(x, y + height * 0.5, x + radius, y);
        context.closePath();
        if (fill) {
            context.fillStyle = fill.getColor();
            context.fill();
        }
        if (stroke) {
            context.lineWidth = stroke.getWidth();
            context.strokeStyle = stroke.getColor();
            context.stroke();
        }
    };
    GeoPointStyle.prototype.drawCircle = function (context, x, y, width, height, fill, stroke) {
        var radius = (width < height ? width : height) * 0.5;
        // width *= 0.9;
        // height *= 0.8;
        if (stroke) {
            x = x + (stroke.getWidth() ? stroke.getWidth() : 0);
            y = y + (stroke.getWidth() ? stroke.getWidth() : 0);
        }
        context.beginPath();
        context.arc(x + width * 0.5, y + height * 0.5, radius, 0, 2 * Math.PI, false);
        context.closePath();
        if (fill) {
            context.fillStyle = fill.getColor();
            context.fill();
        }
        if (stroke) {
            context.lineWidth = stroke.getWidth();
            context.strokeStyle = stroke.getColor();
            context.stroke();
        }
    };
    GeoPointStyle.prototype.initSymbolStyle = function () {
        var radius = this.size / 2;
        switch (this.symbolType) {
            case "circle":
                this.imageStyle = new ol.style.Circle({
                    fill: this.convertedGlyphFill !== undefined ? new ol.style.Fill(({
                        color: this.convertedGlyphFill
                    })) : undefined,
                    stroke: this.convertedGlyphOutLineColor !== undefined && this.outlineWidth > 0 ? new ol.style.Stroke(({
                        color: this.convertedGlyphOutLineColor,
                        width: this.outlineWidth
                    })) : undefined,
                    radius: radius
                });
                break;
            case "square":
                this.imageStyle = new ol.style.RegularShape({
                    fill: this.convertedGlyphFill !== undefined ? new ol.style.Fill(({
                        color: this.convertedGlyphFill
                    })) : undefined,
                    stroke: this.convertedGlyphOutLineColor !== undefined && this.outlineWidth > 0 ? new ol.style.Stroke(({
                        color: this.convertedGlyphOutLineColor,
                        width: this.outlineWidth
                    })) : undefined,
                    points: 4,
                    radius: radius,
                    angle: Math.PI / 4 + this.angle
                });
                break;
            case "triangle":
                this.imageStyle = new ol.style.RegularShape({
                    fill: this.convertedGlyphFill !== undefined ? new ol.style.Fill(({
                        color: this.convertedGlyphFill
                    })) : undefined,
                    stroke: this.convertedGlyphOutLineColor !== undefined && this.outlineWidth > 0 ? new ol.style.Stroke(({
                        color: this.convertedGlyphOutLineColor,
                        width: this.outlineWidth
                    })) : undefined,
                    points: 3,
                    radius: radius,
                    angle: this.angle
                });
                break;
            case "cross":
                this.imageStyle = new ol.style.RegularShape({
                    fill: this.convertedGlyphFill !== undefined ? new ol.style.Fill(({
                        color: this.convertedGlyphFill
                    })) : undefined,
                    stroke: this.convertedGlyphOutLineColor !== undefined && this.outlineWidth > 0 ? new ol.style.Stroke(({
                        color: this.convertedGlyphOutLineColor,
                        width: this.outlineWidth
                    })) : undefined,
                    points: 4,
                    radius: radius,
                    radius2: 0,
                    angle: this.angle
                });
                break;
            case "diamond":
                break;
            case "diamond2":
                break;
            case "star":
                this.imageStyle = new ol.style.RegularShape({
                    fill: this.convertedGlyphFill !== undefined ? new ol.style.Fill(({
                        color: this.convertedGlyphFill
                    })) : undefined,
                    stroke: this.convertedGlyphOutLineColor !== undefined && this.outlineWidth > 0 ? new ol.style.Stroke(({
                        color: this.convertedGlyphOutLineColor,
                        width: this.outlineWidth
                    })) : undefined,
                    points: 5,
                    radius: radius,
                    radius2: radius / 2.5,
                    angle: this.angle
                });
                break;
            case "star2":
                break;
        }
    };
    GeoPointStyle.prototype.initBitmapStyle = function () {
        if (this.pointFile) {
            this.imageStyle = new ol.style.Icon(({
                opacity: this.opacity || 1,
                src: this.pointFile,
                rotation: this.angle * Math.PI / 180,
                offset: [this.dx, -this.dy]
            }));
        }
    };
    GeoPointStyle.prototype.initGlyphStyle = function () {
        if (this.glyph) {
            this.textStyle = new ol.style.Text(({
                font: this.size + "px " + this.glyph,
                offsetX: this.dx,
                offsetY: this.dy,
                text: this.glyphName,
                fill: this.convertedGlyphFill !== undefined ? new ol.style.Fill(({
                    color: this.convertedGlyphFill
                })) : undefined,
                stroke: this.convertedGlyphOutLineColor !== undefined && this.outlineWidth > 0 ? new ol.style.Stroke(({
                    color: this.convertedGlyphOutLineColor,
                    width: this.outlineWidth
                })) : undefined,
                rotation: this.angle * Math.PI / 180
            }));
        }
    };
    GeoPointStyle.prototype.applyTransForm = function (style) {
        var transformRgx = /([a-z]+)\((.*?)\)/i;
        if (this.transform && transformRgx.test(this.transform)) {
            var matchedResults = this.transform.match(transformRgx);
            var transFormType = matchedResults.length > 2 ? matchedResults[1] : "";
            var transFormValue = matchedResults.length > 2 ? matchedResults[2] : "";
            switch (transFormType) {
                case "rotate":
                    style.getImage() && style.getImage().setRotation(parseInt(transFormValue));
                    style.getText() && style.getText().setRotation(parseInt(transFormValue));
                    break;
                case "scale":
                    var scale = parseInt(transFormValue.split(",")[0]);
                    style.getImage() && style.getImage().setScale(scale);
                    style.getText() && style.getText().setScale(scale);
                    break;
                case "translate":
                default:
                    throw "not support " + this.transform;
            }
        }
    };
    GeoPointStyle.linearGradientDictionary = {};
    GeoPointStyle.radialGradientDictionary = {};
    return GeoPointStyle;
}(_geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"]));



/***/ }),

/***/ "./src/style/geoShieldStyle.ts":
/*!*************************************!*\
  !*** ./src/style/geoShieldStyle.ts ***!
  \*************************************/
/*! exports provided: GeoShieldStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoShieldStyle", function() { return GeoShieldStyle; });
/* harmony import */ var _geoStyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geoStyle */ "./src/style/geoStyle.ts");
/* harmony import */ var _textLabelingStrategy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./textLabelingStrategy */ "./src/style/textLabelingStrategy.ts");
/* harmony import */ var _detectTextLabelingStrategy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./detectTextLabelingStrategy */ "./src/style/detectTextLabelingStrategy.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var GeoShieldStyle = /** @class */ (function (_super) {
    __extends(GeoShieldStyle, _super);
    function GeoShieldStyle(styleJson) {
        var _this = _super.call(this, styleJson) || this;
        _this.textAligns = ["left", "right", "center", "end", "start"];
        _this.BATCH_CONSTRUCTORS_DEFAULT = {
            Point: _textLabelingStrategy__WEBPACK_IMPORTED_MODULE_1__["TextLabelingStrategy"],
            MultiPoint: _textLabelingStrategy__WEBPACK_IMPORTED_MODULE_1__["TextLabelingStrategy"],
            LineString: _textLabelingStrategy__WEBPACK_IMPORTED_MODULE_1__["TextLabelingStrategy"],
            Circle: _textLabelingStrategy__WEBPACK_IMPORTED_MODULE_1__["TextLabelingStrategy"],
            MultiLineString: _textLabelingStrategy__WEBPACK_IMPORTED_MODULE_1__["TextLabelingStrategy"],
            Polygon: _textLabelingStrategy__WEBPACK_IMPORTED_MODULE_1__["TextLabelingStrategy"],
            MultiPolygon: _textLabelingStrategy__WEBPACK_IMPORTED_MODULE_1__["TextLabelingStrategy"]
        };
        _this.BATCH_CONSTRUCTORS_DETECT = {
            Point: _detectTextLabelingStrategy__WEBPACK_IMPORTED_MODULE_2__["DetectTextLabelingStrategy"],
            MultiPoint: _detectTextLabelingStrategy__WEBPACK_IMPORTED_MODULE_2__["DetectTextLabelingStrategy"],
            LineString: _detectTextLabelingStrategy__WEBPACK_IMPORTED_MODULE_2__["DetectTextLabelingStrategy"],
            Circle: _detectTextLabelingStrategy__WEBPACK_IMPORTED_MODULE_2__["DetectTextLabelingStrategy"],
            MultiLineString: _detectTextLabelingStrategy__WEBPACK_IMPORTED_MODULE_2__["DetectTextLabelingStrategy"],
            Polygon: _detectTextLabelingStrategy__WEBPACK_IMPORTED_MODULE_2__["DetectTextLabelingStrategy"],
            MultiPolygon: _detectTextLabelingStrategy__WEBPACK_IMPORTED_MODULE_2__["DetectTextLabelingStrategy"]
        };
        _this.imageCache = [];
        _this.labelInfos = new ol.structs.LRUCache(512);
        _this.charWidths = {};
        if (styleJson) {
            _this.iconType = styleJson["shield-icon-type"];
            _this.iconSymbolType = styleJson["shield-icon-symbol-type"];
            _this.iconSize = styleJson["shield-icon-size"] ? styleJson["shield-icon-size"] : 0;
            _this.iconSrc = styleJson["shield-icon-src"];
            _this.iconColor = styleJson["shield-icon-color"];
            _this.iconOutlineColor = styleJson["shield-icon-outline-color"];
            _this.iconOutlineWidth = styleJson["shield-icon-outline-width"] ? styleJson["shield-icon-outline-width"] : 0;
            if (_this.iconSrc) {
                if (!GeoShieldStyle.poiCache[_this.iconSrc]) {
                    var imageElement = document.createElement("img");
                    imageElement.src = _this.iconSrc;
                    GeoShieldStyle.poiCache[_this.iconSrc] = imageElement;
                }
            }
            _this.name = styleJson["shield-name"];
            _this.font = styleJson["shield-font"];
            _this.align = styleJson["shield-align"];
            _this.angle = styleJson["shield-rotate-angle"] ? styleJson["shield-rotate-angle"] : 0;
            // this.avoidEdges = styleJson["shield-avoid-edges"];
            _this.dateFormat = styleJson["shield-date-format"];
            // TODO
            _this.dx = styleJson["shield-dx"] ? styleJson["shield-dx"] : 0;
            _this.dy = styleJson["shield-dy"] ? styleJson["shield-dy"] : 0;
            _this.faceName = styleJson["shield-face-name"];
            _this.fill = styleJson["shield-fill"];
            // this.forceHorizontalForLine = styleJson["shield-force-horizontal-for-line"];
            _this.haloFill = styleJson["shield-halo-fill"] ? styleJson["shield-halo-fill"] : "Transparent";
            _this.haloRadius = styleJson["shield-halo-radius"] ? styleJson["shield-halo-radius"] : 0;
            // using in strategy
            _this.margin = styleJson["shield-margin"];
            // this.maxCharAngleDelta = styleJson["shield-max-char-angle-delta"];
            // using in strategy
            _this.minDistance = styleJson["shield-min-distance"];
            // using in strategy
            _this.minPadding = styleJson["shield-min-padding"];
            _this.name = styleJson["shield-name"];
            _this.numericFormat = styleJson["shield-numeric-format"];
            _this.opacity = styleJson["shield-opacity"];
            _this.orientation = styleJson["shield-orientation"];
            // using in strategy
            _this.placements = styleJson["shield-placements"] ? styleJson["shield-placements"] : "UR,U,UL,B,BR,BL,L,R";
            // using in strategy
            _this.placementType = styleJson["shield-placement-type"] ? styleJson["shield-placement-type"] : "default";
            _this.size = styleJson["shield-size"];
            // using in strategy
            _this.spacing = styleJson["shield-spacing"] !== undefined ? styleJson["shield-spacing"] : 10;
            _this.textFormat = styleJson["shield-text-format"];
            _this.wrap = styleJson["shield-wrap-before"] ? true : styleJson["shield-wrap-before"];
            _this.wrapWidth = styleJson["shield-wrap-width"];
        }
        return _this;
    }
    GeoShieldStyle.prototype.initializeCore = function () {
        var font;
        var size;
        this.textStyle = new ol.style.Text({
            stroke: new ol.style.Stroke()
        });
        if (this.textAligns.indexOf(this.align) >= 0) {
            this.textStyle.setTextAlign(this.align);
        }
        if (this.font) {
            this.textStyle.setFont(this.font ? this.font : "10px sans-serif");
        }
        if (this.fill) {
            this.textStyle.getFill().setColor(_geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(this.fill, this.opacity));
        }
        if (this.haloFill) {
            this.textStyle.getStroke().setColor(_geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(this.haloFill, this.opacity));
        }
        if (this.haloRadius) {
            this.textStyle.getStroke().setWidth(this.haloRadius);
        }
        if (this.orientation) {
            this.textStyle.setRotation(this.orientation);
        }
        if (this.iconColor) {
            this.convertSymbolColor = _geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(this.iconColor);
        }
        if (this.iconOutlineColor) {
            this.convertSymbolOutlineColor = _geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(this.iconOutlineColor);
        }
        this.style = new ol.style.Style({
            text: this.textStyle
        });
        var chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        for (var i = 0; i < chars.length; i++) {
            this.charWidths[chars[i]] = ol.render.canvas.measureTextWidth(this.font, chars[i]);
        }
        this.charWidths[" "] = ol.render.canvas.measureTextWidth(this.font, " ");
        for (var i = 0; i <= 9; i++) {
            this.charWidths[i] = ol.render.canvas.measureTextWidth(this.font, i);
        }
        switch (this.iconType) {
            case "image":
            case "Image":
                this.setShiledImageIcon();
                break;
            case "symbol":
            case "Symbol":
                this.setShieldSymbolIcon();
                break;
        }
    };
    GeoShieldStyle.prototype.getConvertedStyleCore = function (feature, resolution, options) {
        var featureText = "";
        if (this.name) {
            featureText = feature.get(this.name);
        }
        featureText = this.formatText(featureText);
        if (featureText === undefined || featureText === "") {
            return;
        }
        this.textStyle.setText(featureText);
        var labelInfo = this.getLabelInfo(featureText);
        var flatCoordinates = this.setLabelPosition(feature, resolution, labelInfo, options.strategyTree, options.frameState);
        if (flatCoordinates === undefined || flatCoordinates.length < 2) {
            return;
        }
        this.style.setGeometry(new ol.geom.Point(flatCoordinates, "XY"));
        var labelimage = this.getImage(labelInfo);
        this.textStyle.label = labelimage;
        this.textStyle.labelPosition = flatCoordinates;
        if (this.imageCache[featureText] === undefined) {
            this.imageCache[featureText] = [];
        }
        var featureZindex = feature["tempTreeZindex"];
        if (featureZindex === undefined) {
            featureZindex = 0;
        }
        this.style.setZIndex(featureZindex);
        return [this.style];
    };
    GeoShieldStyle.prototype.setShieldSymbolIcon = function () {
        if (this.iconSymbolType !== undefined) {
            switch (this.iconSymbolType) {
                case "circle":
                    this.setCircleIcon();
                    break;
                case "square":
                    this.setSquareIcon();
                    break;
                case "triangle":
                    this.setTriangleIcon();
                    break;
                case "cross":
                    this.setCrossIcon();
                    break;
                case "star":
                    this.setStarIcon();
                    break;
            }
            this.style.setImage(this.image);
        }
    };
    GeoShieldStyle.prototype.setStarIcon = function () {
        var fill = undefined;
        var stroke = undefined;
        var radius = this.iconSize * 0.5;
        if (this.iconColor) {
            fill = new ol.style.Fill(({ color: this.convertSymbolColor }));
        }
        if (this.iconOutlineColor || this.iconOutlineWidth) {
            stroke = new ol.style.Stroke(({
                color: this.convertSymbolOutlineColor,
                width: this.iconOutlineWidth
            }));
        }
        this.image = new ol.style.RegularShape({
            fill: fill,
            stroke: stroke,
            points: 5,
            radius: radius,
            radius2: radius / 2.5,
            angle: this.angle
        });
    };
    GeoShieldStyle.prototype.setCrossIcon = function () {
        var fill = undefined;
        var stroke = undefined;
        var radius = this.iconSize * 0.5;
        if (this.iconColor) {
            fill = new ol.style.Fill(({ color: this.convertSymbolColor }));
        }
        if (this.iconOutlineColor || this.iconOutlineWidth) {
            stroke = new ol.style.Stroke(({
                color: this.convertSymbolOutlineColor,
                width: this.iconOutlineWidth
            }));
        }
        this.image = new ol.style.RegularShape({
            fill: fill,
            stroke: stroke,
            points: 4,
            radius: radius,
            radius2: 0,
            angle: this.angle
        });
    };
    GeoShieldStyle.prototype.setTriangleIcon = function () {
        var fill = undefined;
        var stroke = undefined;
        var radius = this.iconSize * 0.5;
        if (this.iconColor) {
            fill = new ol.style.Fill(({ color: this.convertSymbolColor }));
        }
        if (this.iconOutlineColor || this.iconOutlineWidth) {
            stroke = new ol.style.Stroke(({
                color: this.convertSymbolOutlineColor,
                width: this.iconOutlineWidth
            }));
        }
        this.image = new ol.style.RegularShape({
            fill: fill,
            stroke: stroke,
            points: 3,
            radius: radius,
            angle: this.angle
        });
    };
    GeoShieldStyle.prototype.setSquareIcon = function () {
        var fill = undefined;
        var stroke = undefined;
        var radius = this.iconSize * 0.5;
        if (this.iconColor) {
            fill = new ol.style.Fill(({ color: this.convertSymbolColor }));
        }
        if (this.iconOutlineColor || this.iconOutlineWidth) {
            stroke = new ol.style.Stroke(({
                color: this.convertSymbolOutlineColor,
                width: this.iconOutlineWidth
            }));
        }
        this.image = new ol.style.RegularShape({
            fill: fill,
            stroke: stroke,
            points: 4,
            radius: radius,
            angle: Math.PI / 4 + this.angle
        });
    };
    GeoShieldStyle.prototype.setCircleIcon = function () {
        var fill = undefined;
        var stroke = undefined;
        var radius = this.iconSize * 0.5;
        if (this.iconColor) {
            fill = new ol.style.Fill(({ color: this.convertSymbolColor }));
        }
        if (this.iconOutlineColor || this.iconOutlineWidth) {
            stroke = new ol.style.Stroke(({
                color: this.convertSymbolOutlineColor,
                width: this.iconOutlineWidth
            }));
        }
        this.image = new ol.style.Circle({
            fill: fill,
            stroke: stroke,
            radius: radius
        });
    };
    GeoShieldStyle.prototype.setShiledImageIcon = function () {
        if (this.iconSrc !== undefined) {
            var poiImg = GeoShieldStyle.poiCache[this.iconSrc];
            if (poiImg.complete) {
                if (poiImg.naturalWidth !== 0) {
                    this.image = new ol.style.Icon({
                        img: poiImg,
                        imgSize: [poiImg.width, poiImg.height],
                        rotation: this.angle * Math.PI / 180
                    });
                    this.style.setImage(this.image);
                }
            }
        }
    };
    GeoShieldStyle.prototype.getLabelInfo = function (text) {
        var key = text;
        if (!this.labelInfos.containsKey(key)) {
            var font = this.formatFont(this.textStyle.getFont());
            text = this.wrapText(text, font);
            var fillState = this.textStyle.getFill();
            var strokeState = this.textStyle.getStroke();
            var pixelRatio = window.devicePixelRatio;
            var scale = this.textStyle.getScale();
            scale = (scale ? scale : 1) * pixelRatio;
            var align = ol.render.replay.TEXT_ALIGN[this.textStyle.getTextAlign() || ol.render.canvas.defaultTextAlign];
            var strokeWidth = strokeState && strokeState.getWidth() ? strokeState.getWidth() : 0;
            var lines = text.split("\n");
            var numLines = lines.length;
            var widths = [];
            // let width = (<any>ol.render.canvas).TextReplay.measureTextWidths(font, lines, widths);
            var width = this.getEstimatedWidth(font, lines, widths);
            var renderWidth = width + strokeWidth;
            var lineHeight = ol.render.canvas.measureTextHeight(font);
            var height = lineHeight * numLines;
            // if (this.dx) { this.textStyle.setOffsetX(this.dx + height / 2); }
            if (this.dx) {
                this.textStyle.setOffsetX(this.dx);
            }
            // if (this.dy) { this.textStyle.setOffsetY(this.dy + height / 2); }
            if (this.dy) {
                this.textStyle.setOffsetY(this.dy);
            }
            var labelWidth = Math.ceil(renderWidth * scale);
            var labelHeight = Math.ceil((height + strokeWidth) * scale);
            var labelInfo = {
                width: labelWidth,
                height: labelHeight,
                scale: scale,
                numLines: numLines,
                lines: lines,
                widths: widths,
                lineHeight: lineHeight,
                font: font
            };
            this.labelInfos.set(key, labelInfo);
        }
        return this.labelInfos.get(key);
    };
    GeoShieldStyle.prototype.setLabelPosition = function (geometry, resolution, labelInfo, strategyTree, frameState) {
        var geometryType = geometry.getType();
        var flatCoordinates;
        var i, ii;
        var Constructor;
        if (this.placementType === "default") {
            Constructor = this.BATCH_CONSTRUCTORS_DEFAULT[geometryType];
        }
        else if (this.placementType === "detect") {
            Constructor = this.BATCH_CONSTRUCTORS_DETECT[geometryType];
        }
        var textLabelingStrategy = new Constructor();
        var width = labelInfo.width;
        var height = labelInfo.height;
        switch (geometryType) {
            case ol.geom.GeometryType.POINT:
            case ol.geom.GeometryType.MULTI_POINT:
                flatCoordinates = geometry.getFlatCoordinates();
                break;
            case ol.geom.GeometryType.LINE_STRING:
                flatCoordinates = /** @type {ol.geom.LineString} */ (geometry).getFlatMidpoint();
                break;
            case ol.geom.GeometryType.CIRCLE:
                flatCoordinates = /** @type {ol.geom.Circle} */ (geometry).getCenter();
                break;
            case ol.geom.GeometryType.MULTI_LINE_STRING:
                flatCoordinates = /** @type {ol.geom.MultiLineString} */ (geometry).getFlatMidpoints();
                break;
            case ol.geom.GeometryType.POLYGON:
                flatCoordinates = /** @type {ol.geom.Polygon} */ (geometry).getFlatInteriorPoint();
                break;
            case ol.geom.GeometryType.MULTI_POLYGON:
                var interiorPoints = /** @type {ol.geom.MultiPolygon} */ (geometry).getFlatInteriorPoints();
                flatCoordinates = [];
                for (i = 0, ii = interiorPoints.length; i < ii; i += 3) {
                    if (this.textStyle.overflow || interiorPoints[i + 2] / resolution >= width) {
                        flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);
                    }
                }
                break;
            default:
        }
        flatCoordinates = textLabelingStrategy.markLocation(flatCoordinates, width, height, resolution, geometryType, this, strategyTree, frameState);
        return flatCoordinates;
    };
    GeoShieldStyle.prototype.getEstimatedWidth = function (font, lines, widths) {
        var numLines = lines.length;
        var width = 0;
        var currentWidth, i;
        for (i = 0; i < numLines; ++i) {
            currentWidth = 0;
            for (var j = 0; j < lines[i].length; j++) {
                var charWidth = this.charWidths[lines[i][j]];
                if (charWidth) {
                    currentWidth += charWidth;
                }
                else {
                    currentWidth += this.charWidths["W"];
                }
            }
            width = Math.max(width, currentWidth);
            widths.push(currentWidth);
        }
        return width;
    };
    GeoShieldStyle.prototype.getImage = function (labelInfo) {
        if (labelInfo.label === undefined) {
            var context = ol.dom.createCanvasContext2D(labelInfo.width, labelInfo.height);
            var label = context.canvas;
            if (labelInfo.scale !== 1) {
                context.scale(labelInfo.scale, labelInfo.scale);
            }
            context.font = labelInfo.font;
            var strokeState = this.textStyle.getStroke();
            var strokeWidth = strokeState && strokeState.getWidth() ? strokeState.getWidth() : 0;
            var fillState = this.textStyle.getFill();
            if (strokeState) {
                context.strokeStyle = strokeState.getColor() ? strokeState.getColor() : "Transparent";
                context.lineWidth = strokeWidth * (ol.has.SAFARI ? labelInfo.scale : 1);
                context.lineCap = strokeState.getLineCap();
                context.lineJoin = strokeState.getLineJoin();
                context.miterLimit = strokeState.getMiterLimit();
                var lineDash = strokeState.getLineDash();
                lineDash = lineDash ? lineDash.slice() : ol.render.canvas.defaultLineDash;
                if (ol.has.CANVAS_LINE_DASH && lineDash.length) {
                    context.setLineDash(strokeState.getLineDash());
                    context.lineDashOffset = strokeState.getLineDashOffset();
                }
            }
            if (fillState) {
                context.fillStyle = fillState.getColor();
            }
            context.textBaseline = "middle";
            context.textAlign = "center";
            var align = ol.render.replay.TEXT_ALIGN[this.textStyle.getTextAlign() || ol.render.canvas.defaultTextAlign];
            var leftRight = (0.5 - align);
            var x = align * label.width / labelInfo.scale + leftRight * strokeWidth;
            var i = void 0;
            if (strokeState) {
                for (i = 0; i < labelInfo.numLines; ++i) {
                    context.strokeText(labelInfo.lines[i], x + leftRight * labelInfo.widths[i], 0.5 * (strokeWidth + labelInfo.lineHeight) + i * labelInfo.lineHeight);
                }
            }
            if (fillState) {
                for (i = 0; i < labelInfo.numLines; ++i) {
                    context.fillText(labelInfo.lines[i], x + leftRight * labelInfo.widths[i], 0.5 * (strokeWidth + labelInfo.lineHeight) + i * labelInfo.lineHeight);
                }
            }
            labelInfo["label"] = label;
        }
        return labelInfo["label"];
    };
    GeoShieldStyle.prototype.formatText = function (featureText) {
        if (this.numericFormat) {
            featureText = this.getTextWithNumericFormat(featureText);
        }
        if (this.dateFormat) {
            featureText = this.getTextWithDateFormat(featureText);
        }
        if (this.textFormat) {
            featureText = this.getTextWithFormat(featureText);
        }
        return featureText;
    };
    GeoShieldStyle.prototype.getTextWithNumericFormat = function (featureText) {
        var tmpArguments = this.numericFormat.split(",");
        var numericFormatOptions = {};
        for (var _i = 0, tmpArguments_1 = tmpArguments; _i < tmpArguments_1.length; _i++) {
            var tmpArgument = tmpArguments_1[_i];
            var keyValuePair = tmpArgument.split(":");
            switch (keyValuePair[0].trim()) {
                case "localeMatcher":
                    numericFormatOptions.localeMatcher = keyValuePair[1].trim();
                    break;
                case "style":
                    numericFormatOptions.style = keyValuePair[1].trim();
                    break;
                case "currency":
                    numericFormatOptions.currency = keyValuePair[1].trim();
                    break;
                case "currencyDisplay":
                    numericFormatOptions.currencyDisplay = keyValuePair[1].trim();
                    break;
                case "useGrouping":
                    numericFormatOptions.useGrouping = keyValuePair[1].trim();
                    break;
                case "minimumIntegerDigits":
                    numericFormatOptions.minimumIntegerDigits = keyValuePair[1].trim();
                    break;
                case "minimumFractionDigits":
                    numericFormatOptions.minimumFractionDigits = keyValuePair[1].trim();
                    break;
                case "maximumFractionDigits":
                    numericFormatOptions.maximumFractionDigits = keyValuePair[1].trim();
                    break;
                case "minimumSignificantDigits":
                    numericFormatOptions.minimumSignificantDigits = keyValuePair[1].trim();
                    break;
                case "maximumSignificantDigits":
                    numericFormatOptions.maximumSignificantDigits = keyValuePair[1].trim();
                    break;
            }
        }
        var numeric = new Intl.NumberFormat(tmpArguments[0], numericFormatOptions);
        return numeric.format(Number(featureText));
    };
    GeoShieldStyle.prototype.getTextWithDateFormat = function (featureText) {
        return (new Date(featureText)).format(this.dateFormat);
    };
    GeoShieldStyle.prototype.getTextWithFormat = function (featureText) {
        return String.format(featureText, this.textFormat);
    };
    GeoShieldStyle.prototype.getPointGeometry = function (feature) {
        return feature.getGeometry();
    };
    GeoShieldStyle.prototype.wrapText = function (text, font) {
        var resultText;
        if (text !== "") {
            var lines = [text];
            var widths = [];
            // let width = (<any>ol.render.canvas).TextReplay.measureTextWidths(font, lines, widths);
            var width = this.getEstimatedWidth(font, lines, widths);
            var wrapWidth = this.wrapWidth;
            var wrapCharacter = " ";
            var isWrapBefore = this.wrap;
            if (wrapWidth > 0 && width > wrapWidth && text.includes(wrapCharacter)) {
                var textLines = [];
                lines = text.split(wrapCharacter);
                var wrapLines = [];
                var wrapWidthSum = 0;
                var tmpWrapWidth = void 0;
                if (isWrapBefore) {
                    for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
                        var line = lines_1[_i];
                        var tmpLine = [line];
                        // tmpWrapWidth = (<any>ol.render.canvas).TextReplay.measureTextWidths(font, tmpLine, widths);
                        tmpWrapWidth = this.getEstimatedWidth(font, tmpLine, widths);
                        wrapWidthSum += tmpWrapWidth;
                        if (tmpWrapWidth > wrapWidth) {
                            wrapLines = [];
                            textLines = [];
                            wrapWidthSum = 0;
                            break;
                        }
                        if (wrapLines.length > 0) {
                            if (wrapWidthSum > wrapWidth) {
                                wrapLines.push("\n");
                                textLines.push(wrapLines.join(""));
                                wrapLines = [];
                                wrapWidthSum = 0;
                            }
                        }
                        wrapLines.push(" " + line);
                    }
                    if (wrapLines.length > 0) {
                        textLines.push(wrapLines.join(""));
                    }
                }
                else {
                    for (var _a = 0, lines_2 = lines; _a < lines_2.length; _a++) {
                        var line = lines_2[_a];
                        wrapLines.push(" " + line);
                        var tmpLine = [line];
                        // tmpWrapWidth = (<any>ol.render.canvas).TextReplay.measureTextWidths(font, tmpLine, widths);
                        tmpWrapWidth = this.getEstimatedWidth(font, tmpLine, widths);
                        wrapWidthSum += tmpWrapWidth;
                        if (wrapWidthSum > wrapWidth) {
                            wrapLines.push("\n");
                            textLines.push(wrapLines.join(""));
                            wrapLines = [];
                            wrapWidthSum = 0;
                        }
                    }
                    if (wrapLines.length > 0) {
                        textLines.push(wrapLines.join(""));
                    }
                }
                resultText = textLines.join("");
                if (resultText.lastIndexOf("\n") === resultText.length - 1) {
                    resultText = resultText.substr(0, resultText.length - 1);
                }
            }
            else {
                resultText = text;
            }
        }
        return resultText;
    };
    GeoShieldStyle.prototype.formatFont = function (font) {
        var tmpFonts = font.split(" ");
        var formatedFont = [];
        if (tmpFonts[tmpFonts.length - 1].includes("bold") || tmpFonts[tmpFonts.length - 1].includes("italic")) {
            formatedFont.push(tmpFonts[tmpFonts.length - 1] + " ");
            for (var i = 0; i < tmpFonts.length - 1; i++) {
                formatedFont.push(tmpFonts[i] + " ");
            }
        }
        else {
            return font;
        }
        return formatedFont.join("").trim();
    };
    GeoShieldStyle.poiCache = [];
    return GeoShieldStyle;
}(_geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"]));



/***/ }),

/***/ "./src/style/geoStyle.ts":
/*!*******************************!*\
  !*** ./src/style/geoStyle.ts ***!
  \*******************************/
/*! exports provided: GeoStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoStyle", function() { return GeoStyle; });
var GeoStyle = /** @class */ (function () {
    function GeoStyle(styleJson) {
        this.styles = [];
        if (styleJson) {
            this.id = styleJson["id"];
            this.uid = ol.getUid(this);
            this.visible = styleJson["visible"] === undefined ? true : styleJson["visible"];
        }
    }
    GeoStyle.prototype.initialize = function () {
        if (!this.initialized) {
            this.initializeCore();
            this.initialized = true;
        }
    };
    GeoStyle.prototype.initializeCore = function () {
    };
    GeoStyle.prototype.getStyles = function (feature, resolution, options) {
        var results = [];
        if (this.visible) {
            results = this.getConvertedStyle(feature, resolution, options);
        }
        return results;
    };
    GeoStyle.prototype.getConvertedStyle = function (feature, resolution, options) {
        this.initialize();
        return this.getConvertedStyleCore(feature, resolution, options);
    };
    GeoStyle.prototype.getConvertedStyleCore = function (feature, resolution, options) {
        return [];
    };
    GeoStyle.prototype.skewGeometry = function (geometry, xDeg, yDeg) {
        var center = ol.extent.getCenter(geometry.getExtent());
        for (var i = 0; i < geometry.flatCoordinates.length; i += 2) {
            var x = geometry.flatCoordinates[i];
            var y = geometry.flatCoordinates[i + 1];
            var rx = this.skewX(x, y, center[0], center[1], xDeg);
            var ry = this.skewY(x, y, center[0], center[1], yDeg);
            geometry.flatCoordinates[i] = rx;
            geometry.flatCoordinates[i + 1] = ry;
        }
    };
    GeoStyle.prototype.skewX = function (x, y, cx, cy, xDeg) {
        var rx = x;
        if (xDeg !== 0) {
            var xResolution = Math.tan(1.0 * xDeg * Math.PI / 180);
            var distance = void 0;
            if (x > cx) {
                if (y > cy) {
                    distance = xResolution * Math.abs(y - cy);
                }
                else {
                    distance = 0 - xResolution * Math.abs(y - cy);
                }
            }
            else {
                if (y > cy) {
                    distance = xResolution * Math.abs(y - cy);
                }
                else {
                    distance = 0 - xResolution * Math.abs(y - cy);
                }
            }
            rx += Math.round(distance);
        }
        return rx;
    };
    GeoStyle.prototype.skewY = function (x, y, cx, cy, yDeg) {
        var ry = y;
        if (yDeg !== 0) {
            var yResolution = Math.tan(1.0 * yDeg * Math.PI / 180);
            var distance = void 0;
            if (y > cy) {
                if (x > cx) {
                    distance = yResolution * Math.abs(x - cx);
                }
                else {
                    distance = 0 - yResolution * Math.abs(x - cx);
                }
            }
            else {
                if (x > cx) {
                    distance = yResolution * Math.abs(x - cx);
                }
                else {
                    distance = 0 - yResolution * Math.abs(x - cx);
                }
            }
            ry += Math.round(distance);
        }
        return ry;
    };
    GeoStyle.toRGBAColor = function (color, opacity) {
        if (opacity === void 0) { opacity = 1; }
        if (color.indexOf("#") === 0) {
            var array = void 0;
            var r = void 0;
            var g = void 0;
            var b = void 0;
            var a = void 0;
            if (color.length === 4) {
                r = +("0x" + color.substr(1, 1) + color.substr(1, 1));
                g = +("0x" + color.substr(2, 1) + color.substr(2, 1));
                b = +("0x" + color.substr(3, 1) + color.substr(3, 1));
                a = opacity;
            }
            else {
                r = +("0x" + color.substr(1, 2));
                g = +("0x" + color.substr(3, 2));
                b = +("0x" + color.substr(5, 2));
                a = opacity;
            }
            array = [r, g, b, a];
            if (!isNaN(r) && !isNaN(g) && !isNaN(b)) {
                return "rgba(" + array.join(",") + ")";
            }
            else {
                return "rgba(0,0,0,0)";
            }
        }
        if (color.indexOf("rgb(") === 0) {
            color = color.replace("rgb(", "rgba(");
            color = color.substring(0, color.length - 1) + "," + opacity + ")";
        }
        if (color.indexOf("argb(") === 0) {
            color = color.replace("argb(", "").replace(")", "");
            var array = color.split(",");
            var a = array.shift();
            array.push(a);
            color = "rgba(" + array.join(",") + ")";
        }
        return color;
    };
    GeoStyle.toOLLinearGradient = function (color, opacity, size) {
        if (opacity === void 0) { opacity = 1; }
        var canvas = document.createElement("canvas");
        var context = canvas.getContext("2d");
        context.rect(0, 0, size, size);
        var grd = context.createLinearGradient(0, 0, size, size);
        var colorStops = color.split(",");
        for (var _i = 0, colorStops_1 = colorStops; _i < colorStops_1.length; _i++) {
            var colorStop = colorStops_1[_i];
            colorStop = colorStop.trim();
            var tmpColorStop = colorStop.substr(1, colorStop.length - 2);
            var cs = tmpColorStop.split(":");
            grd.addColorStop(Number(cs[0].trim()), this.toRGBAColor(cs[1].trim(), opacity));
        }
        return grd;
    };
    GeoStyle.toOLRadialGradient = function (color, opacity, size) {
        if (opacity === void 0) { opacity = 1; }
        var canvas = document.createElement("canvas");
        var context = canvas.getContext("2d");
        context.rect(0, 0, size, size);
        var grd = context.createRadialGradient(size / 2, size / 2, 0, size / 2, size / 2, size / 2);
        var colorStops = color.split(",");
        for (var _i = 0, colorStops_2 = colorStops; _i < colorStops_2.length; _i++) {
            var colorStop = colorStops_2[_i];
            colorStop = colorStop.trim();
            var tmpColorStop = colorStop.substr(1, colorStop.length - 2);
            var cs = tmpColorStop.split(":");
            grd.addColorStop(Number(cs[0].trim()), this.toRGBAColor(cs[1].trim(), opacity));
        }
        return grd;
    };
    return GeoStyle;
}());



/***/ }),

/***/ "./src/style/geoStyleProperty.ts":
/*!***************************************!*\
  !*** ./src/style/geoStyleProperty.ts ***!
  \***************************************/
/*! exports provided: GeoStyleProperty */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoStyleProperty", function() { return GeoStyleProperty; });
/* harmony import */ var _filter_geoFilterItem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../filter/geoFilterItem */ "./src/filter/geoFilterItem.ts");
/* harmony import */ var _filter_geoZoomFilter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../filter/geoZoomFilter */ "./src/filter/geoZoomFilter.ts");
/* harmony import */ var _filter_geoStringAttributeFilter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../filter/geoStringAttributeFilter */ "./src/filter/geoStringAttributeFilter.ts");
/* harmony import */ var _filter_geoRegexFilter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../filter/geoRegexFilter */ "./src/filter/geoRegexFilter.ts");
/* harmony import */ var _filter_geoNumberAttributeFilter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../filter/geoNumberAttributeFilter */ "./src/filter/geoNumberAttributeFilter.ts");





var GeoStyleProperty = /** @class */ (function () {
    function GeoStyleProperty(styleJsonValue, defaultValue) {
        this.styleJsonValue = styleJsonValue;
        this.defaultValue = defaultValue;
    }
    GeoStyleProperty.prototype.initialize = function () {
        if (this.styleJsonValue !== undefined) {
            if (typeof this.styleJsonValue === "object") {
                this.conditions = [];
                this.values = [];
                for (var name_1 in this.styleJsonValue) {
                    var filters = this.createFilter(name_1);
                    this.conditions.push(filters);
                    this.values.push(this.initializeValue(this.styleJsonValue[name_1]));
                }
            }
        }
        this.value = this.initializeValue(this.defaultValue);
    };
    GeoStyleProperty.prototype.initializeValue = function (value) {
        return value;
    };
    GeoStyleProperty.prototype.isCondition = function () {
        return this.conditions && this.conditions.length > 0;
    };
    GeoStyleProperty.prototype.getValue = function (columnValue) {
        if (this.conditions && this.conditions.length > 0) {
            if (columnValue) {
                var i = 0;
                var matched = false;
                for (i = 0; i < this.conditions.length; i++) {
                    var filterGroup = this.conditions[i];
                    for (var j = 0; j < filterGroup.length; j++) {
                        var filters = filterGroup[j];
                        var groupMatched = true;
                        for (var k = 0; k < filters.length; k++) {
                            var filter = filters[k];
                            var rawFeature = { properties: columnValue };
                            if (!filter.matchOLFeature(rawFeature, 0)) {
                                groupMatched = false;
                                break;
                            }
                        }
                        if (groupMatched) {
                            matched = true;
                            break;
                        }
                    }
                    if (matched) {
                        break;
                    }
                }
                if (matched) {
                    return this.values[i];
                }
            }
            else {
                return this.value;
            }
        }
        else {
            return this.value;
        }
    };
    GeoStyleProperty.prototype.createFilter = function (filterString) {
        var filterGroup = [];
        if (filterString) {
            var filterStrings = filterString.split("|");
            for (var i = 0; i < filterStrings.length; i++) {
                var filterStr = filterStrings[i];
                var expression = "(\\w+?=~'.+?')|(\\w+?[<>!=]*'[^;]+?')|(\\w+?[<>!=]*[^;]+)";
                var regex = new RegExp(expression, "g");
                var results = filterStr.match(regex);
                var rangeFilters = {};
                var filters = [];
                var geoZoomFilter = void 0;
                for (var i_1 = 0; i_1 < results.length; i_1++) {
                    if (results[i_1]) {
                        var filterItem = _filter_geoFilterItem__WEBPACK_IMPORTED_MODULE_0__["GeoFilterItem"].createFilterItem(results[i_1]);
                        if (filterItem.value.indexOf("~'") === 0) {
                            filters.push(new _filter_geoRegexFilter__WEBPACK_IMPORTED_MODULE_3__["GeoRegexFilter"]([filterItem]));
                        }
                        else if (filterItem.key === "zoom") {
                            if (geoZoomFilter === undefined) {
                                geoZoomFilter = new _filter_geoZoomFilter__WEBPACK_IMPORTED_MODULE_1__["GeoZoomFilter"]([]);
                            }
                            geoZoomFilter.addFilterItem(filterItem);
                        }
                        else if (filterItem.value.includes("'")) {
                            filters.push(new _filter_geoStringAttributeFilter__WEBPACK_IMPORTED_MODULE_2__["GeoStringAttributeFilter"]([filterItem]));
                        }
                        else {
                            rangeFilters[filterItem.key] = rangeFilters[filterItem.key] || new _filter_geoNumberAttributeFilter__WEBPACK_IMPORTED_MODULE_4__["GeoNumberAttributeFilter"]([]);
                            rangeFilters[filterItem.key].addFilterItem(filterItem);
                        }
                    }
                }
                for (var name_2 in rangeFilters) {
                    filters.push(rangeFilters[name_2]);
                }
                filterGroup.push(filters);
            }
        }
        return filterGroup;
    };
    return GeoStyleProperty;
}());



/***/ }),

/***/ "./src/style/geoTextStyle.ts":
/*!***********************************!*\
  !*** ./src/style/geoTextStyle.ts ***!
  \***********************************/
/*! exports provided: GeoTextStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoTextStyle", function() { return GeoTextStyle; });
/* harmony import */ var _geoStyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./geoStyle */ "./src/style/geoStyle.ts");
/* harmony import */ var _geoStyleProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./geoStyleProperty */ "./src/style/geoStyleProperty.ts");
/* harmony import */ var _textLabelingStrategy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./textLabelingStrategy */ "./src/style/textLabelingStrategy.ts");
/* harmony import */ var _detectTextLabelingStrategy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./detectTextLabelingStrategy */ "./src/style/detectTextLabelingStrategy.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var GeoTextStyle = /** @class */ (function (_super) {
    __extends(GeoTextStyle, _super);
    function GeoTextStyle(styleJson) {
        var _this = _super.call(this, styleJson) || this;
        _this.textAligns = ["left", "right", "center", "end", "start"];
        _this.textBaseline = ["bottom", "top", "middle", "alphabetic", "hanging", "ideographic"];
        _this.textTransforms = ["default", "uppercase", "lowercase"];
        _this.drawnMask = false;
        _this.BATCH_CONSTRUCTORS_DEFAULT = {
            Point: _textLabelingStrategy__WEBPACK_IMPORTED_MODULE_2__["TextLabelingStrategy"],
            MultiPoint: _textLabelingStrategy__WEBPACK_IMPORTED_MODULE_2__["TextLabelingStrategy"],
            LineString: _textLabelingStrategy__WEBPACK_IMPORTED_MODULE_2__["TextLabelingStrategy"],
            Circle: _textLabelingStrategy__WEBPACK_IMPORTED_MODULE_2__["TextLabelingStrategy"],
            MultiLineString: _textLabelingStrategy__WEBPACK_IMPORTED_MODULE_2__["TextLabelingStrategy"],
            Polygon: _textLabelingStrategy__WEBPACK_IMPORTED_MODULE_2__["TextLabelingStrategy"],
            MultiPolygon: _textLabelingStrategy__WEBPACK_IMPORTED_MODULE_2__["TextLabelingStrategy"]
        };
        _this.BATCH_CONSTRUCTORS_DETECT = {
            Point: _detectTextLabelingStrategy__WEBPACK_IMPORTED_MODULE_3__["DetectTextLabelingStrategy"],
            MultiPoint: _detectTextLabelingStrategy__WEBPACK_IMPORTED_MODULE_3__["DetectTextLabelingStrategy"],
            LineString: _detectTextLabelingStrategy__WEBPACK_IMPORTED_MODULE_3__["DetectTextLabelingStrategy"],
            Circle: _detectTextLabelingStrategy__WEBPACK_IMPORTED_MODULE_3__["DetectTextLabelingStrategy"],
            MultiLineString: _detectTextLabelingStrategy__WEBPACK_IMPORTED_MODULE_3__["DetectTextLabelingStrategy"],
            Polygon: _detectTextLabelingStrategy__WEBPACK_IMPORTED_MODULE_3__["DetectTextLabelingStrategy"],
            MultiPolygon: _detectTextLabelingStrategy__WEBPACK_IMPORTED_MODULE_3__["DetectTextLabelingStrategy"]
        };
        _this.labelInfos = new ol.structs.LRUCache(512);
        _this.charWidths = {};
        if (styleJson) {
            _this.align = styleJson["text-align"];
            _this.baseline = styleJson["text-base-line"];
            _this.dx = styleJson["text-dx"];
            _this.dy = styleJson["text-dy"];
            _this.font = styleJson["text-font"];
            _this.fill = styleJson["text-fill"];
            _this.forceHorizontalForLine = styleJson["text-force-horizontal-for-line"];
            _this.haloFill = styleJson["text-halo-fill"];
            _this.haloRadius = styleJson["text-halo-radius"];
            _this.margin = styleJson["text-margin"];
            _this.maskColor = styleJson["text-mask-color"];
            _this.maskMargin = styleJson["text-mask-margin"];
            _this.maskOutlineColor = styleJson["text-mask-outline-color"];
            _this.maskOutlineWidth = styleJson["text-mask-outline-width"];
            _this.maskType = styleJson["text-mask-type"];
            _this.maxCharAngle = styleJson["text-max-char-angle"];
            _this.minDistance = styleJson["text-min-distance"];
            _this.minPadding = styleJson["text-min-padding"];
            _this.name = styleJson["text-name"];
            _this.opacity = styleJson["text-opacity"];
            _this.rotateAngle = styleJson["text-rotate-angle"];
            _this.propertyPlacements = new _geoStyleProperty__WEBPACK_IMPORTED_MODULE_1__["GeoStyleProperty"](styleJson[GeoTextStyle.placementsName], "U,B,L,R");
            _this.placementType = styleJson["text-placement-type"] ? styleJson["text-placement-type"] : "default";
            _this.spacing = styleJson["text-spacing"] !== undefined ? styleJson["text-spacing"] : 10;
            _this.wrapBefore = styleJson["text-wrap-before"] ? true : styleJson["text-wrap-before"];
            _this.wrapWidth = styleJson["text-wrap-width"];
            _this.textFormat = styleJson["text-text-format"];
            _this.dateFormat = styleJson["text-date-format"];
            _this.numericFormat = styleJson["text-numeric-format"];
            _this.textTransform = styleJson["text-letter-case"];
            _this.letterSpacing = styleJson["text-letter-spacing"];
            // TODO
            _this.avoidEdge = styleJson["text-avoid-edge"];
            // TODO
            _this.splineType = styleJson["text-spline-type"];
            // TODO
            _this.polygonLabelingLocation = styleJson["text-polygon-labeling-location"];
            var chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
            for (var i = 0; i < chars.length; i++) {
                _this.charWidths[chars[i]] = ol.render.canvas.measureTextWidth(_this.font, chars[i]);
            }
            _this.charWidths[" "] = ol.render.canvas.measureTextWidth(_this.font, " ");
            for (var i = 0; i <= 9; i++) {
                _this.charWidths[i] = ol.render.canvas.measureTextWidth(_this.font, i);
            }
        }
        return _this;
    }
    GeoTextStyle.prototype.initializeCore = function () {
        this.propertyPlacements.initialize();
        this.placements = this.propertyPlacements.getValue();
        if (this.fill) {
            this.fillColor = _geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(this.fill, this.opacity);
        }
        if (this.haloFill) {
            this.haloFillColor = _geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(this.haloFill, this.opacity);
        }
        var fill = new ol.style.Fill();
        var stroke = new ol.style.Stroke();
        var textStyle = new ol.style.Text({
            fill: fill,
            stroke: stroke
        });
        this.style = new ol.style.Style({
            text: textStyle
        });
        if (this.textAligns.indexOf(this.align) >= 0) {
            textStyle.setTextAlign(this.align);
        }
        if (this.textBaseline.indexOf(this.baseline) >= 0) {
            textStyle.setTextBaseline(this.baseline);
        }
        if (this.dx) {
            textStyle.setOffsetX(this.dx);
        }
        if (this.dy) {
            textStyle.setOffsetY(this.dy);
        }
        if (this.font) {
            textStyle.setFont(this.font);
        }
        if (this.fillColor) {
            fill.setColor(this.fillColor);
        }
        if (this.haloFillColor) {
            stroke.setColor(this.haloFillColor);
        }
        if (this.haloRadius) {
            stroke.setWidth(this.haloRadius);
        }
        if (this.haloFillColor === undefined && this.haloRadius === undefined) {
            textStyle.setStroke(undefined);
        }
        if (this.rotateAngle) {
            textStyle.setRotation(this.rotateAngle);
        }
        if (this.maxCharAngle >= 0) {
            textStyle.setMaxAngle(this.maxCharAngle);
        }
        if (this.textTransforms.includes(this.textTransform)) {
        }
        else {
            // TODO: invalid inputs.
            this.textTransform = this.textTransforms[0];
        }
    };
    GeoTextStyle.prototype.getConvertedStyleCore = function (feature, resolution, options) {
        var textStyles = [];
        var featureText = "";
        var featureProperties = feature.getProperties();
        if (this.name) {
            featureText = feature.get(this.name);
        }
        // A workaround for the language, remove the data update
        if ((featureText === undefined || featureText === "") && this.name.indexOf("name_") === 0) {
            featureText = feature.get("name");
        }
        if (this.numericFormat) {
            featureText = this.getTextWithNumericFormat(featureText);
        }
        if (this.dateFormat) {
            featureText = this.getTextWithDateFormat(featureText);
        }
        if (this.textFormat) {
            featureText = this.getTextWithFormat(featureText);
        }
        if (featureText === undefined || featureText === "") {
            return textStyles;
        }
        featureText = this.getTextTransform(featureText);
        this.placements = this.propertyPlacements.getValue(featureProperties);
        this.style.getText().setText(featureText);
        if (this.setLabelPosition(featureText, feature, resolution, this.style.getText(), options.strategyTree, options.frameState)) {
            var featureZindex = feature["tempTreeZindex"];
            if (featureZindex === undefined) {
                featureZindex = 0;
            }
            this.style.setZIndex(featureZindex);
            textStyles.push(this.style);
        }
        return textStyles;
    };
    GeoTextStyle.prototype.setLabelPosition = function (text, geometry, resolution, textState, strategyTree, frameState) {
        var flatCoordinates;
        var geometryType = geometry.getType();
        if ((geometryType === ol.geom.GeometryType.LINE_STRING || geometryType === ol.geom.GeometryType.MULTI_LINE_STRING) && !this.forceHorizontalForLine) {
            var geometryType_1 = geometry.getType();
            flatCoordinates = geometry.getFlatCoordinates();
            if (flatCoordinates === undefined) {
                return false;
            }
        }
        else {
            var labelInfo = this.getLabelInfo(text, textState);
            var labelWidth = labelInfo.labelWidth;
            var labelHeight = labelInfo.labelHeight;
            var scale = labelInfo.scale;
            var font = labelInfo.font;
            var strokeWidth = labelInfo.strokeWidth;
            var numLines = labelInfo.numLines;
            var lines = labelInfo.lines;
            var lineHeight = labelInfo.lineHeight;
            var renderWidth = labelInfo.renderWidth;
            var height = labelInfo.height;
            var widths = labelInfo.widths;
            var Constructor = void 0;
            if (this.placementType === "default") {
                Constructor = this.BATCH_CONSTRUCTORS_DEFAULT[geometryType];
            }
            else if (this.placementType === "detect") {
                Constructor = this.BATCH_CONSTRUCTORS_DETECT[geometryType];
            }
            var textLabelingStrategy = new Constructor();
            var tmpLabelWidth = labelWidth / window.devicePixelRatio;
            var tmpLabelHeight = labelHeight / window.devicePixelRatio;
            switch (geometryType) {
                case ol.geom.GeometryType.POINT:
                    flatCoordinates = geometry.getFlatCoordinates();
                    break;
                case ol.geom.GeometryType.MULTI_POINT:
                    flatCoordinates = geometry.getCenter();
                    break;
                case ol.geom.GeometryType.LINE_STRING:
                    flatCoordinates = /** @type {ol.geom.LineString} */ (geometry).getFlatMidpoint();
                    break;
                case ol.geom.GeometryType.CIRCLE:
                    flatCoordinates = /** @type {ol.geom.Circle} */ (geometry).getCenter();
                    break;
                case ol.geom.GeometryType.MULTI_LINE_STRING:
                    flatCoordinates = /** @type {ol.geom.MultiLineString} */ (geometry).getFlatMidpoints();
                    break;
                case ol.geom.GeometryType.POLYGON:
                    flatCoordinates = /** @type {ol.geom.Polygon} */ (geometry).getFlatInteriorPoint();
                    break;
                case ol.geom.GeometryType.MULTI_POLYGON:
                    var interiorPoints = /** @type {ol.geom.MultiPolygon} */ (geometry).getFlatMidpoint();
                    break;
                default:
            }
            flatCoordinates = textLabelingStrategy.markLocation(flatCoordinates, tmpLabelWidth, tmpLabelHeight, resolution, geometryType, this, strategyTree, frameState);
            if (flatCoordinates === undefined) {
                return false;
            }
            var labelImage = this.getImage(textState, labelWidth, labelHeight, scale, font, strokeWidth, numLines, lines, lineHeight, renderWidth, height, widths);
            if (labelImage === undefined) {
                return;
            }
            textState.label = labelImage;
        }
        textState.labelPosition = flatCoordinates;
        return true;
    };
    GeoTextStyle.prototype.getLabelInfo = function (text, textState) {
        var key = text + this.uid;
        if (!this.labelInfos.containsKey(key)) {
            var font = textState.getFont();
            text = this.wrapText(text, font);
            var strokeState = textState.getStroke();
            var strokeWidth = strokeState && strokeState.getWidth() ? strokeState.getWidth() : 0;
            var lines = text.split("\n");
            var numLines = lines.length;
            var textScale = textState.getScale();
            textScale = textScale === undefined ? 1 : textScale;
            var scale = textScale * window.devicePixelRatio;
            var widths = [];
            var width = this.getEstimatedWidth(font, lines, widths, this.letterSpacing);
            var lineHeight = ol.render.canvas.measureTextHeight(font);
            var tmpMaskMargin = (this.maskMargin ? this.maskMargin : "0").split(',');
            var tmpMaskHeightMargin = 0;
            var tmpMaskWidthMargin = 0;
            switch (tmpMaskMargin.length) {
                case 1:
                    tmpMaskHeightMargin = parseInt(tmpMaskMargin[0]) * 2;
                    tmpMaskWidthMargin = parseInt(tmpMaskMargin[0]) * 2;
                    break;
                case 2:
                    tmpMaskHeightMargin = parseInt(tmpMaskMargin[0]) * 2;
                    tmpMaskWidthMargin = parseInt(tmpMaskMargin[1]) * 2;
                    break;
                case 3:
                    tmpMaskHeightMargin = parseInt(tmpMaskMargin[0]) + parseInt(tmpMaskMargin[2]);
                    tmpMaskWidthMargin = parseInt(tmpMaskMargin[1]) * 2;
                    break;
                case 4:
                    tmpMaskHeightMargin = parseInt(tmpMaskMargin[0]) + parseInt(tmpMaskMargin[2]);
                    tmpMaskWidthMargin = parseInt(tmpMaskMargin[1]) + parseInt(tmpMaskMargin[3]);
                    break;
                default:
                    break;
            }
            if (this.maskType) {
                if (this.maskType.toLowerCase() === "circle") {
                    tmpMaskHeightMargin = tmpMaskHeightMargin > tmpMaskWidthMargin ? tmpMaskHeightMargin : tmpMaskWidthMargin;
                    tmpMaskWidthMargin = tmpMaskHeightMargin;
                }
            }
            var height = lineHeight * numLines + strokeWidth + tmpMaskHeightMargin;
            var renderWidth = width + strokeWidth + tmpMaskWidthMargin;
            var tmpMaskOutlineWidth = (this.maskOutlineWidth ? this.maskOutlineWidth : 0);
            var labelWidth = Math.ceil((renderWidth + tmpMaskOutlineWidth * 3) * 1.1 * scale);
            var labelHeight = Math.ceil((height + tmpMaskOutlineWidth * 3) * 1.1 * scale);
            var labelInfo = {
                labelWidth: labelWidth,
                labelHeight: labelHeight,
                scale: scale,
                font: font,
                strokeWidth: strokeWidth,
                numLines: numLines,
                lines: lines,
                lineHeight: lineHeight,
                renderWidth: renderWidth,
                height: height,
                widths: widths
            };
            this.labelInfos.set(key, labelInfo);
        }
        return this.labelInfos.get(key);
    };
    GeoTextStyle.prototype.getEstimatedWidth = function (font, lines, widths, letterSpacing) {
        var numLines = lines.length;
        var width = 0;
        var currentWidth, i;
        for (i = 0; i < numLines; ++i) {
            currentWidth = 0;
            for (var j = 0; j < lines[i].length; j++) {
                var charWidth = this.charWidths[lines[i][j]];
                if (charWidth) {
                    currentWidth += charWidth;
                }
                else {
                    currentWidth += this.charWidths["W"];
                }
            }
            if (letterSpacing) {
                currentWidth = currentWidth + (lines[i].length - 1) * letterSpacing;
            }
            width = Math.max(width, currentWidth);
            widths.push(currentWidth);
        }
        return width;
    };
    GeoTextStyle.prototype.getImage = function (textState, labelWidth, labelHeight, scale, font, strokeWidth, numLines, lines, lineHeight, renderWidth, height, widths) {
        var labelCache = ol.render.canvas.labelCache;
        var key = this.uid !== undefined ? this.uid : ol.getUid(this);
        key += lines.toString();
        if (!labelCache.containsKey(key)) {
            var fillState = textState.getFill();
            var strokeState = textState.getStroke();
            var label = void 0;
            var align = ol.render.replay.TEXT_ALIGN[textState.getTextAlign() || ol.render.canvas.defaultTextAlign];
            var context = ol.dom.createCanvasContext2D(labelWidth, labelHeight);
            label = context.canvas;
            labelCache.set(key, label);
            label.style.display = "none";
            // For letterSpacing we need app
            var body = void 0;
            if (this.letterSpacing) {
                body = document.getElementsByTagName("body")[0];
                if (body) {
                    label.style.display = "none";
                    body.appendChild(label);
                }
                label.style.letterSpacing = this.letterSpacing + "px";
                context = label.getContext("2d");
            }
            if (scale !== 1) {
                context.scale(scale, scale);
            }
            context.font = font;
            if (strokeState) {
                context.strokeStyle = strokeState.getColor();
                context.lineWidth = strokeWidth * (ol.has.SAFARI ? scale : 1);
                context.lineCap = strokeState.getLineCap();
                context.lineJoin = strokeState.getLineJoin();
                context.miterLimit = strokeState.getMiterLimit();
                var lineDash = strokeState.getLineDash();
                lineDash = lineDash ? lineDash.slice() : ol.render.canvas.defaultLineDash;
                if (ol.has.CANVAS_LINE_DASH && lineDash.length) {
                    context.setLineDash(strokeState.getLineDash());
                    context.lineDashOffset = strokeState.getLineDashOffset();
                }
            }
            this.drawMask(context, 0, 0, renderWidth, height);
            if (this.maskType) {
                if (this.maskType.toLowerCase() === "circle") {
                    if (scale !== 1) {
                        context.scale(scale, scale);
                    }
                    context.font = font;
                    if (strokeState) {
                        context.strokeStyle = strokeState.getColor();
                        context.lineWidth = strokeWidth * (ol.has.SAFARI ? scale : 1);
                        context.lineCap = strokeState.getLineCap();
                        context.lineJoin = strokeState.getLineJoin();
                        context.miterLimit = strokeState.getMiterLimit();
                        var lineDash = strokeState.getLineDash();
                        lineDash = lineDash ? lineDash.slice() : ol.render.canvas.defaultLineDash;
                        if (ol.has.CANVAS_LINE_DASH && lineDash.length) {
                            context.setLineDash(strokeState.getLineDash());
                            context.lineDashOffset = strokeState.getLineDashOffset();
                        }
                    }
                }
            }
            context.textBaseline = "middle";
            context.textAlign = "center";
            var leftRight = 0.5 - align;
            var x = align * label.width / scale + leftRight * strokeWidth;
            var i = void 0;
            var tmpMaskMargin = (this.maskMargin ? this.maskMargin : "0").split(',');
            var tmpMaskOutlineWidth = this.maskOutlineWidth ? this.maskOutlineWidth : 0;
            if (strokeState) {
                if (strokeState.getColor() !== null) {
                    context.strokeStyle = strokeState.getColor();
                    context.lineWidth = this.haloRadius ? this.haloRadius : 0;
                    for (i = 0; i < numLines; ++i) {
                        if (this.drawnMask) {
                            context.strokeText(lines[i], x + leftRight * widths[i] * 1.2 - strokeWidth * 1.2 + tmpMaskOutlineWidth * 0.5 / 1.2 - (tmpMaskMargin[3] ? parseInt(tmpMaskMargin[1]) - parseInt(tmpMaskMargin[3]) : 0) * 0.5, this.maskType.toLowerCase() === "circle" ? context.canvas.height / scale * 0.5 - (tmpMaskMargin[2] ? parseInt(tmpMaskMargin[2]) - parseInt(tmpMaskMargin[0]) : 0) : strokeWidth + (i + 1) * lineHeight * 0.5 + parseInt(tmpMaskMargin[0]) + tmpMaskOutlineWidth);
                        }
                        else {
                            context.strokeText(lines[i], x + leftRight * widths[i] * 1.2 - (tmpMaskMargin[3] ? parseInt(tmpMaskMargin[1]) - parseInt(tmpMaskMargin[3]) : 0) * 0.5, 0.5 * (strokeWidth + lineHeight) + i * lineHeight * 1.2 - +parseInt(tmpMaskMargin[0]) + (this.maskOutlineWidth ? this.maskOutlineWidth : 0));
                        }
                    }
                }
            }
            if (fillState) {
                if (fillState.getColor() !== null) {
                    context.fillStyle = fillState.getColor();
                    for (i = 0; i < numLines; ++i) {
                        if (this.drawnMask) {
                            context.fillText(lines[i], x + leftRight * widths[i] * 1.2 - strokeWidth * 1.2 + tmpMaskOutlineWidth * 0.5 / 1.2 - (tmpMaskMargin[3] ? parseInt(tmpMaskMargin[1]) - parseInt(tmpMaskMargin[3]) : 0) * 0.5, this.maskType.toLowerCase() === "circle" ? context.canvas.height / scale * 0.5 - (tmpMaskMargin[2] ? parseInt(tmpMaskMargin[2]) - parseInt(tmpMaskMargin[0]) : 0) : strokeWidth + (i + 1) * lineHeight * 0.5 + parseInt(tmpMaskMargin[0]) + tmpMaskOutlineWidth);
                        }
                        else {
                            context.fillText(lines[i], x + leftRight * widths[i] * 1.2 - (tmpMaskMargin[3] ? parseInt(tmpMaskMargin[1]) - parseInt(tmpMaskMargin[3]) : 0) * 0.5, 0.5 * (strokeWidth + lineHeight) + i * lineHeight * 1.2 + parseInt(tmpMaskMargin[0]) + (this.maskOutlineWidth ? this.maskOutlineWidth : 0));
                        }
                    }
                }
            }
            if (this.letterSpacing && body) {
                body.removeChild(label);
            }
        }
        return labelCache.get(key);
    };
    GeoTextStyle.prototype.wrapText = function (text, font) {
        var resultText;
        if (text !== "") {
            var lines = [text];
            var widths = [];
            var width = this.getEstimatedWidth(font, lines, widths, this.letterSpacing);
            var wrapWidth = this.wrapWidth;
            var wrapCharacter = " ";
            var isWrapBefore = this.wrapBefore;
            if (wrapWidth > 0 && width > wrapWidth && text.includes(wrapCharacter)) {
                var textLines = [];
                lines = text.split(wrapCharacter);
                var wrapLines = [];
                var wrapWidthSum = 0;
                var tmpWrapWidth = void 0;
                if (isWrapBefore) {
                    for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
                        var line = lines_1[_i];
                        var tmpLine = [line];
                        tmpWrapWidth = this.getEstimatedWidth(font, tmpLine, widths, this.letterSpacing);
                        wrapWidthSum += tmpWrapWidth;
                        if (tmpWrapWidth > wrapWidth) {
                            wrapLines = [];
                            textLines = [];
                            wrapWidthSum = 0;
                            break;
                        }
                        if (wrapLines.length > 0) {
                            if (wrapWidthSum > wrapWidth) {
                                wrapLines.push("\n");
                                textLines.push(wrapLines.join(""));
                                wrapLines = [];
                                wrapWidthSum = 0;
                            }
                        }
                        wrapLines.push(" " + line);
                    }
                    if (wrapLines.length > 0) {
                        textLines.push(wrapLines.join(""));
                    }
                }
                else {
                    for (var _a = 0, lines_2 = lines; _a < lines_2.length; _a++) {
                        var line = lines_2[_a];
                        wrapLines.push(" " + line);
                        var tmpLine = [line];
                        tmpWrapWidth = this.getEstimatedWidth(font, tmpLine, widths, this.letterSpacing);
                        wrapWidthSum += tmpWrapWidth;
                        if (wrapWidthSum > wrapWidth) {
                            wrapLines.push("\n");
                            textLines.push(wrapLines.join(""));
                            wrapLines = [];
                            wrapWidthSum = 0;
                        }
                    }
                    if (wrapLines.length > 0) {
                        textLines.push(wrapLines.join(""));
                    }
                }
                resultText = textLines.join("");
                if (resultText.lastIndexOf("\n") === resultText.length - 1) {
                    resultText = resultText.substr(0, resultText.length - 1);
                }
            }
            else {
                resultText = text;
            }
        }
        return resultText;
    };
    GeoTextStyle.prototype.drawMask = function (context, x, y, width, height) {
        var fill = undefined;
        var stroke = undefined;
        if (this.maskColor) {
            fill = new ol.style.Fill();
            fill.setColor(_geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(this.maskColor, this.opacity ? this.opacity : 1));
        }
        if (this.maskOutlineColor && this.maskOutlineWidth) {
            stroke = new ol.style.Stroke();
            if (this.maskOutlineColor) {
                stroke.setColor(_geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"].toRGBAColor(this.maskOutlineColor, this.opacity ? this.opacity : 1));
            }
            if (this.maskOutlineWidth) {
                stroke.setWidth(this.maskOutlineWidth ? this.maskOutlineWidth : 0);
            }
        }
        if (this.maskType) {
            this.drawnMask = true;
        }
        else {
            this.drawnMask = false;
        }
        switch (this.maskType) {
            case "default":
            case "Default":
            case "rectangle":
            case "Rectangle":
                this.drawRectangle(context, x, y, width, height, fill, stroke);
                break;
            case "roundedCorners":
            case "RoundedCorners":
                this.drawRoundRectangle(context, x, y, width, height, fill, stroke);
                break;
            case "roundedEnds":
            case "RoundedEnds":
                this.drawRoundedEnds(context, x, y, width, height, fill, stroke);
                break;
            case "circle":
            case "Circle":
                this.drawCircle(context, x, y, width, height, fill, stroke);
                break;
        }
    };
    GeoTextStyle.prototype.drawRectangle = function (context, x, y, width, height, fill, stroke) {
        if (fill) {
            context.fillStyle = fill.getColor();
            context.fillRect(x + stroke.getWidth(), y + stroke.getWidth(), width + stroke.getWidth() * 2, height);
        }
        if (stroke) {
            context.lineWidth = stroke.getWidth();
            context.strokeStyle = stroke.getColor();
            context.strokeRect(x + stroke.getWidth(), y + stroke.getWidth(), width + stroke.getWidth() * 2, height);
        }
    };
    GeoTextStyle.prototype.drawRoundRectangle = function (context, x, y, width, height, fill, stroke) {
        var radius = (width < height ? width : height) * 0.3;
        // width *= 0.9;
        // height *= 0.8;
        if (stroke) {
            x = x + (stroke.getWidth() ? stroke.getWidth() : 0);
            y = y + (stroke.getWidth() ? stroke.getWidth() : 0);
        }
        context.beginPath();
        context.moveTo(x + radius + stroke.getWidth() * 2, y);
        context.lineTo(x + width - radius + stroke.getWidth() * 2, y);
        context.quadraticCurveTo(x + width + stroke.getWidth() * 2, y, x + width + stroke.getWidth() * 2, y + radius);
        context.lineTo(x + width + stroke.getWidth() * 2, y + height - radius);
        context.quadraticCurveTo(x + width + stroke.getWidth() * 2, y + height, x + width - radius + stroke.getWidth() * 2, y + height);
        context.lineTo(x + radius, y + height);
        context.quadraticCurveTo(x, y + height, x, y + height - radius);
        context.lineTo(x, y + radius);
        context.quadraticCurveTo(x, y, x + radius, y);
        context.closePath();
        if (fill) {
            context.fillStyle = fill.getColor();
            context.fill();
        }
        if (stroke) {
            context.lineWidth = stroke.getWidth();
            context.strokeStyle = stroke.getColor();
            context.stroke();
        }
    };
    GeoTextStyle.prototype.drawRoundedEnds = function (context, x, y, width, height, fill, stroke) {
        var radius = (width < height ? width : height) * 0.2;
        // width *= 0.9;
        // height *= 0.8;
        var strokeWidth = (stroke.getWidth() ? stroke.getWidth() : 0);
        if (stroke) {
            x = x + strokeWidth;
            y = y + strokeWidth;
        }
        context.beginPath();
        context.moveTo(x + radius, y);
        context.lineTo(x + width - radius + strokeWidth * 2, y);
        context.quadraticCurveTo(x + width + strokeWidth * 2, y + height * 0.5, x + width - radius + strokeWidth * 2, y + height);
        context.lineTo(x + radius, y + height);
        context.quadraticCurveTo(x, y + height * 0.5, x + radius, y);
        context.closePath();
        if (fill) {
            context.fillStyle = fill.getColor();
            context.fill();
        }
        if (stroke) {
            context.lineWidth = stroke.getWidth();
            context.strokeStyle = stroke.getColor();
            context.stroke();
        }
    };
    GeoTextStyle.prototype.drawCircle = function (context, x, y, width, height, fill, stroke) {
        context.canvas.width = context.canvas.width > context.canvas.height ? context.canvas.width : context.canvas.height;
        context.canvas.height = context.canvas.width;
        var radius = 0;
        if (stroke) {
            radius -= stroke.getWidth();
        }
        radius += context.canvas.width * 0.5;
        context.beginPath();
        context.arc(x + context.canvas.width * 0.5, y + context.canvas.width * 0.5, radius, 0, 2 * Math.PI, false);
        context.closePath();
        if (fill) {
            context.fillStyle = fill.getColor();
            context.fill();
        }
        if (stroke) {
            context.lineWidth = stroke.getWidth() * window.devicePixelRatio;
            context.strokeStyle = stroke.getColor();
            context.stroke();
        }
    };
    GeoTextStyle.prototype.getTextWithNumericFormat = function (featureText) {
        var tmpArguments = this.numericFormat.split(",");
        var numericFormatOptions = {};
        for (var _i = 0, tmpArguments_1 = tmpArguments; _i < tmpArguments_1.length; _i++) {
            var tmpArgument = tmpArguments_1[_i];
            var keyValuePair = tmpArgument.split(":");
            switch (keyValuePair[0].trim()) {
                case "localeMatcher":
                    numericFormatOptions.localeMatcher = keyValuePair[1].trim();
                    break;
                case "style":
                    numericFormatOptions.style = keyValuePair[1].trim();
                    break;
                case "currency":
                    numericFormatOptions.currency = keyValuePair[1].trim();
                    break;
                case "currencyDisplay":
                    numericFormatOptions.currencyDisplay = keyValuePair[1].trim();
                    break;
                case "useGrouping":
                    numericFormatOptions.useGrouping = keyValuePair[1].trim();
                    break;
                case "minimumIntegerDigits":
                    numericFormatOptions.minimumIntegerDigits = keyValuePair[1].trim();
                    break;
                case "minimumFractionDigits":
                    numericFormatOptions.minimumFractionDigits = keyValuePair[1].trim();
                    break;
                case "maximumFractionDigits":
                    numericFormatOptions.maximumFractionDigits = keyValuePair[1].trim();
                    break;
                case "minimumSignificantDigits":
                    numericFormatOptions.minimumSignificantDigits = keyValuePair[1].trim();
                    break;
                case "maximumSignificantDigits":
                    numericFormatOptions.maximumSignificantDigits = keyValuePair[1].trim();
                    break;
            }
        }
        var numeric = new Intl.NumberFormat(tmpArguments[0], numericFormatOptions);
        return numeric.format(Number(featureText));
    };
    GeoTextStyle.prototype.getTextWithDateFormat = function (featureText) {
        return (new Date(featureText)).format(this.dateFormat);
    };
    GeoTextStyle.prototype.getTextWithFormat = function (featureText) {
        return String.format(this.textFormat, featureText);
    };
    GeoTextStyle.prototype.getTextTransform = function (featureText) {
        if (featureText !== undefined) {
            switch (this.textTransform) {
                case "uppercase":
                    featureText = featureText.toLocaleUpperCase();
                    break;
                case "lowercase":
                    featureText = featureText.toLocaleLowerCase();
                    break;
                default:
                    break;
            }
        }
        return featureText;
    };
    GeoTextStyle.placementsName = "text-placements";
    return GeoTextStyle;
}(_geoStyle__WEBPACK_IMPORTED_MODULE_0__["GeoStyle"]));

String.format = function () {
    var s = arguments[0];
    for (var i = 0; i < arguments.length - 1; i++) {
        var reg = new RegExp("\\{" + i + "\\}", "gm");
        s = s.replace(reg, arguments[i + 1]);
    }
    return s;
};
Date.prototype.format = function (fmt) {
    var o = {
        "M+": this.getMonth() + 1,
        "d+": this.getDate(),
        "h+": this.getHours(),
        "m+": this.getMinutes(),
        "s+": this.getSeconds(),
        "q+": Math.floor((this.getMonth() + 3) / 3),
        "S": this.getMilliseconds()
    };
    if (/(y+)/.test(fmt))
        fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o)
        if (new RegExp("(" + k + ")").test(fmt))
            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
    return fmt;
};


/***/ }),

/***/ "./src/style/textLabelingStrategy.ts":
/*!*******************************************!*\
  !*** ./src/style/textLabelingStrategy.ts ***!
  \*******************************************/
/*! exports provided: TextLabelingStrategy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextLabelingStrategy", function() { return TextLabelingStrategy; });
var TextLabelingStrategy = /** @class */ (function () {
    function TextLabelingStrategy() {
    }
    TextLabelingStrategy.prototype.markLocation = function (flatCoordinates, width, height, resolution, geometryType, textStyle, strategyTree, frameState) {
        return this.markLocationCore(flatCoordinates, width, height, resolution, geometryType, textStyle, strategyTree, frameState);
    };
    TextLabelingStrategy.prototype.markLocationCore = function (flatCoordinates, width, height, resolution, geometryType, textStyle, strategyTree, frameState) {
        if (this.isOverlapping(flatCoordinates, width, height, textStyle.margin, textStyle.minDistance, textStyle.minPadding, textStyle.spacing, strategyTree, frameState)) {
            return undefined;
        }
        else {
            return flatCoordinates;
        }
    };
    TextLabelingStrategy.prototype.isOverlapping = function (flatCoordinates, width, height, margin, minDistance, minPadding, spacing, strategyTree, frameState) {
        if (flatCoordinates === undefined) {
            return true;
        }
        var distance = (margin ? margin : 0) + (minDistance ? minDistance : 0) + (minPadding ? minPadding : 0) + (spacing ? spacing : 0);
        var coordinate = [flatCoordinates[0], flatCoordinates[1]];
        var screenCoordinates = this.convertPixelFromCoordinate(coordinate, frameState);
        var minX = screenCoordinates[0] - width / 2 - distance * 0.5;
        var minY = screenCoordinates[1] - height / 2 - distance * 0.5;
        var maxX = minX + width + distance;
        var maxY = minY + height + distance;
        var box = {
            minX: minX,
            minY: minY,
            maxX: maxX,
            maxY: maxY
        };
        if (!strategyTree.collides(box)) {
            strategyTree.insert(box);
            return false;
        }
        else {
            return true;
        }
    };
    TextLabelingStrategy.prototype.convertPixelFromCoordinate = function (coordinate, frameState) {
        if (!frameState) {
            return null;
        }
        return ol.transform.apply(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));
    };
    return TextLabelingStrategy;
}());



/***/ }),

/***/ "./src/tree/TreeNode.ts":
/*!******************************!*\
  !*** ./src/tree/TreeNode.ts ***!
  \******************************/
/*! exports provided: TreeNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeNode", function() { return TreeNode; });
var TreeNode = /** @class */ (function () {
    function TreeNode(data) {
        this.data = data;
        this.children = [];
    }
    return TreeNode;
}());



/***/ }),

/***/ "./src/tree/styleJsonCache.ts":
/*!************************************!*\
  !*** ./src/tree/styleJsonCache.ts ***!
  \************************************/
/*! exports provided: StyleJsonCache */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StyleJsonCache", function() { return StyleJsonCache; });
/* harmony import */ var _style_geoTextStyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../style/geoTextStyle */ "./src/style/geoTextStyle.ts");

var StyleJsonCache = /** @class */ (function () {
    function StyleJsonCache() {
        this.geoStyleGroupByZoom = [];
        this.styleJson = {};
        this.geoStyles = {};
        this.geoTextStyleInfo = {};
    }
    StyleJsonCache.prototype.add = function (zoom, dataLayerName, tree) {
        if (this.geoStyleGroupByZoom[zoom] === undefined) {
            this.geoStyleGroupByZoom[zoom] = {};
        }
        if (this.geoStyleGroupByZoom[zoom] === undefined) {
            this.geoStyleGroupByZoom[zoom] = {};
        }
        if (this.geoStyleGroupByZoom[zoom][dataLayerName] === undefined) {
            this.geoStyleGroupByZoom[zoom][dataLayerName] = [];
        }
        this.geoStyleGroupByZoom[zoom][dataLayerName].push(tree);
        this.readGeoStyleFromTree(tree);
    };
    StyleJsonCache.prototype.readGeoStyleFromTree = function (tree) {
        return this.readGeoStyleFromTreeNode(tree.root);
    };
    StyleJsonCache.prototype.readGeoStyleFromTreeNode = function (node) {
        var result = [];
        if (node.data.geoStyle) {
            this.geoStyles[node.data.geoStyle.id] = node.data.geoStyle;
            // get the widths of GeoTextStyle
            if (node.data.geoStyle instanceof _style_geoTextStyle__WEBPACK_IMPORTED_MODULE_0__["GeoTextStyle"]) {
                this.geoTextStyleInfo[node.data.geoStyle.id] = node.data.geoStyle.charWidths;
            }
        }
        if (node.data.childrenGeoStyles && node.data.childrenGeoStyles.length > 0) {
            for (var i = 0; i < node.data.childrenGeoStyles.length; i++) {
                this.geoStyles[node.data.childrenGeoStyles[i].id] = node.data.childrenGeoStyles[i];
                if (node.data.childrenGeoStyles[i] instanceof _style_geoTextStyle__WEBPACK_IMPORTED_MODULE_0__["GeoTextStyle"]) {
                    this.geoTextStyleInfo[node.data.childrenGeoStyles[i].id] = node.data.childrenGeoStyles[i];
                }
            }
        }
        if (node.children && node.children.length > 0) {
            for (var i = 0; i < node.children.length; i++) {
                this.readGeoStyleFromTreeNode(node.children[i]);
            }
        }
        return result;
    };
    StyleJsonCache.prototype.clear = function () {
        this.geoStyleGroupByZoom.length = 0;
    };
    return StyleJsonCache;
}());



/***/ }),

/***/ "./src/tree/styleJsonCacheItem.ts":
/*!****************************************!*\
  !*** ./src/tree/styleJsonCacheItem.ts ***!
  \****************************************/
/*! exports provided: StyleJsonCacheItem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StyleJsonCacheItem", function() { return StyleJsonCacheItem; });
/* harmony import */ var _filter_geoFilterItem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../filter/geoFilterItem */ "./src/filter/geoFilterItem.ts");
/* harmony import */ var _filter_geoZoomFilter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../filter/geoZoomFilter */ "./src/filter/geoZoomFilter.ts");
/* harmony import */ var _filter_geoStringAttributeFilter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../filter/geoStringAttributeFilter */ "./src/filter/geoStringAttributeFilter.ts");
/* harmony import */ var _filter_geoRegexFilter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../filter/geoRegexFilter */ "./src/filter/geoRegexFilter.ts");
/* harmony import */ var _filter_geoNumberAttributeFilter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../filter/geoNumberAttributeFilter */ "./src/filter/geoNumberAttributeFilter.ts");
/* harmony import */ var _style_geoAreaStyle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../style/geoAreaStyle */ "./src/style/geoAreaStyle.ts");
/* harmony import */ var _style_geoLineStyle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../style/geoLineStyle */ "./src/style/geoLineStyle.ts");
/* harmony import */ var _style_geoPointStyle__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../style/geoPointStyle */ "./src/style/geoPointStyle.ts");
/* harmony import */ var _style_geoTextStyle__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../style/geoTextStyle */ "./src/style/geoTextStyle.ts");
/* harmony import */ var _style_geoShieldStyle__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../style/geoShieldStyle */ "./src/style/geoShieldStyle.ts");










var StyleJsonCacheItem = /** @class */ (function () {
    function StyleJsonCacheItem(styleJson, minZoom, maxZoom, dataLayerColumnName) {
        this.childrenGeoStyles = [];
        this.subStyleCacheItems = [];
        this.minZoom = minZoom;
        this.maxZoom = maxZoom;
        this.zIndex = styleJson["z-index"];
        this.styleFirst = styleJson["style-first"];
        this.filterGroup = this.createFilters(styleJson.filter, dataLayerColumnName) || [];
        this.createSubItems(styleJson, dataLayerColumnName);
        this.geoStyle = this.createGeoStyle(styleJson);
        this.createChildrenGeoStyle(styleJson);
    }
    StyleJsonCacheItem.prototype.createFilters = function (filterString, dataLayerColumnName) {
        var filterGroup = [];
        var tempMinZoom = this.maxZoom;
        var tempMaxZoom = this.minZoom;
        if (filterString) {
            var filterStrings = filterString.split("|");
            for (var i = 0; i < filterStrings.length; i++) {
                var filterStr = filterStrings[i];
                var expression = "(\\w+?=~'.+?')|(\\w+?[<>!=]*'[^;]+?')|(\\w+?[<>!=]*[^;]+)";
                var regex = new RegExp(expression, "g");
                var results = filterStr.match(regex);
                var rangeFilters = {};
                var filters = [];
                var geoZoomFilter = void 0;
                var dataLayerNameFilter = void 0;
                for (var i_1 = 0; i_1 < results.length; i_1++) {
                    if (results[i_1]) {
                        var filterItem = _filter_geoFilterItem__WEBPACK_IMPORTED_MODULE_0__["GeoFilterItem"].createFilterItem(results[i_1]);
                        if (filterItem.value.indexOf("~'") === 0) {
                            filters.push(new _filter_geoRegexFilter__WEBPACK_IMPORTED_MODULE_3__["GeoRegexFilter"]([filterItem]));
                        }
                        else if (filterItem.key === "zoom") {
                            if (geoZoomFilter === undefined) {
                                geoZoomFilter = new _filter_geoZoomFilter__WEBPACK_IMPORTED_MODULE_1__["GeoZoomFilter"]([]);
                            }
                            geoZoomFilter.addFilterItem(filterItem);
                        }
                        else if (filterItem.value.includes("'")) {
                            if (filterItem.key === dataLayerColumnName) {
                                if (dataLayerNameFilter === undefined) {
                                    dataLayerNameFilter = new _filter_geoStringAttributeFilter__WEBPACK_IMPORTED_MODULE_2__["GeoStringAttributeFilter"]([filterItem]);
                                }
                            }
                            else {
                                filters.push(new _filter_geoStringAttributeFilter__WEBPACK_IMPORTED_MODULE_2__["GeoStringAttributeFilter"]([filterItem]));
                            }
                        }
                        else {
                            rangeFilters[filterItem.key] = rangeFilters[filterItem.key] || new _filter_geoNumberAttributeFilter__WEBPACK_IMPORTED_MODULE_4__["GeoNumberAttributeFilter"]([]);
                            rangeFilters[filterItem.key].addFilterItem(filterItem);
                        }
                    }
                }
                // update the minZoom and maxZoom by ZoomFilter
                if (geoZoomFilter) {
                    filters.push(geoZoomFilter);
                    geoZoomFilter.initialize();
                    if (geoZoomFilter.ranges.length > 0) {
                        var minZ = +geoZoomFilter.ranges[0][0];
                        var maxZ = +geoZoomFilter.ranges[0][1];
                        if (minZ <= tempMinZoom) {
                            tempMinZoom = minZ;
                        }
                        if (maxZ >= tempMaxZoom) {
                            tempMaxZoom = maxZ;
                        }
                    }
                    else {
                        var z = +geoZoomFilter.allowedValues[0];
                        if (z <= tempMinZoom) {
                            tempMinZoom = z;
                        }
                        if (z >= tempMaxZoom) {
                            tempMaxZoom = z;
                        }
                    }
                }
                // update the dataLayerName
                if (dataLayerNameFilter) {
                    dataLayerNameFilter.initialize();
                    this.dataLayerName = dataLayerNameFilter.expectedValues[0];
                }
                for (var name_1 in rangeFilters) {
                    filters.push(rangeFilters[name_1]);
                }
                filterGroup.push(filters);
            }
        }
        if (tempMaxZoom !== this.minZoom || tempMinZoom !== this.maxZoom) {
            this.maxZoom = tempMaxZoom;
            this.minZoom = tempMinZoom;
        }
        return filterGroup;
    };
    StyleJsonCacheItem.prototype.createSubItems = function (styleJson, dataLayerColumnName) {
        if (styleJson.style) {
            // apply the property to sub style.
            for (var key in styleJson) {
                if (key !== "style" && key !== "filter") {
                    for (var i = 0; i < styleJson.style.length; i++) {
                        // Apply the property to sub style if the sub style does not included.
                        if (styleJson.style[i][key] === undefined) {
                            if (key === "id") {
                                styleJson.style[i][key] = styleJson[key] + "#" + i;
                            }
                            else {
                                styleJson.style[i][key] = styleJson[key];
                            }
                        }
                    }
                }
            }
            var subItemMinZoom = void 0;
            var subItemMaxZoom = void 0;
            for (var _i = 0, _a = styleJson.style; _i < _a.length; _i++) {
                var subStyle = _a[_i];
                var styleJsonCacheSubItem = new StyleJsonCacheItem(subStyle, this.minZoom, this.maxZoom, dataLayerColumnName);
                if (subItemMaxZoom === undefined || styleJsonCacheSubItem.maxZoom > subItemMaxZoom) {
                    subItemMaxZoom = styleJsonCacheSubItem.maxZoom;
                }
                if (subItemMinZoom === undefined || styleJsonCacheSubItem.minZoom < subItemMinZoom) {
                    subItemMinZoom = styleJsonCacheSubItem.minZoom;
                }
                this.subStyleCacheItems.push(styleJsonCacheSubItem);
            }
            if (subItemMinZoom && subItemMinZoom > this.minZoom) {
                this.minZoom = subItemMinZoom;
            }
            if (subItemMaxZoom && subItemMaxZoom < this.maxZoom) {
                this.maxZoom = subItemMaxZoom;
            }
        }
    };
    StyleJsonCacheItem.prototype.createGeoStyle = function (styleJson) {
        var geoStyle;
        for (var key in styleJson) {
            if (key !== "style" && key !== "filter") {
                var keys = key.split("-");
                if (keys.length > 1) {
                    switch (keys[0]) {
                        case "polygon":
                            geoStyle = new _style_geoAreaStyle__WEBPACK_IMPORTED_MODULE_5__["GeoAreaStyle"](styleJson);
                            break;
                        case "line":
                            geoStyle = new _style_geoLineStyle__WEBPACK_IMPORTED_MODULE_6__["GeoLineStyle"](styleJson);
                            break;
                        case "text":
                            geoStyle = new _style_geoTextStyle__WEBPACK_IMPORTED_MODULE_8__["GeoTextStyle"](styleJson);
                            break;
                        case "point":
                            geoStyle = new _style_geoPointStyle__WEBPACK_IMPORTED_MODULE_7__["GeoPointStyle"](styleJson);
                            break;
                        case "shield":
                            geoStyle = new _style_geoShieldStyle__WEBPACK_IMPORTED_MODULE_9__["GeoShieldStyle"](styleJson);
                            break;
                        default:
                            break;
                    }
                    break;
                }
            }
        }
        return geoStyle;
    };
    StyleJsonCacheItem.prototype.createChildrenGeoStyle = function (styleJson) {
        if (styleJson["children"]) {
            for (var i = 0; i < styleJson["children"].length; i++) {
                var childrenGeoStyleJson = styleJson["children"][i];
                if (childrenGeoStyleJson["id"] === undefined) {
                    childrenGeoStyleJson["id"] = styleJson["id"] + "#c" + i;
                }
                this.childrenGeoStyles.push(this.createGeoStyle(childrenGeoStyleJson));
            }
        }
    };
    return StyleJsonCacheItem;
}());



/***/ }),

/***/ "./src/tree/tree.ts":
/*!**************************!*\
  !*** ./src/tree/tree.ts ***!
  \**************************/
/*! exports provided: Tree */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tree", function() { return Tree; });
var Tree = /** @class */ (function () {
    function Tree(node, treeIndex) {
        this.node = node;
        this.root = node;
        this.treeIndex = treeIndex;
    }
    Tree.prototype.traverseNode = function (callback, select) {
        (function recurse(currentNode) {
            if (callback(currentNode)) {
                if (currentNode.children.length > 0) {
                    for (var i = 0, length_1 = currentNode.children.length; i < length_1; i++) {
                        if (recurse(currentNode.children[i])) {
                            break;
                        }
                    }
                }
                else {
                    // current node is matched, and without children
                    select(currentNode);
                }
                // true: the currentNode is matched.
                return true;
            }
            // false: the currentNode is not matched.
            return false;
        })(this.root);
    };
    return Tree;
}());



/***/ }),

/***/ "./src/webgl/initShader.ts":
/*!*********************************!*\
  !*** ./src/webgl/initShader.ts ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var loadShader = function (gl, type, sourceCode) {
    var shader = gl.createShader(type);
    gl.shaderSource(shader, sourceCode);
    gl.compileShader(shader);
    var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
    if (!compiled) {
        var error = gl.getShaderInfoLog(shader);
        console.log(error);
        gl.deleteShader(shader);
        return null;
    }
    return shader;
};
var createProgram = function (gl, v_shader_source, f_shader_source) {
    var program = gl.createProgram();
    gl.attachShader(program, loadShader(gl, gl.VERTEX_SHADER, v_shader_source));
    gl.attachShader(program, loadShader(gl, gl.FRAGMENT_SHADER, f_shader_source));
    gl.linkProgram(program);
    var linked = gl.getProgramParameter(program, gl.LINK_STATUS);
    if (!linked) {
        console.log(gl.getProgramInfoLog(program));
    }
    return program;
};
/* harmony default export */ __webpack_exports__["default"] = (createProgram);


/***/ }),

/***/ "./src/webgl/lineString.ts":
/*!*********************************!*\
  !*** ./src/webgl/lineString.ts ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _initShader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./initShader */ "./src/webgl/initShader.ts");

var v_shader_source = "\n    attribute vec4 a_Position;\n    attribute vec4 a_Color;\n\n    varying vec4 v_Color;\n    void main(){\n        gl_Position = a_Position;\n        gl_PointSize = 10.0;\n        v_Color = a_Color;\n    }\n";
var f_shader_source = "\n    precision mediump float;\n    varying vec4 v_Color;\n    void main(){\n        gl_FragColor = v_Color;\n    }\n";
var drawLineString = function (gl, data) {
    var webglLineIndex = data.webglLineIndex, webglProgram = data.webglProgram;
    if (webglProgram === undefined) {
        webglProgram = Object(_initShader__WEBPACK_IMPORTED_MODULE_0__["default"])(gl, v_shader_source, f_shader_source);
        ol.webglContext['lineProgram'] = webglProgram;
    }
    gl.useProgram(webglProgram);
    var a_Position = gl.getAttribLocation(webglProgram, 'a_Position');
    var a_Color = gl.getAttribLocation(webglProgram, 'a_Color');
    var multiplyLine = webglLineIndex.multiplyLine;
    var lines = webglLineIndex.lines;
    var buffer = gl.createBuffer();
    var indexBuffer = gl.createBuffer();
    var colorBuffer = gl.createBuffer();
    multiplyLine.indexArr.forEach(function (val, index) {
        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
        gl.bufferData(gl.ARRAY_BUFFER, multiplyLine.coordinatesArr[index], gl.DYNAMIC_DRAW);
        gl.vertexAttribPointer(a_Position, 2, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(a_Position);
        gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, multiplyLine.colorArr[index], gl.DYNAMIC_DRAW);
        gl.vertexAttribPointer(a_Color, 4, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(a_Color);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, val, gl.DYNAMIC_DRAW);
        gl.drawElements(4, val.length, gl.UNSIGNED_SHORT, 0);
    });
    lines.indexArr.forEach(function (val, index) {
        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
        gl.bufferData(gl.ARRAY_BUFFER, lines.coordinatesArr[index], gl.DYNAMIC_DRAW);
        gl.vertexAttribPointer(a_Position, 2, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(a_Position);
        gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, lines.colorArr[index], gl.DYNAMIC_DRAW);
        gl.vertexAttribPointer(a_Color, 4, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(a_Color);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, val, gl.DYNAMIC_DRAW);
        gl.drawElements(1, val.length, gl.UNSIGNED_SHORT, 0);
    });
};
/* harmony default export */ __webpack_exports__["default"] = (drawLineString);


/***/ }),

/***/ "./src/webgl/polygon.ts":
/*!******************************!*\
  !*** ./src/webgl/polygon.ts ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _initShader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./initShader */ "./src/webgl/initShader.ts");

var v_shader_source = "\n    attribute vec4 a_Position;\n    attribute vec4 a_Color;\n\n    varying vec4 v_Color;\n    void main(){\n        gl_Position = a_Position;\n        gl_PointSize = 1.5;\n        v_Color = a_Color;\n    }\n";
var f_shader_source = "\n    precision mediump float;\n\n    varying vec4 v_Color;\n    void main(){\n        gl_FragColor = v_Color;\n    }\n";
var drawPolygonGl = function (gl, data) {
    var webglIndexObj = data.webglIndexObj, webglProgram = data.webglProgram;
    if (webglProgram === undefined) {
        webglProgram = Object(_initShader__WEBPACK_IMPORTED_MODULE_0__["default"])(gl, v_shader_source, f_shader_source);
        ol.webglContext['polyProgram'] = webglProgram;
    }
    gl.useProgram(webglProgram);
    var a_Position = gl.getAttribLocation(webglProgram, 'a_Position');
    var a_Color = gl.getAttribLocation(webglProgram, 'a_Color');
    var buffer = gl.createBuffer();
    var colorBuffer = gl.createBuffer();
    var indexBuffer = gl.createBuffer();
    gl.getExtension('OES_element_index_uint');
    webglIndexObj.indexArr.forEach(function (val, index) {
        var length = val.length;
        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
        gl.bufferData(gl.ARRAY_BUFFER, webglIndexObj.coordinatesIndexArr[index], gl.DYNAMIC_DRAW);
        gl.vertexAttribPointer(a_Position, 2, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(a_Position);
        gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, webglIndexObj.colorArr[index], gl.DYNAMIC_DRAW);
        gl.vertexAttribPointer(a_Color, 4, gl.FLOAT, false, 0, 0);
        gl.enableVertexAttribArray(a_Color);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, val, gl.DYNAMIC_DRAW);
        gl.drawElements(4, length, gl.UNSIGNED_INT, 0);
    });
};
/* harmony default export */ __webpack_exports__["default"] = (drawPolygonGl);


/***/ }),

/***/ "./src/worker/vectorTileLayerThreadMode.ts":
/*!*************************************************!*\
  !*** ./src/worker/vectorTileLayerThreadMode.ts ***!
  \*************************************************/
/*! exports provided: VectorTileLayerThreadMode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VectorTileLayerThreadMode", function() { return VectorTileLayerThreadMode; });
var VectorTileLayerThreadMode;
(function (VectorTileLayerThreadMode) {
    VectorTileLayerThreadMode[VectorTileLayerThreadMode["Default"] = 1] = "Default";
    VectorTileLayerThreadMode[VectorTileLayerThreadMode["SingleThread"] = 2] = "SingleThread";
    VectorTileLayerThreadMode[VectorTileLayerThreadMode["SingleBackgroundWorker"] = 3] = "SingleBackgroundWorker";
    VectorTileLayerThreadMode[VectorTileLayerThreadMode["MultiBackgroundWorker"] = 4] = "MultiBackgroundWorker";
})(VectorTileLayerThreadMode || (VectorTileLayerThreadMode = {}));


/***/ }),

/***/ "./src/worker/webgl.js":
/*!*****************************!*\
  !*** ./src/worker/webgl.js ***!
  \*****************************/
/*! exports provided: webglCaculate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "webglCaculate", function() { return webglCaculate; });
function webglCaculate(){

    onmessage = function(e){
      let data = e.data;
      let {
          replays
      } = data;
      let webglPolygonIndex;
      let webglLineIndex;
      
      for(let key in replays){
          let replay = replays[key];
          if(replay.webglDrawType === 'lineStringReplay'){
            webglLineIndex = getWebglLineIndex(replay);
            delete replay.webglEnds;
            delete replay.webglStyle;
            delete replay.webglCoordinates;
          }else if(replay.webglDrawType === 'polygonReplay'){
            webglPolygonIndex = getWebglIndexObj(replay);
            delete replay.webglEnds;
            delete replay.webglStyle;
            delete replay.webglCoordinates;
          }
      }

      postMessage({
        webglPolygonIndex,
        webglLineIndex,
        uid: data.uid,
        messageData: data.messageData,
        methodInfo: data.methodInfo
      });
    }
    
    // polygon
    function getWebglIndexObj(data) {
      let {
        webglCoordinates,
        webglEnds,
        webglStyle    
      } = data;

      let obj = {
          indexArr: [],
          coordinatesIndexArr: [],
          colorArr: []
      }
    
      for (let i = 0, prev = 0, lastIndex = 0, index = [], color = [], length = webglEnds.length; i < length; i++) {
        let end = webglEnds[i];
        let tempIndex = getPolygonIndex(webglCoordinates.slice(prev, end));
        let t1 = (prev - lastIndex) * 2;
        let t2 = (end - lastIndex) * 2;
        
        let webglColor = colorStrToWebglColor(webglStyle[i].color);
        while (t1 < t2) {
            color.push(...webglColor);
            t1 += 4;
        }
    
        if (tempIndex.length > 0 || i ===length -1) {
            tempIndex = tempIndex.map(val => val + (prev - lastIndex) / 2);
            index.push(...tempIndex);
            // if (color.length > 250000000 || i === length - 1) {
            if (i === length - 1) {
                obj.indexArr.push(new Uint32Array([...index]));
                obj.colorArr.push(new Float32Array([...color]));
                obj.coordinatesIndexArr.push(new Float32Array(webglCoordinates.slice.apply(webglCoordinates, [lastIndex, end])));                
                lastIndex = end;
                index.length = 0;
                color.length = 0;
            }
        }
        prev = end;
      }

      return obj;
    }
    
    function getPolygonIndex(coordinates) {
        let arr = earcut(coordinates);
        return arr;
    }
    
    function colorStrToWebglColor(str) {
        let color = [];
        let strColor = str.match(/[\d\.]+/mg);
        if(+strColor[3] !== 1){
            const A1 = +strColor[3];
            const R3 = +strColor[0] * A1 + 240 * (1 - A1); //240  238  232
            const G3 = +strColor[1] * A1 + 238 * (1 - A1); //240  238  232
            const B3 = +strColor[2] * A1 + 232 * (1 - A1); //240  238  232
            const A3 = 1;
            strColor[0] = R3.toString();
            strColor[1] = G3.toString();
            strColor[2] = B3.toString();
            strColor[3] = A3.toString();
        }
    
        color = strColor.map((val, index) => {
            if (index !== 3) return +val / 255;
    
            return +val;
        });
    
        return color;
    };

    // lineString
    function getPathOffset(points, offset) {
        var len = points.length / 2;
        var count = len * 3 * 2;
        var position = [];
        var positionPrev = [];
        var positionNext = [];
        if(len===2 && points[0]===points[2] && points[1]===points[3]){
          return [[],[]];
        }
        var indicesCount = 3 * 2 * (len - 1);
        var triangleOffset = 0;
        for (var i = 0; i < len; i++) {
          var i3 = i * 3 * 2;
          var i4 = i * 4 * 2;
          var pointX = points[2 * i];
          var pointY = points[2 * i + 1]
          if(pointX===points[2*i+2] && pointY===points[2*i+3]){
            indicesCount-=6;
            continue;
          }
          position[i3 + 0] = pointX;
          position[i3 + 1] = pointY;
          position[i3 + 2] = 0;
          position[i3 + 3] = pointX;
          position[i3 + 4] = pointY;
          position[i3 + 5] = 0;
          if (i < count - 1) {
            var i3p = i3 + 6;
            positionNext[i3p + 0] = pointX;
            positionNext[i3p + 1] = pointY;
            positionNext[i3p + 2] = 0;
      
            positionNext[i3p + 3] = pointX;
            positionNext[i3p + 4] = pointY;
            positionNext[i3p + 5] = 0;
          }
          if (i > 0) {
            var i3n = i3 - 6;
            positionPrev[i3n + 0] = pointX;
            positionPrev[i3n + 1] = pointY;
            positionPrev[i3n + 2] = 0;
      
            positionPrev[i3n + 3] = pointX;
            positionPrev[i3n + 4] = pointY;
            positionPrev[i3n + 5] = 0;
          }
        }
      
        var indices = new Uint16Array(indicesCount);
        var end = count - 1;
        for (i = 0; i < 6; i++) {
          positionNext[i] = positionNext[i + 6];
          positionPrev[end - i] = positionPrev[end - i - 6];
        }
        for (i = 0; i < indicesCount; i++) {
          if (i % 2 == 0) {
            indices[triangleOffset++] = i;
            indices[triangleOffset++] = i + 1;
            indices[triangleOffset++] = i + 2;
          } else {
            indices[triangleOffset++] = i + 1;
            indices[triangleOffset++] = i;
            indices[triangleOffset++] = i + 2;
          }
        }
      
        var coordinates = getPathCoordinate(position, positionNext, positionPrev, offset)
        return [coordinates, indices]
    };

    function getWebglLineIndex(data) {
        let {
            webglCoordinates,
            webglEnds,
            webglStyle    
        } = data; 
        var lines = {
            indexArr: [],
            coordinatesArr: [],
            colorArr: []
        }
        var multiplyLine = {
            indexArr: [],
            coordinatesArr: [],
            colorArr: []
        }        
        var lineArr = [];
        var lineIndexArr = [];
        var lineColorArr = [];
    
        var mutiLineArr = [];
        var mutiLineIndexArr = [];
        var mutiLineColorArr = [];
        // FIXME needs a varying instead of constant
        var canvasSize = [512, 512];

        for (var i = 0, length = webglEnds.length, prevEnd = 0; i < length; i++) {

            var coord = webglCoordinates.slice(prevEnd, webglEnds[i]);
            var webglColor = colorStrToWebglColor(webglStyle[i].strokeStyle);
    
            if (webglStyle[i].lineWidth === 1) {
                var lastLength = lineArr.length / 2;
                lineArr = lineArr.concat(coord);
                var currentLength = lineArr.length / 2;
    
                while (lastLength < currentLength - 1) {
                    lineIndexArr.push(lastLength++, lastLength);
                    lineColorArr.push(...webglColor);
                }
                lineColorArr.push(...webglColor);  //last time
    
                // if (lineColorArr.length > 25000000) {
                //     lines.indexArr.push(new Uint16Array(lineIndexArr));
                //     lines.coordinatesArr.push(new Float32Array(lineArr));
                //     lines.colorArr.push(new Float32Array(lineColorArr));

                //     lineIndexArr = [];
                //     lineArr = [];
                //     lineColorArr = [];
                // }
            } else if (webglStyle[i].lineWidth !== 1) {
                var widthHalf = webglStyle[i].lineWidth / (canvasSize[0] / 2) / 2;
                var lastLength = (mutiLineArr.length) / 2;
                var [tempCoordinates, tempIndex] = getPathOffset(coord, widthHalf);
                mutiLineArr = mutiLineArr.concat(tempCoordinates);
                var currentLength = mutiLineArr.length / 2;
    
                for (let i = 0, length = tempIndex.length; i < length; i++) {
                    mutiLineIndexArr.push(lastLength + tempIndex[i]);
                }
    
                while (lastLength++ < currentLength) {
                    mutiLineColorArr.push(...webglColor);
                }
    
                // if (mutiLineArr.length > 250000000) {
                //     multiplyLine.indexArr.push(new Uint16Array(mutiLineIndexArr));
                //     multiplyLine.coordinatesArr.push(new Float32Array(mutiLineArr));
                //     multiplyLine.colorArr.push(new Float32Array(mutiLineColorArr));

                //     mutiLineIndexArr = [];
                //     mutiLineArr = [];
                //     mutiLineColorArr = [];
                // }       
            }
    
            prevEnd = webglEnds[i];
        }
        lines.indexArr.push(new Uint16Array(lineIndexArr));
        lines.coordinatesArr.push(new Float32Array(lineArr));
        lines.colorArr.push(new Float32Array(lineColorArr));

        lineIndexArr = [];
        lineArr = [];
        lineColorArr = [];

        if (mutiLineIndexArr.length > 0) {
            multiplyLine.indexArr.push(new Uint16Array(mutiLineIndexArr));
            multiplyLine.coordinatesArr.push(new Float32Array(mutiLineArr));
            multiplyLine.colorArr.push(new Float32Array(mutiLineColorArr));

            mutiLineIndexArr = null;
            mutiLineArr = null;
            mutiLineColorArr = null;
        }

        return {
            multiplyLine,
            lines
        }
    }

    function getPathCoordinate(a_position, a_positionNext, a_positionPrev, a_offset) {
        var pointss = [];
        var length = a_position.length;
        var flag = 1;
        for (var i = 0; i < length; i += 3) {
          var curr = { x: a_position[i], y: a_position[i + 1] }
          var next = { x: a_positionNext[i], y: a_positionNext[i + 1] }
          var prev = { x: a_positionPrev[i], y: a_positionPrev[i + 1] }
          var dir, len = a_offset * flag;
          if (curr.x === prev.x && curr.y === prev.y) {
            dir = normalize(next.x - curr.x, next.y - curr.y);
          }
          else if (curr.x === next.x && curr.y === next.y) {
            dir = normalize(curr.x - prev.x, curr.y - prev.y)
          }
          else {
            var dir1 = normalize(curr.x - prev.x, curr.y - prev.y)
            var dir2 = normalize(next.x - curr.x, next.y - curr.y)
            dir = normalize(dir1.x + dir2.x, dir1.y + dir2.y);
            var miter = 1.0 / Math.max(dir.x * dir1.x + dir.y * dir1.y, 0.5);
            len *= miter;
          }
          dir = { x: -dir.y * len, y: dir.x * len };
          pointss.push(curr.x + dir.x);
          pointss.push(curr.y + dir.y);
          flag *= -1;
        }
        return pointss
    }

    function normalize(x, y) {
        var m = Math.sqrt(x * x + y * y);
        return { x: x / m, y: y / m }
    }        

    /**
     * earcut
     */
    function earcut(data, holeIndices, dim) {

        dim = dim || 2;

        var hasHoles = holeIndices && holeIndices.length,
            outerLen = hasHoles ? holeIndices[0] * dim : data.length,
            outerNode = linkedList(data, 0, outerLen, dim, true),
            triangles = [];

        if (!outerNode) return triangles;

        var minX, minY, maxX, maxY, x, y, invSize;

        if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);

        // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
        if (data.length > 80 * dim) {
            minX = maxX = data[0];
            minY = maxY = data[1];

            for (var i = dim; i < outerLen; i += dim) {
                x = data[i];
                y = data[i + 1];
                if (x < minX) minX = x;
                if (y < minY) minY = y;
                if (x > maxX) maxX = x;
                if (y > maxY) maxY = y;
            }

            // minX, minY and invSize are later used to transform coords into integers for z-order calculation
            invSize = Math.max(maxX - minX, maxY - minY);
            invSize = invSize !== 0 ? 1 / invSize : 0;
        }

        earcutLinked(outerNode, triangles, dim, minX, minY, invSize);

        return triangles;
    }

    // create a circular doubly linked list from polygon points in the specified winding order
    function linkedList(data, start, end, dim, clockwise) {
        var i, last;

        if (clockwise === (signedArea(data, start, end, dim) > 0)) {
            for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
        } else {
            for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
        }

        if (last && equals(last, last.next)) {
            removeNode(last);
            last = last.next;
        }

        return last;
    }

    // eliminate colinear or duplicate points
    function filterPoints(start, end) {
        if (!start) return start;
        if (!end) end = start;

        var p = start,
            again;
        do {
            again = false;

            if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
                removeNode(p);
                p = end = p.prev;
                if (p === p.next) break;
                again = true;

            } else {
                p = p.next;
            }
        } while (again || p !== end);

        return end;
    }

    // main ear slicing loop which triangulates a polygon (given as a linked list)
    function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
        if (!ear) return;

        // interlink polygon nodes in z-order
        if (!pass && invSize) indexCurve(ear, minX, minY, invSize);

        var stop = ear,
            prev, next;

        // iterate through ears, slicing them one by one
        while (ear.prev !== ear.next) {
            prev = ear.prev;
            next = ear.next;

            if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
                // cut off the triangle
                triangles.push(prev.i / dim);
                triangles.push(ear.i / dim);
                triangles.push(next.i / dim);

                removeNode(ear);

                // skipping the next vertice leads to less sliver triangles
                ear = next.next;
                stop = next.next;

                continue;
            }

            ear = next;

            // if we looped through the whole remaining polygon and can't find any more ears
            if (ear === stop) {
                // try filtering points and slicing again
                if (!pass) {
                    earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);

                // if this didn't work, try curing all small self-intersections locally
                } else if (pass === 1) {
                    ear = cureLocalIntersections(ear, triangles, dim);
                    earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);

                // as a last resort, try splitting the remaining polygon into two
                } else if (pass === 2) {
                    splitEarcut(ear, triangles, dim, minX, minY, invSize);
                }

                break;
            }
        }
    }

    // check whether a polygon node forms a valid ear with adjacent nodes
    function isEar(ear) {
        var a = ear.prev,
            b = ear,
            c = ear.next;

        if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

        // now make sure we don't have other points inside the potential ear
        var p = ear.next.next;

        while (p !== ear.prev) {
            if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
                area(p.prev, p, p.next) >= 0) return false;
            p = p.next;
        }

        return true;
    }

    function isEarHashed(ear, minX, minY, invSize) {
        var a = ear.prev,
            b = ear,
            c = ear.next;

        if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

        // triangle bbox; min & max are calculated like this for speed
        var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),
            minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),
            maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),
            maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);

        // z-order range for the current triangle bbox;
        var minZ = zOrder(minTX, minTY, minX, minY, invSize),
            maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);

        var p = ear.prevZ,
            n = ear.nextZ;

        // look for points inside the triangle in both directions
        while (p && p.z >= minZ && n && n.z <= maxZ) {
            if (p !== ear.prev && p !== ear.next &&
                pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
                area(p.prev, p, p.next) >= 0) return false;
            p = p.prevZ;

            if (n !== ear.prev && n !== ear.next &&
                pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
                area(n.prev, n, n.next) >= 0) return false;
            n = n.nextZ;
        }

        // look for remaining points in decreasing z-order
        while (p && p.z >= minZ) {
            if (p !== ear.prev && p !== ear.next &&
                pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
                area(p.prev, p, p.next) >= 0) return false;
            p = p.prevZ;
        }

        // look for remaining points in increasing z-order
        while (n && n.z <= maxZ) {
            if (n !== ear.prev && n !== ear.next &&
                pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
                area(n.prev, n, n.next) >= 0) return false;
            n = n.nextZ;
        }

        return true;
    }

    // go through all polygon nodes and cure small local self-intersections
    function cureLocalIntersections(start, triangles, dim) {
        var p = start;
        do {
            var a = p.prev,
                b = p.next.next;

            if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {

                triangles.push(a.i / dim);
                triangles.push(p.i / dim);
                triangles.push(b.i / dim);

                // remove two nodes involved
                removeNode(p);
                removeNode(p.next);

                p = start = b;
            }
            p = p.next;
        } while (p !== start);

        return p;
    }

    // try splitting polygon into two and triangulate them independently
    function splitEarcut(start, triangles, dim, minX, minY, invSize) {
        // look for a valid diagonal that divides the polygon into two
        var a = start;
        do {
            var b = a.next.next;
            while (b !== a.prev) {
                if (a.i !== b.i && isValidDiagonal(a, b)) {
                    // split the polygon in two by the diagonal
                    var c = splitPolygon(a, b);

                    // filter colinear points around the cuts
                    a = filterPoints(a, a.next);
                    c = filterPoints(c, c.next);

                    // run earcut on each half
                    earcutLinked(a, triangles, dim, minX, minY, invSize);
                    earcutLinked(c, triangles, dim, minX, minY, invSize);
                    return;
                }
                b = b.next;
            }
            a = a.next;
        } while (a !== start);
    }

    // link every hole into the outer loop, producing a single-ring polygon without holes
    function eliminateHoles(data, holeIndices, outerNode, dim) {
        var queue = [],
            i, len, start, end, list;

        for (i = 0, len = holeIndices.length; i < len; i++) {
            start = holeIndices[i] * dim;
            end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
            list = linkedList(data, start, end, dim, false);
            if (list === list.next) list.steiner = true;
            queue.push(getLeftmost(list));
        }

        queue.sort(compareX);

        // process holes from left to right
        for (i = 0; i < queue.length; i++) {
            eliminateHole(queue[i], outerNode);
            outerNode = filterPoints(outerNode, outerNode.next);
        }

        return outerNode;
    }

    function compareX(a, b) {
        return a.x - b.x;
    }

    // find a bridge between vertices that connects hole with an outer ring and and link it
    function eliminateHole(hole, outerNode) {
        outerNode = findHoleBridge(hole, outerNode);
        if (outerNode) {
            var b = splitPolygon(outerNode, hole);
            filterPoints(b, b.next);
        }
    }

    // David Eberly's algorithm for finding a bridge between hole and outer polygon
    function findHoleBridge(hole, outerNode) {
        var p = outerNode,
            hx = hole.x,
            hy = hole.y,
            qx = -Infinity,
            m;

        // find a segment intersected by a ray from the hole's leftmost point to the left;
        // segment's endpoint with lesser x will be potential connection point
        do {
            if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
                var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
                if (x <= hx && x > qx) {
                    qx = x;
                    if (x === hx) {
                        if (hy === p.y) return p;
                        if (hy === p.next.y) return p.next;
                    }
                    m = p.x < p.next.x ? p : p.next;
                }
            }
            p = p.next;
        } while (p !== outerNode);

        if (!m) return null;

        if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint

        // look for points inside the triangle of hole point, segment intersection and endpoint;
        // if there are no points found, we have a valid connection;
        // otherwise choose the point of the minimum angle with the ray as connection point

        var stop = m,
            mx = m.x,
            my = m.y,
            tanMin = Infinity,
            tan;

        p = m.next;

        while (p !== stop) {
            if (hx >= p.x && p.x >= mx && hx !== p.x &&
                    pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {

                tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

                if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && locallyInside(p, hole)) {
                    m = p;
                    tanMin = tan;
                }
            }

            p = p.next;
        }

        return m;
    }

    // interlink polygon nodes in z-order
    function indexCurve(start, minX, minY, invSize) {
        var p = start;
        do {
            if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);
            p.prevZ = p.prev;
            p.nextZ = p.next;
            p = p.next;
        } while (p !== start);

        p.prevZ.nextZ = null;
        p.prevZ = null;

        sortLinked(p);
    }

    // Simon Tatham's linked list merge sort algorithm
    // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
    function sortLinked(list) {
        var i, p, q, e, tail, numMerges, pSize, qSize,
            inSize = 1;

        do {
            p = list;
            list = null;
            tail = null;
            numMerges = 0;

            while (p) {
                numMerges++;
                q = p;
                pSize = 0;
                for (i = 0; i < inSize; i++) {
                    pSize++;
                    q = q.nextZ;
                    if (!q) break;
                }
                qSize = inSize;

                while (pSize > 0 || (qSize > 0 && q)) {

                    if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                        e = p;
                        p = p.nextZ;
                        pSize--;
                    } else {
                        e = q;
                        q = q.nextZ;
                        qSize--;
                    }

                    if (tail) tail.nextZ = e;
                    else list = e;

                    e.prevZ = tail;
                    tail = e;
                }

                p = q;
            }

            tail.nextZ = null;
            inSize *= 2;

        } while (numMerges > 1);

        return list;
    }

    // z-order of a point given coords and inverse of the longer side of data bbox
    function zOrder(x, y, minX, minY, invSize) {
        // coords are transformed into non-negative 15-bit integer range
        x = 32767 * (x - minX) * invSize;
        y = 32767 * (y - minY) * invSize;

        x = (x | (x << 8)) & 0x00FF00FF;
        x = (x | (x << 4)) & 0x0F0F0F0F;
        x = (x | (x << 2)) & 0x33333333;
        x = (x | (x << 1)) & 0x55555555;

        y = (y | (y << 8)) & 0x00FF00FF;
        y = (y | (y << 4)) & 0x0F0F0F0F;
        y = (y | (y << 2)) & 0x33333333;
        y = (y | (y << 1)) & 0x55555555;

        return x | (y << 1);
    }

    // find the leftmost node of a polygon ring
    function getLeftmost(start) {
        var p = start,
            leftmost = start;
        do {
            if (p.x < leftmost.x) leftmost = p;
            p = p.next;
        } while (p !== start);

        return leftmost;
    }

    // check if a point lies within a convex triangle
    function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
        return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&
            (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&
            (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
    }

    // check if a diagonal between two polygon nodes is valid (lies in polygon interior)
    function isValidDiagonal(a, b) {
        return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) &&
            locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);
    }

    // signed area of a triangle
    function area(p, q, r) {
        return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
    }

    // check if two points are equal
    function equals(p1, p2) {
        return p1.x === p2.x && p1.y === p2.y;
    }

    // check if two segments intersect
    function intersects(p1, q1, p2, q2) {
        if ((equals(p1, q1) && equals(p2, q2)) ||
            (equals(p1, q2) && equals(p2, q1))) return true;
        return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 &&
            area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;
    }

    // check if a polygon diagonal intersects any polygon segments
    function intersectsPolygon(a, b) {
        var p = a;
        do {
            if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                    intersects(p, p.next, a, b)) return true;
            p = p.next;
        } while (p !== a);

        return false;
    }

    // check if a polygon diagonal is locally inside the polygon
    function locallyInside(a, b) {
        return area(a.prev, a, a.next) < 0 ?
            area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :
            area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
    }

    // check if the middle point of a polygon diagonal is inside the polygon
    function middleInside(a, b) {
        var p = a,
            inside = false,
            px = (a.x + b.x) / 2,
            py = (a.y + b.y) / 2;
        do {
            if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&
                    (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
                inside = !inside;
            p = p.next;
        } while (p !== a);

        return inside;
    }

    // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
    // if one belongs to the outer ring and another to a hole, it merges it into a single ring
    function splitPolygon(a, b) {
        var a2 = new Node(a.i, a.x, a.y),
            b2 = new Node(b.i, b.x, b.y),
            an = a.next,
            bp = b.prev;

        a.next = b;
        b.prev = a;

        a2.next = an;
        an.prev = a2;

        b2.next = a2;
        a2.prev = b2;

        bp.next = b2;
        b2.prev = bp;

        return b2;
    }

    // create a node and optionally link it with previous one (in a circular doubly linked list)
    function insertNode(i, x, y, last) {
        var p = new Node(i, x, y);

        if (!last) {
            p.prev = p;
            p.next = p;

        } else {
            p.next = last.next;
            p.prev = last;
            last.next.prev = p;
            last.next = p;
        }
        return p;
    }

    function removeNode(p) {
        p.next.prev = p.prev;
        p.prev.next = p.next;

        if (p.prevZ) p.prevZ.nextZ = p.nextZ;
        if (p.nextZ) p.nextZ.prevZ = p.prevZ;
    }

    function Node(i, x, y) {
        // vertice index in coordinates array
        this.i = i;

        // vertex coordinates
        this.x = x;
        this.y = y;

        // previous and next vertice nodes in a polygon ring
        this.prev = null;
        this.next = null;

        // z-order curve value
        this.z = null;

        // previous and next nodes in z-order
        this.prevZ = null;
        this.nextZ = null;

        // indicates whether this is a steiner point
        this.steiner = false;
    }

    // return a percentage difference between the polygon area and its triangulation area;
    // used to verify correctness of triangulation
    earcut.deviation = function (data, holeIndices, dim, triangles) {
        var hasHoles = holeIndices && holeIndices.length;
        var outerLen = hasHoles ? holeIndices[0] * dim : data.length;

        var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
        if (hasHoles) {
            for (var i = 0, len = holeIndices.length; i < len; i++) {
                var start = holeIndices[i] * dim;
                var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
                polygonArea -= Math.abs(signedArea(data, start, end, dim));
            }
        }

        var trianglesArea = 0;
        for (i = 0; i < triangles.length; i += 3) {
            var a = triangles[i] * dim;
            var b = triangles[i + 1] * dim;
            var c = triangles[i + 2] * dim;
            trianglesArea += Math.abs(
                (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
                (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
        }

        return polygonArea === 0 && trianglesArea === 0 ? 0 :
            Math.abs((trianglesArea - polygonArea) / polygonArea);
    };

    function signedArea(data, start, end, dim) {
        var sum = 0;
        for (var i = start, j = end - dim; i < end; i += dim) {
            sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
            j = i;
        }
        return sum;
    }

    // turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts
    earcut.flatten = function (data) {
        var dim = data[0][0].length,
            result = {vertices: [], holes: [], dimensions: dim},
            holeIndex = 0;

        for (var i = 0; i < data.length; i++) {
            for (var j = 0; j < data[i].length; j++) {
                for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
            }
            if (i > 0) {
                holeIndex += data[i - 1].length;
                result.holes.push(holeIndex);
            }
        }
        return result;
    };
}

/***/ }),

/***/ "./src/worker/webglManager.ts":
/*!************************************!*\
  !*** ./src/worker/webglManager.ts ***!
  \************************************/
/*! exports provided: WebglManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebglManager", function() { return WebglManager; });
var WebglManager = /** @class */ (function () {
    function WebglManager() {
        this.worker = {};
        this.workerCallback = {};
        this.initWorkers();
    }
    WebglManager.prototype.initWorkers = function () {
        try {
            var callBack_1 = this.workerCallback;
            var source = '(' + window["webglCaculate"] + ')()';
            var blob = new Blob([source]);
            this.worker = new Worker(window.URL.createObjectURL(blob));
            this.worker.onmessage = function (e) {
                var data = e.data;
                var uid = data.uid;
                var webglCallBack = callBack_1[uid];
                // add webglIndexObj to data??? webglIndexObj is the result of earcut
                if (webglCallBack) {
                    var replay = data.messageData.replays[0];
                    if (replay) {
                        replay.Polygon && (replay.Polygon.webglIndexObj = data.webglPolygonIndex);
                        replay.LineString && (replay.LineString.webglIndexObj = data.webglLineIndex);
                        webglCallBack(data.messageData, data.methodInfo);
                    }
                }
                delete callBack_1[uid];
            };
            return true;
        }
        catch (e) {
            return false;
        }
    };
    WebglManager.prototype.postMessage = function (data) {
        var replays = data.replays, uid = data.uid, callBack = data.callBack, messageData = data.messageData, methodInfo = data.methodInfo;
        if (callBack) {
            this.workerCallback[uid] = callBack;
        }
        var postMessage = {
            replays: replays,
            uid: uid,
            messageData: messageData,
            methodInfo: methodInfo
        };
        this.worker.postMessage(postMessage);
    };
    WebglManager.prototype.close = function () {
        this.worker.terminate();
    };
    return WebglManager;
}());



/***/ }),

/***/ "./src/worker/workerManager.ts":
/*!*************************************!*\
  !*** ./src/worker/workerManager.ts ***!
  \*************************************/
/*! exports provided: WorkerManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WorkerManager", function() { return WorkerManager; });
/* harmony import */ var _vectorTileLayerThreadMode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vectorTileLayerThreadMode */ "./src/worker/vectorTileLayerThreadMode.ts");

var WorkerManager = /** @class */ (function () {
    function WorkerManager(threadMode, workerCount) {
        if (threadMode === _vectorTileLayerThreadMode__WEBPACK_IMPORTED_MODULE_0__["VectorTileLayerThreadMode"].SingleBackgroundWorker) {
            this.workerCount = 1;
        }
        else {
            if (isNaN(workerCount) || workerCount <= 0) {
                this.workerCount = Math.max(Math.floor(window.navigator.hardwareConcurrency / 2), 1);
            }
            else {
                // passed by parm
                this.workerCount = workerCount;
            }
        }
        this.currentWorkerIndex = 0;
        this.workers = [];
        this.workerCallback = {};
    }
    WorkerManager.prototype.initWorkers = function () {
        try {
            var callbacks_1 = this.workerCallback;
            for (var i = 0; i < this.workerCount; i++) {
                var source = '(' + window["olInit"] + ')()';
                var blob = new Blob([source]);
                var worker = new Worker(window.URL.createObjectURL(blob));
                worker.onmessage = function (e) {
                    var methodInfo = e.data["methodInfo"];
                    var messageData = e.data["messageData"];
                    var uid = methodInfo.uid;
                    var callback = callbacks_1[uid];
                    if (methodInfo.methodName === 'createReplay') {
                        var replays = messageData.replays[0];
                        window.webglManager.postMessage({
                            replays: replays,
                            uid: uid,
                            callBack: callback,
                            messageData: messageData,
                            methodInfo: methodInfo
                        });
                    }
                    else {
                        if (callback) {
                            callback(messageData, methodInfo);
                        }
                    }
                    delete callbacks_1[uid];
                };
                this.workers.push(worker);
            }
            this.inited = true;
            return true;
        }
        catch (e) {
            this.inited = false;
            return false;
        }
    };
    WorkerManager.prototype.postMessage = function (uid, methodName, messageData, callbackInfo, workerIndex) {
        if (typeof workerIndex !== "number" || isNaN(workerIndex) || workerIndex >= this.workers.length) {
            workerIndex = this.currentWorkerIndex = (this.currentWorkerIndex + 1) % this.workers.length;
        }
        var methodInfo = {
            uid: uid,
            methodName: methodName,
            workerId: workerIndex
        };
        if (callbackInfo) {
            this.workerCallback[uid] = callbackInfo;
        }
        var postMessage = {
            methodInfo: methodInfo,
            messageData: messageData
        };
        this.workers[workerIndex].postMessage(postMessage);
        return workerIndex;
    };
    WorkerManager.prototype.close = function () {
        this.workerCallback = {};
        for (var index = 0; index < this.workers.length; index++) {
            this.workers[index].terminate();
        }
    };
    return WorkerManager;
}());



/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZpbHRlci9nZW9GaWx0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZpbHRlci9nZW9GaWx0ZXJJdGVtLnRzIiwid2VicGFjazovLy8uL3NyYy9maWx0ZXIvZ2VvTnVtYmVyQXR0cmlidXRlRmlsdGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9maWx0ZXIvZ2VvUmFuZ2VGaWx0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZpbHRlci9nZW9SZWdleEZpbHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZmlsdGVyL2dlb1N0cmluZ0F0dHJpYnV0ZUZpbHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZmlsdGVyL2dlb1pvb21GaWx0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1hdC9nZW9NdnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dlb1ZlY3RvclRpbGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xheWVyL3ZlY3RvclRpbGVMYXllci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVuZGVyL2dlb1ZlY3RvclRpbGVsYXllclJlbmRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVuZGVyL3JlcGxheUdyb3VwQ3VzdG9tLnRzIiwid2VicGFjazovLy8uL3NyYy9yZW5kZXIvdGV4dFJlcGxheUN1c3RvbS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc291cmNlL2dlb1ZlY3RvclRpbGVTb3VyY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlL2RldGVjdFRleHRMYWJlbGluZ1N0cmF0ZWd5LnRzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZS9nZW9BcmVhU3R5bGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlL2dlb0JydXNoLnRzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZS9nZW9MaW5lU3R5bGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlL2dlb1BvaW50U3R5bGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlL2dlb1NoaWVsZFN0eWxlLnRzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZS9nZW9TdHlsZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUvZ2VvU3R5bGVQcm9wZXJ0eS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUvZ2VvVGV4dFN0eWxlLnRzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZS90ZXh0TGFiZWxpbmdTdHJhdGVneS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHJlZS9UcmVlTm9kZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHJlZS9zdHlsZUpzb25DYWNoZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHJlZS9zdHlsZUpzb25DYWNoZUl0ZW0udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RyZWUvdHJlZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvd2ViZ2wvaW5pdFNoYWRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvd2ViZ2wvbGluZVN0cmluZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvd2ViZ2wvcG9seWdvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvd29ya2VyL3ZlY3RvclRpbGVMYXllclRocmVhZE1vZGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3dvcmtlci93ZWJnbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvd29ya2VyL3dlYmdsTWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvd29ya2VyL3dvcmtlck1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0RBQTBDLGdDQUFnQztBQUMxRTtBQUNBOztBQUVB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Q0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUNuRCxJQUFJLEdBQUcsR0FBRyxxQkFBcUIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUNqRCxJQUFJLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUN0RCxjQUFjLEdBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGdDQUFnQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQzVGLElBQUksUUFBUSxHQUFHLHFCQUFxQixDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3RELElBQUksT0FBTyxHQUFHLHFCQUFxQixDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3JELElBQUksUUFBUSxHQUFHLHFCQUFxQixDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3RELElBQUksT0FBTyxHQUFHLHNDQUFzQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3RFLElBQUksT0FBTyxHQUFHLHFCQUFxQixDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3JELElBQUksU0FBUyxHQUFHLHFCQUFxQixDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7d0JBQ3hELElBQUksV0FBVyxHQUFJLHFCQUFxQixDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7d0JBQzNELElBQUksSUFBSSxHQUFHLHFCQUFxQixDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7d0JBQ25ELElBQUksT0FBTyxHQUFHLHFCQUFxQixDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7d0JBQ3RELElBQUks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Q0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHNEQUFzRDs7QUFFdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixZQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUEsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztB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LEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUN0RCxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ25DO0lBQ0wsQ0FBQztJQUNMLG9CQUFDO0FBQUQsQ0FBQyIsImZpbGUiOiJvbC5tYXBzdWl0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL21haW4udHNcIik7XG4iLCJpbXBvcnQgeyBHZW9GaWx0ZXJJdGVtIH0gZnJvbSBcIi4vZ2VvRmlsdGVySXRlbVwiO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEdlb0ZpbHRlciB7XHJcbiAgICBwdWJsaWMgaW5pdGlhbGl6ZWQ6IGJvb2xlYW47XHJcbiAgICBwdWJsaWMgZmlsdGVySXRlbXM6IEdlb0ZpbHRlckl0ZW1bXTtcclxuICAgIHB1YmxpYyByZXBsYWNlZFZhbHVlVG9JbmRleDogYm9vbGVhbjtcclxuXHJcbiAgICBwdWJsaWMga2V5OiBhbnk7XHJcbiAgICBwdWJsaWMga2V5SW5kZXg6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihmaWx0ZXJJdGVtczogR2VvRmlsdGVySXRlbVtdKSB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJJdGVtcyA9IGZpbHRlckl0ZW1zIHx8IFtdO1xyXG4gICAgICAgIHRoaXMucmVwbGFjZWRWYWx1ZVRvSW5kZXggPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRGaWx0ZXJJdGVtKGZpbHRlckl0ZW06IEdlb0ZpbHRlckl0ZW0pIHtcclxuICAgICAgICB0aGlzLmZpbHRlckl0ZW1zLnB1c2goZmlsdGVySXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdGlhbGl6ZSgpIHtcclxuICAgICAgICB0aGlzLmluaXRpYWxpemVDb3JlKCk7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdGlhbGl6ZUNvcmUoKSB7IH1cclxuXHJcbiAgICBtYXRjaE9MRmVhdHVyZShmZWF0dXJlOiBvbC5GZWF0dXJlLCB6b29tOiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXRoaXMuaW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLm1hdGNoRmVhdHVyZUNvcmUoZmVhdHVyZSwgem9vbSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVwbGFjZVZhdWxlc1RvUGJmSW5kZXgocGJmTGF5ZXI6IGFueSkge1xyXG4gICAgICAgIHRoaXMucmVwbGFjZVZhdWxlc1RvUGJmSW5kZXhDb3JlKHBiZkxheWVyKTtcclxuICAgIH1cclxuXHJcbiAgICBhYnN0cmFjdCBtYXRjaEZlYXR1cmVDb3JlKGZlYXR1cmU6IG9sLkZlYXR1cmUsIHpvb206IG51bWJlcik6IGJvb2xlYW47XHJcbiAgICBhYnN0cmFjdCByZXBsYWNlVmF1bGVzVG9QYmZJbmRleENvcmUocGJmTGF5ZXI6IGFueSk7XHJcbn0iLCJleHBvcnQgY2xhc3MgR2VvRmlsdGVySXRlbSB7XHJcbiAgICBrZXk6IHN0cmluZztcclxuICAgIG9wZXJhdG9yOiBzdHJpbmc7XHJcbiAgICB2YWx1ZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGtleTogc3RyaW5nLCBvcGVyYXRvcjogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XHJcbiAgICAgICAgdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgb3BlcmF0b3JSZWdleCA9IG5ldyBSZWdFeHAoXCJbPD4hPV0rXCIsIFwiZ1wiKTtcclxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlRmlsdGVySXRlbShmaWx0ZXJJdGVtU3RyaW5nOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgb3BlcmF0b3IgPSBmaWx0ZXJJdGVtU3RyaW5nLm1hdGNoKHRoaXMub3BlcmF0b3JSZWdleClbMF07XHJcbiAgICAgICAgbGV0IHBhcnRzID0gZmlsdGVySXRlbVN0cmluZy5zcGxpdChvcGVyYXRvcik7XHJcbiAgICAgICAgbGV0IGl0ZW0gPSBuZXcgR2VvRmlsdGVySXRlbShwYXJ0c1swXSwgb3BlcmF0b3IsIHBhcnRzWzFdKTtcclxuICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IEdlb0ZpbHRlckl0ZW0gfSBmcm9tIFwiLi9nZW9GaWx0ZXJJdGVtXCI7XHJcbmltcG9ydCB7IEdlb1JhbmdlRmlsdGVyIH0gZnJvbSBcIi4vZ2VvUmFuZ2VGaWx0ZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBHZW9OdW1iZXJBdHRyaWJ1dGVGaWx0ZXIgZXh0ZW5kcyBHZW9SYW5nZUZpbHRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihmaWx0ZXJJdGVtczogR2VvRmlsdGVySXRlbVtdKSB7XHJcbiAgICAgICAgc3VwZXIoZmlsdGVySXRlbXMpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEdlb0ZpbHRlciB9IGZyb20gXCIuL2dlb0ZpbHRlclwiO1xyXG5pbXBvcnQgeyBHZW9GaWx0ZXJJdGVtIH0gZnJvbSBcIi4vZ2VvRmlsdGVySXRlbVwiO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEdlb1JhbmdlRmlsdGVyIGV4dGVuZHMgR2VvRmlsdGVyIHtcclxuICAgIHB1YmxpYyByYW5nZXM6IE51bWJlcltdW10gPSBbXTtcclxuICAgIHB1YmxpYyBhbGxvd2VkVmFsdWVzOiBOdW1iZXJbXSA9IFtdO1xyXG4gICAgcHVibGljIGRpc2FsbG93ZWRWYWx1ZXM6IE51bWJlcltdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IoZmlsdGVySXRlbXM6IEdlb0ZpbHRlckl0ZW1bXSkge1xyXG4gICAgICAgIHN1cGVyKGZpbHRlckl0ZW1zKTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0aWFsaXplQ29yZSgpIHtcclxuICAgICAgICB0aGlzLmZpbHRlckl0ZW1zLnNvcnQoKGEsIGIpID0+ICthLnZhbHVlIC0gK2IudmFsdWUpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5maWx0ZXJJdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgZmlsdGVySXRlbSA9IHRoaXMuZmlsdGVySXRlbXNbaV07XHJcbiAgICAgICAgICAgIHRoaXMua2V5ID0gZmlsdGVySXRlbS5rZXk7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICtmaWx0ZXJJdGVtLnZhbHVlO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGZpbHRlckl0ZW0ub3BlcmF0b3IpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCI+XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yYW5nZXMucHVzaChbdmFsdWUgKyAwLjAwMDAxLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFldKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCI+PVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmFuZ2VzLnB1c2goW3ZhbHVlLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFldKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCIhPVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzYWxsb3dlZFZhbHVlcy5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCI9XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGxvd2VkVmFsdWVzLnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmlsdGVySXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGZpbHRlckl0ZW0gPSB0aGlzLmZpbHRlckl0ZW1zW2ldO1xyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSArZmlsdGVySXRlbS52YWx1ZTtcclxuICAgICAgICAgICAgbGV0IHJhbmdlID0gR2VvUmFuZ2VGaWx0ZXIuZ2V0UmFuZ2UodGhpcy5yYW5nZXMsIHZhbHVlKTtcclxuICAgICAgICAgICAgc3dpdGNoIChmaWx0ZXJJdGVtLm9wZXJhdG9yKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiPFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZVsxXSA9IHZhbHVlICsgMC4wMDAwMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlID0gW051bWJlci5ORUdBVElWRV9JTkZJTklUWSwgdmFsdWUgKyAwLjAwMDAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yYW5nZXMucHVzaChyYW5nZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIjw9XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlWzFdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZSA9IFtOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksIHZhbHVlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yYW5nZXMucHVzaChyYW5nZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG1hdGNoRmVhdHVyZUNvcmUoZmVhdHVyZTogYW55LCB6b29tOiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICBsZXQgY3VycmVudFZhbHVlO1xyXG4gICAgICAgIGlmICh0aGlzLnJlcGxhY2VkVmFsdWVUb0luZGV4KSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IGZlYXR1cmUucHJvcGVydGllc1t0aGlzLmtleV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjdXJyZW50VmFsdWUgPSBmZWF0dXJlLnByb3BlcnRpZXNbdGhpcy5rZXldO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNJblJhbmdlKCtjdXJyZW50VmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlcGxhY2VWYXVsZXNUb1BiZkluZGV4Q29yZShwYmZMYXllcikge1xyXG4gICAgICAgIHRoaXMucmVwbGFjZWRWYWx1ZVRvSW5kZXggPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlzSW5SYW5nZShjdXJyZW50VmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh0aGlzLmRpc2FsbG93ZWRWYWx1ZXMuaW5jbHVkZXMoY3VycmVudFZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmFsbG93ZWRWYWx1ZXMuaW5jbHVkZXMoY3VycmVudFZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yYW5nZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHJhbmdlID0gdGhpcy5yYW5nZXNbaV07XHJcbiAgICAgICAgICAgIGlmIChyYW5nZS5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUgPj0gcmFuZ2VbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUgPj0gcmFuZ2VbMF0gJiYgY3VycmVudFZhbHVlIDw9IHJhbmdlWzFdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0UmFuZ2UocmFuZ2VzOiBOdW1iZXJbXVtdLCB2YWx1ZTogbnVtYmVyKTogTnVtYmVyW10ge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCByYW5nZSA9IHJhbmdlc1tpXTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlID49IHJhbmdlWzBdICYmIHZhbHVlIDw9IHJhbmdlWzFdKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmFuZ2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCB7IEdlb0ZpbHRlciB9IGZyb20gXCIuL2dlb0ZpbHRlclwiO1xyXG5pbXBvcnQgeyBHZW9GaWx0ZXJJdGVtIH0gZnJvbSBcIi4vZ2VvRmlsdGVySXRlbVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdlb1JlZ2V4RmlsdGVyIGV4dGVuZHMgR2VvRmlsdGVyIHtcclxuICAgIHJlZ2V4OiBSZWdFeHA7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZmlsdGVySXRlbXM6IEdlb0ZpbHRlckl0ZW1bXSkge1xyXG4gICAgICAgIHN1cGVyKGZpbHRlckl0ZW1zKTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0aWFsaXplQ29yZSgpIHtcclxuICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLmZpbHRlckl0ZW1zWzBdLnZhbHVlO1xyXG4gICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMiwgdmFsdWUubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgdGhpcy5yZWdleCA9IG5ldyBSZWdFeHAodmFsdWUsIFwiZ1wiKTtcclxuXHJcbiAgICAgICAgdGhpcy5rZXkgPSB0aGlzLmZpbHRlckl0ZW1zWzBdLmtleTtcclxuICAgIH1cclxuXHJcbiAgICBtYXRjaEZlYXR1cmVDb3JlKGZlYXR1cmU6IGFueSwgem9vbTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRWYWx1ZTtcclxuICAgICAgICBpZiAodGhpcy5yZXBsYWNlZFZhbHVlVG9JbmRleCkge1xyXG4gICAgICAgICAgICBjdXJyZW50VmFsdWUgPSBmZWF0dXJlLnByb3BlcnRpZXNbdGhpcy5rZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY3VycmVudFZhbHVlID0gZmVhdHVyZS5wcm9wZXJ0aWVzW3RoaXMua2V5XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghY3VycmVudFZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjdXJyZW50VmFsdWUudG9TdHJpbmcoKS5tYXRjaCh0aGlzLnJlZ2V4KSAhPT0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICByZXBsYWNlVmF1bGVzVG9QYmZJbmRleENvcmUocGJmTGF5ZXIpIHtcclxuICAgICAgICB0aGlzLnJlcGxhY2VkVmFsdWVUb0luZGV4ID0gdHJ1ZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBHZW9GaWx0ZXIgfSBmcm9tIFwiLi9nZW9GaWx0ZXJcIjtcclxuaW1wb3J0IHsgR2VvRmlsdGVySXRlbSB9IGZyb20gXCIuL2dlb0ZpbHRlckl0ZW1cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBHZW9TdHJpbmdBdHRyaWJ1dGVGaWx0ZXIgZXh0ZW5kcyBHZW9GaWx0ZXIge1xyXG4gICAgZXhwZWN0ZWRWYWx1ZXM6IHN0cmluZ1tdO1xyXG4gICAgZXhwZWN0ZWRWYWx1ZUluZGV4czogbnVtYmVyW107XHJcblxyXG4gICAgY29uc3RydWN0b3IoZmlsdGVySXRlbXM6IEdlb0ZpbHRlckl0ZW1bXSkge1xyXG4gICAgICAgIHN1cGVyKGZpbHRlckl0ZW1zKTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0aWFsaXplQ29yZSgpIHtcclxuICAgICAgICBsZXQgZXhwZWN0ZWRWYWx1ZSA9IHRoaXMuZmlsdGVySXRlbXNbMF0udmFsdWU7XHJcbiAgICAgICAgZXhwZWN0ZWRWYWx1ZSA9IGV4cGVjdGVkVmFsdWUuc2xpY2UoMSwgZXhwZWN0ZWRWYWx1ZS5sZW5ndGggLSAxKTtcclxuICAgICAgICB0aGlzLmV4cGVjdGVkVmFsdWVzID0gZXhwZWN0ZWRWYWx1ZS5zcGxpdChcIixcIik7XHJcbiAgICAgICAgdGhpcy5rZXkgPSB0aGlzLmZpbHRlckl0ZW1zWzBdLmtleTtcclxuICAgIH1cclxuXHJcbiAgICBtYXRjaEZlYXR1cmVDb3JlKGZlYXR1cmU6IGFueSwgem9vbTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRWYWx1ZTtcclxuICAgICAgICBsZXQgY3VycmVudEV4cGVjdGVkVmFsdWVzO1xyXG4gICAgICAgIGlmICh0aGlzLnJlcGxhY2VkVmFsdWVUb0luZGV4KSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IGZlYXR1cmUucHJvcGVydGllc0luZGV4W3RoaXMua2V5SW5kZXhdO1xyXG4gICAgICAgICAgICBjdXJyZW50RXhwZWN0ZWRWYWx1ZXMgPSB0aGlzLmV4cGVjdGVkVmFsdWVJbmRleHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjdXJyZW50VmFsdWUgPSBmZWF0dXJlLnByb3BlcnRpZXNbdGhpcy5rZXldO1xyXG4gICAgICAgICAgICBjdXJyZW50RXhwZWN0ZWRWYWx1ZXMgPSB0aGlzLmV4cGVjdGVkVmFsdWVzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3dpdGNoICh0aGlzLmZpbHRlckl0ZW1zWzBdLm9wZXJhdG9yKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCI9XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudEV4cGVjdGVkVmFsdWVzLmluY2x1ZGVzKGN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgIGNhc2UgXCIhPVwiOlxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICFjdXJyZW50RXhwZWN0ZWRWYWx1ZXMuaW5jbHVkZXMoY3VycmVudFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVwbGFjZVZhdWxlc1RvUGJmSW5kZXhDb3JlKHBiZkxheWVyKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmluaXRpYWxpemVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5rZXlJbmRleCA9IHBiZkxheWVyLmtleXMuaW5kZXhPZih0aGlzLmtleSk7XHJcblxyXG4gICAgICAgIGxldCByZXBsYWNlZEV4cGVjdGVkVmF1bGVzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDAsIGpqID0gdGhpcy5leHBlY3RlZFZhbHVlcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XHJcbiAgICAgICAgICAgIGxldCBudW1iZXJWYWx1ZSA9ICt0aGlzLmV4cGVjdGVkVmFsdWVzW2pdO1xyXG4gICAgICAgICAgICBpZiAoaXNOYU4obnVtYmVyVmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXBsYWNlZEV4cGVjdGVkVmF1bGVzLnB1c2gocGJmTGF5ZXIudmFsdWVzLmluZGV4T2YodGhpcy5leHBlY3RlZFZhbHVlc1tqXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVwbGFjZWRFeHBlY3RlZFZhdWxlcy5wdXNoKHBiZkxheWVyLnZhbHVlcy5pbmRleE9mKG51bWJlclZhbHVlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZXhwZWN0ZWRWYWx1ZUluZGV4cyA9IHJlcGxhY2VkRXhwZWN0ZWRWYXVsZXM7XHJcbiAgICAgICAgdGhpcy5yZXBsYWNlZFZhbHVlVG9JbmRleCA9IHRydWU7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBHZW9GaWx0ZXIgfSBmcm9tIFwiLi9nZW9GaWx0ZXJcIjtcclxuaW1wb3J0IHsgR2VvRmlsdGVySXRlbSB9IGZyb20gXCIuL2dlb0ZpbHRlckl0ZW1cIjtcclxuaW1wb3J0IHsgR2VvUmFuZ2VGaWx0ZXIgfSBmcm9tIFwiLi9nZW9SYW5nZUZpbHRlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdlb1pvb21GaWx0ZXIgZXh0ZW5kcyBHZW9SYW5nZUZpbHRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihmaWx0ZXJJdGVtczogR2VvRmlsdGVySXRlbVtdKSB7XHJcbiAgICAgICAgc3VwZXIoZmlsdGVySXRlbXMpO1xyXG4gICAgfVxyXG5cclxuICAgIG1hdGNoRmVhdHVyZUNvcmUoZmVhdHVyZTogb2wuRmVhdHVyZSwgem9vbTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNJblJhbmdlKHpvb20pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlcGxhY2VWYXVsZXNUb1BiZkluZGV4Q29yZShwYmZMYXllcikge1xyXG4gICAgICAgIHRoaXMucmVwbGFjZWRWYWx1ZVRvSW5kZXggPSB0cnVlO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBHZW9NVlRGb3JtYXQgZXh0ZW5kcyAob2wuZm9ybWF0Lk1WVCBhcyB7IG5ldyhwOiBvbHguZm9ybWF0Lk1WVE9wdGlvbnMpOiBhbnk7IH0pIHtcclxuICAgIHN0eWxlSnNvbkNhY2hlOiBhbnk7XHJcbiAgICBsYXllck5hbWU6IHN0cmluZztcclxuICAgIG1heERhdGFab29tOiBudW1iZXI7XHJcbiAgICBtYXhEYXRhWm9vbUNhY2hlOiBhbnk7XHJcbiAgICByZWdpc3RlcmVkTG9hZEV2ZW50czogYW55O1xyXG5cclxuICAgIGxydUNhY2hlOiBhbnk7XHJcbiAgICBzb3VyY2VDYWNoZTogYW55O1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzdHlsZUpTb25DYWNoZTogYW55LCBvcHRpb25zOiBhbnkpIHtcclxuICAgICAgICBvcHRpb25zLmxheWVyTmFtZSA9IG9wdGlvbnMubGF5ZXJOYW1lID8gb3B0aW9ucy5sYXllck5hbWUgOiBcImxheWVyTmFtZVwiO1xyXG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuaXNNdWx0aXRocmVhZCA9IG9wdGlvbnMubXVsdGl0aHJlYWQ7XHJcbiAgICAgICAgdGhpcy5taW5pbWFsaXN0ID0gb3B0aW9ucy5taW5pbWFsaXN0O1xyXG4gICAgICAgIHRoaXMubWF4RGF0YVpvb20gPSBvcHRpb25zLm1heERhdGFab29tID8gb3B0aW9ucy5tYXhEYXRhWm9vbSA6IDE0O1xyXG4gICAgICAgIHRoaXMubGF5ZXJOYW1lID0gb3B0aW9ucy5sYXllck5hbWU7XHJcbiAgICAgICAgdGhpcy5zdHlsZUpzb25DYWNoZSA9IHN0eWxlSlNvbkNhY2hlO1xyXG4gICAgICAgIHRoaXMubWF4RGF0YVpvb21DYWNoZSA9IHt9O1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJlZExvYWRFdmVudHMgPSB7fTtcclxuICAgICAgICB0aGlzLmxydUNhY2hlID0gbmV3ICg8YW55Pm9sKS5zdHJ1Y3RzLkxSVUNhY2hlKDE1KTtcclxuICAgICAgICB0aGlzLnNvdXJjZUNhY2hlID0ge307XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGF5ZXJOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGF5ZXJOYW1lO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZWdpc3RlclRpbGVMb2FkRXZlbnQodGlsZSwgc3VjY2VzcywgZmFpbHVyZSwgY2FsbGJhY2spIHtcclxuICAgICAgICBsZXQgaGFzUmVxdWVzdGVkID0gdHJ1ZTtcclxuICAgICAgICBsZXQgcmVxdWVzdEtleSA9IHRpbGUucmVxdWVzdFRpbGVDb29yZC5qb2luKFwiLFwiKSArIFwiLFwiICsgdGlsZS50aWxlQ29vcmRbMF07XHJcbiAgICAgICAgbGV0IGxvYWRFdmVudEluZm8gPSB7XHJcbiAgICAgICAgICAgIHRpbGU6IHRpbGUsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3NGdW5jdGlvbjogc3VjY2VzcyxcclxuICAgICAgICAgICAgZmFpbHVyZUZ1bmN0aW9uOiBmYWlsdXJlLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2tcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucmVnaXN0ZXJlZExvYWRFdmVudHNbcmVxdWVzdEtleV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyZWRMb2FkRXZlbnRzW3JlcXVlc3RLZXldID0gW107XHJcbiAgICAgICAgICAgIGhhc1JlcXVlc3RlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5yZWdpc3RlcmVkTG9hZEV2ZW50c1tyZXF1ZXN0S2V5XS5wdXNoKGxvYWRFdmVudEluZm8pO1xyXG4gICAgICAgIHJldHVybiBoYXNSZXF1ZXN0ZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmVhZEZlYXR1cmVzQW5kQ3JlYXRlSW5zdHJ1Y3RzTmV3KHNvdXJjZTogQXJyYXlCdWZmZXIsIHJlcXVlc3RUaWxlQ29vcmQsIHRpbGVDb29yZCkge1xyXG4gICAgICAgIGxldCBwYmYgPSBuZXcgKDxhbnk+b2wpLmV4dC5QQkYoKHNvdXJjZSkpO1xyXG4gICAgICAgIGxldCBwYmZMYXllcnMgPSBwYmYucmVhZEZpZWxkcygoPGFueT5vbCkuZm9ybWF0Lk1WVC5wYmZSZWFkZXJzXy5sYXllcnMsIHt9KTtcclxuICAgICAgICBsZXQgcGJmTGF5ZXI7XHJcbiAgICAgICAgbGV0IGZlYXR1cmVzID0gW107XHJcbiAgICAgICAgbGV0IGZlYXR1cmVJbmRleCA9IC0xO1xyXG5cclxuICAgICAgICBsZXQgem9vbU1hdGNoZWRHZW9TdHlsZXNHcm91cEJ5TGF5ZXJJZCA9IHRoaXMuc3R5bGVKc29uQ2FjaGUuZ2VvU3R5bGVHcm91cEJ5Wm9vbVt0aWxlQ29vcmRbMF1dO1xyXG4gICAgICAgIGlmICghem9vbU1hdGNoZWRHZW9TdHlsZXNHcm91cEJ5TGF5ZXJJZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmVhdHVyZXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcGJmTGF5ZXJOYW1lc1dpdGhHZW9TdHlsZSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IHBiZkxheWVyTmFtZSBpbiB6b29tTWF0Y2hlZEdlb1N0eWxlc0dyb3VwQnlMYXllcklkKSB7XHJcbiAgICAgICAgICAgIHBiZkxheWVyTmFtZXNXaXRoR2VvU3R5bGUucHVzaChwYmZMYXllck5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGluc3RydWN0c0NhY2hlID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgbmFtZSBpbiBwYmZMYXllcnMpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGF5ZXJzXyAmJiB0aGlzLmxheWVyc18uaW5kZXhPZihuYW1lKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwYmZMYXllck5hbWVzV2l0aEdlb1N0eWxlLmluZGV4T2YobmFtZSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcGJmTGF5ZXIgPSBwYmZMYXllcnNbbmFtZV07XHJcblxyXG4gICAgICAgICAgICBsZXQgY2FjaGVUcmVlcyA9IHpvb21NYXRjaGVkR2VvU3R5bGVzR3JvdXBCeUxheWVySWRbbmFtZV07XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKGNhY2hlVHJlZXMgJiYgY2FjaGVUcmVlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VGaWx0ZXJzVG9JbmRleE9mUGJmTGF5ZXIoY2FjaGVUcmVlcywgcGJmTGF5ZXIpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYmZMYXllci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByYXdGZWF0dXJlID0gKDxhbnk+b2wuZm9ybWF0Lk1WVCkucmVhZFJhd0ZlYXR1cmVfKHBiZiwgcGJmTGF5ZXIsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmZWF0dXJlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY2FjaGVUcmVlcy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2FjaGVUcmVlID0gY2FjaGVUcmVlc1tqXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRyZWVJbmRleCA9IGNhY2hlVHJlZS50cmVlSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnN0cnVjdHNDYWNoZVt0cmVlSW5kZXhdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWN0c0NhY2hlW3RyZWVJbmRleF0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluOiAxMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXg6IC0xMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1hdGNoZWROb2RlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNoZWNrTm9kZU1hdGNoZWQgPSBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0eWxlSnNvbkNhY2hlSXRlbSA9IG5vZGUuZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXRjaGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVKc29uQ2FjaGVJdGVtLmZpbHRlckdyb3VwLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0eWxlSnNvbkNhY2hlSXRlbS5maWx0ZXJHcm91cC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmlsdGVycyA9IHN0eWxlSnNvbkNhY2hlSXRlbS5maWx0ZXJHcm91cFtpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGdyb3VwTWF0Y2hlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZmlsdGVycy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbHRlciA9IGZpbHRlcnNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbHRlci5tYXRjaE9MRmVhdHVyZShyYXdGZWF0dXJlLCB0aWxlQ29vcmRbMF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBNYXRjaGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdyb3VwTWF0Y2hlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNlbGVjdE5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZE5vZGUgPSBub2RlLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlVHJlZS50cmF2ZXJzZU5vZGUoY2hlY2tOb2RlTWF0Y2hlZCwgc2VsZWN0Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaGVkTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZlYXR1cmUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUgPSB0aGlzLmNyZWF0ZUZlYXR1cmVfKHBiZiwgcmF3RmVhdHVyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXMucHVzaChmZWF0dXJlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlSW5kZXggKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgemluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlVHJlZS5yb290LmRhdGEuekluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgemluZGV4ID0gcmF3RmVhdHVyZS5wcm9wZXJ0aWVzW2NhY2hlVHJlZS5yb290LmRhdGEuekluZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnByb3BlcnRpZXNfW2NhY2hlVHJlZS5yb290LmRhdGEuekluZGV4XSA9IHppbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oemluZGV4KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHppbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluc3RydWN0c0NhY2hlW3RyZWVJbmRleF1bemluZGV4XSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3RzQ2FjaGVbdHJlZUluZGV4XVt6aW5kZXhdID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHppbmRleCA8IGluc3RydWN0c0NhY2hlW3RyZWVJbmRleF1bXCJtaW5cIl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3RzQ2FjaGVbdHJlZUluZGV4XVtcIm1pblwiXSA9IHppbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHppbmRleCA+IGluc3RydWN0c0NhY2hlW3RyZWVJbmRleF1bXCJtYXhcIl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3RzQ2FjaGVbdHJlZUluZGV4XVtcIm1heFwiXSA9IHppbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3RzQ2FjaGVbdHJlZUluZGV4XVt6aW5kZXhdLnB1c2goW2ZlYXR1cmVJbmRleCwgbWF0Y2hlZE5vZGVdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLmV4dGVudF8gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZXh0ZW50XyA9IHBiZkxheWVyID8gWzAsIDAsIHBiZkxheWVyLmV4dGVudCwgcGJmTGF5ZXIuZXh0ZW50XSA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBpbnN0cnVjdHMgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnN0cnVjdHNDYWNoZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgaW5zdHJ1Y3RzSW5PbmVUcmVlID0gaW5zdHJ1Y3RzQ2FjaGVbaV07XHJcbiAgICAgICAgICAgIGlmIChpbnN0cnVjdHNJbk9uZVRyZWUpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBpbnN0cnVjdHNJbk9uZVRyZWUubWluLCBqaiA9IGluc3RydWN0c0luT25lVHJlZS5tYXg7IGogPD0gamo7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbnN0cnVjdHNJbk9uZVpJbmRleCA9IGluc3RydWN0c0luT25lVHJlZVtqXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdHJ1Y3RzSW5PbmVaSW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkcmVuSW5zdHJ1Y3RzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGggPSAwOyBoIDwgaW5zdHJ1Y3RzSW5PbmVaSW5kZXgubGVuZ3RoOyBoKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbnN0cnVjdCA9IGluc3RydWN0c0luT25lWkluZGV4W2hdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZlYXR1cmUgPSBmZWF0dXJlc1tpbnN0cnVjdFswXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnN0eWxlSWQgPSBmZWF0dXJlLnN0eWxlSWQgPyBmZWF0dXJlLnN0eWxlSWQgOiB7fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluc3RydWN0WzFdLmdlb1N0eWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zdHlsZUlkW2luc3RydWN0WzFdLmdlb1N0eWxlLmlkXSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3RzLnB1c2goW2luc3RydWN0WzBdLCBpbnN0cnVjdFsxXS5nZW9TdHlsZSwgaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnN0cnVjdFsxXS5jaGlsZHJlbkdlb1N0eWxlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgaW5zdHJ1Y3RbMV0uY2hpbGRyZW5HZW9TdHlsZXMubGVuZ3RoOyBrKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5zdHlsZUlkW2luc3RydWN0WzFdLmNoaWxkcmVuR2VvU3R5bGVzW2tdLmlkXSA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuSW5zdHJ1Y3RzLnB1c2goW2luc3RydWN0WzBdLCBpbnN0cnVjdFsxXS5jaGlsZHJlbkdlb1N0eWxlc1trXSwgaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShpbnN0cnVjdHMsIGNoaWxkcmVuSW5zdHJ1Y3RzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgc3ViVGlsZUNhY2hlZEluc3RydWN0ID0ge307XHJcbiAgICAgICAgbGV0IG9mZnNldFogPSB0aWxlQ29vcmRbMF0gLSByZXF1ZXN0VGlsZUNvb3JkWzBdO1xyXG5cclxuICAgICAgICAvLyBUT0RPIEdldCBFeHRlbnQgXHJcbiAgICAgICAgbGV0IHRpbGVTaXplID0gNDA5NiAvIE1hdGgucG93KDIsIG9mZnNldFopO1xyXG5cclxuICAgICAgICBsZXQgdGlsZVJhbmdlID0gdGhpcy5nZXRUaWxlUmFuZ2UocmVxdWVzdFRpbGVDb29yZCwgdGlsZUNvb3JkWzBdKTtcclxuICAgICAgICBsZXQgdGlsZXMgPSB7fTtcclxuICAgICAgICBmb3IgKGxldCB4ID0gdGlsZVJhbmdlWzBdOyB4IDw9IHRpbGVSYW5nZVsyXTsgeCsrKSB7XHJcbiAgICAgICAgICAgIGxldCBtaW5YID0gKHggLSB0aWxlUmFuZ2VbMF0pICogdGlsZVNpemU7XHJcbiAgICAgICAgICAgIGxldCBtYXhYID0gKHggLSB0aWxlUmFuZ2VbMF0gKyAxKSAqIHRpbGVTaXplO1xyXG4gICAgICAgICAgICBmb3IgKGxldCB5ID0gdGlsZVJhbmdlWzNdOyB5ID49IHRpbGVSYW5nZVsxXTsgeS0tKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWluWSA9ICh0aWxlUmFuZ2VbM10gLSB5KSAqIHRpbGVTaXplO1xyXG4gICAgICAgICAgICAgICAgbGV0IG1heFkgPSAodGlsZVJhbmdlWzNdIC0geSArIDEpICogdGlsZVNpemU7XHJcbiAgICAgICAgICAgICAgICB0aWxlc1tcIlwiICsgW3gsIHldXSA9IFttaW5YLCBtaW5ZLCBtYXhYLCBtYXhZXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluc3RydWN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgaW5zdHJ1Y3QgPSBpbnN0cnVjdHNbaV07XHJcbiAgICAgICAgICAgIGxldCBmZWF0dXJlID0gZmVhdHVyZXNbaW5zdHJ1Y3RbMF1dO1xyXG4gICAgICAgICAgICBsZXQgZmVhdHVyZUV4dGVudCA9IGZlYXR1cmUuZ2V0RXh0ZW50KCk7XHJcbiAgICAgICAgICAgIGxldCBmZWF0dXJlVGlsZVJhbmdlID0gdGhpcy5nZXRGZWF0dXJlVGlsZVJhbmdlKGZlYXR1cmVFeHRlbnQsIDQwOTYsIHRpbGVTaXplLCByZXF1ZXN0VGlsZUNvb3JkLCBvZmZzZXRaKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHggPSB0aWxlUmFuZ2VbMF0gPiBmZWF0dXJlVGlsZVJhbmdlWzBdID8gdGlsZVJhbmdlWzBdIDogZmVhdHVyZVRpbGVSYW5nZVswXSwgeHggPSBmZWF0dXJlVGlsZVJhbmdlWzJdID4gdGlsZVJhbmdlWzJdID8gdGlsZVJhbmdlWzJdIDogZmVhdHVyZVRpbGVSYW5nZVsyXTsgeCA8PSB4eDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB5ID0gdGlsZVJhbmdlWzFdID4gZmVhdHVyZVRpbGVSYW5nZVsxXSA/IHRpbGVSYW5nZVsxXSA6IGZlYXR1cmVUaWxlUmFuZ2VbMV0sIHl5ID0gZmVhdHVyZVRpbGVSYW5nZVszXSA+IHRpbGVSYW5nZVszXSA/IHRpbGVSYW5nZVszXSA6IGZlYXR1cmVUaWxlUmFuZ2VbM107IHkgPD0geXk7IHkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0aWxlS2V5ID0gXCJcIiArIFt4LCB5XTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGlsZUV4dGVudCA9IHRpbGVzW3RpbGVLZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJUaWxlQ2FjaGVkSW5zdHJ1Y3RbdGlsZUtleV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJUaWxlQ2FjaGVkSW5zdHJ1Y3RbdGlsZUtleV0gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc3ViVGlsZUNhY2hlZEluc3RydWN0W3RpbGVLZXldLnB1c2goaW5zdHJ1Y3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFtmZWF0dXJlcywgc3ViVGlsZUNhY2hlZEluc3RydWN0XTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICBnZXRDYWNoZWRTb3VyY2UodGlsZUNvb3JkOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VDYWNoZVt0aWxlQ29vcmRdO1xyXG4gICAgfVxyXG5cclxuICAgIHRyeUxvYWRUaWxlRnJvbUNhY2hlT3JSZWdvc3RlckxvYWRFdmVudCh0aWxlQ29vcmQ6IGFueSwgb3JpZ2luYWxab29tLCBjYWNoZVRpbGVJbmZvOiBhbnkpIHtcclxuICAgICAgICBsZXQgaGFzUmVxdWVzdGVkID0gdHJ1ZTtcclxuICAgICAgICBsZXQgdGlsZUNvb3JkS2V5ID0gdGlsZUNvb3JkLmpvaW4oXCIsXCIpICsgXCIsXCIgKyBvcmlnaW5hbFpvb207XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmxydUNhY2hlLmNvbnRhaW5zS2V5KHRpbGVDb29yZEtleSkpIHtcclxuICAgICAgICAgICAgbGV0IG9UaWxlID0gdGhpcy5scnVDYWNoZS5nZXQodGlsZUNvb3JkS2V5KTtcclxuICAgICAgICAgICAgdGhpcy5jYWNoZWRUaWxlQ2FsbGJhY2sob1RpbGUsIFtjYWNoZVRpbGVJbmZvXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5yZWdpc3RlcmVkTG9hZEV2ZW50c1t0aWxlQ29vcmRLZXldID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJlZExvYWRFdmVudHNbdGlsZUNvb3JkS2V5XSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaGFzUmVxdWVzdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJlZExvYWRFdmVudHNbdGlsZUNvb3JkS2V5XS5wdXNoKGNhY2hlVGlsZUluZm8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGFzUmVxdWVzdGVkO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFNvdXJjZVRvQ2FjaGUoc291cmNlOiBBcnJheUJ1ZmZlciwgem9vbTogbnVtYmVyLCBvcHRpb25zOiBhbnkpIHtcclxuICAgICAgICBpZiAodGhpcy5zb3VyY2VDYWNoZVtvcHRpb25zLnRpbGVDb29yZF0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNvdXJjZUNhY2hlW29wdGlvbnMudGlsZUNvb3JkXSA9IHNvdXJjZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBpbnN0cnVjdHNUcmVlID0gdGhpcy5yZWFkRmVhdHVyZXNBbmRDcmVhdGVJbnN0cnVjdFRyZWVzKHNvdXJjZSwgem9vbSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIGxldCBpbnN0cnVjdHMgPSB0aGlzLmdldEluc3RydWN0cyhpbnN0cnVjdHNUcmVlKTtcclxuXHJcbiAgICAgICAgbGV0IHN1YlRpbGVJbnN0cnVjdENhY2hlcyA9IHRoaXMuY3JlYXRlU3ViVGlsZUluc3RydWN0Q2FjaGVzKGluc3RydWN0cywgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIGxldCBzb3VyY2VQcm9qZWN0ID0gdGhpcy5yZWFkUHJvamVjdGlvbihzb3VyY2UpO1xyXG4gICAgICAgIGxldCB0aWxlQ29vcmRLZXkgPSBvcHRpb25zLnRpbGVDb29yZC5qb2luKFwiLFwiKSArIFwiLFwiICsgem9vbTtcclxuXHJcbiAgICAgICAgbGV0IGxhc3RFeHRlbnQgPSB0aGlzLmdldExhc3RFeHRlbnQoKTtcclxuXHJcbiAgICAgICAgbGV0IG9UaWxlID0geyBzdWJUaWxlSW5zdHJ1Y3RDYWNoZXM6IHN1YlRpbGVJbnN0cnVjdENhY2hlcywgc291cmNlUHJvamVjdDogc291cmNlUHJvamVjdCwgbGFzdEV4dGVudDogbGFzdEV4dGVudCB9O1xyXG4gICAgICAgIHRoaXMubHJ1Q2FjaGUuc2V0KHRpbGVDb29yZEtleSwgb1RpbGUpO1xyXG5cclxuICAgICAgICBsZXQgY2FjaGVkVGlsZUluZm8gPSB0aGlzLnJlZ2lzdGVyZWRMb2FkRXZlbnRzW3RpbGVDb29yZEtleV07XHJcbiAgICAgICAgZGVsZXRlIHRoaXMucmVnaXN0ZXJlZExvYWRFdmVudHNbdGlsZUNvb3JkS2V5XTtcclxuXHJcbiAgICAgICAgdGhpcy5jYWNoZWRUaWxlQ2FsbGJhY2sob1RpbGUsIGNhY2hlZFRpbGVJbmZvKTtcclxuICAgIH1cclxuXHJcbiAgICByZWFkRmVhdHVyZXNBbmRDcmVhdGVJbnN0cnVjdFRyZWVzKHNvdXJjZTogQXJyYXlCdWZmZXIsIHpvb206IG51bWJlciwgb3B0aW9uczogYW55KSB7XHJcbiAgICAgICAgbGV0IHBiZiA9IG5ldyAoPGFueT5vbCkuZXh0LlBCRigoc291cmNlKSk7XHJcbiAgICAgICAgbGV0IHBiZkxheWVycyA9IHBiZi5yZWFkRmllbGRzKCg8YW55Pm9sKS5mb3JtYXQuTVZULnBiZlJlYWRlcnNfLmxheWVycywge30pO1xyXG4gICAgICAgIGxldCBmZWF0dXJlcyA9IFtdO1xyXG4gICAgICAgIGxldCBwYmZMYXllcjtcclxuXHJcbiAgICAgICAgbGV0IHpvb21NYXRjaGVkR2VvU3R5bGVzR3JvdXBCeUxheWVySWQgPSB0aGlzLnN0eWxlSnNvbkNhY2hlLmdlb1N0eWxlR3JvdXBCeVpvb21bem9vbV07XHJcbiAgICAgICAgaWYgKCF6b29tTWF0Y2hlZEdlb1N0eWxlc0dyb3VwQnlMYXllcklkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmZWF0dXJlcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBwYmZMYXllck5hbWVzV2l0aEdlb1N0eWxlID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgcGJmTGF5ZXJOYW1lIGluIHpvb21NYXRjaGVkR2VvU3R5bGVzR3JvdXBCeUxheWVySWQpIHtcclxuICAgICAgICAgICAgcGJmTGF5ZXJOYW1lc1dpdGhHZW9TdHlsZS5wdXNoKHBiZkxheWVyTmFtZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaW5zdHJ1Y3RzQ2FjaGUgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgbmFtZSBpbiBwYmZMYXllcnMpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxheWVyc18gJiYgdGhpcy5sYXllcnNfLmluZGV4T2YobmFtZSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocGJmTGF5ZXJOYW1lc1dpdGhHZW9TdHlsZS5pbmRleE9mKG5hbWUpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHBiZkxheWVyID0gcGJmTGF5ZXJzW25hbWVdO1xyXG4gICAgICAgICAgICBvcHRpb25zW1wiZXh0ZW50XCJdID0gcGJmTGF5ZXIuZXh0ZW50O1xyXG5cclxuICAgICAgICAgICAgbGV0IGNhY2hlVHJlZXMgPSB6b29tTWF0Y2hlZEdlb1N0eWxlc0dyb3VwQnlMYXllcklkW25hbWVdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNhY2hlVHJlZXMgJiYgY2FjaGVUcmVlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VGaWx0ZXJzVG9JbmRleE9mUGJmTGF5ZXIoY2FjaGVUcmVlcywgcGJmTGF5ZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGJmTGF5ZXIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmF3RmVhdHVyZSA9ICg8YW55Pm9sLmZvcm1hdC5NVlQpLnJlYWRSYXdGZWF0dXJlXyhwYmYsIHBiZkxheWVyLCBpKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZmVhdHVyZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjYWNoZVRyZWVzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjYWNoZVRyZWUgPSBjYWNoZVRyZWVzW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHJlZUluZGV4ID0gY2FjaGVUcmVlLnRyZWVJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluc3RydWN0c0NhY2hlW3RyZWVJbmRleF0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3RzQ2FjaGVbdHJlZUluZGV4XSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW46IDEwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heDogLTEwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWF0Y2hlZE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGVja05vZGVNYXRjaGVkID0gZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdHlsZUpzb25DYWNoZUl0ZW0gPSBub2RlLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWF0Y2hlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlSnNvbkNhY2hlSXRlbS5maWx0ZXJHcm91cC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHlsZUpzb25DYWNoZUl0ZW0uZmlsdGVyR3JvdXAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbHRlcnMgPSBzdHlsZUpzb25DYWNoZUl0ZW0uZmlsdGVyR3JvdXBbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBncm91cE1hdGNoZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGZpbHRlcnMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaWx0ZXIgPSBmaWx0ZXJzW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmaWx0ZXIubWF0Y2hPTEZlYXR1cmUocmF3RmVhdHVyZSwgem9vbSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cE1hdGNoZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXBNYXRjaGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2VsZWN0Tm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVkTm9kZSA9IG5vZGUuZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVUcmVlLnRyYXZlcnNlTm9kZShjaGVja05vZGVNYXRjaGVkLCBzZWxlY3ROb2RlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaGVkTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZlYXR1cmUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUgPSB0aGlzLmNyZWF0ZUZlYXR1cmVfKHBiZiwgcmF3RmVhdHVyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWluaW1hbGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnByb3BlcnRpZXNfID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB6aW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FjaGVUcmVlLnJvb3QuZGF0YS56SW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6aW5kZXggPSByYXdGZWF0dXJlLnByb3BlcnRpZXNbY2FjaGVUcmVlLnJvb3QuZGF0YS56SW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUucHJvcGVydGllc19bY2FjaGVUcmVlLnJvb3QuZGF0YS56SW5kZXhdID0gemluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTih6aW5kZXgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgemluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnN0cnVjdHNDYWNoZVt0cmVlSW5kZXhdW3ppbmRleF0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWN0c0NhY2hlW3RyZWVJbmRleF1bemluZGV4XSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh6aW5kZXggPCBpbnN0cnVjdHNDYWNoZVt0cmVlSW5kZXhdW1wibWluXCJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWN0c0NhY2hlW3RyZWVJbmRleF1bXCJtaW5cIl0gPSB6aW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh6aW5kZXggPiBpbnN0cnVjdHNDYWNoZVt0cmVlSW5kZXhdW1wibWF4XCJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWN0c0NhY2hlW3RyZWVJbmRleF1bXCJtYXhcIl0gPSB6aW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3RzQ2FjaGVbdHJlZUluZGV4XVt6aW5kZXhdLnB1c2goW2ZlYXR1cmUsIG1hdGNoZWROb2RlXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWluaW1hbGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaGVkTm9kZS5nZW9TdHlsZSAmJiAobWF0Y2hlZE5vZGUuZ2VvU3R5bGUuY29uc3RydWN0b3IubmFtZSA9PT0gXCJHZW9UZXh0U3R5bGVcIiB8fCBtYXRjaGVkTm9kZS5nZW9TdHlsZS5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIkdlb1NoaWVsZFN0eWxlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUucHJvcGVydGllc19bbWF0Y2hlZE5vZGUuZ2VvU3R5bGUubmFtZV0gPSByYXdGZWF0dXJlLnByb3BlcnRpZXNbbWF0Y2hlZE5vZGUuZ2VvU3R5bGUubmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaGVkTm9kZS5jaGlsZHJlbkdlb1N0eWxlcyAmJiBtYXRjaGVkTm9kZS5jaGlsZHJlbkdlb1N0eWxlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0Y2hlZE5vZGUuY2hpbGRyZW5HZW9TdHlsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUucHJvcGVydGllc19bbWF0Y2hlZE5vZGUuY2hpbGRyZW5HZW9TdHlsZXNbaV0ubmFtZV0gPSByYXdGZWF0dXJlLnByb3BlcnRpZXNbbWF0Y2hlZE5vZGUuY2hpbGRyZW5HZW9TdHlsZXNbaV0ubmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5leHRlbnRfID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZXh0ZW50XyA9IHBiZkxheWVyID8gWzAsIDAsIHBiZkxheWVyLmV4dGVudCwgcGJmTGF5ZXIuZXh0ZW50XSA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpbnN0cnVjdHNDYWNoZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRJbnN0cnVjdHMoaW5zdHJ1Y3RzVHJlZSkge1xyXG4gICAgICAgIGxldCBpbnN0cnVjdHMgPSBbXTtcclxuICAgICAgICAvLyB0aGUgdHJlc3MgaW5kZXggbWVhbnMgdGhlIGluZGV4IG9mIFN5bGVJZC5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluc3RydWN0c1RyZWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGluc3RydWN0c0luT25lVHJlZSA9IGluc3RydWN0c1RyZWVbaV07XHJcblxyXG4gICAgICAgICAgICBpZiAoaW5zdHJ1Y3RzSW5PbmVUcmVlKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gaW5zdHJ1Y3RzSW5PbmVUcmVlLm1pbiwgamogPSBpbnN0cnVjdHNJbk9uZVRyZWUubWF4OyBqIDw9IGpqOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5zdHJ1Y3RzSW5PbmVaSW5kZXggPSBpbnN0cnVjdHNJbk9uZVRyZWVbal07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluc3RydWN0c0luT25lWkluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZHJlbkluc3RydWN0cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBoID0gMDsgaCA8IGluc3RydWN0c0luT25lWkluZGV4Lmxlbmd0aDsgaCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5zdHJ1Y3QgPSBpbnN0cnVjdHNJbk9uZVpJbmRleFtoXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWN0WzBdLnN0eWxlSWQgPSBpbnN0cnVjdFswXS5zdHlsZUlkID8gaW5zdHJ1Y3RbMF0uc3R5bGVJZCA6IHt9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluc3RydWN0WzFdLmdlb1N0eWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3RbMF0uc3R5bGVJZFtpbnN0cnVjdFsxXS5nZW9TdHlsZS5pZF0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWN0cy5wdXNoKFtpbnN0cnVjdFswXSwgaW5zdHJ1Y3RbMV0uZ2VvU3R5bGUsIGldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdHJ1Y3RbMV0uY2hpbGRyZW5HZW9TdHlsZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGluc3RydWN0WzFdLmNoaWxkcmVuR2VvU3R5bGVzLmxlbmd0aDsgaysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWN0WzBdLnN0eWxlSWRbaW5zdHJ1Y3RbMV0uY2hpbGRyZW5HZW9TdHlsZXNba10uaWRdID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW5JbnN0cnVjdHMucHVzaChbaW5zdHJ1Y3RbMF0sIGluc3RydWN0WzFdLmNoaWxkcmVuR2VvU3R5bGVzW2tdLCBpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGluc3RydWN0cywgY2hpbGRyZW5JbnN0cnVjdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaW5zdHJ1Y3RzO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVN1YlRpbGVJbnN0cnVjdENhY2hlcyhpbnN0cnVjdHMsIG9wdGlvbnMpIHtcclxuICAgICAgICBsZXQgc3ViVGlsZUNhY2hlZEluc3RydWN0ID0ge307XHJcblxyXG4gICAgICAgIGxldCBvZmZzZXRaID0gb3B0aW9ucy5vcmlnaW5hbENvb3JkWzBdIC0gb3B0aW9ucy50aWxlQ29vcmRbMF07XHJcbiAgICAgICAgbGV0IHRpbGVTaXplID0gb3B0aW9ucy5leHRlbnQgLyBNYXRoLnBvdygyLCBvZmZzZXRaKTtcclxuXHJcbiAgICAgICAgbGV0IHRpbGVSYW5nZSA9IHRoaXMuZ2V0VGlsZVJhbmdlKG9wdGlvbnMudGlsZUNvb3JkLCBvcHRpb25zLm9yaWdpbmFsQ29vcmRbMF0pO1xyXG4gICAgICAgIGxldCB0aWxlcyA9IHt9O1xyXG4gICAgICAgIGZvciAobGV0IHggPSB0aWxlUmFuZ2VbMF07IHggPD0gdGlsZVJhbmdlWzJdOyB4KyspIHtcclxuICAgICAgICAgICAgbGV0IG1pblggPSAoeCAtIHRpbGVSYW5nZVswXSkgKiB0aWxlU2l6ZTtcclxuICAgICAgICAgICAgbGV0IG1heFggPSAoeCAtIHRpbGVSYW5nZVswXSArIDEpICogdGlsZVNpemU7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHkgPSB0aWxlUmFuZ2VbM107IHkgPj0gdGlsZVJhbmdlWzFdOyB5LS0pIHtcclxuICAgICAgICAgICAgICAgIGxldCBtaW5ZID0gKHRpbGVSYW5nZVszXSAtIHkpICogdGlsZVNpemU7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWF4WSA9ICh0aWxlUmFuZ2VbM10gLSB5ICsgMSkgKiB0aWxlU2l6ZTtcclxuICAgICAgICAgICAgICAgIHRpbGVzW1wiXCIgKyBbeCwgeV1dID0gW21pblgsIG1pblksIG1heFgsIG1heFldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluc3RydWN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgaW5zdHJ1Y3QgPSBpbnN0cnVjdHNbaV07XHJcbiAgICAgICAgICAgIGxldCBmZWF0dXJlRXh0ZW50ID0gaW5zdHJ1Y3RbMF0uZ2V0R2VvbWV0cnkoKS5nZXRFeHRlbnQoKTtcclxuICAgICAgICAgICAgbGV0IGZlYXR1cmVUaWxlUmFuZ2UgPSB0aGlzLmdldEZlYXR1cmVUaWxlUmFuZ2UoZmVhdHVyZUV4dGVudCwgb3B0aW9ucy5leHRlbnQsIHRpbGVTaXplLCBvcHRpb25zLnRpbGVDb29yZCwgb2Zmc2V0Wik7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHggPSB0aWxlUmFuZ2VbMF0gPiBmZWF0dXJlVGlsZVJhbmdlWzBdID8gdGlsZVJhbmdlWzBdIDogZmVhdHVyZVRpbGVSYW5nZVswXSwgeHggPSBmZWF0dXJlVGlsZVJhbmdlWzJdID4gdGlsZVJhbmdlWzJdID8gdGlsZVJhbmdlWzJdIDogZmVhdHVyZVRpbGVSYW5nZVsyXTsgeCA8PSB4eDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB5ID0gdGlsZVJhbmdlWzFdID4gZmVhdHVyZVRpbGVSYW5nZVsxXSA/IHRpbGVSYW5nZVsxXSA6IGZlYXR1cmVUaWxlUmFuZ2VbMV0sIHl5ID0gZmVhdHVyZVRpbGVSYW5nZVszXSA+IHRpbGVSYW5nZVszXSA/IHRpbGVSYW5nZVszXSA6IGZlYXR1cmVUaWxlUmFuZ2VbM107IHkgPD0geXk7IHkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0aWxlS2V5ID0gXCJcIiArIFt4LCB5XTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGlsZUV4dGVudCA9IHRpbGVzW3RpbGVLZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJUaWxlQ2FjaGVkSW5zdHJ1Y3RbdGlsZUtleV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJUaWxlQ2FjaGVkSW5zdHJ1Y3RbdGlsZUtleV0gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc3ViVGlsZUNhY2hlZEluc3RydWN0W3RpbGVLZXldLnB1c2goaW5zdHJ1Y3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdWJUaWxlQ2FjaGVkSW5zdHJ1Y3Q7XHJcbiAgICB9XHJcblxyXG4gICAgY2FjaGVkVGlsZUNhbGxiYWNrKG9UaWxlLCBjYWNoZVRpbGVJbmZvcykge1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhY2hlVGlsZUluZm9zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBjYWNoZVRpbGVJbmZvID0gY2FjaGVUaWxlSW5mb3NbaV07XHJcbiAgICAgICAgICAgIGxldCB0aWxlS2V5ID0gXCJcIiArIGNhY2hlVGlsZUluZm8udGlsZS50aWxlQ29vcmRbMV0gKyBcIixcIiArIGNhY2hlVGlsZUluZm8udGlsZS50aWxlQ29vcmRbMl07XHJcblxyXG4gICAgICAgICAgICBjYWNoZVRpbGVJbmZvLmNhbGxiYWNrKGNhY2hlVGlsZUluZm8udGlsZSwgY2FjaGVUaWxlSW5mby5zdWNjZXNzRnVuY3Rpb24sIFtdLCBvVGlsZS5zdWJUaWxlSW5zdHJ1Y3RDYWNoZXNbdGlsZUtleV0sIG9UaWxlLnNvdXJjZVByb2plY3QsIG9UaWxlLmxhc3RFeHRlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXRUaWxlUmFuZ2UodGlsZUNvb3JkLCB6b29tKSB7XHJcbiAgICAgICAgbGV0IHggPSB0aWxlQ29vcmRbMV07XHJcbiAgICAgICAgbGV0IHkgPSB0aWxlQ29vcmRbMl07XHJcbiAgICAgICAgbGV0IG1pblggPSB4O1xyXG4gICAgICAgIGxldCBtYXhYID0geDtcclxuICAgICAgICBsZXQgbWluWSA9IHk7XHJcbiAgICAgICAgbGV0IG1heFkgPSB5O1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gdGlsZUNvb3JkWzBdOyBpIDwgem9vbTsgaSsrKSB7XHJcbiAgICAgICAgICAgIG1pblggPSBtaW5YICogMjtcclxuICAgICAgICAgICAgbWF4WCA9IG1heFggKiAyICsgMTtcclxuICAgICAgICAgICAgbWluWSA9IG1pblkgKiAyO1xyXG4gICAgICAgICAgICBtYXhZID0gbWF4WSAqIDIgKyAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW21pblgsIG1pblksIG1heFgsIG1heFldO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEZlYXR1cmVUaWxlUmFuZ2UoZmVhdHVyZUV4dGVudCwgZXh0ZW50LCB0aWxlU2l6ZSwgcmVxdWVzdFRpbGVDb29yZCwgb2Zmc2V0Wikge1xyXG5cclxuICAgICAgICBsZXQgbWluWCA9IHJlcXVlc3RUaWxlQ29vcmRbMV0gKiBNYXRoLnBvdygyLCBvZmZzZXRaKSArIE1hdGguZmxvb3IoZmVhdHVyZUV4dGVudFswXSAvIHRpbGVTaXplKTtcclxuICAgICAgICBsZXQgbWF4WCA9IHJlcXVlc3RUaWxlQ29vcmRbMV0gKiBNYXRoLnBvdygyLCBvZmZzZXRaKSArIE1hdGguZmxvb3IoZmVhdHVyZUV4dGVudFsyXSAvIHRpbGVTaXplKTtcclxuICAgICAgICBsZXQgbWluWSA9IHJlcXVlc3RUaWxlQ29vcmRbMl0gKiBNYXRoLnBvdygyLCBvZmZzZXRaKSArIE1hdGguZmxvb3IoKGV4dGVudCAtIGZlYXR1cmVFeHRlbnRbM10pIC8gdGlsZVNpemUpO1xyXG4gICAgICAgIGxldCBtYXhZID0gcmVxdWVzdFRpbGVDb29yZFsyXSAqIE1hdGgucG93KDIsIG9mZnNldFopICsgTWF0aC5mbG9vcigoZXh0ZW50IC0gZmVhdHVyZUV4dGVudFsxXSkgLyB0aWxlU2l6ZSk7XHJcblxyXG4gICAgICAgIHJldHVybiBbbWluWCwgbWluWSwgbWF4WCwgbWF4WV07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RXh0ZW50KG9yaWdpbmFsQ29vcmQsIHRpbGVjb29yZCwgZXh0ZW50KSB7XHJcbiAgICAgICAgbGV0IG94ID0gb3JpZ2luYWxDb29yZFsxXTtcclxuICAgICAgICBsZXQgeCA9IHRpbGVjb29yZFsxXTtcclxuICAgICAgICBsZXQgeFBhdGggPSBbXTtcclxuICAgICAgICB3aGlsZSAob3ggIT09IHgpIHtcclxuICAgICAgICAgICAgbGV0IHJlbWFpbmRlciA9IG94ICUgMjtcclxuICAgICAgICAgICAgeFBhdGgucHVzaChyZW1haW5kZXIpO1xyXG4gICAgICAgICAgICBveCA9IE1hdGguZmxvb3Iob3ggLyAyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IG5ld0V4dGVudCA9IGV4dGVudDtcclxuICAgICAgICBsZXQgb2Zmc2V0WCA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHhQYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIG5ld0V4dGVudCA9IG5ld0V4dGVudCAvIDI7XHJcbiAgICAgICAgICAgIGlmICh4UGF0aFtpXSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0WCArPSBuZXdFeHRlbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBveSA9IG9yaWdpbmFsQ29vcmRbMl07XHJcbiAgICAgICAgbGV0IHkgPSB0aWxlY29vcmRbMl07XHJcbiAgICAgICAgbGV0IHlQYXRoID0gW107XHJcbiAgICAgICAgd2hpbGUgKG95ICE9PSB5KSB7XHJcbiAgICAgICAgICAgIGxldCByZW1haW5kZXIgPSBveSAlIDI7XHJcbiAgICAgICAgICAgIHlQYXRoLnB1c2gocmVtYWluZGVyKTtcclxuICAgICAgICAgICAgb3kgPSBNYXRoLmZsb29yKG95IC8gMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5ld0V4dGVudCA9IGV4dGVudDtcclxuICAgICAgICBsZXQgb2Zmc2V0WSA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHlQYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIG5ld0V4dGVudCA9IG5ld0V4dGVudCAvIDI7XHJcbiAgICAgICAgICAgIGlmICh5UGF0aFtpXSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0WSArPSBuZXdFeHRlbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVE9ETzogYWRkIHRoZSBidWZmZXJcclxuICAgICAgICByZXR1cm4gW29mZnNldFgsIG9mZnNldFksIG9mZnNldFggKyBuZXdFeHRlbnQsIG9mZnNldFkgKyBuZXdFeHRlbnRdO1xyXG4gICAgfVxyXG5cclxuICAgIHJlcGxhY2VGaWx0ZXJzVG9JbmRleE9mUGJmTGF5ZXIoY2FjaGVUcmVlcywgcGJmTGF5ZXIpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBjYWNoZVRyZWVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGNhY2hlVHJlZSA9IGNhY2hlVHJlZXNbaV07XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZUNhY2hlSXRlbUZpbHRlcnNUb0luZGV4T2ZQYmZMYXllcihjYWNoZVRyZWUucm9vdCwgcGJmTGF5ZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXBsYWNlQ2FjaGVJdGVtRmlsdGVyc1RvSW5kZXhPZlBiZkxheWVyKG5vZGUsIHBiZkxheWVyKSB7XHJcbiAgICAgICAgbGV0IGRhdGEgPSBub2RlLmRhdGE7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5maWx0ZXJHcm91cC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgZmlsdGVycyA9IGRhdGEuZmlsdGVyR3JvdXBbaV07XHJcbiAgICAgICAgICAgIGxldCBnZW9GaWx0ZXI7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZmlsdGVycy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgZ2VvRmlsdGVyID0gZmlsdGVyc1tqXTtcclxuICAgICAgICAgICAgICAgIGdlb0ZpbHRlci5yZXBsYWNlVmF1bGVzVG9QYmZJbmRleChwYmZMYXllcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZiAobm9kZS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZUNhY2hlSXRlbUZpbHRlcnNUb0luZGV4T2ZQYmZMYXllcihub2RlLmNoaWxkcmVuW2ldLCBwYmZMYXllcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICByZWFkRmVhdHVyZXNBbmRDcmVhdGVJbnN0cnVjdHMoc291cmNlOiBBcnJheUJ1ZmZlciwgem9vbTogbnVtYmVyLCBvcHRpb25zOiBhbnkpIHtcclxuICAgICAgICBsZXQgcGJmID0gbmV3ICg8YW55Pm9sKS5leHQuUEJGKChzb3VyY2UpKTtcclxuICAgICAgICBsZXQgcGJmTGF5ZXJzID0gcGJmLnJlYWRGaWVsZHMoKDxhbnk+b2wpLmZvcm1hdC5NVlQucGJmUmVhZGVyc18ubGF5ZXJzLCB7fSk7XHJcbiAgICAgICAgbGV0IGZlYXR1cmVzID0gW107XHJcbiAgICAgICAgbGV0IHBiZkxheWVyO1xyXG5cclxuICAgICAgICBsZXQgem9vbU1hdGNoZWRHZW9TdHlsZXNHcm91cEJ5TGF5ZXJJZCA9IHRoaXMuc3R5bGVKc29uQ2FjaGUuZ2VvU3R5bGVHcm91cEJ5Wm9vbVt6b29tXTtcclxuICAgICAgICBpZiAoIXpvb21NYXRjaGVkR2VvU3R5bGVzR3JvdXBCeUxheWVySWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZlYXR1cmVzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHBiZkxheWVyTmFtZXNXaXRoR2VvU3R5bGUgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBwYmZMYXllck5hbWUgaW4gem9vbU1hdGNoZWRHZW9TdHlsZXNHcm91cEJ5TGF5ZXJJZCkge1xyXG4gICAgICAgICAgICBwYmZMYXllck5hbWVzV2l0aEdlb1N0eWxlLnB1c2gocGJmTGF5ZXJOYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBpbnN0cnVjdHNDYWNoZSA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBuYW1lIGluIHBiZkxheWVycykge1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubGF5ZXJzXyAmJiB0aGlzLmxheWVyc18uaW5kZXhPZihuYW1lKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwYmZMYXllck5hbWVzV2l0aEdlb1N0eWxlLmluZGV4T2YobmFtZSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcGJmTGF5ZXIgPSBwYmZMYXllcnNbbmFtZV07XHJcblxyXG4gICAgICAgICAgICBsZXQgY2FjaGVUcmVlcyA9IHpvb21NYXRjaGVkR2VvU3R5bGVzR3JvdXBCeUxheWVySWRbbmFtZV07XHJcblxyXG4gICAgICAgICAgICBpZiAoY2FjaGVUcmVlcyAmJiBjYWNoZVRyZWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZUZpbHRlcnNUb0luZGV4T2ZQYmZMYXllcihjYWNoZVRyZWVzLCBwYmZMYXllcik7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYmZMYXllci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByYXdGZWF0dXJlID0gKDxhbnk+b2wuZm9ybWF0Lk1WVCkucmVhZFJhd0ZlYXR1cmVfKHBiZiwgcGJmTGF5ZXIsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmZWF0dXJlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNhY2hlVHJlZXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNhY2hlVHJlZSA9IGNhY2hlVHJlZXNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0cmVlSW5kZXggPSBjYWNoZVRyZWUudHJlZUluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdHJ1Y3RzQ2FjaGVbdHJlZUluZGV4XSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdHNDYWNoZVt0cmVlSW5kZXhdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbjogMTAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4OiAtMTBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXRjaGVkTm9kZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGVja05vZGVNYXRjaGVkID0gZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdHlsZUpzb25DYWNoZUl0ZW0gPSBub2RlLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWF0Y2hlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlSnNvbkNhY2hlSXRlbS5maWx0ZXJHcm91cC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHlsZUpzb25DYWNoZUl0ZW0uZmlsdGVyR3JvdXAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbHRlcnMgPSBzdHlsZUpzb25DYWNoZUl0ZW0uZmlsdGVyR3JvdXBbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBncm91cE1hdGNoZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGZpbHRlcnMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaWx0ZXIgPSBmaWx0ZXJzW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmaWx0ZXIubWF0Y2hPTEZlYXR1cmUocmF3RmVhdHVyZSwgem9vbSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cE1hdGNoZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXBNYXRjaGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2VsZWN0Tm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVkTm9kZSA9IG5vZGUuZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVUcmVlLnRyYXZlcnNlTm9kZShjaGVja05vZGVNYXRjaGVkLCBzZWxlY3ROb2RlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaGVkTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZlYXR1cmUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUgPSB0aGlzLmNyZWF0ZUZlYXR1cmVfKHBiZiwgcmF3RmVhdHVyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWluaW1hbGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnByb3BlcnRpZXNfID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHppbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWNoZVRyZWUucm9vdC5kYXRhLnpJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHppbmRleCA9IHJhd0ZlYXR1cmUucHJvcGVydGllc1tjYWNoZVRyZWUucm9vdC5kYXRhLnpJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5wcm9wZXJ0aWVzX1tjYWNoZVRyZWUucm9vdC5kYXRhLnpJbmRleF0gPSB6aW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKHppbmRleCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6aW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluc3RydWN0c0NhY2hlW3RyZWVJbmRleF1bemluZGV4XSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3RzQ2FjaGVbdHJlZUluZGV4XVt6aW5kZXhdID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHppbmRleCA8IGluc3RydWN0c0NhY2hlW3RyZWVJbmRleF1bXCJtaW5cIl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3RzQ2FjaGVbdHJlZUluZGV4XVtcIm1pblwiXSA9IHppbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHppbmRleCA+IGluc3RydWN0c0NhY2hlW3RyZWVJbmRleF1bXCJtYXhcIl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3RzQ2FjaGVbdHJlZUluZGV4XVtcIm1heFwiXSA9IHppbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdHNDYWNoZVt0cmVlSW5kZXhdW3ppbmRleF0ucHVzaChbZmVhdHVyZSwgbWF0Y2hlZE5vZGVdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1pbmltYWxpc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hlZE5vZGUuZ2VvU3R5bGUgJiYgbWF0Y2hlZE5vZGUuZ2VvU3R5bGUuY29uc3RydWN0b3IubmFtZSA9PT0gXCJHZW9UZXh0U3R5bGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnByb3BlcnRpZXNfW21hdGNoZWROb2RlLmdlb1N0eWxlLm5hbWVdID0gcmF3RmVhdHVyZS5wcm9wZXJ0aWVzW21hdGNoZWROb2RlLmdlb1N0eWxlLm5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hlZE5vZGUuY2hpbGRyZW5HZW9TdHlsZXMgJiYgbWF0Y2hlZE5vZGUuY2hpbGRyZW5HZW9TdHlsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoZWROb2RlLmNoaWxkcmVuR2VvU3R5bGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnByb3BlcnRpZXNfW21hdGNoZWROb2RlLmNoaWxkcmVuR2VvU3R5bGVzW2ldLm5hbWVdID0gcmF3RmVhdHVyZS5wcm9wZXJ0aWVzW21hdGNoZWROb2RlLmNoaWxkcmVuR2VvU3R5bGVzW2ldLm5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuZXh0ZW50XyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmV4dGVudF8gPSBwYmZMYXllciA/IFswLCAwLCBwYmZMYXllci5leHRlbnQsIHBiZkxheWVyLmV4dGVudF0gOiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBpbnN0cnVjdHMgPSBbXTtcclxuICAgICAgICAvLyB0aGUgdHJlc3MgaW5kZXggbWVhbnMgdGhlIGluZGV4IG9mIFN5bGVJZC5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluc3RydWN0c0NhY2hlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnN0cnVjdHNJbk9uZVRyZWUgPSBpbnN0cnVjdHNDYWNoZVtpXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpbnN0cnVjdHNJbk9uZVRyZWUpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBpbnN0cnVjdHNJbk9uZVRyZWUubWluLCBqaiA9IGluc3RydWN0c0luT25lVHJlZS5tYXg7IGogPD0gamo7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbnN0cnVjdHNJbk9uZVpJbmRleCA9IGluc3RydWN0c0luT25lVHJlZVtqXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdHJ1Y3RzSW5PbmVaSW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNoaWxkcmVuSW5zdHJ1Y3RzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGggPSAwOyBoIDwgaW5zdHJ1Y3RzSW5PbmVaSW5kZXgubGVuZ3RoOyBoKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbnN0cnVjdCA9IGluc3RydWN0c0luT25lWkluZGV4W2hdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3RbMF0uc3R5bGVJZCA9IGluc3RydWN0WzBdLnN0eWxlSWQgPyBpbnN0cnVjdFswXS5zdHlsZUlkIDoge31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnN0cnVjdFsxXS5nZW9TdHlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydWN0WzBdLnN0eWxlSWRbaW5zdHJ1Y3RbMV0uZ2VvU3R5bGUuaWRdID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdHMucHVzaChbaW5zdHJ1Y3RbMF0sIGluc3RydWN0WzFdLmdlb1N0eWxlLCBpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluc3RydWN0WzFdLmNoaWxkcmVuR2VvU3R5bGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBpbnN0cnVjdFsxXS5jaGlsZHJlbkdlb1N0eWxlcy5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdFswXS5zdHlsZUlkW2luc3RydWN0WzFdLmNoaWxkcmVuR2VvU3R5bGVzW2tdLmlkXSA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuSW5zdHJ1Y3RzLnB1c2goW2luc3RydWN0WzBdLCBpbnN0cnVjdFsxXS5jaGlsZHJlbkdlb1N0eWxlc1trXSwgaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShpbnN0cnVjdHMsIGNoaWxkcmVuSW5zdHJ1Y3RzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtmZWF0dXJlcywgaW5zdHJ1Y3RzXTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcmVhZFJhd0ZlYXR1cmVfKHBiZiwgbGF5ZXIsIGkpIHtcclxuICAgICAgICBwYmYucG9zID0gbGF5ZXIuZmVhdHVyZXNbaV07XHJcbiAgICAgICAgbGV0IGVuZCA9IHBiZi5yZWFkVmFyaW50KCkgKyBwYmYucG9zO1xyXG5cclxuICAgICAgICBsZXQgZmVhdHVyZSA9IHtcclxuICAgICAgICAgICAgbGF5ZXI6IGxheWVyLFxyXG4gICAgICAgICAgICB0eXBlOiAwLFxyXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcclxuICAgICAgICAgICAgcHJvcGVydGllc0luZGV4OiB7fVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcGJmLnJlYWRGaWVsZHMoKDxhbnk+b2wpLmZvcm1hdC5NVlQucGJmUmVhZGVyc18uZmVhdHVyZUNvbHVtblZhbHVlLCBmZWF0dXJlLCBlbmQpO1xyXG5cclxuICAgICAgICByZXR1cm4gZmVhdHVyZTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZmVhdHVyZUNvbHVtblZhbHVlKHRhZzogYW55LCBmZWF0dXJlOiBhbnksIHBiZjogYW55KSB7XHJcbiAgICAgICAgaWYgKHRhZyA9PT0gMSkge1xyXG4gICAgICAgICAgICBmZWF0dXJlLmlkID0gcGJmLnJlYWRWYXJpbnQoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRhZyA9PT0gMikge1xyXG4gICAgICAgICAgICBsZXQgZW5kID0gcGJmLnJlYWRWYXJpbnQoKSArIHBiZi5wb3M7XHJcbiAgICAgICAgICAgIHdoaWxlIChwYmYucG9zIDwgZW5kKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQga2V5ID0gcGJmLnJlYWRWYXJpbnQoKTtcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHBiZi5yZWFkVmFyaW50KCk7XHJcbiAgICAgICAgICAgICAgICBmZWF0dXJlLnByb3BlcnRpZXNJbmRleFtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBrZXkgPSBmZWF0dXJlLmxheWVyLmtleXNba2V5XTtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gZmVhdHVyZS5sYXllci52YWx1ZXNbdmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgZmVhdHVyZS5wcm9wZXJ0aWVzW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAodGFnID09PSAzKSB7XHJcbiAgICAgICAgICAgIGZlYXR1cmUudHlwZSA9IHBiZi5yZWFkVmFyaW50KCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0YWcgPT09IDQpIHtcclxuICAgICAgICAgICAgZmVhdHVyZS5nZW9tZXRyeSA9IHBiZi5wb3M7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbig8YW55Pm9sKS5mb3JtYXQuTVZULnJlYWRSYXdGZWF0dXJlXyA9IEdlb01WVEZvcm1hdC5yZWFkUmF3RmVhdHVyZV87XHJcbig8YW55Pm9sKS5mb3JtYXQuTVZULnBiZlJlYWRlcnNfW1wiZmVhdHVyZUNvbHVtblZhbHVlXCJdID0gR2VvTVZURm9ybWF0LmZlYXR1cmVDb2x1bW5WYWx1ZTtcclxuIiwiZXhwb3J0IGNsYXNzIEdlb1ZlY3RvclRpbGUgZXh0ZW5kcyAob2wuVmVjdG9yVGlsZSBhcyB7IG5ldyh0aWxlQ29vcmQ6IG9sLlRpbGVDb29yZCwgc3RhdGU6IG9sLlRpbGUuU3RhdGUsIHNyYzogc3RyaW5nLCBmb3JtYXQ6IG9sLmZvcm1hdC5GZWF0dXJlLCB0aWxlTG9hZEZ1bmN0aW9uOiBvbC5UaWxlTG9hZEZ1bmN0aW9uVHlwZSk6IGFueTsgfSkge1xyXG5cclxuICAgIGluc3RydWN0czogYW55O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHRpbGVDb29yZDogb2wuVGlsZUNvb3JkLCBzdGF0ZTogb2wuVGlsZS5TdGF0ZSwgc3JjOiBzdHJpbmcsIGZvcm1hdDogb2wuZm9ybWF0LkZlYXR1cmUsIHRpbGVMb2FkRnVuY3Rpb246IG9sLlRpbGVMb2FkRnVuY3Rpb25UeXBlKSB7XHJcbiAgICAgICAgc3VwZXIodGlsZUNvb3JkLCBzdGF0ZSwgc3JjLCBmb3JtYXQsIHRpbGVMb2FkRnVuY3Rpb24pO1xyXG4gICAgICAgIHRoaXMuZGlzcG9zZUludGVybmFsID0gdGhpcy5kaXNwb3NlSW50ZXJuYWxDdXN0b207XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRpc3Bvc2VJbnRlcm5hbEN1c3RvbSgpIHtcclxuICAgICAgICB0aGlzLmZlYXR1cmVzXyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5yZXBsYXlHcm91cHNfID0ge307XHJcbiAgICAgICAgLy8gdGhpcy5zdGF0ZSA9IG9sLlRpbGVTdGF0ZS5BQk9SVDtcclxuICAgICAgICB0aGlzLnN0YXRlID0gKDxhbnk+b2wpLlRpbGVTdGF0ZS5JRExFO1xyXG4gICAgICAgIHRoaXMuY2hhbmdlZCgpO1xyXG4gICAgICAgIGlmICh0aGlzW1wieGhyXCJdICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzW1wieGhyXCJdLmFib3J0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy53b3JrZXJJZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHZhciBkaXNwb3NlSW5mbyA9IHtcclxuICAgICAgICAgICAgICAgIGZvcm1hdElkOiAoPGFueT5vbCkuZ2V0VWlkKHRoaXMuZ2V0Rm9ybWF0KCkpLFxyXG4gICAgICAgICAgICAgICAgbWF4RGF0YVpvb206IHRoaXMuZ2V0Rm9ybWF0KCkubWF4RGF0YVpvb20sXHJcbiAgICAgICAgICAgICAgICB0aWxlQ29vcmQ6IHRoaXMudGlsZUNvb3JkLFxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdFRpbGVDb29yZDogdGhpcy5yZXF1ZXN0VGlsZUNvb3JkXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0Rm9ybWF0KCkud29ya2VyTWFuYWdlci5wb3N0TWVzc2FnZSh0aGlzLnRpbGVDb29yZCArICg8YW55Pm9sKS5nZXRVaWQoZGlzcG9zZUluZm8pLCBcInZlY3RvclRpbGVEaXNwb3NlXCIsIGRpc3Bvc2VJbmZvLCBudWxsLCB0aGlzLndvcmtlcklkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICg8YW55Pm9sLlRpbGUucHJvdG90eXBlKS5kaXNwb3NlSW50ZXJuYWwuY2FsbCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25Mb2FkKGRhdGFQcm9qZWN0aW9uLCBleHRlbnQpIHtcclxuICAgICAgICB0aGlzLnNldFByb2plY3Rpb24oZGF0YVByb2plY3Rpb24pO1xyXG4gICAgICAgIHRoaXMuc2V0RmVhdHVyZXMoKTtcclxuICAgICAgICB0aGlzLnNldEV4dGVudChleHRlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFJlbmRlckZlYXR1cmVJbnN0cnVjdHMoaW5zdHJ1Y3RzKSB7XHJcbiAgICAgICAgdGhpcy5pbnN0cnVjdHMgPSBpbnN0cnVjdHM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UmVuZGVyRmVhdHVyZUluc3RydWN0cyhpbnN0cnVjdHMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0cnVjdHM7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBHZW9WZWN0b3JUaWxlU291cmNlIH0gZnJvbSBcIi4uL3NvdXJjZS9nZW9WZWN0b3JUaWxlU291cmNlXCI7XHJcbmltcG9ydCB7IEdlb1ZlY3RvclRpbGUgfSBmcm9tIFwiLi4vZ2VvVmVjdG9yVGlsZVwiO1xyXG5pbXBvcnQgeyBHZW9TdHlsZSB9IGZyb20gXCIuLi9zdHlsZS9nZW9TdHlsZVwiO1xyXG5pbXBvcnQgeyBHZW9NVlRGb3JtYXQgfSBmcm9tIFwiLi4vZm9ybWF0L2dlb012dFwiO1xyXG5pbXBvcnQgeyBTdHlsZUpzb25DYWNoZSB9IGZyb20gXCIuLi90cmVlL3N0eWxlSnNvbkNhY2hlXCI7XHJcbmltcG9ydCB7IFN0eWxlSnNvbkNhY2hlSXRlbSB9IGZyb20gXCIuLi90cmVlL3N0eWxlSnNvbkNhY2hlSXRlbVwiO1xyXG5pbXBvcnQgeyBHZW9WZWN0b3JUaWxlTGF5ZXJSZW5kZXIgfSBmcm9tIFwiLi4vcmVuZGVyL2dlb1ZlY3RvclRpbGVsYXllclJlbmRlclwiO1xyXG5pbXBvcnQgeyBUcmVlTm9kZSB9IGZyb20gXCIuLi90cmVlL1RyZWVOb2RlXCI7XHJcbmltcG9ydCB7IFRyZWUgfSBmcm9tIFwiLi4vdHJlZS90cmVlXCI7XHJcbmltcG9ydCB7IFdvcmtlck1hbmFnZXIgfSBmcm9tIFwiLi4vd29ya2VyL3dvcmtlck1hbmFnZXJcIjtcclxuaW1wb3J0IHsgV2ViZ2xNYW5hZ2VyIH0gZnJvbSBcIi4uL3dvcmtlci93ZWJnbE1hbmFnZXJcIjtcclxuaW1wb3J0IHsgVmVjdG9yVGlsZUxheWVyVGhyZWFkTW9kZSB9IGZyb20gXCIuLi93b3JrZXIvdmVjdG9yVGlsZUxheWVyVGhyZWFkTW9kZVwiO1xyXG5pbXBvcnQgZHJhd1BvbHlnb25HbCBmcm9tICcuLy4uL3dlYmdsL3BvbHlnb24nO1xyXG5pbXBvcnQgZHJhd0xpbmVTdHJpbmcgZnJvbSAnLi8uLi93ZWJnbC9saW5lU3RyaW5nJztcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgVmVjdG9yVGlsZUxheWVyIGV4dGVuZHMgKG9sLmxheWVyLlZlY3RvclRpbGUgYXMgeyBuZXcocDogb2x4LmxheWVyLlZlY3RvclRpbGVPcHRpb25zKTogYW55OyB9KSB7XHJcbiAgICBtYXhEYXRhWm9vbTogbnVtYmVyO1xyXG4gICAgbWluaW1hbGlzdDogYm9vbGVhbjtcclxuICAgIHRocmVhZE1vZGU6IFZlY3RvclRpbGVMYXllclRocmVhZE1vZGU7XHJcbiAgICBpc011bHRpdGhyZWFkOiBib29sZWFuO1xyXG4gICAgd29ya2VyTWFuYWdlcjogV29ya2VyTWFuYWdlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzdHlsZUpzb246IGFueSwgb3B0X29wdGlvbnM/OiBvbHgubGF5ZXIuVmVjdG9yVGlsZU9wdGlvbnMpIHtcclxuICAgICAgICAvLyBkZWZhdWx0XHJcbiAgICAgICAgaWYgKG9wdF9vcHRpb25zICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb3B0X29wdGlvbnNbXCJkZWNsdXR0ZXJcIl0gPSBvcHRfb3B0aW9uc1tcImRlY2x1dHRlclwiXSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdF9vcHRpb25zW1wiZGVjbHV0dGVyXCJdO1xyXG4gICAgICAgICAgICBvcHRfb3B0aW9uc1tcIm1pbmltYWxpc3RcIl0gPSBvcHRfb3B0aW9uc1tcIm1pbmltYWxpc3RcIl0gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBvcHRfb3B0aW9uc1tcIm1pbmltYWxpc3RcIl07XHJcbiAgICAgICAgICAgIHN1cGVyKG9wdF9vcHRpb25zKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHt9XHJcbiAgICAgICAgICAgIG9wdGlvbnNbXCJkZWNsdXR0ZXJcIl0gPSB0cnVlO1xyXG4gICAgICAgICAgICBvcHRpb25zW1wibWluaW1hbGlzdFwiXSA9IHRydWU7XHJcbiAgICAgICAgICAgIHN1cGVyKDxhbnk+b3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3B0X29wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAvLyB0ZW1wIEVtaWxcclxuICAgICAgICAgICAgdmFyIHRlbXBJc011bHRpdGhyZWFkID0gb3B0X29wdGlvbnNbXCJtdWx0aXRocmVhZFwiXSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdF9vcHRpb25zW1wibXVsdGl0aHJlYWRcIl07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRocmVhZE1vZGUgPSBvcHRfb3B0aW9uc1tcInRocmVhZE1vZGVcIl0gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBvcHRfb3B0aW9uc1tcInRocmVhZE1vZGVcIl07XHJcbiAgICAgICAgICAgIHRoaXMuaXNNdWx0aXRocmVhZCA9IHRoaXMudGhyZWFkTW9kZSAhPT0gVmVjdG9yVGlsZUxheWVyVGhyZWFkTW9kZS5TaW5nbGVUaHJlYWQ7XHJcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZFdvcmtlckNvdW50ID0gb3B0X29wdGlvbnNbXCJiYWNrZ3JvdW5kV29ya2VyQ291bnRcIl07XHJcblxyXG4gICAgICAgICAgICAvLyB0ZW1wIEVtaWxcclxuICAgICAgICAgICAgaWYgKHRlbXBJc011bHRpdGhyZWFkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRocmVhZE1vZGUgPSBWZWN0b3JUaWxlTGF5ZXJUaHJlYWRNb2RlLkRlZmF1bHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhY2tncm91bmRXb3JrZXJDb3VudCA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICB0aGlzLm1pbmltYWxpc3QgPSBvcHRfb3B0aW9uc1tcIm1pbmltYWxpc3RcIl0gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBvcHRfb3B0aW9uc1tcIm1pbmltYWxpc3RcIl07XHJcbiAgICAgICAgICAgIHRoaXMubWF4RGF0YVpvb20gPSBvcHRfb3B0aW9uc1tcIm1heERhdGFab29tXCJdID09PSB1bmRlZmluZWQgPyAxNCA6IG9wdF9vcHRpb25zW1wibWF4RGF0YVpvb21cIl07XHJcbiAgICAgICAgICAgIHRoaXMucHJveHkgPSBvcHRfb3B0aW9uc1tcInByb3h5XCJdO1xyXG4gICAgICAgICAgICB0aGlzLmNsaWVudElkID0gb3B0X29wdGlvbnNbXCJjbGllbnRJZFwiXTtcclxuICAgICAgICAgICAgdGhpcy5jbGllbnRTZWNyZXQgPSBvcHRfb3B0aW9uc1tcImNsaWVudFNlY3JldFwiXTtcclxuICAgICAgICAgICAgdGhpcy5hcGlLZXkgPSBvcHRfb3B0aW9uc1tcImFwaUtleVwiXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmlzTXVsdGl0aHJlYWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLm1pbmltYWxpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLm1heERhdGFab29tID0gMTQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJHZW9WZWN0b3IoKTtcclxuICAgICAgICBpZiAodGhpcy5pc1N0eWxlSnNvblVybChzdHlsZUpzb24pKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFN0eWxlSnNvbkFzeW4oc3R5bGVKc29uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFN0eWxlSnNvbihzdHlsZUpzb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnR5cGUgPSAoPGFueT5vbCkuTGF5ZXJUeXBlLk1BUFNVSVRFX1ZFQ1RPUlRJTEU7XHJcblxyXG4gICAgICAgIC8vIGNyZWF0ZSB3ZWJ3b3JrZXIgZm9yIHdlYmdsICAgICAgICBcclxuICAgICAgICBpZighKDxhbnk+d2luZG93KS53ZWJnbE1hbmFnZXIpe1xyXG4gICAgICAgICAgICAoPGFueT53aW5kb3cpLndlYmdsTWFuYWdlciA9IG5ldyBXZWJnbE1hbmFnZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZFN0eWxlSnNvbkFzeW4oc3R5bGVKc29uVXJsKSB7XHJcbiAgICAgICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgIC8vIEZJWE1FIEVyaWNcclxuICAgICAgICB4aHIub3BlbihcIkdFVFwiLCBzdHlsZUpzb25VcmwpO1xyXG5cclxuICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKGV2ZW50OiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKCF4aHIuc3RhdHVzIHx8IHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDApIHtcclxuICAgICAgICAgICAgICAgIGxldCBzb3VyY2U7XHJcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSB4aHIucmVzcG9uc2VUZXh0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHlsZUpzb24gPSBKU09OLnBhcnNlKHNvdXJjZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRTdHlsZUpzb24oSlNPTi5wYXJzZShzb3VyY2UpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0uYmluZCh0aGlzKTtcclxuICAgICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB9LmJpbmQodGhpcyk7XHJcbiAgICAgICAgeGhyLnNlbmQoKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkU3R5bGVKc29uKGlucHV0U3R5bGVKc29uOiBhbnkpIHtcclxuICAgICAgICB2YXIgc3R5bGVKc29uID0gdGhpcy5zdHlsZUpzb24gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGlucHV0U3R5bGVKc29uKSk7XHJcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gc3R5bGVKc29uW1widmVyc2lvblwiXTtcclxuICAgICAgICB0aGlzLm93bmVyID0gc3R5bGVKc29uW1wib3duZXJcIl07XHJcbiAgICAgICAgdGhpcy5kYXRlVGltZSA9IHN0eWxlSnNvbltcImRhdGVUaW1lXCJdO1xyXG4gICAgICAgIHRoaXMudmFyaWFibGVzID0gdGhpcy5nZXRWYXJpYWJsZXMoc3R5bGVKc29uW1widmFyaWFibGVzXCJdKTtcclxuICAgICAgICB0aGlzLmJhY2tncm91bmQgPSBzdHlsZUpzb25bXCJiYWNrZ3JvdW5kXCJdO1xyXG5cclxuICAgICAgICB0aGlzLnJlcGxhY2VWYXJpYWJsZXMoc3R5bGVKc29uLCB0aGlzLnZhcmlhYmxlcyk7XHJcblxyXG4gICAgICAgIHRoaXMuZ2VvU291cmNlcyA9IHt9O1xyXG4gICAgICAgIGlmIChzdHlsZUpzb25bXCJsYXllcnNcIl0gJiYgc3R5bGVKc29uW1wibGF5ZXJzXCJdLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIGxheWVySnNvbiA9IHN0eWxlSnNvbltcImxheWVyc1wiXVswXTtcclxuICAgICAgICAgICAgdmFyIHNvdXJjZUlkID0gbGF5ZXJKc29uW1wic291cmNlXCJdO1xyXG5cclxuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuZ2V0R2VvU291cmNlKHNvdXJjZUlkKTtcclxuICAgICAgICAgICAgaWYgKHNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTb3VyY2Uoc291cmNlKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmJhY2tncm91bmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYmFja2dyb3VuZENvbG9yID0gR2VvU3R5bGUudG9SR0JBQ29sb3IodGhpcy5iYWNrZ3JvdW5kKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYmFja2dyb3VuZENvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbXCJiYWNrZ3JvdW5kXCJdID0gYmFja2dyb3VuZENvbG9yO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgc3R5bGVKc29ucyA9IHN0eWxlSnNvbltcInN0eWxlc1wiXTtcclxuICAgICAgICAgICAgICAgIGxldCBzdHlsZUlkcyA9IGxheWVySnNvbltcInN0eWxlc1wiXTtcclxuICAgICAgICAgICAgICAgIGxldCBtaW5ab29tID0gMDtcclxuICAgICAgICAgICAgICAgIGxldCBtYXhab29tID0gMjI7XHJcbiAgICAgICAgICAgICAgICBsZXQgbGF5ZXJOYW1lID0gc291cmNlLmdldEdlb0Zvcm1hdCgpLmdldExheWVyTmFtZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBzdHlsZUpzb25DYWNoZSA9IG5ldyBTdHlsZUpzb25DYWNoZSgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHN0eWxlSWRJbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBzdHlsZUlkIG9mIHN0eWxlSWRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0eWxlSnNvbjtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgc3R5bGVKc29ucy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlSnNvbnNbaW5kZXhdLmlkID09PSBzdHlsZUlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZUpzb24gPSBzdHlsZUpzb25zW2luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVKc29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlSnNvbkNhY2hlLnN0eWxlSnNvbltzdHlsZUlkXSA9IHN0eWxlSnNvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW0gPSBuZXcgU3R5bGVKc29uQ2FjaGVJdGVtKHN0eWxlSnNvbiwgbWluWm9vbSwgbWF4Wm9vbSwgbGF5ZXJOYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHpvb20gPSBpdGVtLm1pblpvb207IHpvb20gPD0gaXRlbS5tYXhab29tOyB6b29tKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0cmVlTm9kZSA9IG5ldyBUcmVlTm9kZTxTdHlsZUpzb25DYWNoZUl0ZW0+KGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVDaGlsZHJlbk5vZGUodHJlZU5vZGUsIGl0ZW0sIHpvb20pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVKc29uQ2FjaGUuYWRkKHpvb20sIGl0ZW0uZGF0YUxheWVyTmFtZSwgbmV3IFRyZWUodHJlZU5vZGUsIHN0eWxlSWRJbmRleCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZUlkSW5kZXggKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXQgZ2VvRm9ybWF0ID0gc291cmNlLmdldEdlb0Zvcm1hdCgpO1xyXG4gICAgICAgICAgICAgICAgZ2VvRm9ybWF0W1wic3R5bGVKc29uQ2FjaGVcIl0gPSBzdHlsZUpzb25DYWNoZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc011bHRpdGhyZWFkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMud29ya2VyTWFuYWdlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRJZDogKDxhbnk+b2wpLmdldFVpZChnZW9Gb3JtYXQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVKc29uOiBzdHlsZUpzb25DYWNoZS5zdHlsZUpzb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9UZXh0U3R5bGVJbmZvczogc3R5bGVKc29uQ2FjaGUuZ2VvVGV4dFN0eWxlSW5mb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLndvcmtlck1hbmFnZXIud29ya2VyQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53b3JrZXJNYW5hZ2VyLnBvc3RNZXNzYWdlKCg8YW55Pm9sKS5nZXRVaWQobWVzc2FnZURhdGEpLCBcImluaXRTdHlsZUpTT05cIiwgbWVzc2FnZURhdGEsIHVuZGVmaW5lZCwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0R2VvU291cmNlKHNvdXJjZUlkKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2VvU291cmNlcyAmJiB0aGlzLmdlb1NvdXJjZXNbc291cmNlSWRdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdlb1NvdXJjZXNbc291cmNlSWRdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3R5bGVKc29uW1wic291cmNlc1wiXSkge1xyXG4gICAgICAgICAgICB0aGlzLnN0eWxlSnNvblsnc291cmNlcyddLmZvckVhY2goc291cmNlSnNvbiA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlSWQgPT09IHNvdXJjZUpzb25bJ2lkJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNvdXJjZUpzb25bJ3VybHMnXSAmJiBzb3VyY2VKc29uWyd1cmwnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VKc29uWyd1cmxzJ10gPSBbc291cmNlSnNvblsndXJsJ11dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgc291cmNlSnNvblsndXJsJ107XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUpzb25bJ3VybHMnXSA9IHNvdXJjZUpzb25bJ3VybHMnXS5tYXAodXJsID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVybC5pbmRleE9mKCdodHRwJykgPT09IC0xICYmIHVybC5pbmRleE9mKCdodHRwcycpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhvc3QgPSBsb2NhdGlvbi5ob3N0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb3RvY29sID0gbG9jYXRpb24ucHJvdG9jb2w7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXJsLmluZGV4T2YoJy8nKSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHByb3RvY29sICsgJy8vJyArIGhvc3QgKyAnLycgKyB1cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh1cmwuaW5kZXhPZignLycpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gcHJvdG9jb2wgKyAnLy8nICsgaG9zdCArIHVybDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhcGlLZXlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVybC5pbmRleE9mKCdhcGlLZXknKSA9PT0gLTEgJiYgdGhpcy5hcGlLZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHVybCArICc/YXBpS2V5PScgKyB0aGlzLmFwaUtleTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcm94eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm94eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gdGhpcy5wcm94eSArIGVuY29kZVVSSUNvbXBvbmVudCh1cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdlb1NvdXJjZXNbc291cmNlSnNvbltcImlkXCJdXSA9IHRoaXMuY3JlYXRlVmVjdG9yVGlsZVNvdXJjZShzb3VyY2VKc29uKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZW9Tb3VyY2VzW3NvdXJjZUlkXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVWZWN0b3JUaWxlU291cmNlKHNvdXJjZUpzb24pIHtcclxuICAgICAgICBpZiAoc291cmNlSnNvbltcInR5cGVcIl0gPT09IFwiTVZUXCIpIHtcclxuICAgICAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuZ2V0VmVjdG9yU291cmNlRm9ybWF0KCk7XHJcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBuZXcgR2VvVmVjdG9yVGlsZVNvdXJjZSh7XHJcbiAgICAgICAgICAgICAgICB0aWxlQ2xhc3M6IDxhbnk+R2VvVmVjdG9yVGlsZSxcclxuICAgICAgICAgICAgICAgIHVybHM6IHNvdXJjZUpzb25bXCJ1cmxzXCJdLFxyXG4gICAgICAgICAgICAgICAgY2xpZW50SWQ6IHRoaXMuY2xpZW50SWQsXHJcbiAgICAgICAgICAgICAgICBjbGllbnRTZWNyZXQ6IHRoaXMuY2xpZW50U2VjcmV0LFxyXG4gICAgICAgICAgICAgICAgZm9ybWF0OiBmb3JtYXQsXHJcbiAgICAgICAgICAgICAgICBwcm9qZWN0aW9uOiBcIkVQU0c6Mzg1N1wiLFxyXG4gICAgICAgICAgICAgICAgdGlsZUdyaWQ6IHRoaXMuY3JlYXRlVmVjdG9yVGlsZUdyaWQoKSxcclxuICAgICAgICAgICAgICAgIGNhY2hlU2l6ZTogMTAyNCxcclxuICAgICAgICAgICAgICAgIG11bHRpdGhyZWFkOiB0aGlzLmlzTXVsdGl0aHJlYWQsXHJcbiAgICAgICAgICAgICAgICBtaW5pbWFsaXN0OiB0aGlzLm1pbmltYWxpc3QsXHJcbiAgICAgICAgICAgICAgICBtYXhEYXRhWm9vbTogdGhpcy5tYXhEYXRhWm9vbVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZm9ybWF0Wydzb3VyY2UnXSA9IHNvdXJjZTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBnZXRWZWN0b3JTb3VyY2VGb3JtYXQoKSB7XHJcbiAgICAgICAgbGV0IGZvcm1hdCA9IG5ldyBHZW9NVlRGb3JtYXQodW5kZWZpbmVkLCB7IG11bHRpdGhyZWFkOiB0aGlzLmlzTXVsdGl0aHJlYWQsIG1pbmltYWxpc3Q6IHRoaXMubWluaW1hbGlzdCB9KTtcclxuICAgICAgICBpZiAodGhpcy5pc011bHRpdGhyZWFkKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy53b3JrZXJNYW5hZ2VyIHx8ICF0aGlzLndvcmtlck1hbmFnZXIuaW5pdGVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndvcmtlck1hbmFnZXIgPSBuZXcgV29ya2VyTWFuYWdlcih0aGlzLnRocmVhZE1vZGUsIHRoaXMuYmFja2dyb3VuZFdvcmtlckNvdW50KTtcclxuICAgICAgICAgICAgICAgIHRoaXMud29ya2VyTWFuYWdlci5pbml0V29ya2VycygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLndvcmtlck1hbmFnZXIuaW5pdGVkKSB7XHJcbiAgICAgICAgICAgICAgICBmb3JtYXRbXCJ3b3JrZXJNYW5hZ2VyXCJdID0gdGhpcy53b3JrZXJNYW5hZ2VyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmb3JtYXQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGNyZWF0ZVZlY3RvclRpbGVHcmlkKCk6IG9sLnRpbGVncmlkLlRpbGVHcmlkIHtcclxuICAgICAgICByZXR1cm4gb2wudGlsZWdyaWQuY3JlYXRlWFlaKHsgdGlsZVNpemU6IDUxMiwgbWF4Wm9vbTogMjIgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VmFyaWFibGVzKHZhcmlhYmxlc0pzb246IGFueSkge1xyXG4gICAgICAgIGxldCB2YXJpYWJsZXMgPSB7fTtcclxuICAgICAgICBmb3IgKGxldCB2YXJpYWJsZXNOYW1lIGluIHZhcmlhYmxlc0pzb24pIHtcclxuICAgICAgICAgICAgaWYgKHZhcmlhYmxlc05hbWUuaW5kZXhPZihcIixcIikgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFyaWFibGVOYW1lcyA9IHZhcmlhYmxlc05hbWUuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YXJpYWJsZU5hbWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzW3ZhcmlhYmxlTmFtZXNbaV1dID0gdmFyaWFibGVzSnNvblt2YXJpYWJsZXNOYW1lXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhcmlhYmxlc1t2YXJpYWJsZXNOYW1lXSA9IHZhcmlhYmxlc0pzb25bdmFyaWFibGVzTmFtZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2YXJpYWJsZXM7XHJcbiAgICB9XHJcblxyXG4gICAgcmVwbGFjZVZhcmlhYmxlcyhzdHlsZUpzb246IGFueSwgdmFyaWFibGVzOiBhbnkpIHtcclxuICAgICAgICBmb3IgKGxldCBwcm9wZXJ0eU5hbWUgaW4gc3R5bGVKc29uKSB7XHJcbiAgICAgICAgICAgIGxldCBwcm9wZXJ0eSA9IHN0eWxlSnNvbltwcm9wZXJ0eU5hbWVdO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHByb3BlcnR5ID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VWYXJpYWJsZXMocHJvcGVydHksIHZhcmlhYmxlcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHByb3BlcnR5ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQga2V5V29yZEluZGV4ID0gcHJvcGVydHkuaW5kZXhPZihcIkBcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5V29yZEluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGluZXMgPSBwcm9wZXJ0eS5zcGxpdChcIiBcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBXb3JkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wV29yZCA9IGxpbmVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBXb3JkLmluZGV4T2YoXCJAXCIpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFdvcmQgPSB2YXJpYWJsZXNbdGVtcFdvcmRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHRlbXBXb3JkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZUpzb25bcHJvcGVydHlOYW1lXSA9IHJlc3VsdHMuam9pbihcIiBcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZUpzb25bcHJvcGVydHlOYW1lXSA9IHZhcmlhYmxlc1tsaW5lc1swXV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUNoaWxkcmVuTm9kZShjdXJyZW50Tm9kZTogVHJlZU5vZGU8U3R5bGVKc29uQ2FjaGVJdGVtPiwgaXRlbTogU3R5bGVKc29uQ2FjaGVJdGVtLCB6b29tOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoaXRlbS5zdWJTdHlsZUNhY2hlSXRlbXMgJiYgaXRlbS5zdWJTdHlsZUNhY2hlSXRlbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBpdGVtLnN1YlN0eWxlQ2FjaGVJdGVtcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3ViU3R5bGVJdGVtID0gaXRlbS5zdWJTdHlsZUNhY2hlSXRlbXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoem9vbSA+PSBzdWJTdHlsZUl0ZW0ubWluWm9vbSAmJiB6b29tIDw9IHN1YlN0eWxlSXRlbS5tYXhab29tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5vZGUgPSBuZXcgVHJlZU5vZGU8U3R5bGVKc29uQ2FjaGVJdGVtPihzdWJTdHlsZUl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlLmNoaWxkcmVuLnB1c2gobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVDaGlsZHJlbk5vZGUobm9kZSwgc3ViU3R5bGVJdGVtLCB6b29tKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpc1N0eWxlSnNvblVybChzdHlsZUpzb24pOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoc3R5bGVKc29uKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3R5bGVKc29uICE9PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZWdpc3Rlckdlb1ZlY3RvcigpIHtcclxuICAgICAgICAoPGFueT5vbCkuTGF5ZXJUeXBlW1wiR0VPVkVDVE9SVElMRVwiXSA9IFwiR0VPVkVDVE9SVElMRVwiO1xyXG4gICAgICAgIC8vIFRPRE86IGNoZWNrIHRoZSBwbHVnaW4gaGFkIGJlZW4gcmVnaXN0ZWQuXHJcbiAgICAgICAgKDxhbnk+b2wpLnBsdWdpbnMucmVnaXN0ZXIoKDxhbnk+b2wpLlBsdWdpblR5cGUuTEFZRVJfUkVOREVSRVIsIEdlb1ZlY3RvclRpbGVMYXllclJlbmRlcik7XHJcbiAgICAgICAgLy8gKDxhbnk+b2wuVmVjdG9yVGlsZSkuRXZlbnQgPSBmdW5jdGlvbiAodHlwZSwgeGhyKSB7XHJcbiAgICAgICAgLy8gICAgIG9sLmV2ZW50cy5FdmVudC5jYWxsKHRoaXMsIHR5cGUpO1xyXG5cclxuICAgICAgICAvLyAgICAgdGhpcy54aHIgPSB4aHI7XHJcbiAgICAgICAgLy8gfTtcclxuICAgICAgICAvLyBvbC5pbmhlcml0cygoPGFueT5vbC5WZWN0b3JUaWxlKSwgKDxhbnk+b2wuZXZlbnRzKS5FdmVudCk7XHJcblxyXG4gICAgICAgICg8YW55Pm9sKS5WZWN0b3JJbWFnZVRpbGUucHJvdG90eXBlLmRpc3Bvc2VJbnRlcm5hbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gdGhpcy50aWxlS2V5cy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc291cmNlVGlsZUtleSA9IHRoaXMudGlsZUtleXNbaV07XHJcbiAgICAgICAgICAgICAgICBsZXQgc291cmNlVGlsZSA9IHRoaXMuZ2V0VGlsZShzb3VyY2VUaWxlS2V5KTtcclxuICAgICAgICAgICAgICAgIHNvdXJjZVRpbGUuY29uc3VtZXJzLS07XHJcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlVGlsZS5jb25zdW1lcnMgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnNvdXJjZVRpbGVzX1tzb3VyY2VUaWxlS2V5XTtcclxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VUaWxlLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNvdXJjZVRpbGVzXyA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZExpc3RlbmVyS2V5c18uZm9yRWFjaCgoPGFueT5vbCkuZXZlbnRzLnVubGlzdGVuQnlLZXkpO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRMaXN0ZW5lcktleXNfLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmludGVyaW1UaWxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmludGVyaW1UaWxlLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gKDxhbnk+b2wpLlRpbGVTdGF0ZS5BQk9SVDtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VkKCk7XHJcbiAgICAgICAgICAgIC8vIGZvciB0aGUgZGlzcG9zZUludGVybmFsXHJcbiAgICAgICAgICAgIHRoaXMudGlsZUtleXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VUaWxlTGlzdGVuZXJLZXlzXy5mb3JFYWNoKCg8YW55Pm9sKS5ldmVudHMudW5saXN0ZW5CeUtleSk7XHJcbiAgICAgICAgICAgIHRoaXMuc291cmNlVGlsZUxpc3RlbmVyS2V5c18ubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgKDxhbnk+b2wpLlRpbGUucHJvdG90eXBlLmRpc3Bvc2VJbnRlcm5hbC5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICg8YW55Pm9sKS5UaWxlUXVldWUucHJvdG90eXBlLmhhbmRsZVRpbGVDaGFuZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgbGV0IHRpbGUgPSAvKiogQHR5cGUge29sLlRpbGV9ICovIChldmVudC50YXJnZXQpO1xyXG4gICAgICAgICAgICBsZXQgc3RhdGUgPSB0aWxlLmdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gKDxhbnk+b2wpLlRpbGVTdGF0ZS5MT0FERUQgfHwgc3RhdGUgPT09ICg8YW55Pm9sKS5UaWxlU3RhdGUuRVJST1IgfHxcclxuICAgICAgICAgICAgICAgIHN0YXRlID09PSAoPGFueT5vbCkuVGlsZVN0YXRlLkVNUFRZIHx8IHN0YXRlID09PSAoPGFueT5vbCkuVGlsZVN0YXRlLkFCT1JUIHx8XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9PT0gKDxhbnk+b2wpLlRpbGVTdGF0ZS5DQU5DRUwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gKDxhbnk+b2wpLlRpbGVTdGF0ZS5BQk9SVCB8fCBzdGF0ZSA9PT0gKDxhbnk+b2wpLlRpbGVTdGF0ZS5FUlJPUikge1xyXG4gICAgICAgICAgICAgICAgICAgICg8YW55Pm9sKS5ldmVudHMudW5saXN0ZW4odGlsZSwgKDxhbnk+b2wpLmV2ZW50cy5FdmVudFR5cGUuQ0hBTkdFLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVRpbGVDaGFuZ2UsIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCB0aWxlS2V5ID0gdGlsZS5nZXRLZXkoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aWxlS2V5IGluIHRoaXMudGlsZXNMb2FkaW5nS2V5c18pIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy50aWxlc0xvYWRpbmdLZXlzX1t0aWxlS2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAtLXRoaXMudGlsZXNMb2FkaW5nXztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGVucXVldWUgcmVjb3JkcywgaWYgdGhlIHRpbGUgaGFzIGJlZW4gZGlzcG9zZSBiZWZvcmUgbG9hZFxyXG4gICAgICAgICAgICAgICAgaWYgKHRpbGVLZXkgaW4gdGhpcy5xdWV1ZWRFbGVtZW50c18pIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5xdWV1ZWRFbGVtZW50c19bdGlsZUtleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbGVDaGFuZ2VDYWxsYmFja18oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIHJlbW92ZSBxdWlja1pvb20gd2hlbiBhbmltYXRpb24gY29tcGxldGVcclxuICAgICAgICAoPGFueT5vbCkuVmlldy5wcm90b3R5cGUudXBkYXRlQW5pbWF0aW9uc18gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnVwZGF0ZUFuaW1hdGlvbktleV8gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGVBbmltYXRpb25LZXlfKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQW5pbWF0aW9uS2V5XyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZ2V0QW5pbWF0aW5nKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgdmFyIG1vcmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuYW5pbWF0aW9uc18ubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzZXJpZXMgPSB0aGlzLmFuaW1hdGlvbnNfW2ldO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlcmllc0NvbXBsZXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwLCBqaiA9IHNlcmllcy5sZW5ndGg7IGogPCBqajsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IHNlcmllc1tqXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxhcHNlZCA9IG5vdyAtIGFuaW1hdGlvbi5zdGFydDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZnJhY3Rpb24gPSBhbmltYXRpb24uZHVyYXRpb24gPiAwID8gZWxhcHNlZCAvIGFuaW1hdGlvbi5kdXJhdGlvbiA6IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyYWN0aW9uID49IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLmNvbXBsZXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhY3Rpb24gPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllc0NvbXBsZXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9ncmVzcyA9IGFuaW1hdGlvbi5lYXNpbmcoZnJhY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb24uc291cmNlQ2VudGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4MCA9IGFuaW1hdGlvbi5zb3VyY2VDZW50ZXJbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5MCA9IGFuaW1hdGlvbi5zb3VyY2VDZW50ZXJbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4MSA9IGFuaW1hdGlvbi50YXJnZXRDZW50ZXJbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5MSA9IGFuaW1hdGlvbi50YXJnZXRDZW50ZXJbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4ID0geDAgKyBwcm9ncmVzcyAqICh4MSAtIHgwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHkgPSB5MCArIHByb2dyZXNzICogKHkxIC0geTApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldCgoPGFueT5vbCkuVmlld1Byb3BlcnR5LkNFTlRFUiwgW3gsIHldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi5zb3VyY2VSZXNvbHV0aW9uICYmIGFuaW1hdGlvbi50YXJnZXRSZXNvbHV0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNvbHV0aW9uID0gcHJvZ3Jlc3MgPT09IDEgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLnRhcmdldFJlc29sdXRpb24gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLnNvdXJjZVJlc29sdXRpb24gKyBwcm9ncmVzcyAqIChhbmltYXRpb24udGFyZ2V0UmVzb2x1dGlvbiAtIGFuaW1hdGlvbi5zb3VyY2VSZXNvbHV0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi5hbmNob3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0KCg8YW55Pm9sKS5WaWV3UHJvcGVydHkuQ0VOVEVSLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlQ2VudGVyWm9vbShyZXNvbHV0aW9uLCBhbmltYXRpb24uYW5jaG9yKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXQoKDxhbnk+b2wpLlZpZXdQcm9wZXJ0eS5SRVNPTFVUSU9OLCByZXNvbHV0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi5zb3VyY2VSb3RhdGlvbiAhPT0gdW5kZWZpbmVkICYmIGFuaW1hdGlvbi50YXJnZXRSb3RhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb3RhdGlvbiA9IHByb2dyZXNzID09PSAxID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICg8YW55Pm9sKS5tYXRoLm1vZHVsbyhhbmltYXRpb24udGFyZ2V0Um90YXRpb24gKyBNYXRoLlBJLCAyICogTWF0aC5QSSkgLSBNYXRoLlBJIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5zb3VyY2VSb3RhdGlvbiArIHByb2dyZXNzICogKGFuaW1hdGlvbi50YXJnZXRSb3RhdGlvbiAtIGFuaW1hdGlvbi5zb3VyY2VSb3RhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb24uYW5jaG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldCgoPGFueT5vbCkuVmlld1Byb3BlcnR5LkNFTlRFUixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZUNlbnRlclJvdGF0ZShyb3RhdGlvbiwgYW5pbWF0aW9uLmFuY2hvcikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0KCg8YW55Pm9sKS5WaWV3UHJvcGVydHkuUk9UQVRJT04sIHJvdGF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbW9yZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbmltYXRpb24uY29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHNlcmllc0NvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25zX1tpXSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRIaW50KCg8YW55Pm9sKS5WaWV3SGludC5BTklNQVRJTkcsIC0xKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBzZXJpZXNbMF0uY2FsbGJhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwcnVuZSBjb21wbGV0ZWQgc2VyaWVzXHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uc18gPSB0aGlzLmFuaW1hdGlvbnNfLmZpbHRlcihCb29sZWFuKTtcclxuICAgICAgICAgICAgaWYgKG1vcmUgJiYgdGhpcy51cGRhdGVBbmltYXRpb25LZXlfID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQW5pbWF0aW9uS2V5XyA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnVwZGF0ZUFuaW1hdGlvbnNfKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIEdldCBxdWlja1pvb20gem9vbSBpbi9vdXRcclxuICAgICAgICAoPGFueT5vbCkuVmlldy5wcm90b3R5cGUuYW5pbWF0ZSA9IGZ1bmN0aW9uICh2YXJfYXJncykge1xyXG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uQ291bnQgPSBhcmd1bWVudHMubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgY2FsbGJhY2s7XHJcbiAgICAgICAgICAgIGlmIChhbmltYXRpb25Db3VudCA+IDEgJiYgdHlwZW9mIGFyZ3VtZW50c1thbmltYXRpb25Db3VudCAtIDFdID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGFyZ3VtZW50c1thbmltYXRpb25Db3VudCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgLS1hbmltYXRpb25Db3VudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNEZWYoKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgdmlldyBwcm9wZXJ0aWVzIGFyZSBub3QgeWV0IHNldCwgc2hvcnRjdXQgdG8gdGhlIGZpbmFsIHN0YXRlXHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBhcmd1bWVudHNbYW5pbWF0aW9uQ291bnQgLSAxXTtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5jZW50ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldENlbnRlcihzdGF0ZS5jZW50ZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLnpvb20gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Wm9vbShzdGF0ZS56b29tKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5yb3RhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRSb3RhdGlvbihzdGF0ZS5yb3RhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICB2YXIgY2VudGVyID0gdGhpcy5nZXRDZW50ZXIoKS5zbGljZSgpO1xyXG4gICAgICAgICAgICB2YXIgcmVzb2x1dGlvbiA9IHRoaXMuZ2V0UmVzb2x1dGlvbigpO1xyXG4gICAgICAgICAgICB2YXIgcm90YXRpb24gPSB0aGlzLmdldFJvdGF0aW9uKCk7XHJcbiAgICAgICAgICAgIHZhciBzZXJpZXMgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHF1aWNrWm9vbSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFuaW1hdGlvbkNvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gLyoqIEB0eXBlIHtvbHguQW5pbWF0aW9uT3B0aW9uc30gKi8gKGFyZ3VtZW50c1tpXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IC8qKiBAdHlwZSB7b2wuVmlld0FuaW1hdGlvbn0gKi8gKHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGFuY2hvcjogb3B0aW9ucy5hbmNob3IsXHJcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24gIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZHVyYXRpb24gOiAxMDAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogb3B0aW9ucy5lYXNpbmcgfHwgb2wuZWFzaW5nLmluQW5kT3V0XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5jZW50ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25bXCJzb3VyY2VDZW50ZXJcIl0gPSBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uW1widGFyZ2V0Q2VudGVyXCJdID0gb3B0aW9ucy5jZW50ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyID0gYW5pbWF0aW9uW1widGFyZ2V0Q2VudGVyXCJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnpvb20gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbltcInNvdXJjZVJlc29sdXRpb25cIl0gPSByZXNvbHV0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbltcInRhcmdldFJlc29sdXRpb25cIl0gPSB0aGlzLmNvbnN0cmFpblJlc29sdXRpb24oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF4UmVzb2x1dGlvbl8sIG9wdGlvbnMuem9vbSAtIHRoaXMubWluWm9vbV8sIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdXRpb24gPSBhbmltYXRpb25bXCJ0YXJnZXRSZXNvbHV0aW9uXCJdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXF1aWNrWm9vbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWlja1pvb20gPSBNYXRoLmFicyhhbmltYXRpb25bXCJzb3VyY2VSZXNvbHV0aW9uXCJdIC0gYW5pbWF0aW9uW1widGFyZ2V0UmVzb2x1dGlvblwiXSkgKiAyID49IGFuaW1hdGlvbltcInNvdXJjZVJlc29sdXRpb25cIl07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnJlc29sdXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25bXCJzb3VyY2VSZXNvbHV0aW9uXCJdID0gcmVzb2x1dGlvbjtcclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25bXCJ0YXJnZXRSZXNvbHV0aW9uXCJdID0gb3B0aW9ucy5yZXNvbHV0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdXRpb24gPSBhbmltYXRpb25bXCJ0YXJnZXRSZXNvbHV0aW9uXCJdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXF1aWNrWm9vbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWlja1pvb20gPSBNYXRoLmFicyhhbmltYXRpb25bXCJzb3VyY2VSZXNvbHV0aW9uXCJdIC0gYW5pbWF0aW9uW1widGFyZ2V0UmVzb2x1dGlvblwiXSkgKiAyID49IGFuaW1hdGlvbltcInNvdXJjZVJlc29sdXRpb25cIl07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnJvdGF0aW9uICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25bXCJzb3VyY2VSb3RhdGlvblwiXSA9IHJvdGF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9ICg8YW55Pm9sKS5tYXRoLm1vZHVsbyhvcHRpb25zLnJvdGF0aW9uIC0gcm90YXRpb24gKyBNYXRoLlBJLCAyICogTWF0aC5QSSkgLSBNYXRoLlBJO1xyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbltcInRhcmdldFJvdGF0aW9uXCJdID0gcm90YXRpb24gKyBkZWx0YTtcclxuICAgICAgICAgICAgICAgICAgICByb3RhdGlvbiA9IGFuaW1hdGlvbltcInRhcmdldFJvdGF0aW9uXCJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25bXCJjYWxsYmFja1wiXSA9IGNhbGxiYWNrO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGFuaW1hdGlvbiBpcyBhIG5vLW9wXHJcbiAgICAgICAgICAgICAgICBpZiAoKDxhbnk+b2wpLlZpZXcuaXNOb29wQW5pbWF0aW9uKGFuaW1hdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uY29tcGxldGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIHN0aWxsIHB1c2ggaXQgb250byB0aGUgc2VyaWVzIGZvciBjYWxsYmFjayBoYW5kbGluZ1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydCArPSBhbmltYXRpb24uZHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZXJpZXMucHVzaChhbmltYXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uc18ucHVzaChzZXJpZXMpO1xyXG4gICAgICAgICAgICB0aGlzW1wicXVpY2tab29tXCJdID0gcXVpY2tab29tO1xyXG4gICAgICAgICAgICB0aGlzLnNldEhpbnQoKDxhbnk+b2wpLlZpZXdIaW50LkFOSU1BVElORywgMSk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQW5pbWF0aW9uc18oKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBhZGQgcXVpY2tab29tIGludG8gZnJhbWVTdGF0ZVxyXG4gICAgICAgICg8YW55Pm9sKS5QbHVnZ2FibGVNYXAucHJvdG90eXBlLnJlbmRlckZyYW1lXyA9IGZ1bmN0aW9uICh0aW1lKSB7XHJcbiAgICAgICAgICAgIHZhciBpLCBpaSwgdmlld1N0YXRlO1xyXG5cclxuICAgICAgICAgICAgdmFyIHNpemUgPSB0aGlzLmdldFNpemUoKTtcclxuICAgICAgICAgICAgdmFyIHZpZXcgPSB0aGlzLmdldFZpZXcoKTtcclxuICAgICAgICAgICAgdmFyIGV4dGVudCA9IG9sLmV4dGVudC5jcmVhdGVFbXB0eSgpO1xyXG4gICAgICAgICAgICB2YXIgcHJldmlvdXNGcmFtZVN0YXRlID0gdGhpcy5mcmFtZVN0YXRlXztcclxuICAgICAgICAgICAgLyoqIEB0eXBlIHs/b2x4LkZyYW1lU3RhdGV9ICovXHJcbiAgICAgICAgICAgIHZhciBmcmFtZVN0YXRlID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKHNpemUgIT09IHVuZGVmaW5lZCAmJiAoPGFueT5vbCkuc2l6ZS5oYXNBcmVhKHNpemUpICYmIHZpZXcgJiYgdmlldy5pc0RlZigpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmlld0hpbnRzID0gdmlldy5nZXRIaW50cyh0aGlzLmZyYW1lU3RhdGVfID8gdGhpcy5mcmFtZVN0YXRlXy52aWV3SGludHMgOiB1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHF1aWNrWm9vbSA9IHZpZXdbXCJxdWlja1pvb21cIl07XHJcbiAgICAgICAgICAgICAgICB2YXIgbGF5ZXJTdGF0ZXNBcnJheSA9IHRoaXMuZ2V0TGF5ZXJHcm91cCgpLmdldExheWVyU3RhdGVzQXJyYXkoKTtcclxuICAgICAgICAgICAgICAgIHZhciBsYXllclN0YXRlcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgaWkgPSBsYXllclN0YXRlc0FycmF5Lmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXllclN0YXRlc1soPGFueT5vbCkuZ2V0VWlkKGxheWVyU3RhdGVzQXJyYXlbaV0ubGF5ZXIpXSA9IGxheWVyU3RhdGVzQXJyYXlbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2aWV3U3RhdGUgPSB2aWV3LmdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2VudGVyID0gdmlld1N0YXRlLmNlbnRlcjtcclxuICAgICAgICAgICAgICAgIHZhciBwaXhlbFJlc29sdXRpb24gPSB2aWV3U3RhdGUucmVzb2x1dGlvbiAvIHRoaXMucGl4ZWxSYXRpb187XHJcbiAgICAgICAgICAgICAgICBjZW50ZXJbMF0gPSBNYXRoLnJvdW5kKGNlbnRlclswXSAvIHBpeGVsUmVzb2x1dGlvbikgKiBwaXhlbFJlc29sdXRpb247XHJcbiAgICAgICAgICAgICAgICBjZW50ZXJbMV0gPSBNYXRoLnJvdW5kKGNlbnRlclsxXSAvIHBpeGVsUmVzb2x1dGlvbikgKiBwaXhlbFJlc29sdXRpb247XHJcbiAgICAgICAgICAgICAgICBmcmFtZVN0YXRlID0gLyoqIEB0eXBlIHtvbHguRnJhbWVTdGF0ZX0gKi8gKHtcclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlVG9QaXhlbFRyYW5zZm9ybTogdGhpcy5jb29yZGluYXRlVG9QaXhlbFRyYW5zZm9ybV8sXHJcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW50OiBleHRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9jdXM6ICF0aGlzLmZvY3VzXyA/IGNlbnRlciA6IHRoaXMuZm9jdXNfLFxyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLmZyYW1lSW5kZXhfKyssXHJcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJTdGF0ZXM6IGxheWVyU3RhdGVzLFxyXG4gICAgICAgICAgICAgICAgICAgIGxheWVyU3RhdGVzQXJyYXk6IGxheWVyU3RhdGVzQXJyYXksXHJcbiAgICAgICAgICAgICAgICAgICAgbG9nb3M6ICg8YW55Pm9sKS5vYmouYXNzaWduKHt9LCB0aGlzLmxvZ29zXyksXHJcbiAgICAgICAgICAgICAgICAgICAgcGl4ZWxSYXRpbzogdGhpcy5waXhlbFJhdGlvXyxcclxuICAgICAgICAgICAgICAgICAgICBwaXhlbFRvQ29vcmRpbmF0ZVRyYW5zZm9ybTogdGhpcy5waXhlbFRvQ29vcmRpbmF0ZVRyYW5zZm9ybV8sXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zdFJlbmRlckZ1bmN0aW9uczogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogc2l6ZSxcclxuICAgICAgICAgICAgICAgICAgICBza2lwcGVkRmVhdHVyZVVpZHM6IHRoaXMuc2tpcHBlZEZlYXR1cmVVaWRzXyxcclxuICAgICAgICAgICAgICAgICAgICB0aWxlUXVldWU6IHRoaXMudGlsZVF1ZXVlXyxcclxuICAgICAgICAgICAgICAgICAgICB0aW1lOiB0aW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHVzZWRUaWxlczoge30sXHJcbiAgICAgICAgICAgICAgICAgICAgdmlld1N0YXRlOiB2aWV3U3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgdmlld0hpbnRzOiB2aWV3SGludHMsXHJcbiAgICAgICAgICAgICAgICAgICAgcXVpY2tab29tOiBxdWlja1pvb20sXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc29sdXRpb246IHZpZXdTdGF0ZS5yZXNvbHV0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIHdhbnRlZFRpbGVzOiB7fVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChmcmFtZVN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICBmcmFtZVN0YXRlLmV4dGVudCA9ICg8YW55Pm9sKS5leHRlbnQuZ2V0Rm9yVmlld0FuZFNpemUodmlld1N0YXRlLmNlbnRlcixcclxuICAgICAgICAgICAgICAgICAgICB2aWV3U3RhdGUucmVzb2x1dGlvbiwgdmlld1N0YXRlLnJvdGF0aW9uLCBmcmFtZVN0YXRlLnNpemUsIGV4dGVudCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZnJhbWVTdGF0ZV8gPSBmcmFtZVN0YXRlO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyXy5yZW5kZXJGcmFtZShmcmFtZVN0YXRlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmcmFtZVN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZnJhbWVTdGF0ZS5hbmltYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zdFJlbmRlckZ1bmN0aW9uc18sIGZyYW1lU3RhdGUucG9zdFJlbmRlckZ1bmN0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzRnJhbWVTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb3ZlU3RhcnQgPSAhdGhpcy5wcmV2aW91c0V4dGVudF8gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKCFvbC5leHRlbnQuaXNFbXB0eSh0aGlzLnByZXZpb3VzRXh0ZW50XykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFvbC5leHRlbnQuZXF1YWxzKGZyYW1lU3RhdGUuZXh0ZW50LCB0aGlzLnByZXZpb3VzRXh0ZW50XykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtb3ZlU3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IG9sLk1hcEV2ZW50KCg8YW55Pm9sKS5NYXBFdmVudFR5cGUuTU9WRVNUQVJULCB0aGlzLCBwcmV2aW91c0ZyYW1lU3RhdGUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2aW91c0V4dGVudF8gPSAoPGFueT5vbCkuZXh0ZW50LmNyZWF0ZU9yVXBkYXRlRW1wdHkodGhpcy5wcmV2aW91c0V4dGVudF8pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgaWRsZSA9IHRoaXMucHJldmlvdXNFeHRlbnRfICYmXHJcbiAgICAgICAgICAgICAgICAgICAgIWZyYW1lU3RhdGUudmlld0hpbnRzWyg8YW55Pm9sKS5WaWV3SGludC5BTklNQVRJTkddICYmXHJcbiAgICAgICAgICAgICAgICAgICAgIWZyYW1lU3RhdGUudmlld0hpbnRzWyg8YW55Pm9sKS5WaWV3SGludC5JTlRFUkFDVElOR10gJiZcclxuICAgICAgICAgICAgICAgICAgICAhb2wuZXh0ZW50LmVxdWFscyhmcmFtZVN0YXRlLmV4dGVudCwgdGhpcy5wcmV2aW91c0V4dGVudF8pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpZGxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgb2wuTWFwRXZlbnQoKDxhbnk+b2wpLk1hcEV2ZW50VHlwZS5NT1ZFRU5ELCB0aGlzLCBmcmFtZVN0YXRlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgKDxhbnk+b2wpLmV4dGVudC5jbG9uZShmcmFtZVN0YXRlLmV4dGVudCwgdGhpcy5wcmV2aW91c0V4dGVudF8pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXHJcbiAgICAgICAgICAgICAgICBuZXcgb2wuTWFwRXZlbnQoKDxhbnk+b2wpLk1hcEV2ZW50VHlwZS5QT1NUUkVOREVSLCB0aGlzLCBmcmFtZVN0YXRlKSk7XHJcblxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMuaGFuZGxlUG9zdFJlbmRlci5iaW5kKHRoaXMpLCAwKTtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gcmVmaW5lIGRyYXdJbWFnZSBwZXJmb3JtYW5jZVxyXG4gICAgICAgICg8YW55Pm9sKS5yZW5kZXJlci5jYW52YXMuVGlsZUxheWVyLnByb3RvdHlwZS5kcmF3VGlsZUltYWdlID0gZnVuY3Rpb24gKHRpbGUsIGZyYW1lU3RhdGUsIGxheWVyU3RhdGUsIHgsIHksIHcsIGgsIGd1dHRlciwgdHJhbnNpdGlvbikge1xyXG4gICAgICAgICAgICB2YXIgaW1hZ2UgPSB0aWxlLmdldEltYWdlKHRoaXMuZ2V0TGF5ZXIoKSk7XHJcbiAgICAgICAgICAgIGlmICghaW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdWlkID0gKDxhbnk+b2wpLmdldFVpZCh0aGlzKTtcclxuICAgICAgICAgICAgdmFyIGFscGhhID0gdHJhbnNpdGlvbiA/IHRpbGUuZ2V0QWxwaGEodWlkLCBmcmFtZVN0YXRlLnRpbWUpIDogMTtcclxuICAgICAgICAgICAgaWYgKGFscGhhID09PSAxICYmICF0aGlzLmdldExheWVyKCkuZ2V0U291cmNlKCkuZ2V0T3BhcXVlKGZyYW1lU3RhdGUudmlld1N0YXRlLnByb2plY3Rpb24pKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KHgsIHksIHcsIGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBhbHBoYUNoYW5nZWQgPSBhbHBoYSAhPT0gdGhpcy5jb250ZXh0Lmdsb2JhbEFscGhhO1xyXG4gICAgICAgICAgICBpZiAoYWxwaGFDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuc2F2ZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0Lmdsb2JhbEFscGhhID0gYWxwaGE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgZ3V0dGVyLCBndXR0ZXIsXHJcbiAgICAgICAgICAgICAgICBpbWFnZS53aWR0aCAtIDIgKiBndXR0ZXIsIGltYWdlLmhlaWdodCAtIDIgKiBndXR0ZXIsIHgsIHksIHcsIGgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGFscGhhQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LnJlc3RvcmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYWxwaGEgIT09IDEpIHtcclxuICAgICAgICAgICAgICAgIGZyYW1lU3RhdGUuYW5pbWF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHJhbnNpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGlsZS5lbmRUcmFuc2l0aW9uKHVpZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3JlZmluZSBkcmF3aW5nLCBhbmQgcmVtb3ZlIGluc3RydWN0aW9ucyBhZnRlciB1c2luZ1xyXG4gICAgICAgICg8YW55Pm9sKS5yZW5kZXIuY2FudmFzLlJlcGxheS5wcm90b3R5cGUucmVwbGF5XyA9IGZ1bmN0aW9uIChcclxuICAgICAgICAgICAgY29udGV4dCwgdHJhbnNmb3JtLCBza2lwcGVkRmVhdHVyZXNIYXNoLFxyXG4gICAgICAgICAgICBpbnN0cnVjdGlvbnMsIGZlYXR1cmVDYWxsYmFjaywgb3B0X2hpdEV4dGVudCkge1xyXG4gICAgICAgICAgICAvKiogQHR5cGUge0FycmF5LjxudW1iZXI+fSAqL1xyXG4gICAgICAgICAgICB2YXIgcGl4ZWxDb29yZGluYXRlcztcclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5zdHJ1Y3Rpb25zICE9IGluc3RydWN0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgLy8gaGl0IGluc3RydWN0aW9uc1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGl4ZWxDb29yZGluYXRlc18gJiYgKDxhbnk+b2wpLmFycmF5LmVxdWFscyh0cmFuc2Zvcm0sIHRoaXMucmVuZGVyZWRUcmFuc2Zvcm1fKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBpeGVsQ29vcmRpbmF0ZXMgPSB0aGlzLnBpeGVsQ29vcmRpbmF0ZXNfO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwaXhlbENvb3JkaW5hdGVzID0gKDxhbnk+b2wpLmdlb20uZmxhdC50cmFuc2Zvcm0udHJhbnNmb3JtMkQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRpbmF0ZXMsIDAsIHRoaXMuY29vcmRpbmF0ZXMubGVuZ3RoLCAyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm0sIFtdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGluc3RydWN0aW9uc1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGl4ZWxDb29yZGluYXRlc18gJiYgKDxhbnk+b2wpLmFycmF5LmVxdWFscyh0cmFuc2Zvcm0sIHRoaXMucmVuZGVyZWRUcmFuc2Zvcm1fKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBpeGVsQ29vcmRpbmF0ZXMgPSB0aGlzLnBpeGVsQ29vcmRpbmF0ZXNfO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucGl4ZWxDb29yZGluYXRlc18pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5waXhlbENvb3JkaW5hdGVzXyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBwaXhlbENvb3JkaW5hdGVzID0gKDxhbnk+b2wpLmdlb20uZmxhdC50cmFuc2Zvcm0udHJhbnNmb3JtMkQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRpbmF0ZXMsIDAsIHRoaXMuY29vcmRpbmF0ZXMubGVuZ3RoLCAyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm0sIHRoaXMucGl4ZWxDb29yZGluYXRlc18pO1xyXG4gICAgICAgICAgICAgICAgICAgICg8YW55Pm9sKS50cmFuc2Zvcm0uc2V0RnJvbUFycmF5KHRoaXMucmVuZGVyZWRUcmFuc2Zvcm1fLCB0cmFuc2Zvcm0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLndlYmdsSW5kZXhPYmopIHtcclxuICAgICAgICAgICAgICAgIHZhciB3ZWJnbENvbnRleHQ9KDxhbnk+b2wpLndlYmdsQ29udGV4dDtcclxuICAgICAgICAgICAgICAgIC8vIGxldCB3ZWJnbENvbnRleHQ9dGhpcy53ZWJnbENvbnRleHQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgd2lkdGggPSB3ZWJnbENvbnRleHQuY2FudmFzLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgbGV0IGhlaWdodCA9IHdlYmdsQ29udGV4dC5jYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy53ZWJnbERyYXdUeXBlID09PSAncG9seWdvblJlcGxheScpIHsgXHJcbiAgICAgICAgICAgICAgICAgICAgZHJhd1BvbHlnb25HbCh3ZWJnbENvbnRleHQuZ2wsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViZ2xJbmRleE9iajogdGhpcy53ZWJnbEluZGV4T2JqLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViZ2xQcm9ncmFtOiB3ZWJnbENvbnRleHRbJ3BvbHlQcm9ncmFtJ10gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKHdlYmdsQ29udGV4dC5jYW52YXMsIDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy53ZWJnbERyYXdUeXBlID09PSAnbGluZVN0cmluZ1JlcGxheScpIHtcclxuICAgICAgICAgICAgICAgICAgICBkcmF3TGluZVN0cmluZyh3ZWJnbENvbnRleHQuZ2wsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViZ2xMaW5lSW5kZXg6IHRoaXMud2ViZ2xJbmRleE9iaixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlYmdsUHJvZ3JhbTogd2ViZ2xDb250ZXh0WydsaW5lUHJvZ3JhbSddXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKHdlYmdsQ29udGV4dC5jYW52YXMsIDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2tpcEZlYXR1cmVzID0gISg8YW55Pm9sKS5vYmouaXNFbXB0eShza2lwcGVkRmVhdHVyZXNIYXNoKTtcclxuICAgICAgICAgICAgICAgIHZhciBpID0gMDsgLy8gaW5zdHJ1Y3Rpb24gaW5kZXhcclxuICAgICAgICAgICAgICAgIHZhciBpaSA9IGluc3RydWN0aW9ucy5sZW5ndGg7IC8vIGVuZCBvZiBpbnN0cnVjdGlvbnNcclxuICAgICAgICAgICAgICAgIHZhciBkID0gMDsgLy8gZGF0YSBpbmRleFxyXG4gICAgICAgICAgICAgICAgdmFyIGRkOyAvLyBlbmQgb2YgcGVyLWluc3RydWN0aW9uIGRhdGFcclxuICAgICAgICAgICAgICAgIHZhciBhbmNob3JYLCBhbmNob3JZLCBwcmV2WCwgcHJldlksIHJvdW5kWCwgcm91bmRZLCBkZWNsdXR0ZXJHcm91cCwgaW1hZ2U7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGVuZGluZ0ZpbGwgPSAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIHBlbmRpbmdTdHJva2UgPSAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxhc3RGaWxsSW5zdHJ1Y3Rpb24gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxhc3RTdHJva2VJbnN0cnVjdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29vcmRpbmF0ZUNhY2hlID0gdGhpcy5jb29yZGluYXRlQ2FjaGVfO1xyXG4gICAgICAgICAgICAgICAgdmFyIHZpZXdSb3RhdGlvbiA9IHRoaXMudmlld1JvdGF0aW9uXztcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSAvKiogQHR5cGUge29seC5yZW5kZXIuU3RhdGV9ICovICh7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dDogY29udGV4dCxcclxuICAgICAgICAgICAgICAgICAgICBwaXhlbFJhdGlvOiB0aGlzLnBpeGVsUmF0aW8sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x1dGlvbjogdGhpcy5yZXNvbHV0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiB2aWV3Um90YXRpb25cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFdoZW4gdGhlIGJhdGNoIHNpemUgZ2V0cyB0b28gYmlnLCBwZXJmb3JtYW5jZSBkZWNyZWFzZXMuIDIwMCBpcyBhIGdvb2RcclxuICAgICAgICAgICAgICAgIC8vIGJhbGFuY2UgYmV0d2VlbiBiYXRjaCBzaXplIGFuZCBudW1iZXIgb2YgZmlsbC9zdHJva2UgaW5zdHJ1Y3Rpb25zLlxyXG4gICAgICAgICAgICAgICAgdmFyIGJhdGNoU2l6ZSA9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnN0cnVjdGlvbnMgIT0gaW5zdHJ1Y3Rpb25zIHx8IHRoaXMub3ZlcmxhcHMgPyAwIDogMjAwO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoaSA8IGlpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RydWN0aW9uID0gaW5zdHJ1Y3Rpb25zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gLyoqIEB0eXBlIHtvbC5yZW5kZXIuY2FudmFzLkluc3RydWN0aW9ufSAqLyAoaW5zdHJ1Y3Rpb25bMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUge29sLkZlYXR1cmV8b2wucmVuZGVyLkZlYXR1cmV9ICovIGZlYXR1cmUsIHgsIHk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgKDxhbnk+b2wpLnJlbmRlci5jYW52YXMuSW5zdHJ1Y3Rpb24uQkVHSU5fR0VPTUVUUlk6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlID0gLyoqIEB0eXBlIHtvbC5GZWF0dXJlfG9sLnJlbmRlci5GZWF0dXJlfSAqLyAoaW5zdHJ1Y3Rpb25bMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChza2lwRmVhdHVyZXMgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwcGVkRmVhdHVyZXNIYXNoWyg8YW55Pm9sKS5nZXRVaWQoZmVhdHVyZSkudG9TdHJpbmcoKV0pIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWZlYXR1cmUuZ2V0R2VvbWV0cnkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzJdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0X2hpdEV4dGVudCAhPT0gdW5kZWZpbmVkICYmICFvbC5leHRlbnQuaW50ZXJzZWN0cyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRfaGl0RXh0ZW50LCBmZWF0dXJlLmdldEdlb21ldHJ5KCkuZ2V0RXh0ZW50KCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMl0pICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgKDxhbnk+b2wpLnJlbmRlci5jYW52YXMuSW5zdHJ1Y3Rpb24uQkVHSU5fUEFUSDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nRmlsbCA+IGJhdGNoU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsbF8oY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZ0ZpbGwgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlbmRpbmdTdHJva2UgPiBiYXRjaFNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmdTdHJva2UgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwZW5kaW5nRmlsbCAmJiAhcGVuZGluZ1N0cm9rZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldlggPSBwcmV2WSA9IE5hTjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICg8YW55Pm9sKS5yZW5kZXIuY2FudmFzLkluc3RydWN0aW9uLkNJUkNMRTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4MSA9IHBpeGVsQ29vcmRpbmF0ZXNbZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeTEgPSBwaXhlbENvb3JkaW5hdGVzW2QgKyAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4MiA9IHBpeGVsQ29vcmRpbmF0ZXNbZCArIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHkyID0gcGl4ZWxDb29yZGluYXRlc1tkICsgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHggPSB4MiAtIHgxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGR5ID0geTIgLSB5MTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHgxICsgciwgeTEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5hcmMoeDEsIHkxLCByLCAwLCAyICogTWF0aC5QSSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAoPGFueT5vbCkucmVuZGVyLmNhbnZhcy5JbnN0cnVjdGlvbi5DTE9TRV9QQVRIOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICg8YW55Pm9sKS5yZW5kZXIuY2FudmFzLkluc3RydWN0aW9uLkNVU1RPTTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRkID0gaW5zdHJ1Y3Rpb25bMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2VvbWV0cnkgPSAvKiogQHR5cGUge29sLmdlb20uU2ltcGxlR2VvbWV0cnl9ICovIChpbnN0cnVjdGlvblszXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVuZGVyZXIgPSBpbnN0cnVjdGlvbls0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmbiA9IGluc3RydWN0aW9uLmxlbmd0aCA9PSA2ID8gaW5zdHJ1Y3Rpb25bNV0gOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZVtcImdlb21ldHJ5XCJdID0gZ2VvbWV0cnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZVtcImZlYXR1cmVcIl0gPSBmZWF0dXJlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoaSBpbiBjb29yZGluYXRlQ2FjaGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZUNhY2hlW2ldID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29vcmRzID0gY29vcmRpbmF0ZUNhY2hlW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm4ocGl4ZWxDb29yZGluYXRlcywgZCwgZGQsIDIsIGNvb3Jkcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb3Jkc1swXSA9IHBpeGVsQ29vcmRpbmF0ZXNbZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRzWzFdID0gcGl4ZWxDb29yZGluYXRlc1tkICsgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRzLmxlbmd0aCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJlcihjb29yZHMsIHN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICg8YW55Pm9sKS5yZW5kZXIuY2FudmFzLkluc3RydWN0aW9uLkRSQVdfSU1BR0U6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvblsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2UgPSAgLyoqIEB0eXBlIHtIVE1MQ2FudmFzRWxlbWVudHxIVE1MVmlkZW9FbGVtZW50fEltYWdlfSAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpbnN0cnVjdGlvblszXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1haW5pbmcgYXJndW1lbnRzIGluIERSQVdfSU1BR0UgYXJlIGluIGFscGhhYmV0aWNhbCBvcmRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yWCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bNF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yWSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bNV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjbHV0dGVyR3JvdXAgPSBmZWF0dXJlQ2FsbGJhY2sgPyBudWxsIDogLyoqIEB0eXBlIHtvbC5EZWNsdXR0ZXJHcm91cH0gKi8gKGluc3RydWN0aW9uWzZdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzddKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcGFjaXR5ID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvbls4XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ2luWCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bOV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpblkgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzEwXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm90YXRlV2l0aFZpZXcgPSAvKiogQHR5cGUge2Jvb2xlYW59ICovIChpbnN0cnVjdGlvblsxMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvdGF0aW9uID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvblsxMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNjYWxlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvblsxM10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNuYXBUb1BpeGVsID0gLyoqIEB0eXBlIHtib29sZWFufSAqLyAoaW5zdHJ1Y3Rpb25bMTRdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMTVdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFkZGluZywgYmFja2dyb3VuZEZpbGwsIGJhY2tncm91bmRTdHJva2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdHJ1Y3Rpb24ubGVuZ3RoID4gMTYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nID0gLyoqIEB0eXBlIHtBcnJheS48bnVtYmVyPn0gKi8gKGluc3RydWN0aW9uWzE2XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZEZpbGwgPSAvKiogQHR5cGUge2Jvb2xlYW59ICovIChpbnN0cnVjdGlvblsxN10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRTdHJva2UgPSAvKiogQHR5cGUge2Jvb2xlYW59ICovIChpbnN0cnVjdGlvblsxOF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nID0gKDxhbnk+b2wpLnJlbmRlci5jYW52YXMuZGVmYXVsdFBhZGRpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZEZpbGwgPSBiYWNrZ3JvdW5kU3Ryb2tlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvdGF0ZVdpdGhWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRpb24gKz0gdmlld1JvdGF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IGQgPCBkZDsgZCArPSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYXlJbWFnZV8oY29udGV4dCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGl4ZWxDb29yZGluYXRlc1tkXSwgcGl4ZWxDb29yZGluYXRlc1tkICsgMV0sIGltYWdlLCBhbmNob3JYLCBhbmNob3JZLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNsdXR0ZXJHcm91cCwgaGVpZ2h0LCBvcGFjaXR5LCBvcmlnaW5YLCBvcmlnaW5ZLCByb3RhdGlvbiwgc2NhbGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNuYXBUb1BpeGVsLCB3aWR0aCwgcGFkZGluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZEZpbGwgPyAvKiogQHR5cGUge0FycmF5LjwqPn0gKi8gKGxhc3RGaWxsSW5zdHJ1Y3Rpb24pIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZFN0cm9rZSA/IC8qKiBAdHlwZSB7QXJyYXkuPCo+fSAqLyAobGFzdFN0cm9rZUluc3RydWN0aW9uKSA6IG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJEZWNsdXR0ZXJfKGRlY2x1dHRlckdyb3VwLCBmZWF0dXJlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICg8YW55Pm9sKS5yZW5kZXIuY2FudmFzLkluc3RydWN0aW9uLkRSQVdfQ0hBUlM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmVnaW4gPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmQgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzJdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiYXNlbGluZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bM10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjbHV0dGVyR3JvdXAgPSBmZWF0dXJlQ2FsbGJhY2sgPyBudWxsIDogLyoqIEB0eXBlIHtvbC5EZWNsdXR0ZXJHcm91cH0gKi8gKGluc3RydWN0aW9uWzRdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdmVyZmxvdyA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bNV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGxLZXkgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKGluc3RydWN0aW9uWzZdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXhBbmdsZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bN10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lYXN1cmUgPSAvKiogQHR5cGUge2Z1bmN0aW9uKHN0cmluZyk6bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bOF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9mZnNldFkgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdHJva2VLZXkgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKGluc3RydWN0aW9uWzEwXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3Ryb2tlV2lkdGggPSAgLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvblsxMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKGluc3RydWN0aW9uWzEyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dEtleSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoaW5zdHJ1Y3Rpb25bMTNdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0U2NhbGUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzE0XSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhdGhMZW5ndGggPSAoPGFueT5vbCkuZ2VvbS5mbGF0Lmxlbmd0aC5saW5lU3RyaW5nKHBpeGVsQ29vcmRpbmF0ZXMsIGJlZ2luLCBlbmQsIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRleHRMZW5ndGggPSBtZWFzdXJlKHRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG92ZXJmbG93IHx8IHRleHRMZW5ndGggPD0gcGF0aExlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0QWxpZ24gPSAvKiogQHR5cGUge29sLnJlbmRlci5jYW52YXMuVGV4dFJlcGxheX0gKi8gKHRoaXMpLnRleHRTdGF0ZXNbdGV4dEtleV0udGV4dEFsaWduO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydE0gPSAocGF0aExlbmd0aCAtIHRleHRMZW5ndGgpICogKDxhbnk+b2wpLnJlbmRlci5yZXBsYXkuVEVYVF9BTElHTlt0ZXh0QWxpZ25dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0cyA9ICg8YW55Pm9sKS5nZW9tLmZsYXQudGV4dHBhdGgubGluZVN0cmluZyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGl4ZWxDb29yZGluYXRlcywgYmVnaW4sIGVuZCwgMiwgdGV4dCwgbWVhc3VyZSwgc3RhcnRNLCBtYXhBbmdsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjLCBjYywgY2hhcnMsIGxhYmVsLCBwYXJ0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3Ryb2tlS2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGMgPSAwLCBjYyA9IHBhcnRzLmxlbmd0aDsgYyA8IGNjOyArK2MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0ID0gcGFydHNbY107IC8vIHgsIHksIGFuY2hvclgsIHJvdGF0aW9uLCBjaHVua1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJzID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXJ0WzRdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9IC8qKiBAdHlwZSB7b2wucmVuZGVyLmNhbnZhcy5UZXh0UmVwbGF5fSAqLyAodGhpcykuZ2V0SW1hZ2UoY2hhcnMsIHRleHRLZXksICcnLCBzdHJva2VLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvclggPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHBhcnRbMl0pICsgc3Ryb2tlV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yWSA9IGJhc2VsaW5lICogbGFiZWwuaGVpZ2h0ICsgKDAuNSAtIGJhc2VsaW5lKSAqIDIgKiBzdHJva2VXaWR0aCAtIG9mZnNldFk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYXlJbWFnZV8oY29udGV4dCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyhwYXJ0WzBdKSwgLyoqIEB0eXBlIHtudW1iZXJ9ICovKHBhcnRbMV0pLCBsYWJlbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yWCwgYW5jaG9yWSwgZGVjbHV0dGVyR3JvdXAsIGxhYmVsLmhlaWdodCwgMSwgMCwgMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyhwYXJ0WzNdKSwgdGV4dFNjYWxlLCBmYWxzZSwgbGFiZWwud2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICg8YW55Pm9sLnJlbmRlcikuY2FudmFzLmRlZmF1bHRQYWRkaW5nLCBudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsbEtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjID0gMCwgY2MgPSBwYXJ0cy5sZW5ndGg7IGMgPCBjYzsgKytjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydCA9IHBhcnRzW2NdOyAvLyB4LCB5LCBhbmNob3JYLCByb3RhdGlvbiwgY2h1bmtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFycyA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGFydFs0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSAvKiogQHR5cGUge29sLnJlbmRlci5jYW52YXMuVGV4dFJlcGxheX0gKi8gKHRoaXMpLmdldEltYWdlKGNoYXJzLCB0ZXh0S2V5LCBmaWxsS2V5LCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yWCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocGFydFsyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yWSA9IGJhc2VsaW5lICogbGFiZWwuaGVpZ2h0IC0gb2Zmc2V0WTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxheUltYWdlXyhjb250ZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovKHBhcnRbMF0pLCAvKiogQHR5cGUge251bWJlcn0gKi8ocGFydFsxXSksIGxhYmVsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JYLCBhbmNob3JZLCBkZWNsdXR0ZXJHcm91cCwgbGFiZWwuaGVpZ2h0LCAxLCAwLCAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovKHBhcnRbM10pLCB0ZXh0U2NhbGUsIGZhbHNlLCBsYWJlbC53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDxhbnk+b2wpLnJlbmRlci5jYW52YXMuZGVmYXVsdFBhZGRpbmcsIG51bGwsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJEZWNsdXR0ZXJfKGRlY2x1dHRlckdyb3VwLCBmZWF0dXJlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICg8YW55Pm9sKS5yZW5kZXIuY2FudmFzLkluc3RydWN0aW9uLkVORF9HRU9NRVRSWTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlQ2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUgPSAvKiogQHR5cGUge29sLkZlYXR1cmV8b2wucmVuZGVyLkZlYXR1cmV9ICovIChpbnN0cnVjdGlvblsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGZlYXR1cmVDYWxsYmFjayhmZWF0dXJlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgKDxhbnk+b2wpLnJlbmRlci5jYW52YXMuSW5zdHJ1Y3Rpb24uRklMTDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiYXRjaFNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nRmlsbCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbGxfKGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgKDxhbnk+b2wpLnJlbmRlci5jYW52YXMuSW5zdHJ1Y3Rpb24uTU9WRV9UT19MSU5FX1RPOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGQgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzJdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSBwaXhlbENvb3JkaW5hdGVzW2RdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IHBpeGVsQ29vcmRpbmF0ZXNbZCArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91bmRYID0gKHggKyAwLjUpIHwgMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdW5kWSA9ICh5ICsgMC41KSB8IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocm91bmRYICE9PSBwcmV2WCB8fCByb3VuZFkgIT09IHByZXZZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oeCwgeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldlggPSByb3VuZFg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldlkgPSByb3VuZFk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGQgKz0gMjsgZCA8IGRkOyBkICs9IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gcGl4ZWxDb29yZGluYXRlc1tkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gcGl4ZWxDb29yZGluYXRlc1tkICsgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91bmRYID0gKHggKyAwLjUpIHwgMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3VuZFkgPSAoeSArIDAuNSkgfCAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkID09IGRkIC0gMiB8fCByb3VuZFggIT09IHByZXZYIHx8IHJvdW5kWSAhPT0gcHJldlkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oeCwgeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZYID0gcm91bmRYO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2WSA9IHJvdW5kWTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAoPGFueT5vbCkucmVuZGVyLmNhbnZhcy5JbnN0cnVjdGlvbi5TRVRfRklMTF9TVFlMRTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RGaWxsSW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsbE9yaWdpbl8gPSBpbnN0cnVjdGlvblsyXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVuZGluZ0ZpbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbGxfKGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmdGaWxsID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVuZGluZ1N0cm9rZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nU3Ryb2tlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAvKiogQHR5cGUge29sLkNvbG9yTGlrZX0gKi8gKGluc3RydWN0aW9uWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICg8YW55Pm9sKS5yZW5kZXIuY2FudmFzLkluc3RydWN0aW9uLlNFVF9TVFJPS0VfU1RZTEU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0U3Ryb2tlSW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nU3Ryb2tlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nU3Ryb2tlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3Ryb2tlU3R5bGVfKGNvbnRleHQsIC8qKiBAdHlwZSB7QXJyYXkuPCo+fSAqLyhpbnN0cnVjdGlvbikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgKDxhbnk+b2wpLnJlbmRlci5jYW52YXMuSW5zdHJ1Y3Rpb24uU1RST0tFOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJhdGNoU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmdTdHJva2UrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKytpOyAvLyBjb25zdW1lIHRoZSBpbnN0cnVjdGlvbiBhbnl3YXksIHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3BcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nRmlsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsbF8oY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocGVuZGluZ1N0cm9rZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgKDxhbnk+b2wpLnJlbmRlcmVyLmNhbnZhcy5WZWN0b3JUaWxlTGF5ZXIucHJvdG90eXBlLmZvckVhY2hGZWF0dXJlQXRDb29yZGluYXRlID0gZnVuY3Rpb24gKGNvb3JkaW5hdGUsIGZyYW1lU3RhdGUsIGhpdFRvbGVyYW5jZSwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcclxuICAgICAgICAgICAgdmFyIHJlc29sdXRpb24gPSBmcmFtZVN0YXRlLnZpZXdTdGF0ZS5yZXNvbHV0aW9uO1xyXG4gICAgICAgICAgICB2YXIgcm90YXRpb24gPSBmcmFtZVN0YXRlLnZpZXdTdGF0ZS5yb3RhdGlvbjtcclxuICAgICAgICAgICAgaGl0VG9sZXJhbmNlID0gaGl0VG9sZXJhbmNlID09IHVuZGVmaW5lZCA/IDAgOiBoaXRUb2xlcmFuY2U7XHJcbiAgICAgICAgICAgIHZhciBsYXllciA9IHRoaXMuZ2V0TGF5ZXIoKTtcclxuICAgICAgICAgICAgLyoqIEB0eXBlIHtPYmplY3QuPHN0cmluZywgYm9vbGVhbj59ICovXHJcbiAgICAgICAgICAgIHZhciBmZWF0dXJlcyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgLyoqIEB0eXBlIHtBcnJheS48b2wuVmVjdG9ySW1hZ2VUaWxlPn0gKi9cclxuICAgICAgICAgICAgdmFyIHJlbmRlcmVkVGlsZXMgPSB0aGlzLnJlbmRlcmVkVGlsZXM7XHJcblxyXG4gICAgICAgICAgICB2YXIgc291cmNlID0gLyoqIEB0eXBlIHtvbC5zb3VyY2UuVmVjdG9yVGlsZX0gKi8gKGxheWVyLmdldFNvdXJjZSgpKTtcclxuICAgICAgICAgICAgdmFyIHRpbGVHcmlkID0gc291cmNlLmdldFRpbGVHcmlkRm9yUHJvamVjdGlvbihmcmFtZVN0YXRlLnZpZXdTdGF0ZS5wcm9qZWN0aW9uKTtcclxuICAgICAgICAgICAgdmFyIGJ1ZmZlcmVkRXh0ZW50LCBmb3VuZDtcclxuICAgICAgICAgICAgdmFyIGksIGlpLCByZXBsYXlHcm91cDtcclxuICAgICAgICAgICAgdmFyIHRpbGUsIHRpbGVDb29yZCwgdGlsZUV4dGVudDtcclxuICAgICAgICAgICAgZm9yIChpID0gMCwgaWkgPSByZW5kZXJlZFRpbGVzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHRpbGUgPSByZW5kZXJlZFRpbGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgdGlsZUNvb3JkID0gdGlsZS53cmFwcGVkVGlsZUNvb3JkO1xyXG4gICAgICAgICAgICAgICAgdGlsZUV4dGVudCA9IHRpbGVHcmlkLmdldFRpbGVDb29yZEV4dGVudCh0aWxlQ29vcmQsIHRoaXMudG1wRXh0ZW50KTtcclxuICAgICAgICAgICAgICAgIGJ1ZmZlcmVkRXh0ZW50ID0gb2wuZXh0ZW50LmJ1ZmZlcih0aWxlRXh0ZW50LCBoaXRUb2xlcmFuY2UgKiByZXNvbHV0aW9uLCBidWZmZXJlZEV4dGVudCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW9sLmV4dGVudC5jb250YWluc0Nvb3JkaW5hdGUoYnVmZmVyZWRFeHRlbnQsIGNvb3JkaW5hdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB0ID0gMCwgdHQgPSB0aWxlLnRpbGVLZXlzLmxlbmd0aDsgdCA8IHR0OyArK3QpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc291cmNlVGlsZSA9IHRpbGUuZ2V0VGlsZSh0aWxlLnRpbGVLZXlzW3RdKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlVGlsZS5nZXRTdGF0ZSgpID09ICg8YW55Pm9sKS5UaWxlU3RhdGUuRVJST1IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJlcGxheUdyb3VwID0gc291cmNlVGlsZS5nZXRSZXBsYXlHcm91cChsYXllciwgdGlsZUNvb3JkLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gZm91bmQgfHwgcmVwbGF5R3JvdXAuZm9yRWFjaEZlYXR1cmVBdENvb3JkaW5hdGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGUsIHJlc29sdXRpb24sIHJvdGF0aW9uLCBoaXRUb2xlcmFuY2UsIHt9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtvbC5GZWF0dXJlfG9sLnJlbmRlci5GZWF0dXJlfSBmZWF0dXJlIEZlYXR1cmUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm4gez99IENhbGxiYWNrIHJlc3VsdC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChmZWF0dXJlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gKDxhbnk+b2wpLmdldFVpZChmZWF0dXJlKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIGZlYXR1cmVzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzW2tleV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIGZlYXR1cmUsIGxheWVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZvdW5kO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgVmVjdG9yVGlsZUxheWVyIH0gZnJvbSBcIi4vbGF5ZXIvdmVjdG9yVGlsZUxheWVyXCI7XHJcbmltcG9ydCB7IFZlY3RvclRpbGVMYXllclRocmVhZE1vZGUgfSBmcm9tIFwiLi93b3JrZXIvdmVjdG9yVGlsZUxheWVyVGhyZWFkTW9kZVwiO1xyXG5pbXBvcnQgeyB3ZWJnbENhY3VsYXRlIH0gZnJvbSBcIi4vd29ya2VyL3dlYmdsXCI7XHJcblxyXG4oPGFueT5vbCkubWFwc3VpdGUgPSB7fTtcclxuXHJcbig8YW55Pm9sKS5tYXBzdWl0ZVtcIlZlY3RvclRpbGVMYXllclwiXSA9IFZlY3RvclRpbGVMYXllcjtcclxuKDxhbnk+b2wpLm1hcHN1aXRlW1wiVmVjdG9yVGlsZUxheWVyVGhyZWFkTW9kZVwiXSA9IFZlY3RvclRpbGVMYXllclRocmVhZE1vZGU7XHJcblxyXG4oPGFueT53aW5kb3cpW1wib2xcIl0gPSBvbDtcclxuKDxhbnk+d2luZG93KVtcIndlYmdsQ2FjdWxhdGVcIl0gPSB3ZWJnbENhY3VsYXRlOyIsImltcG9ydCB7IFJlcGxheUdyb3VwQ3VzdG9tIH0gZnJvbSBcIi4vcmVwbGF5R3JvdXBDdXN0b21cIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgR2VvVmVjdG9yVGlsZUxheWVyUmVuZGVyIGV4dGVuZHMgKCg8YW55Pm9sKS5yZW5kZXJlci5jYW52YXMuVmVjdG9yVGlsZUxheWVyIGFzIHsgbmV3KHA6IG9sLmxheWVyLlZlY3RvclRpbGUpOiBhbnk7IH0pIHtcclxuICAgIGNvbnN0cnVjdG9yKGxheWVyOiBvbC5sYXllci5WZWN0b3JUaWxlKSB7XHJcbiAgICAgICAgc3VwZXIobGF5ZXIpO1xyXG4gICAgICAgIHRoaXMuVkVDVE9SX1JFUExBWVMgPSB0aGlzLlZFQ1RPUl9SRVBMQVlTX0NVU1RPTTtcclxuICAgICAgICB0aGlzLnByZXBhcmVGcmFtZSA9IHRoaXMucHJlcGFyZUZyYW1lQ3VzdG9tO1xyXG4gICAgICAgIHRoaXMucmVuZGVyVGlsZUltYWdlXyA9IHRoaXMucmVuZGVyVGlsZUltYWdlQ3VzdG9tO1xyXG4gICAgfVxyXG5cclxuICAgIFZFQ1RPUl9SRVBMQVlTX0NVU1RPTSA9IHtcclxuICAgICAgICBcImltYWdlXCI6IFsoPGFueT5vbC5yZW5kZXIpLlJlcGxheVR5cGUuREVGQVVMVF0sXHJcbiAgICAgICAgXCJoeWJyaWRcIjogWyg8YW55Pm9sLnJlbmRlcikuUmVwbGF5VHlwZS5JTUFHRSwgKDxhbnk+b2wucmVuZGVyKS5SZXBsYXlUeXBlLlRFWFQsICg8YW55Pm9sLnJlbmRlcikuUmVwbGF5VHlwZS5ERUZBVUxUXSxcclxuICAgICAgICBcInZlY3RvclwiOiAoPGFueT5vbCkucmVuZGVyLnJlcGxheS5PUkRFUlxyXG4gICAgfTtcclxuXHJcbiAgICBwdWJsaWMgdGlsZUxheWVyUHJlcGFyZUZyYW1lQ3VzdG9tKGZyYW1lU3RhdGU6IGFueSwgbGF5ZXJTdGF0ZTogYW55KSB7XHJcbiAgICAgICAgbGV0IHBpeGVsUmF0aW8gPSBmcmFtZVN0YXRlLnBpeGVsUmF0aW87XHJcbiAgICAgICAgbGV0IHNpemUgPSBmcmFtZVN0YXRlLnNpemU7XHJcbiAgICAgICAgbGV0IHZpZXdTdGF0ZSA9IGZyYW1lU3RhdGUudmlld1N0YXRlO1xyXG4gICAgICAgIGxldCBwcm9qZWN0aW9uID0gdmlld1N0YXRlLnByb2plY3Rpb247XHJcbiAgICAgICAgbGV0IHZpZXdSZXNvbHV0aW9uID0gdmlld1N0YXRlLnJlc29sdXRpb247XHJcbiAgICAgICAgbGV0IHZpZXdDZW50ZXIgPSB2aWV3U3RhdGUuY2VudGVyO1xyXG5cclxuICAgICAgICBsZXQgdGlsZUxheWVyID0gdGhpcy5nZXRMYXllcigpO1xyXG4gICAgICAgIGxldCB0aWxlU291cmNlID0gLyoqIEB0eXBlIHtvbC5zb3VyY2UuVGlsZX0gKi8gKHRpbGVMYXllci5nZXRTb3VyY2UoKSk7XHJcbiAgICAgICAgbGV0IHNvdXJjZVJldmlzaW9uID0gdGlsZVNvdXJjZS5nZXRSZXZpc2lvbigpO1xyXG4gICAgICAgIGxldCB0aWxlR3JpZCA9IHRpbGVTb3VyY2UuZ2V0VGlsZUdyaWRGb3JQcm9qZWN0aW9uKHByb2plY3Rpb24pO1xyXG4gICAgICAgIGxldCB6ID0gdGlsZUdyaWQuZ2V0WkZvclJlc29sdXRpb24odmlld1Jlc29sdXRpb24sIHRoaXMuekRpcmVjdGlvbik7XHJcbiAgICAgICAgbGV0IHRpbGVSZXNvbHV0aW9uID0gdGlsZUdyaWQuZ2V0UmVzb2x1dGlvbih6KTtcclxuICAgICAgICBsZXQgb3ZlcnNhbXBsaW5nID0gTWF0aC5yb3VuZCh2aWV3UmVzb2x1dGlvbiAvIHRpbGVSZXNvbHV0aW9uKSB8fCAxO1xyXG4gICAgICAgIGxldCBleHRlbnQgPSBmcmFtZVN0YXRlLmV4dGVudDtcclxuXHJcbiAgICAgICAgaWYgKGxheWVyU3RhdGUuZXh0ZW50ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZXh0ZW50ID0gb2wuZXh0ZW50LmdldEludGVyc2VjdGlvbihleHRlbnQsIGxheWVyU3RhdGUuZXh0ZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9sLmV4dGVudC5pc0VtcHR5KGV4dGVudCkpIHtcclxuICAgICAgICAgICAgLy8gUmV0dXJuIGZhbHNlIHRvIHByZXZlbnQgdGhlIHJlbmRlcmluZyBvZiB0aGUgbGF5ZXIuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB0aWxlUmFuZ2UgPSB0aWxlR3JpZC5nZXRUaWxlUmFuZ2VGb3JFeHRlbnRBbmRaKGV4dGVudCwgeik7XHJcblxyXG4gICAgICAgIC8vIEFkanVzdCB0aWxlIGNhY2hlIHNpemUgYWNjb3JkaW5nIHRvIHRpbGUgUmFuZ2UsIFRPRE86IGFkZCBhIHByb3BlcnR5IGZvciB0aGF0XHJcbiAgICAgICAgbGV0IHhPZmZzZXQgPSAodGlsZVJhbmdlLm1heFggLSB0aWxlUmFuZ2UubWluWCk7XHJcbiAgICAgICAgbGV0IHlPZmZzZXQgPSAodGlsZVJhbmdlLm1heFkgLSB0aWxlUmFuZ2UubWluWSk7XHJcbiAgICAgICAgeE9mZnNldCA9IHhPZmZzZXQgPD0gMCA/IDEgOiB4T2Zmc2V0ICogMiArIDM7XHJcbiAgICAgICAgeU9mZnNldCA9IHlPZmZzZXQgPD0gMCA/IDEgOiB5T2Zmc2V0ICogMiArIDM7XHJcbiAgICAgICAgbGV0IGNhY2hlU2l6ZSA9IHhPZmZzZXQgKiB5T2Zmc2V0O1xyXG4gICAgICAgIHRpbGVTb3VyY2UudGlsZUNhY2hlLmhpZ2hXYXRlck1hcmsgPSBjYWNoZVNpemUgPD0gMTUgPyAxNSA6IGNhY2hlU2l6ZTtcclxuXHJcbiAgICAgICAgLy8vLyBBZGp1c3QgdmVjdG9yVGlsZURhdGEgY2FjaGUgc2l6ZSBhY2NvcmRpbmcgdG8gdGhlIHRpbGUgUmFuZ2UgaW4gZGF0YSBtYXggem9vbS4gaXQgd2lsbCBwYXNzIFxyXG4gICAgICAgIHZhciBkYXRhVGlsZVJhbmQgPSB0aWxlR3JpZC5nZXRUaWxlUmFuZ2VGb3JFeHRlbnRBbmRaKGV4dGVudCwgdGlsZVNvdXJjZS5tYXhEYXRhWm9vbSk7XHJcbiAgICAgICAgdmFyIG9mZnNldFggPSBkYXRhVGlsZVJhbmQubWF4WCAtIGRhdGFUaWxlUmFuZC5taW5YO1xyXG4gICAgICAgIHZhciBvZmZzZXRZID0gZGF0YVRpbGVSYW5kLm1heFkgLSBkYXRhVGlsZVJhbmQubWluWTtcclxuXHJcbiAgICAgICAgb2Zmc2V0WCA9IG9mZnNldFggPD0gMCA/IDEgOiBvZmZzZXRYICsgMztcclxuICAgICAgICBvZmZzZXRZID0gb2Zmc2V0WSA8PSAwID8gMSA6IG9mZnNldFkgKyAzO1xyXG4gICAgICAgIHZhciB2ZWN0b3JUaWxlRGF0YUNhaGNlU2l6ZSA9IG9mZnNldFggKiBvZmZzZXRZO1xyXG4gICAgICAgIHRpbGVTb3VyY2VbXCJ2ZWN0b3JUaWxlRGF0YUNhaGNlU2l6ZVwiXSA9IHZlY3RvclRpbGVEYXRhQ2FoY2VTaXplO1xyXG4gICAgICAgIHRpbGVTb3VyY2UuZ2V0R2VvRm9ybWF0KClbXCJ2ZWN0b3JUaWxlRGF0YUNhaGNlU2l6ZVwiXSA9IHZlY3RvclRpbGVEYXRhQ2FoY2VTaXplO1xyXG5cclxuICAgICAgICBsZXQgaW1hZ2VFeHRlbnQgPSB0aWxlR3JpZC5nZXRUaWxlUmFuZ2VFeHRlbnQoeiwgdGlsZVJhbmdlKTtcclxuXHJcbiAgICAgICAgbGV0IHRpbGVQaXhlbFJhdGlvID0gdGlsZVNvdXJjZS5nZXRUaWxlUGl4ZWxSYXRpbyhwaXhlbFJhdGlvKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUge09iamVjdC48bnVtYmVyLCBPYmplY3QuPHN0cmluZywgb2wuVGlsZT4+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxldCB0aWxlc1RvRHJhd0J5WiA9IHt9O1xyXG4gICAgICAgIHRpbGVzVG9EcmF3QnlaW3pdID0ge307XHJcblxyXG4gICAgICAgIGxldCBmaW5kTG9hZGVkVGlsZXMgPSB0aGlzLmNyZWF0ZUxvYWRlZFRpbGVGaW5kZXIoXHJcbiAgICAgICAgICAgIHRpbGVTb3VyY2UsIHByb2plY3Rpb24sIHRpbGVzVG9EcmF3QnlaKTtcclxuXHJcbiAgICAgICAgbGV0IHRtcEV4dGVudCA9IHRoaXMudG1wRXh0ZW50O1xyXG4gICAgICAgIGxldCB0bXBUaWxlUmFuZ2UgPSB0aGlzLnRtcFRpbGVSYW5nZV87XHJcbiAgICAgICAgbGV0IG5ld1RpbGVzID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IHRpbGUsIHgsIHk7XHJcbiAgICAgICAgZm9yICh4ID0gdGlsZVJhbmdlLm1pblg7IHggPD0gdGlsZVJhbmdlLm1heFg7ICsreCkge1xyXG4gICAgICAgICAgICBmb3IgKHkgPSB0aWxlUmFuZ2UubWluWTsgeSA8PSB0aWxlUmFuZ2UubWF4WTsgKyt5KSB7XHJcbiAgICAgICAgICAgICAgICB0aWxlID0gdGlsZVNvdXJjZS5nZXRUaWxlKHosIHgsIHksIHBpeGVsUmF0aW8sIHByb2plY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgLy8gRklYTUUgRXJpY1xyXG4gICAgICAgICAgICAgICAgdGlsZS50aWxlUmFuZ2UgPSB0aWxlUmFuZ2U7XHJcbiAgICAgICAgICAgICAgICB0aWxlLnBpeGVsUmF0aW8gPSBwaXhlbFJhdGlvO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRpbGUuZ2V0U3RhdGUoKSA9PT0gKDxhbnk+b2wpLlRpbGVTdGF0ZS5FUlJPUikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGlsZUxheWVyLmdldFVzZUludGVyaW1UaWxlc09uRXJyb3IoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHVzZUludGVyaW1UaWxlc09uRXJyb3IgaXMgZmFsc2UsIHdlIGNvbnNpZGVyIHRoZSBlcnJvciB0aWxlIGFzIGxvYWRlZC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGlsZS5zZXRTdGF0ZSgoPGFueT5vbCkuVGlsZVN0YXRlLkxPQURFRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aWxlTGF5ZXIuZ2V0UHJlbG9hZCgpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmVsb2FkZWQgdGlsZXMgZm9yIGxvd2VyIHJlc29sdXRpb25zIG1pZ2h0IGhhdmUgZmluaXNoZWQgbG9hZGluZy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3VGlsZXMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0RyYXdhYmxlVGlsZV8odGlsZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aWxlID0gdGlsZS5nZXRJbnRlcmltVGlsZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNEcmF3YWJsZVRpbGVfKHRpbGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHVpZCA9ICg8YW55Pm9sKS5nZXRVaWQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbGUuZ2V0U3RhdGUoKSA9PT0gKDxhbnk+b2wpLlRpbGVTdGF0ZS5MT0FERUQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGlsZXNUb0RyYXdCeVpbel1bdGlsZS50aWxlQ29vcmQudG9TdHJpbmcoKV0gPSB0aWxlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5UcmFuc2l0aW9uID0gdGlsZS5pblRyYW5zaXRpb24odWlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXdUaWxlcyAmJiAoaW5UcmFuc2l0aW9uIHx8IHRoaXMucmVuZGVyZWRUaWxlcy5pbmRleE9mKHRpbGUpID09PSAtMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1RpbGVzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGlsZS5nZXRBbHBoYSh1aWQsIGZyYW1lU3RhdGUudGltZSkgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9uJ3QgbG9vayBmb3IgYWx0IHRpbGVzIGlmIGFscGhhIGlzIDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjaGlsZFRpbGVSYW5nZSA9IHRpbGVHcmlkLmdldFRpbGVDb29yZENoaWxkVGlsZVJhbmdlKFxyXG4gICAgICAgICAgICAgICAgICAgIHRpbGUudGlsZUNvb3JkLCB0bXBUaWxlUmFuZ2UsIHRtcEV4dGVudCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgY292ZXJlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkVGlsZVJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY292ZXJlZCA9IGZpbmRMb2FkZWRUaWxlcyh6ICsgMSwgY2hpbGRUaWxlUmFuZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFjb3ZlcmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGlsZUdyaWQuZm9yRWFjaFRpbGVDb29yZFBhcmVudFRpbGVSYW5nZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGlsZS50aWxlQ29vcmQsIGZpbmRMb2FkZWRUaWxlcywgbnVsbCwgdG1wVGlsZVJhbmdlLCB0bXBFeHRlbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHJlbmRlcmVkUmVzb2x1dGlvbiA9IHRpbGVSZXNvbHV0aW9uICogcGl4ZWxSYXRpbyAvIHRpbGVQaXhlbFJhdGlvICogb3ZlcnNhbXBsaW5nO1xyXG4gICAgICAgIGxldCBoaW50cyA9IGZyYW1lU3RhdGUudmlld0hpbnRzO1xyXG4gICAgICAgIGxldCBhbmltYXRpbmdPckludGVyYWN0aW5nID0gaGludHNbKDxhbnk+b2wpLlZpZXdIaW50LkFOSU1BVElOR10gfHwgaGludHNbKDxhbnk+b2wpLlZpZXdIaW50LklOVEVSQUNUSU5HXTtcclxuICAgICAgICBpZiAoISh0aGlzLnJlbmRlcmVkUmVzb2x1dGlvbiAmJiBEYXRlLm5vdygpIC0gZnJhbWVTdGF0ZS50aW1lID4gMTYgJiYgYW5pbWF0aW5nT3JJbnRlcmFjdGluZykgJiYgKFxyXG4gICAgICAgICAgICBuZXdUaWxlcyB8fFxyXG4gICAgICAgICAgICAhKHRoaXMucmVuZGVyZWRFeHRlbnRfICYmIG9sLmV4dGVudC5jb250YWluc0V4dGVudCh0aGlzLnJlbmRlcmVkRXh0ZW50XywgZXh0ZW50KSkgfHxcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlZFJldmlzaW9uICE9PSBzb3VyY2VSZXZpc2lvbiB8fFxyXG4gICAgICAgICAgICBvdmVyc2FtcGxpbmcgIT09IHRoaXMub3ZlcnNhbXBsaW5nXyB8fFxyXG4gICAgICAgICAgICAhYW5pbWF0aW5nT3JJbnRlcmFjdGluZyAmJiByZW5kZXJlZFJlc29sdXRpb24gIT09IHRoaXMucmVuZGVyZWRSZXNvbHV0aW9uXHJcbiAgICAgICAgKSkge1xyXG5cclxuICAgICAgICAgICAgbGV0IGNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGlsZVBpeGVsU2l6ZSA9IHRpbGVTb3VyY2UuZ2V0VGlsZVBpeGVsU2l6ZSh6LCBwaXhlbFJhdGlvLCBwcm9qZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIGxldCB3aWR0aCA9IE1hdGgucm91bmQodGlsZVJhbmdlLmdldFdpZHRoKCkgKiB0aWxlUGl4ZWxTaXplWzBdIC8gb3ZlcnNhbXBsaW5nKTtcclxuICAgICAgICAgICAgICAgIGxldCBoZWlnaHQgPSBNYXRoLnJvdW5kKHRpbGVSYW5nZS5nZXRIZWlnaHQoKSAqIHRpbGVQaXhlbFNpemVbMV0gLyBvdmVyc2FtcGxpbmcpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNhbnZhcyA9IGNvbnRleHQuY2FudmFzO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbnZhcy53aWR0aCAhPT0gd2lkdGggfHwgY2FudmFzLmhlaWdodCAhPT0gaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdmVyc2FtcGxpbmdfID0gb3ZlcnNhbXBsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlbmRlcmVkRXh0ZW50XyAmJiAhb2wuZXh0ZW50LmVxdWFscyhpbWFnZUV4dGVudCwgdGhpcy5yZW5kZXJlZEV4dGVudF8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBvdmVyc2FtcGxpbmcgPSB0aGlzLm92ZXJzYW1wbGluZ187XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZWRUaWxlcy5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICAvKiogQHR5cGUge0FycmF5LjxudW1iZXI+fSAqL1xyXG4gICAgICAgICAgICBsZXQgenMgPSBPYmplY3Qua2V5cyh0aWxlc1RvRHJhd0J5WikubWFwKE51bWJlcik7XHJcbiAgICAgICAgICAgIHpzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhID09PSB6KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGIgPT09IHopIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhID4gYiA/IDEgOiBhIDwgYiA/IC0xIDogMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50UmVzb2x1dGlvbiwgY3VycmVudFNjYWxlLCBjdXJyZW50VGlsZVBpeGVsU2l6ZSwgY3VycmVudFosIGksIGlpO1xyXG4gICAgICAgICAgICBsZXQgdGlsZUV4dGVudCwgdGlsZUd1dHRlciwgdGlsZXNUb0RyYXcsIHcsIGg7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0genMubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFogPSB6c1tpXTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRUaWxlUGl4ZWxTaXplID0gdGlsZVNvdXJjZS5nZXRUaWxlUGl4ZWxTaXplKGN1cnJlbnRaLCBwaXhlbFJhdGlvLCBwcm9qZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvbHV0aW9uID0gdGlsZUdyaWQuZ2V0UmVzb2x1dGlvbihjdXJyZW50Wik7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50U2NhbGUgPSBjdXJyZW50UmVzb2x1dGlvbiAvIHRpbGVSZXNvbHV0aW9uO1xyXG4gICAgICAgICAgICAgICAgdGlsZUd1dHRlciA9IHRpbGVQaXhlbFJhdGlvICogdGlsZVNvdXJjZS5nZXRHdXR0ZXIocHJvamVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICB0aWxlc1RvRHJhdyA9IHRpbGVzVG9EcmF3QnlaW2N1cnJlbnRaXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHRpbGVDb29yZEtleSBpbiB0aWxlc1RvRHJhdykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbGUgPSB0aWxlc1RvRHJhd1t0aWxlQ29vcmRLZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbGVFeHRlbnQgPSB0aWxlR3JpZC5nZXRUaWxlQ29vcmRFeHRlbnQodGlsZS5nZXRUaWxlQ29vcmQoKSwgdG1wRXh0ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB4ID0gKHRpbGVFeHRlbnRbMF0gLSBpbWFnZUV4dGVudFswXSkgLyB0aWxlUmVzb2x1dGlvbiAqIHRpbGVQaXhlbFJhdGlvIC8gb3ZlcnNhbXBsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIHkgPSAoaW1hZ2VFeHRlbnRbM10gLSB0aWxlRXh0ZW50WzNdKSAvIHRpbGVSZXNvbHV0aW9uICogdGlsZVBpeGVsUmF0aW8gLyBvdmVyc2FtcGxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgdyA9IGN1cnJlbnRUaWxlUGl4ZWxTaXplWzBdICogY3VycmVudFNjYWxlIC8gb3ZlcnNhbXBsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGggPSBjdXJyZW50VGlsZVBpeGVsU2l6ZVsxXSAqIGN1cnJlbnRTY2FsZSAvIG92ZXJzYW1wbGluZztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdUaWxlSW1hZ2UodGlsZSwgZnJhbWVTdGF0ZSwgbGF5ZXJTdGF0ZSwgeCwgeSwgdywgaCwgdGlsZUd1dHRlciwgeiA9PT0gY3VycmVudFopO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZWRUaWxlcy5wdXNoKHRpbGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVkUmV2aXNpb24gPSBzb3VyY2VSZXZpc2lvbjtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlZFJlc29sdXRpb24gPSB0aWxlUmVzb2x1dGlvbiAqIHBpeGVsUmF0aW8gLyB0aWxlUGl4ZWxSYXRpbyAqIG92ZXJzYW1wbGluZztcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlZEV4dGVudF8gPSBpbWFnZUV4dGVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBzY2FsZSA9IHRoaXMucmVuZGVyZWRSZXNvbHV0aW9uIC8gdmlld1Jlc29sdXRpb247XHJcbiAgICAgICAgbGV0IHRyYW5zZm9ybSA9ICg8YW55Pm9sKS50cmFuc2Zvcm0uY29tcG9zZSh0aGlzLmltYWdlVHJhbnNmb3JtXywgcGl4ZWxSYXRpbyAqIHNpemVbMF0gLyAyLCBwaXhlbFJhdGlvICogc2l6ZVsxXSAvIDIsIHNjYWxlLCBzY2FsZSwgMCwgKHRoaXMucmVuZGVyZWRFeHRlbnRfWzBdIC0gdmlld0NlbnRlclswXSkgLyB0aGlzLnJlbmRlcmVkUmVzb2x1dGlvbiAqIHBpeGVsUmF0aW8sICh2aWV3Q2VudGVyWzFdIC0gdGhpcy5yZW5kZXJlZEV4dGVudF9bM10pIC8gdGhpcy5yZW5kZXJlZFJlc29sdXRpb24gKiBwaXhlbFJhdGlvKTtcclxuICAgICAgICAoPGFueT5vbCkudHJhbnNmb3JtLmNvbXBvc2UodGhpcy5jb29yZGluYXRlVG9DYW52YXNQaXhlbFRyYW5zZm9ybSwgcGl4ZWxSYXRpbyAqIHNpemVbMF0gLyAyIC0gdHJhbnNmb3JtWzRdLCBwaXhlbFJhdGlvICogc2l6ZVsxXSAvIDIgLSB0cmFuc2Zvcm1bNV0sIHBpeGVsUmF0aW8gLyB2aWV3UmVzb2x1dGlvbiwgLXBpeGVsUmF0aW8gLyB2aWV3UmVzb2x1dGlvbiwgMCwgLXZpZXdDZW50ZXJbMF0sIC12aWV3Q2VudGVyWzFdKTtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVVc2VkVGlsZXMoZnJhbWVTdGF0ZS51c2VkVGlsZXMsIHRpbGVTb3VyY2UsIHosIHRpbGVSYW5nZSk7XHJcbiAgICAgICAgdGhpcy5tYW5hZ2VUaWxlUHlyYW1pZChmcmFtZVN0YXRlLCB0aWxlU291cmNlLCB0aWxlR3JpZCwgcGl4ZWxSYXRpbywgcHJvamVjdGlvbiwgZXh0ZW50LCB6LCB0aWxlTGF5ZXIuZ2V0UHJlbG9hZCgpKTtcclxuICAgICAgICB0aGlzLnNjaGVkdWxlRXhwaXJlQ2FjaGUoZnJhbWVTdGF0ZSwgdGlsZVNvdXJjZSk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVMb2dvcyhmcmFtZVN0YXRlLCB0aWxlU291cmNlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZWRUaWxlcy5sZW5ndGggPiAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHB1YmxpYyBtYW5hZ2VUaWxlUHlyYW1pZEN1c3RvbSA9IGZ1bmN0aW9uIChcclxuICAgIC8vICAgICBmcmFtZVN0YXRlLCB0aWxlU291cmNlLCB0aWxlR3JpZCwgcGl4ZWxSYXRpbywgcHJvamVjdGlvbiwgZXh0ZW50LFxyXG4gICAgLy8gICAgIGN1cnJlbnRaLCBwcmVsb2FkLCBvcHRfdGlsZUNhbGxiYWNrLCBvcHRfdGhpcykge1xyXG4gICAgLy8gICAgIHZhciB0aWxlU291cmNlS2V5ID0gKDxhbnk+b2wpLmdldFVpZCh0aWxlU291cmNlKS50b1N0cmluZygpO1xyXG4gICAgLy8gICAgIGlmICghKHRpbGVTb3VyY2VLZXkgaW4gZnJhbWVTdGF0ZS53YW50ZWRUaWxlcykpIHtcclxuICAgIC8vICAgICAgICAgZnJhbWVTdGF0ZS53YW50ZWRUaWxlc1t0aWxlU291cmNlS2V5XSA9IHt9O1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICB2YXIgd2FudGVkVGlsZXMgPSBmcmFtZVN0YXRlLndhbnRlZFRpbGVzW3RpbGVTb3VyY2VLZXldO1xyXG4gICAgLy8gICAgIHZhciB0aWxlUXVldWUgPSBmcmFtZVN0YXRlLnRpbGVRdWV1ZTtcclxuICAgIC8vICAgICB2YXIgbWluWm9vbSA9IHRpbGVHcmlkLmdldE1pblpvb20oKTtcclxuICAgIC8vICAgICB2YXIgdGlsZSwgdGlsZVJhbmdlLCB0aWxlUmVzb2x1dGlvbiwgeCwgeSwgejtcclxuICAgIC8vICAgICBmb3IgKHogPSBtaW5ab29tOyB6IDw9IGN1cnJlbnRaOyArK3opIHtcclxuICAgIC8vICAgICAgICAgdGlsZVJhbmdlID0gdGlsZUdyaWQuZ2V0VGlsZVJhbmdlRm9yRXh0ZW50QW5kWihleHRlbnQsIHosIHRpbGVSYW5nZSk7XHJcbiAgICAvLyAgICAgICAgIHRpbGVSZXNvbHV0aW9uID0gdGlsZUdyaWQuZ2V0UmVzb2x1dGlvbih6KTtcclxuICAgIC8vICAgICAgICAgZm9yICh4ID0gdGlsZVJhbmdlLm1pblg7IHggPD0gdGlsZVJhbmdlLm1heFg7ICsreCkge1xyXG4gICAgLy8gICAgICAgICAgICAgZm9yICh5ID0gdGlsZVJhbmdlLm1pblk7IHkgPD0gdGlsZVJhbmdlLm1heFk7ICsreSkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGlmIChjdXJyZW50WiAtIHogPD0gcHJlbG9hZCkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICB0aWxlID0gdGlsZVNvdXJjZS5nZXRUaWxlKHosIHgsIHksIHBpeGVsUmF0aW8sIHByb2plY3Rpb24pO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAvLyBGSVhNRSBFcmljXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIGlmICh0aWxlLmdldFN0YXRlKCkgPT0gKDxhbnk+b2wpLlRpbGVTdGF0ZS5JRExFIHx8IHRpbGUuZ2V0U3RhdGUoKSA9PSAoPGFueT5vbCkuVGlsZVN0YXRlLkNBTkNFTCkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgd2FudGVkVGlsZXNbdGlsZS5nZXRLZXkoKV0gPSB0cnVlO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aWxlUXVldWUuaXNLZXlRdWV1ZWQodGlsZS5nZXRLZXkoKSkpIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWxlUXVldWUuZW5xdWV1ZShbdGlsZSwgdGlsZVNvdXJjZUtleSxcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlsZUdyaWQuZ2V0VGlsZUNvb3JkQ2VudGVyKHRpbGUudGlsZUNvb3JkKSwgdGlsZVJlc29sdXRpb25dKTtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBpZiAob3B0X3RpbGVDYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBvcHRfdGlsZUNhbGxiYWNrLmNhbGwob3B0X3RoaXMsIHRpbGUpO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgdGlsZVNvdXJjZS51c2VUaWxlKHosIHgsIHksIHByb2plY3Rpb24pO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH07XHJcblxyXG4gICAgcHVibGljIHByZXBhcmVGcmFtZUN1c3RvbShmcmFtZVN0YXRlOiBhbnksIGxheWVyU3RhdGU6IGFueSkge1xyXG4gICAgICAgIGxldCBsYXllciA9IHRoaXMuZ2V0TGF5ZXIoKTtcclxuICAgICAgICBsZXQgbGF5ZXJSZXZpc2lvbiA9IGxheWVyLmdldFJldmlzaW9uKCk7XHJcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyZWRMYXllclJldmlzaW9uXyAhPT0gbGF5ZXJSZXZpc2lvbikge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVkVGlsZXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgbGV0IHJlbmRlck1vZGUgPSBsYXllci5nZXRSZW5kZXJNb2RlKCk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5jb250ZXh0ICYmIHJlbmRlck1vZGUgIT09ICg8YW55Pm9sLmxheWVyKS5WZWN0b3JUaWxlUmVuZGVyVHlwZS5WRUNUT1IpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dCA9ICg8YW55Pm9sKS5kb20uY3JlYXRlQ2FudmFzQ29udGV4dDJEKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuY29udGV4dCAmJiByZW5kZXJNb2RlID09PSAoPGFueT5vbC5sYXllcikuVmVjdG9yVGlsZVJlbmRlclR5cGUuVkVDVE9SKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVuZGVyZWRMYXllclJldmlzaW9uXyA9IGxheWVyUmV2aXNpb247XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGlsZUxheWVyUHJlcGFyZUZyYW1lQ3VzdG9tLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHBvc3RDb21wb3NlKGNvbnRleHQ6IGFueSwgZnJhbWVTdGF0ZTogYW55LCBsYXllclN0YXRlOiBhbnkpIHtcclxuICAgICAgICBsZXQgbGF5ZXIgPSB0aGlzLmdldExheWVyKCk7XHJcbiAgICAgICAgbGV0IGRlY2x1dHRlclJlcGxheXMgPSBsYXllci5nZXREZWNsdXR0ZXIoKSA/IHt9IDogbnVsbDtcclxuICAgICAgICBsZXQgc291cmNlID0gLyoqIEB0eXBlIHtvbC5zb3VyY2UuVmVjdG9yVGlsZX0gKi8gKGxheWVyLmdldFNvdXJjZSgpKTtcclxuICAgICAgICBsZXQgcmVuZGVyTW9kZSA9IGxheWVyLmdldFJlbmRlck1vZGUoKTtcclxuICAgICAgICBsZXQgcmVwbGF5VHlwZXMgPSB0aGlzLlZFQ1RPUl9SRVBMQVlTX0NVU1RPTVtyZW5kZXJNb2RlXTtcclxuICAgICAgICBsZXQgcGl4ZWxSYXRpbyA9IGZyYW1lU3RhdGUucGl4ZWxSYXRpbztcclxuICAgICAgICBsZXQgcm90YXRpb24gPSBmcmFtZVN0YXRlLnZpZXdTdGF0ZS5yb3RhdGlvbjtcclxuICAgICAgICBsZXQgc2l6ZSA9IGZyYW1lU3RhdGUuc2l6ZTtcclxuICAgICAgICBsZXQgb2Zmc2V0WCwgb2Zmc2V0WTtcclxuICAgICAgICBpZiAocm90YXRpb24pIHtcclxuICAgICAgICAgICAgb2Zmc2V0WCA9IE1hdGgucm91bmQocGl4ZWxSYXRpbyAqIHNpemVbMF0gLyAyKTtcclxuICAgICAgICAgICAgb2Zmc2V0WSA9IE1hdGgucm91bmQocGl4ZWxSYXRpbyAqIHNpemVbMV0gLyAyKTtcclxuICAgICAgICAgICAgKDxhbnk+b2wucmVuZGVyLmNhbnZhcykucm90YXRlQXRPZmZzZXQoY29udGV4dCwgLXJvdGF0aW9uLCBvZmZzZXRYLCBvZmZzZXRZKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRlY2x1dHRlclJlcGxheXMpIHtcclxuICAgICAgICAgICAgdGhpcy5kZWNsdXR0ZXJUcmVlXy5jbGVhcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgdGlsZXMgPSB0aGlzLnJlbmRlcmVkVGlsZXM7XHJcbiAgICAgICAgbGV0IHRpbGVHcmlkID0gc291cmNlLmdldFRpbGVHcmlkRm9yUHJvamVjdGlvbihmcmFtZVN0YXRlLnZpZXdTdGF0ZS5wcm9qZWN0aW9uKTtcclxuICAgICAgICBsZXQgY2xpcHMgPSBbXTtcclxuICAgICAgICBsZXQgenMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gdGlsZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcclxuICAgICAgICAgICAgbGV0IHRpbGUgPSAvKiogQHR5cGUge29sLlZlY3RvckltYWdlVGlsZX0gKi8gKHRpbGVzW2ldKTtcclxuICAgICAgICAgICAgaWYgKHRpbGUuZ2V0U3RhdGUoKSA9PT0gKDxhbnk+b2wpLlRpbGVTdGF0ZS5BQk9SVCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHRpbGVDb29yZCA9IHRpbGUudGlsZUNvb3JkO1xyXG4gICAgICAgICAgICBsZXQgd29ybGRPZmZzZXQgPSB0aWxlR3JpZC5nZXRUaWxlQ29vcmRFeHRlbnQodGlsZUNvb3JkKVswXSAtXHJcbiAgICAgICAgICAgICAgICB0aWxlR3JpZC5nZXRUaWxlQ29vcmRFeHRlbnQodGlsZS53cmFwcGVkVGlsZUNvb3JkKVswXTtcclxuICAgICAgICAgICAgbGV0IHRyYW5zZm9ybSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgZm9yIChsZXQgdCA9IDAsIHR0ID0gdGlsZS50aWxlS2V5cy5sZW5ndGg7IHQgPCB0dDsgKyt0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc291cmNlVGlsZSA9IHRpbGUuZ2V0VGlsZSh0aWxlLnRpbGVLZXlzW3RdKTtcclxuICAgICAgICAgICAgICAgIGlmIChzb3VyY2VUaWxlLmdldFN0YXRlKCkgPT09ICg8YW55Pm9sKS5UaWxlU3RhdGUuRVJST1IpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLy8vIHJldXNlIHJlcGxheUdyb3VwIG9mIHNvdXJjZSBUaWxlIHRvIHJlZHVjZSB0aGUgbWVtb3J5LlxyXG4gICAgICAgICAgICAgICAgLy8gbGV0IHJlcGxheUdyb3VwID0gc291cmNlVGlsZS5nZXRSZXBsYXlHcm91cChsYXllciwgdGlsZUNvb3JkLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlcGxheUdyb3VwID0gc291cmNlVGlsZS5nZXRSZXBsYXlHcm91cChsYXllciwgc291cmNlVGlsZS50aWxlQ29vcmQudG9TdHJpbmcoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHJlbmRlck1vZGUgIT09ICg8YW55Pm9sLmxheWVyKS5WZWN0b3JUaWxlUmVuZGVyVHlwZS5WRUNUT1IgJiYgIXJlcGxheUdyb3VwLmhhc1JlcGxheXMocmVwbGF5VHlwZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRyYW5zZm9ybSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybSA9IHRoaXMuZ2V0VHJhbnNmb3JtKGZyYW1lU3RhdGUsIHdvcmxkT2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50WiA9IHNvdXJjZVRpbGUudGlsZUNvb3JkWzBdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRDbGlwID0gcmVwbGF5R3JvdXAuZ2V0Q2xpcENvb3Jkcyh0cmFuc2Zvcm0pO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0Lmdsb2JhbEFscGhhID0gbGF5ZXJTdGF0ZS5vcGFjaXR5O1xyXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGEgY2xpcCBtYXNrIGZvciByZWdpb25zIGluIHRoaXMgbG93IHJlc29sdXRpb24gdGlsZSB0aGF0IGFyZVxyXG4gICAgICAgICAgICAgICAgLy8gYWxyZWFkeSBmaWxsZWQgYnkgYSBoaWdoZXIgcmVzb2x1dGlvbiB0aWxlXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgamogPSBjbGlwcy5sZW5ndGg7IGogPCBqajsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNsaXAgPSBjbGlwc1tqXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFogPCB6c1tqXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb3VudGVyLWNsb2Nrd2lzZSAob3V0ZXIgcmluZykgZm9yIGN1cnJlbnQgdGlsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhjdXJyZW50Q2xpcFswXSwgY3VycmVudENsaXBbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhjdXJyZW50Q2xpcFsyXSwgY3VycmVudENsaXBbM10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhjdXJyZW50Q2xpcFs0XSwgY3VycmVudENsaXBbNV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhjdXJyZW50Q2xpcFs2XSwgY3VycmVudENsaXBbN10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjbG9ja3dpc2UgKGlubmVyIHJpbmcpIGZvciBoaWdoZXIgcmVzb2x1dGlvbiB0aWxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKGNsaXBbNl0sIGNsaXBbN10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhjbGlwWzRdLCBjbGlwWzVdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oY2xpcFsyXSwgY2xpcFszXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKGNsaXBbMF0sIGNsaXBbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmNsaXAoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXBsYXlHcm91cC5yZXBsYXkoY29udGV4dCwgdHJhbnNmb3JtLCByb3RhdGlvbiwge30sIHJlcGxheVR5cGVzLCBkZWNsdXR0ZXJSZXBsYXlzKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgICAgICAgICAgICAgY2xpcHMucHVzaChjdXJyZW50Q2xpcCk7XHJcbiAgICAgICAgICAgICAgICB6cy5wdXNoKGN1cnJlbnRaKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRlY2x1dHRlclJlcGxheXMpIHtcclxuICAgICAgICAgICAgdmFyIGhpbnRzID0gZnJhbWVTdGF0ZS52aWV3SGludHM7XHJcbiAgICAgICAgICAgIHZhciBhbmltYXRpbmdPckludGVyYWN0aW5nID0gaGludHNbKDxhbnk+b2wpLlZpZXdIaW50LkFOSU1BVElOR10gfHwgaGludHNbKDxhbnk+b2wpLlZpZXdIaW50LklOVEVSQUNUSU5HXTtcclxuICAgICAgICAgICAgZGVsZXRlIGNvbnRleHRbXCJxdWlja1pvb21cIl1cclxuICAgICAgICAgICAgaWYgKGFuaW1hdGluZ09ySW50ZXJhY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHRbXCJxdWlja1pvb21cIl0gPSBmcmFtZVN0YXRlW1wicXVpY2tab29tXCJdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRleHRbXCJjdXJyZW50UmVzb2x1dGlvblwiXSA9IGZyYW1lU3RhdGVbXCJjdXJyZW50UmVzb2x1dGlvblwiXTtcclxuICAgICAgICAgICAgKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuUmVwbGF5R3JvdXAucmVwbGF5RGVjbHV0dGVyKGRlY2x1dHRlclJlcGxheXMsIGNvbnRleHQsIHJvdGF0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJvdGF0aW9uKSB7XHJcbiAgICAgICAgICAgICg8YW55Pm9sLnJlbmRlci5jYW52YXMpLnJvdGF0ZUF0T2Zmc2V0KGNvbnRleHQsIHJvdGF0aW9uLFxyXG4gICAgICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyhvZmZzZXRYKSwgLyoqIEB0eXBlIHtudW1iZXJ9ICovKG9mZnNldFkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgKDxhbnk+b2wpLnJlbmRlcmVyLmNhbnZhcy5UaWxlTGF5ZXIucHJvdG90eXBlLnBvc3RDb21wb3NlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZVJlcGxheUdyb3VwXyh0aWxlOiBvbC5WZWN0b3JUaWxlLCBmcmFtZVN0YXRlOiBvbHguRnJhbWVTdGF0ZSkge1xyXG4gICAgICAgIGxldCBsYXllciA9IHRoaXMuZ2V0TGF5ZXIoKTtcclxuICAgICAgICBsZXQgcGl4ZWxSYXRpbyA9IGZyYW1lU3RhdGUucGl4ZWxSYXRpbztcclxuICAgICAgICBsZXQgcHJvamVjdGlvbiA9IGZyYW1lU3RhdGUudmlld1N0YXRlLnByb2plY3Rpb247XHJcbiAgICAgICAgbGV0IHJldmlzaW9uID0gbGF5ZXIuZ2V0UmV2aXNpb24oKTtcclxuICAgICAgICBsZXQgcmVuZGVyT3JkZXIgPSAvKiogQHR5cGUge29sLlJlbmRlck9yZGVyRnVuY3Rpb259ICovXHJcbiAgICAgICAgICAgIChsYXllci5nZXRSZW5kZXJPcmRlcigpKSB8fCBudWxsO1xyXG5cclxuICAgICAgICBsZXQgcmVwbGF5U3RhdGUgPSAoPGFueT50aWxlKS5nZXRSZXBsYXlTdGF0ZShsYXllcik7XHJcbiAgICAgICAgaWYgKCFyZXBsYXlTdGF0ZS5kaXJ0eSAmJiByZXBsYXlTdGF0ZS5yZW5kZXJlZFJldmlzaW9uID09PSByZXZpc2lvbiAmJlxyXG4gICAgICAgICAgICByZXBsYXlTdGF0ZS5yZW5kZXJlZFJlbmRlck9yZGVyID09PSByZW5kZXJPcmRlcikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc291cmNlID0gLyoqIEB0eXBlIHtvbC5zb3VyY2UuVmVjdG9yVGlsZX0gKi8gKGxheWVyLmdldFNvdXJjZSgpKTtcclxuICAgICAgICBsZXQgc291cmNlVGlsZUdyaWQgPSBzb3VyY2UuZ2V0VGlsZUdyaWQoKTtcclxuICAgICAgICBsZXQgdGlsZUdyaWQgPSBzb3VyY2UuZ2V0VGlsZUdyaWRGb3JQcm9qZWN0aW9uKHByb2plY3Rpb24pO1xyXG4gICAgICAgIGxldCByZXNvbHV0aW9uID0gdGlsZUdyaWQuZ2V0UmVzb2x1dGlvbigoPGFueT50aWxlKS50aWxlQ29vcmRbMF0pO1xyXG4gICAgICAgIGxldCB0aWxlRXh0ZW50ID0gdGlsZUdyaWQuZ2V0VGlsZUNvb3JkRXh0ZW50KCg8YW55PnRpbGUpLndyYXBwZWRUaWxlQ29vcmQpO1xyXG5cclxuICAgICAgICBsZXQgekluZGV4S2V5cyA9IHt9O1xyXG4gICAgICAgIGZvciAobGV0IHQgPSAwLCB0dCA9ICg8YW55PnRpbGUpLnRpbGVLZXlzLmxlbmd0aDsgdCA8IHR0OyArK3QpIHtcclxuICAgICAgICAgICAgbGV0IHNvdXJjZVRpbGUgPSAoPGFueT50aWxlKS5nZXRUaWxlKCg8YW55PnRpbGUpLnRpbGVLZXlzW3RdKTtcclxuICAgICAgICAgICAgaWYgKHNvdXJjZVRpbGUuZ2V0U3RhdGUoKSA9PT0gKDxhbnk+b2wpLlRpbGVTdGF0ZS5FUlJPUikge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHNvdXJjZVRpbGVDb29yZCA9IHNvdXJjZVRpbGUucmVxdWVzdFRpbGVDb29yZDtcclxuICAgICAgICAgICAgbGV0IHNvdXJjZVRpbGVFeHRlbnQgPSBzb3VyY2VUaWxlR3JpZC5nZXRUaWxlQ29vcmRFeHRlbnQoc291cmNlVGlsZUNvb3JkKTtcclxuICAgICAgICAgICAgbGV0IHNoYXJlZEV4dGVudCA9IG9sLmV4dGVudC5nZXRJbnRlcnNlY3Rpb24odGlsZUV4dGVudCwgc291cmNlVGlsZUV4dGVudCk7XHJcbiAgICAgICAgICAgIGxldCBidWZmZXJlZEV4dGVudCA9IG9sLmV4dGVudC5lcXVhbHMoc291cmNlVGlsZUV4dGVudCwgc2hhcmVkRXh0ZW50KSA/IG51bGwgOlxyXG4gICAgICAgICAgICAgICAgb2wuZXh0ZW50LmJ1ZmZlcihzaGFyZWRFeHRlbnQsIGxheWVyLmdldFJlbmRlckJ1ZmZlcigpICogcmVzb2x1dGlvbik7XHJcbiAgICAgICAgICAgIGxldCB0aWxlUHJvamVjdGlvbiA9IHNvdXJjZVRpbGUuZ2V0UHJvamVjdGlvbigpO1xyXG4gICAgICAgICAgICBsZXQgcmVwcm9qZWN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmVwbGF5U3RhdGUuZGlydHkgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIC8vLy8gcmV1c2UgcmVwbGF5R3JvdXAgb2Ygc291cmNlIFRpbGUgdG8gcmVkdWNlIHRoZSBtZW1vcnkuXHJcbiAgICAgICAgICAgIGxldCBkaXN0UmVwbGF5R3JvdXAgPSBzb3VyY2VUaWxlLmdldFJlcGxheUdyb3VwKGxheWVyLCAoPGFueT50aWxlKS53cmFwcGVkVGlsZUNvb3JkLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICBpZiAoZGlzdFJlcGxheUdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBDaGVjayByZXBsYXlHcm91cCBoYXMgIHJlcGxheXNcclxuICAgICAgICAgICAgICAgIGxldCByZXBsYXlzWmluZGV4Q291bnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRpc3RSZXBsYXlHcm91cC5yZXBsYXlzQnlaSW5kZXhfKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgemluZGV4IGluIGRpc3RSZXBsYXlHcm91cC5yZXBsYXlzQnlaSW5kZXhfKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxheXNaaW5kZXhDb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlLmlzTXVsdGl0aHJlYWQgJiYgcmVwbGF5c1ppbmRleENvdW50ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHJlcGxheXMgZGlkIG5vdCBjcmVhdGVkLCBpdCB3aWxsIGNyZWF0ZSBhZnRlciB3ZWIgd29ya2VyIGNhbGwgYmFja1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VUaWxlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlVGlsZVtcInJldXNlVmVjdG9ySW1hZ2VUaWxlXCJdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZVRpbGVbXCJyZXVzZVZlY3RvckltYWdlVGlsZVwiXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc291cmNlVGlsZVtcInJldXNlVmVjdG9ySW1hZ2VUaWxlXCJdLnB1c2godGlsZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXBsYXlTdGF0ZS5yZW5kZXJlZFJldmlzaW9uID0gcmV2aXNpb247XHJcbiAgICAgICAgICAgICAgICAgICAgcmVwbGF5U3RhdGUucmVuZGVyZWRSZW5kZXJPcmRlciA9IHJlbmRlck9yZGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcGxheVN0YXRlLnJlbmRlcmVkVGlsZUxvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVwbGF5R3JvdXAgPSBuZXcgUmVwbGF5R3JvdXBDdXN0b20oMCwgc2hhcmVkRXh0ZW50LCByZXNvbHV0aW9uLCBwaXhlbFJhdGlvLCBzb3VyY2UuZ2V0T3ZlcmxhcHMoKSwgdGhpcy5kZWNsdXR0ZXJUcmVlXywgbGF5ZXIuZ2V0UmVuZGVyQnVmZmVyKCkpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNxdWFyZWRUb2xlcmFuY2UgPSAoPGFueT5vbCkucmVuZGVyZXIudmVjdG9yLmdldFNxdWFyZWRUb2xlcmFuY2UocmVzb2x1dGlvbiwgcGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3RyYXRlZ3lUcmVlID0gKDxhbnk+b2wpLmV4dC5yYnVzaCg5KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7b2wuRmVhdHVyZXxvbC5yZW5kZXIuRmVhdHVyZX0gZmVhdHVyZSBGZWF0dXJlLlxyXG4gICAgICAgICAgICAgICAgICogQHRoaXMge29sLnJlbmRlcmVyLmNhbnZhcy5WZWN0b3JUaWxlTGF5ZXJ9XHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGxldCByZW5kZXJGZWF0dXJlID0gZnVuY3Rpb24gKGZlYXR1cmUsIGdlb1N0eWxlcywgb3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzdHlsZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdlb1N0eWxlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2VvU3R5bGVzICYmIGdlb1N0eWxlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBnZW9TdHlsZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZW9TdHlsZXNbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9sNFN0eWxlcyA9IGdlb1N0eWxlc1tpXS5nZXRTdHlsZXMoZmVhdHVyZSwgcmVzb2x1dGlvbiwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHlsZXMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoc3R5bGVzLCBvbDRTdHlsZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0eWxlRnVuY3Rpb24gPSBmZWF0dXJlLmdldFN0eWxlRnVuY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlRnVuY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlcyA9IHN0eWxlRnVuY3Rpb24uY2FsbCgvKiogQHR5cGUge29sLkZlYXR1cmV9ICovKGZlYXR1cmUpLCByZXNvbHV0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlRnVuY3Rpb24gPSBsYXllci5nZXRTdHlsZUZ1bmN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVGdW5jdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlcyA9IHN0eWxlRnVuY3Rpb24oZmVhdHVyZSwgcmVzb2x1dGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHlsZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRpcnR5ID0gdGhpcy5yZW5kZXJGZWF0dXJlKGZlYXR1cmUsIHNxdWFyZWRUb2xlcmFuY2UsIHN0eWxlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxheUdyb3VwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJ0eV8gPSB0aGlzLmRpcnR5XyB8fCBkaXJ0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGF5U3RhdGUuZGlydHkgPSByZXBsYXlTdGF0ZS5kaXJ0eSB8fCBkaXJ0eTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBpbnN0cnVjdHM7XHJcbiAgICAgICAgICAgICAgICBsZXQgZmVhdHVyZXM7XHJcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlVGlsZS5mZWF0dXJlc0FuZEluc3RydWN0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RydWN0cyA9IHNvdXJjZVRpbGUuZmVhdHVyZXNBbmRJbnN0cnVjdHNbXCJpbnN0cnVjdHNcIl07XHJcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXMgPSBzb3VyY2VUaWxlLmZlYXR1cmVzQW5kSW5zdHJ1Y3RzW1wiZmVhdHVyZXNcIl07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5pc011bHRpdGhyZWFkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbmRlciA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbGVQcm9qZWN0aW9uLmdldFVuaXRzKCkgPT09ICg8YW55Pm9sLnByb2opLlVuaXRzLlRJTEVfUElYRUxTKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbGVQcm9qZWN0aW9uLnNldFdvcmxkRXh0ZW50KHNvdXJjZVRpbGVFeHRlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aWxlUHJvamVjdGlvbi5zZXRFeHRlbnQoc291cmNlVGlsZS5nZXRFeHRlbnQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0aWxlUHJvamVjdGlvbkluZm8gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBuYW1lIGluIHRpbGVQcm9qZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGlsZVByb2plY3Rpb25bbmFtZV0gIT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlsZVByb2plY3Rpb25JbmZvW25hbWVdID0gdGlsZVByb2plY3Rpb25bbmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByb2plY3RJbmZvID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbmFtZSBpbiBwcm9qZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvamVjdGlvbltuYW1lXSAhPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0SW5mb1tuYW1lXSA9IHByb2plY3Rpb25bbmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBnZW9TdHlsZXMgPSBzb3VyY2UuZ2V0R2VvRm9ybWF0KCkuc3R5bGVKc29uQ2FjaGUuZ2VvU3R5bGVzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZXMgJiYgaW5zdHJ1Y3RzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5zdHJ1Y3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZ2VvU3R5bGVJZCA9IGluc3RydWN0c1tpXVsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBnZW9TdHlsZSA9IGdlb1N0eWxlc1tnZW9TdHlsZUlkXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmVhdHVyZUluZm8gPSBmZWF0dXJlc1tpbnN0cnVjdHNbaV1bMF1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZlYXR1cmUgPSBuZXcgKDxhbnk+b2wucmVuZGVyKS5GZWF0dXJlKGZlYXR1cmVJbmZvLnR5cGVfLCBmZWF0dXJlSW5mby5mbGF0Q29vcmRpbmF0ZXNfLCBmZWF0dXJlSW5mby5lbmRzXywgZmVhdHVyZUluZm8ucHJvcGVydGllc18pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlSW5mb1tcInByb2plY3RlZFwiXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbGVQcm9qZWN0aW9uLmdldFVuaXRzKCkgPT09ICg8YW55Pm9sLnByb2opLlVuaXRzLlRJTEVfUElYRUxTKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByb2plY3RlZCB0aWxlIGV4dGVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWxlUHJvamVjdGlvbi5zZXRXb3JsZEV4dGVudChzb3VyY2VUaWxlRXh0ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGlsZSBleHRlbnQgaW4gdGlsZSBwaXhlbCBzcGFjZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWxlUHJvamVjdGlvbi5zZXRFeHRlbnQoc291cmNlVGlsZS5nZXRFeHRlbnQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS50cmFuc2Zvcm0odGlsZVByb2plY3Rpb24sIHByb2plY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuZXh0ZW50XyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZUluZm9bXCJwcm9qZWN0ZWRcIl0gPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVbXCJ0ZW1wVHJlZVppbmRleFwiXSA9IGluc3RydWN0c1tpXVsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVbXCJzdHlsZUlkXCJdID0gZ2VvU3R5bGVJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckZlYXR1cmUuY2FsbCh0aGlzLCBmZWF0dXJlLCBbZ2VvU3R5bGVdLCB7IHN0cmF0ZWd5VHJlZTogc3RyYXRlZ3lUcmVlLCBmcmFtZVN0YXRlOiBmcmFtZVN0YXRlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlRGF0YSA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgWzAsIHRpbGVFeHRlbnQsIHJlc29sdXRpb24sIHBpeGVsUmF0aW8sIHNvdXJjZS5nZXRPdmVybGFwcygpLCB0aGlzLmRlY2x1dHRlclRyZWVfLCBsYXllci5nZXRSZW5kZXJCdWZmZXIoKSwgc291cmNlLmdldEdlb0Zvcm1hdCgpLm1pbmltYWxpc3RdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VUaWxlLnJlcXVlc3RUaWxlQ29vcmQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZVRpbGUudGlsZUNvb3JkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aWxlUHJvamVjdGlvbkluZm8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3RJbmZvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmVkVG9sZXJhbmNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKDxhbnk+b2wpLmdldFVpZChzb3VyY2UuZ2V0R2VvRm9ybWF0KCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZVN0YXRlW1wiY29vcmRpbmF0ZVRvUGl4ZWxUcmFuc2Zvcm1cIl0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZS5nZXRHZW9Gb3JtYXQoKS5tYXhEYXRhWm9vbSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlW1widmVjdG9yVGlsZURhdGFDYWhjZVNpemVcIl1cclxuICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZW5kZXJhID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2FsbGFiY2sgPSBmdW5jdGlvbiAobWVzc2FnZURhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlcGxheXNCeVpJbmRleF8gPSBtZXNzYWdlRGF0YVtcInJlcGxheXNcIl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmZWF0dXJlcyA9IG1lc3NhZ2VEYXRhW1wiZmVhdHVyZXNcIl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnN0cnVjdHMgPSBtZXNzYWdlRGF0YVtcImluc3RydWN0c1wiXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlcyAmJiBpbnN0cnVjdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5zdHJ1Y3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGdlb1N0eWxlSWQgPSBpbnN0cnVjdHNbaV1bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGdlb1N0eWxlID0gZ2VvU3R5bGVzW2dlb1N0eWxlSWRdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmVhdHVyZUluZm8gPSBmZWF0dXJlc1tpbnN0cnVjdHNbaV1bMF1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmZWF0dXJlID0gbmV3ICg8YW55Pm9sLnJlbmRlcikuRmVhdHVyZShmZWF0dXJlSW5mby50eXBlXywgZmVhdHVyZUluZm8uZmxhdENvb3JkaW5hdGVzXywgZmVhdHVyZUluZm8uZW5kc18sIGZlYXR1cmVJbmZvLnByb3BlcnRpZXNfKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlW1widGVtcFRyZWVaaW5kZXhcIl0gPSBpbnN0cnVjdHNbaV1bMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZVtcInN0eWxlSWRcIl0gPSBnZW9TdHlsZUlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckZlYXR1cmUuY2FsbChyZW5kZXJhLCBmZWF0dXJlLCBbZ2VvU3R5bGVdLCB7IHN0cmF0ZWd5VHJlZTogc3RyYXRlZ3lUcmVlLCBmcmFtZVN0YXRlOiBmcmFtZVN0YXRlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHppbmRleCBpbiByZXBsYXlzQnlaSW5kZXhfKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCByZXBsYXlUeXBlIGluIHJlcGxheXNCeVpJbmRleF9bemluZGV4XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXBsYXkgPSByZXBsYXlHcm91cC5nZXRSZXBsYXlDdXN0b20oemluZGV4LCByZXBsYXlUeXBlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHdvcmtSZXBsYXkgPSByZXBsYXlzQnlaSW5kZXhfW3ppbmRleF1bcmVwbGF5VHlwZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzb3VyY2UuZ2V0R2VvRm9ybWF0KCkubWluaW1hbGlzdCAmJiB3b3JrUmVwbGF5Lmluc3RydWN0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdvcmtSZXBsYXkuaW5zdHJ1Y3Rpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5zdHJ1Y3Rpb24gPSB3b3JrUmVwbGF5Lmluc3RydWN0aW9uc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnN0cnVjdGlvblswXSA9PT0gKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuSW5zdHJ1Y3Rpb24uU0VUX0ZJTExfU1RZTEUgJiYgaW5zdHJ1Y3Rpb25bMV0uaW5kZXhPZihcImhhdGNoXCIpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhhdGNoSW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvblsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZ2VvU3R5bGVJZCA9IGhhdGNoSW5zdHJ1Y3Rpb24uc3BsaXQoXCJ8XCIpWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBnZW9TdHlsZSA9IGdlb1N0eWxlc1tnZW9TdHlsZUlkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2VvU3R5bGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvU3R5bGUuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVjdGlvblsxXSA9IGdlb1N0eWxlLmdlb0JydXNoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnN0cnVjdGlvblswXSA9PT0gKDxhbnk+b2wucmVuZGVyKS5jYW52YXMuSW5zdHJ1Y3Rpb24uQkVHSU5fR0VPTUVUUlkgfHwgaW5zdHJ1Y3Rpb25bMF0gPT09ICg8YW55Pm9sKS5yZW5kZXIuY2FudmFzLkluc3RydWN0aW9uLkVORF9HRU9NRVRSWSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmZWF0dXJlSW5mbyA9IGluc3RydWN0aW9uWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmZWF0dXJlID0gbmV3ICg8YW55Pm9sLnJlbmRlcikuRmVhdHVyZShmZWF0dXJlSW5mby50eXBlXywgZmVhdHVyZUluZm8uZmxhdENvb3JkaW5hdGVzXywgZmVhdHVyZUluZm8uZW5kc18sIGZlYXR1cmVJbmZvLnByb3BlcnRpZXNfKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlW1wic3R5bGVJZFwiXSA9IGZlYXR1cmVJbmZvLnN0eWxlSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb25bMV0gPSBmZWF0dXJlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdvcmtSZXBsYXkuaGl0RGV0ZWN0aW9uSW5zdHJ1Y3Rpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaGl0SW5zdHJ1Y3Rpb24gPSB3b3JrUmVwbGF5LmhpdERldGVjdGlvbkluc3RydWN0aW9uc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoaXRJbnN0cnVjdGlvblswXSA9PT0gKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuSW5zdHJ1Y3Rpb24uU0VUX0ZJTExfU1RZTEUgJiYgaGl0SW5zdHJ1Y3Rpb25bMV0uaW5kZXhPZihcImhhdGNoXCIpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhhdGNoSW5zdHJ1Y3Rpb24gPSBoaXRJbnN0cnVjdGlvblsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZ2VvU3R5bGVJZCA9IGhhdGNoSW5zdHJ1Y3Rpb24uc3BsaXQoXCJ8XCIpWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBnZW9TdHlsZSA9IGdlb1N0eWxlc1tnZW9TdHlsZUlkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2VvU3R5bGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvU3R5bGUuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXRJbnN0cnVjdGlvblsxXSA9IGdlb1N0eWxlLmdlb0JydXNoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoaXRJbnN0cnVjdGlvblswXSA9PT0gKDxhbnk+b2wucmVuZGVyKS5jYW52YXMuSW5zdHJ1Y3Rpb24uQkVHSU5fR0VPTUVUUlkgfHwgaGl0SW5zdHJ1Y3Rpb25bMF0gPT09ICg8YW55Pm9sKS5yZW5kZXIuY2FudmFzLkluc3RydWN0aW9uLkVORF9HRU9NRVRSWSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBoaXRmZWF0dXJlSW5mbyA9IGhpdEluc3RydWN0aW9uWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBoaXRmZWF0dXJlID0gbmV3ICg8YW55Pm9sLnJlbmRlcikuRmVhdHVyZShoaXRmZWF0dXJlSW5mby50eXBlXywgaGl0ZmVhdHVyZUluZm8uZmxhdENvb3JkaW5hdGVzXywgaGl0ZmVhdHVyZUluZm8uZW5kc18sIGhpdGZlYXR1cmVJbmZvLnByb3BlcnRpZXNfKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXRmZWF0dXJlW1wic3R5bGVJZFwiXSA9IGhpdGZlYXR1cmVJbmZvLnN0eWxlSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGl0SW5zdHJ1Y3Rpb25bMV0gPSBoaXRmZWF0dXJlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiB3b3JrUmVwbGF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIChrZXkgPT09IFwicGl4ZWxDb29yZGluYXRlc19cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgcmVwbGF5W2tleV0gPSBuZXcgSW50MzJBcnJheSh3b3JrUmVwbGF5W2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGF5W2tleV0gPSB3b3JrUmVwbGF5W2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgciBpbiByZXBsYXlHcm91cC5nZXRSZXBsYXlzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpJbmRleEtleXNbcl0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxheVN0YXRlLnJlbmRlcmVkVGlsZUxvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZVRpbGUuc3RhdGUgPSAoPGFueT5vbCkuVGlsZVN0YXRlLkxPQURFRDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VUaWxlW1wicmV1c2VWZWN0b3JJbWFnZVRpbGVcIl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlVGlsZVtcInJldXNlVmVjdG9ySW1hZ2VUaWxlXCJdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJldXNlZFZlY3RvckltYWdlVGlsZSA9IHNvdXJjZVRpbGVbXCJyZXVzZVZlY3RvckltYWdlVGlsZVwiXVtpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgc291cmNlVGlsZVtcInJldXNlVmVjdG9ySW1hZ2VUaWxlXCJdW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2ZWN0b3JJbWFnZVRpbGVSZXBsYXlTdGF0ZSA9IHJldXNlZFZlY3RvckltYWdlVGlsZS5nZXRSZXBsYXlTdGF0ZShsYXllcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9ySW1hZ2VUaWxlUmVwbGF5U3RhdGUucmVuZGVyZWRSZXZpc2lvbiA9IHJldmlzaW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckltYWdlVGlsZVJlcGxheVN0YXRlLnJlbmRlcmVkUmVuZGVyT3JkZXIgPSByZW5kZXJPcmRlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JJbWFnZVRpbGVSZXBsYXlTdGF0ZS5yZW5kZXJlZFRpbGVMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldXNlZFZlY3RvckltYWdlVGlsZS5zZXRTdGF0ZSgoPGFueT5vbCkuVGlsZVN0YXRlLkxPQURFRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICg8YW55PnRpbGUpLnNldFN0YXRlKCg8YW55Pm9sKS5UaWxlU3RhdGUuTE9BREVEKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLy8vIHJldXNlIHJlcGxheUdyb3VwIG9mIHNvdXJjZSBUaWxlIHRvIHJlZHVjZSB0aGUgbWVtb3J5LlxyXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZVRpbGUuc2V0UmVwbGF5R3JvdXAobGF5ZXIsIHNvdXJjZVRpbGUudGlsZUNvb3JkLnRvU3RyaW5nKCksIHJlcGxheUdyb3VwKTtcclxuICAgICAgICAgICAgICAgICAgICBzb3VyY2UuZ2V0R2VvRm9ybWF0KCkud29ya2VyTWFuYWdlci5wb3N0TWVzc2FnZShzb3VyY2VUaWxlLnRpbGVDb29yZCArICg8YW55Pm9sKS5nZXRVaWQoY2FsbGFiY2spLCBcImNyZWF0ZVJlcGxheVwiLCBtZXNzYWdlRGF0YSwgY2FsbGFiY2ssIHNvdXJjZVRpbGUud29ya2VySWQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXBsYXlTdGF0ZS5yZW5kZXJlZFJldmlzaW9uID0gcmV2aXNpb247XHJcbiAgICAgICAgICAgICAgICAgICAgcmVwbGF5U3RhdGUucmVuZGVyZWRUaWxlTG9hZGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdHJ1Y3RzICYmIGluc3RydWN0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5zdHJ1Y3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmVhdHVyZUluZGV4ID0gaW5zdHJ1Y3RzW2ldWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZlYXR1cmUgPSBmZWF0dXJlc1tmZWF0dXJlSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZlYXR1cmVbXCJwcm9qZWN0ZWRcIl0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXByb2plY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbGVQcm9qZWN0aW9uLmdldFVuaXRzKCkgPT09ICg8YW55Pm9sLnByb2opLlVuaXRzLlRJTEVfUElYRUxTKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcm9qZWN0ZWQgdGlsZSBleHRlbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbGVQcm9qZWN0aW9uLnNldFdvcmxkRXh0ZW50KHNvdXJjZVRpbGVFeHRlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGlsZSBleHRlbnQgaW4gdGlsZSBwaXhlbCBzcGFjZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlsZVByb2plY3Rpb24uc2V0RXh0ZW50KHNvdXJjZVRpbGUuZ2V0RXh0ZW50KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS50cmFuc2Zvcm0odGlsZVByb2plY3Rpb24sIHByb2plY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLmV4dGVudF8gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLmdldEV4dGVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlW1wicHJvamVjdGVkXCJdID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVbXCJ0ZW1wVHJlZVppbmRleFwiXSA9IGluc3RydWN0c1tpXVsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckZlYXR1cmUuY2FsbCh0aGlzLCBmZWF0dXJlLCBbaW5zdHJ1Y3RzW2ldWzFdXSwgeyBzdHJhdGVneVRyZWU6IHN0cmF0ZWd5VHJlZSwgZnJhbWVTdGF0ZTogZnJhbWVTdGF0ZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXBsYXlHcm91cC5maW5pc2goKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCByIGluIHJlcGxheUdyb3VwLmdldFJlcGxheXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB6SW5kZXhLZXlzW3JdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc291cmNlVGlsZS5zZXRSZXBsYXlHcm91cChsYXllciwgc291cmNlVGlsZS50aWxlQ29vcmQudG9TdHJpbmcoKSwgcmVwbGF5R3JvdXApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcGxheVN0YXRlLnJlbmRlcmVkUmV2aXNpb24gPSByZXZpc2lvbjtcclxuICAgICAgICAgICAgICAgICAgICByZXBsYXlTdGF0ZS5yZW5kZXJlZFJlbmRlck9yZGVyID0gcmVuZGVyT3JkZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVwbGF5U3RhdGUucmVuZGVyZWRUaWxlTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVuZGVyVGlsZUltYWdlQ3VzdG9tKHRpbGUsIGZyYW1lU3RhdGUsIGxheWVyU3RhdGUpIHtcclxuICAgICAgICBsZXQgbGF5ZXIgPSB0aGlzLmdldExheWVyKCk7XHJcbiAgICAgICAgbGV0IHJlcGxheVN0YXRlID0gdGlsZS5nZXRSZXBsYXlTdGF0ZShsYXllcik7XHJcbiAgICAgICAgbGV0IHJldmlzaW9uID0gbGF5ZXIuZ2V0UmV2aXNpb24oKTtcclxuICAgICAgICBsZXQgcmVwbGF5cyA9ICg8YW55Pm9sKS5yZW5kZXJlci5jYW52YXMuVmVjdG9yVGlsZUxheWVyLklNQUdFX1JFUExBWVNbbGF5ZXIuZ2V0UmVuZGVyTW9kZSgpXTtcclxuICAgICAgICBpZiAocmVwbGF5cyAmJiByZXBsYXlTdGF0ZS5yZW5kZXJlZFRpbGVMb2FkZWQgJiYgcmVwbGF5U3RhdGUucmVuZGVyZWRUaWxlUmV2aXNpb24gIT09IHJldmlzaW9uKSB7XHJcbiAgICAgICAgICAgIHJlcGxheVN0YXRlLnJlbmRlcmVkVGlsZVJldmlzaW9uID0gcmV2aXNpb247XHJcbiAgICAgICAgICAgIGxldCB0aWxlQ29vcmQgPSB0aWxlLndyYXBwZWRUaWxlQ29vcmQ7XHJcbiAgICAgICAgICAgIGxldCB6ID0gdGlsZUNvb3JkWzBdO1xyXG4gICAgICAgICAgICBsZXQgcGl4ZWxSYXRpbyA9IGZyYW1lU3RhdGUucGl4ZWxSYXRpbztcclxuICAgICAgICAgICAgbGV0IHNvdXJjZSA9IC8qKiBAdHlwZSB7b2wuc291cmNlLlZlY3RvclRpbGV9ICovIChsYXllci5nZXRTb3VyY2UoKSk7XHJcbiAgICAgICAgICAgIGxldCB0aWxlR3JpZCA9IHNvdXJjZS5nZXRUaWxlR3JpZEZvclByb2plY3Rpb24oZnJhbWVTdGF0ZS52aWV3U3RhdGUucHJvamVjdGlvbik7XHJcbiAgICAgICAgICAgIGxldCByZXNvbHV0aW9uID0gdGlsZUdyaWQuZ2V0UmVzb2x1dGlvbih6KTtcclxuICAgICAgICAgICAgbGV0IGNvbnRleHQgPSB0aWxlLmdldENvbnRleHQobGF5ZXIpO1xyXG4gICAgICAgICAgICBsZXQgc2l6ZSA9IHNvdXJjZS5nZXRUaWxlUGl4ZWxTaXplKHosIHBpeGVsUmF0aW8sIGZyYW1lU3RhdGUudmlld1N0YXRlLnByb2plY3Rpb24pO1xyXG4gICAgICAgICAgICBjb250ZXh0LmNhbnZhcy53aWR0aCA9IHNpemVbMF07XHJcbiAgICAgICAgICAgIGNvbnRleHQuY2FudmFzLmhlaWdodCA9IHNpemVbMV07XHJcbiAgICAgICAgICAgIGxldCB0aWxlRXh0ZW50ID0gdGlsZUdyaWQuZ2V0VGlsZUNvb3JkRXh0ZW50KHRpbGVDb29yZCk7XHJcbiAgICAgICAgICAgIGlmIChsYXllci5iYWNrZ3JvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnJlY3QoMCwgMCwgc2l6ZVswXSwgc2l6ZVsxXSk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGxheWVyLmJhY2tncm91bmQ7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSB0aWxlLnRpbGVLZXlzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzb3VyY2VUaWxlID0gdGlsZS5nZXRUaWxlKHRpbGUudGlsZUtleXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZVRpbGUuZ2V0U3RhdGUoKSA9PT0gKDxhbnk+b2wpLlRpbGVTdGF0ZS5FUlJPUikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IHBpeGVsU2NhbGUgPSBwaXhlbFJhdGlvIC8gcmVzb2x1dGlvbjtcclxuICAgICAgICAgICAgICAgIGxldCB0cmFuc2Zvcm0gPSAoPGFueT5vbCkudHJhbnNmb3JtLnJlc2V0KHRoaXMudG1wVHJhbnNmb3JtXyk7XHJcbiAgICAgICAgICAgICAgICAoPGFueT5vbCkudHJhbnNmb3JtLnNjYWxlKHRyYW5zZm9ybSwgcGl4ZWxTY2FsZSwgLXBpeGVsU2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgKDxhbnk+b2wpLnRyYW5zZm9ybS50cmFuc2xhdGUodHJhbnNmb3JtLCAtdGlsZUV4dGVudFswXSwgLXRpbGVFeHRlbnRbM10pO1xyXG4gICAgICAgICAgICAgICAgLy8vLyByZXVzZSByZXBsYXlHcm91cCBvZiBzb3VyY2UgVGlsZSB0byByZWR1Y2UgdGhlIG1lbW9yeS5cclxuICAgICAgICAgICAgICAgIGxldCByZXBsYXlHcm91cCA9IHNvdXJjZVRpbGUuZ2V0UmVwbGF5R3JvdXAobGF5ZXIsIHRpbGVDb29yZCk7XHJcbiAgICAgICAgICAgICAgICByZXBsYXlHcm91cC5yZXBsYXkoY29udGV4dCwgdHJhbnNmb3JtLCAwLCB7fSwgcmVwbGF5cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBoYW5kbGVzKHR5cGU6IHN0cmluZywgbGF5ZXI6IG9sLmxheWVyLkxheWVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGUgPT09ICg8YW55Pm9sKS5yZW5kZXJlci5UeXBlLkNBTlZBUyAmJiAoPGFueT5sYXllcikuZ2V0VHlwZSgpID09PSAoPGFueT5vbCkuTGF5ZXJUeXBlLk1BUFNVSVRFX1ZFQ1RPUlRJTEU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUobWFwUmVuZGVyZXI6IGFueSwgbGF5ZXI6IG9sLmxheWVyLlRpbGUpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEdlb1ZlY3RvclRpbGVMYXllclJlbmRlcig8YW55PmxheWVyKTtcclxuICAgIH1cclxuXHJcbiAgICBkaXNwb3NlSW50ZXJuYWwoKSB7XHJcbiAgICAgICAgKDxhbnk+b2wpLmV2ZW50cy51bmxpc3RlbigoPGFueT5vbC5yZW5kZXIpLmNhbnZhcy5sYWJlbENhY2hlLCAoPGFueT5vbCkuZXZlbnRzLkV2ZW50VHlwZS5DTEVBUiwgdGhpcy5oYW5kbGVGb250c0NoYW5nZWRfLCB0aGlzKTtcclxuICAgICAgICB2YXIgd29ya2VyTWFuYWdlciA9IHRoaXMuZ2V0TGF5ZXIoKS5nZXRTb3VyY2UoKS5nZXRHZW9Gb3JtYXQoKS53b3JrZXJNYW5hZ2VyO1xyXG4gICAgICAgIHdvcmtlck1hbmFnZXIuY2xvc2UoKTtcclxuICAgICAgICAoPGFueT5vbCkucmVuZGVyZXIuY2FudmFzLlRpbGVMYXllci5wcm90b3R5cGUuZGlzcG9zZUludGVybmFsLmNhbGwodGhpcyk7XHJcbiAgICB9O1xyXG59IiwiaW1wb3J0IHsgVGV4dFJlcGxheUN1c3RvbSB9IGZyb20gXCIuL3RleHRSZXBsYXlDdXN0b21cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBSZXBsYXlHcm91cEN1c3RvbSBleHRlbmRzICgoPGFueT5vbCkucmVuZGVyLmNhbnZhcy5SZXBsYXlHcm91cCBhcyB7IG5ldyh0b2xlcmFuY2U6IG51bWJlciwgbWF4RXh0ZW50OiBhbnksIHJlc29sdXRpb246IG51bWJlciwgcGl4ZWxSYXRpbzogbnVtYmVyLCBvdmVybGFwczogYm9vbGVhbiwgZGVjbHV0dGVyVHJlZTogYW55LCBvcHRfcmVuZGVyQnVmZmVyOiBudW1iZXIpIH0pIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0b2xlcmFuY2U6IG51bWJlciwgbWF4RXh0ZW50OiBhbnksIHJlc29sdXRpb246IG51bWJlciwgcGl4ZWxSYXRpbzogbnVtYmVyLCBvdmVybGFwczogYm9vbGVhbiwgZGVjbHV0dGVyVHJlZTogYW55LCBvcHRfcmVuZGVyQnVmZmVyOiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcih0b2xlcmFuY2UsIG1heEV4dGVudCwgcmVzb2x1dGlvbiwgcGl4ZWxSYXRpbywgb3ZlcmxhcHMsIGRlY2x1dHRlclRyZWUsIG9wdF9yZW5kZXJCdWZmZXIpO1xyXG4gICAgICAgIHRoaXMuZ2V0UmVwbGF5ID0gdGhpcy5nZXRSZXBsYXlDdXN0b207XHJcbiAgICAgICAgdGhpcy5CQVRDSF9DT05TVFJVQ1RPUlNfID0gdGhpcy5CQVRDSF9DT05TVFJVQ1RPUlNfQ1VTVE9NO1xyXG4gICAgICAgIC8vIHRoaXMucmVwbGF5ID0gdGhpcy5yZXBsYXlDdXN0b207XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoRmVhdHVyZUF0Q29vcmRpbmF0ZSA9IHRoaXMuZm9yRWFjaEZlYXR1cmVBdENvb3JkaW5hdGVDdXN0b207XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZvckVhY2hGZWF0dXJlQXRDb29yZGluYXRlQ3VzdG9tKGNvb3JkaW5hdGU6IGFueSwgcmVzb2x1dGlvbjogbnVtYmVyLCByb3RhdGlvbjogbnVtYmVyLCBoaXRUb2xlcmFuY2U6IG51bWJlciwgc2tpcHBlZEZlYXR1cmVzSGFzaDogYW55LCBjYWxsYmFjazogYW55LCBkZWNsdXR0ZXJSZXBsYXlzOiBhbnkpIHtcclxuICAgICAgICBoaXRUb2xlcmFuY2UgPSBNYXRoLnJvdW5kKGhpdFRvbGVyYW5jZSk7XHJcbiAgICAgICAgbGV0IGNvbnRleHRTaXplID0gaGl0VG9sZXJhbmNlICogMiArIDE7XHJcbiAgICAgICAgbGV0IHRyYW5zZm9ybSA9ICg8YW55Pm9sKS50cmFuc2Zvcm0uY29tcG9zZSh0aGlzLmhpdERldGVjdGlvblRyYW5zZm9ybV8sXHJcbiAgICAgICAgICAgIGhpdFRvbGVyYW5jZSArIDAuNSwgaGl0VG9sZXJhbmNlICsgMC41LFxyXG4gICAgICAgICAgICAxIC8gcmVzb2x1dGlvbiwgLTEgLyByZXNvbHV0aW9uLFxyXG4gICAgICAgICAgICAtcm90YXRpb24sXHJcbiAgICAgICAgICAgIC1jb29yZGluYXRlWzBdLCAtY29vcmRpbmF0ZVsxXSk7XHJcbiAgICAgICAgbGV0IGNvbnRleHQgPSB0aGlzLmhpdERldGVjdGlvbkNvbnRleHRfO1xyXG5cclxuICAgICAgICBpZiAoY29udGV4dC5jYW52YXMud2lkdGggIT09IGNvbnRleHRTaXplIHx8IGNvbnRleHQuY2FudmFzLmhlaWdodCAhPT0gY29udGV4dFNpemUpIHtcclxuICAgICAgICAgICAgY29udGV4dC5jYW52YXMud2lkdGggPSBjb250ZXh0U2l6ZTtcclxuICAgICAgICAgICAgY29udGV4dC5jYW52YXMuaGVpZ2h0ID0gY29udGV4dFNpemU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgY29udGV4dFNpemUsIGNvbnRleHRTaXplKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtvbC5FeHRlbnR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGV0IGhpdEV4dGVudDtcclxuICAgICAgICBpZiAodGhpcy5yZW5kZXJCdWZmZXJfICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaGl0RXh0ZW50ID0gb2wuZXh0ZW50LmNyZWF0ZUVtcHR5KCk7XHJcbiAgICAgICAgICAgICg8YW55Pm9sLmV4dGVudCkuZXh0ZW5kQ29vcmRpbmF0ZShoaXRFeHRlbnQsIGNvb3JkaW5hdGUpO1xyXG4gICAgICAgICAgICBvbC5leHRlbnQuYnVmZmVyKGhpdEV4dGVudCwgcmVzb2x1dGlvbiAqICh0aGlzLnJlbmRlckJ1ZmZlcl8gKyBoaXRUb2xlcmFuY2UpLCBoaXRFeHRlbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG1hc2sgPSAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5SZXBsYXlHcm91cC5nZXRDaXJjbGVBcnJheV8oaGl0VG9sZXJhbmNlKTtcclxuICAgICAgICBsZXQgZGVjbHV0dGVyZWRGZWF0dXJlcztcclxuICAgICAgICAvLyBpZiAodGhpcy5kZWNsdXR0ZXJUcmVlXykge1xyXG4gICAgICAgIC8vICAgICBkZWNsdXR0ZXJlZEZlYXR1cmVzID0gdGhpcy5kZWNsdXR0ZXJUcmVlXy5hbGwoKS5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XHJcbiAgICAgICAgLy8gICAgICAgICByZXR1cm4gZW50cnkudmFsdWU7XHJcbiAgICAgICAgLy8gICAgIH0pO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHtvbC5GZWF0dXJlfG9sLnJlbmRlci5GZWF0dXJlfSBmZWF0dXJlIEZlYXR1cmUuXHJcbiAgICAgICAgICogQHJldHVybiB7P30gQ2FsbGJhY2sgcmVzdWx0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIGhpdERldGVjdGlvbkNhbGxiYWNrKGZlYXR1cmUpIHtcclxuICAgICAgICAgICAgbGV0IGltYWdlRGF0YSA9IGNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIGNvbnRleHRTaXplLCBjb250ZXh0U2l6ZSkuZGF0YTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZXh0U2l6ZTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbnRleHRTaXplOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWFza1tpXVtqXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VEYXRhWyhqICogY29udGV4dFNpemUgKyBpKSAqIDQgKyAzXSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRlY2x1dHRlcmVkRmVhdHVyZXMgfHwgZGVjbHV0dGVyZWRGZWF0dXJlcy5pbmRleE9mKGZlYXR1cmUpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKGZlYXR1cmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIGNvbnRleHRTaXplLCBjb250ZXh0U2l6ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGF5SGl0RGV0ZWN0aW9uXyhjb250ZXh0LCB0cmFuc2Zvcm0sIHJvdGF0aW9uLFxyXG4gICAgICAgICAgICBza2lwcGVkRmVhdHVyZXNIYXNoLCBoaXREZXRlY3Rpb25DYWxsYmFjaywgaGl0RXh0ZW50LCBkZWNsdXR0ZXJSZXBsYXlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVwbGF5Q3VzdG9tKGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgdHJhbnNmb3JtOiBhbnksIHZpZXdSb3RhdGlvbjogbnVtYmVyLCBza2lwcGVkRmVhdHVyZXNIYXNoOiBhbnksIG9wdF9yZXBsYXlUeXBlczogYW55LCBvcHRfZGVjbHV0dGVyUmVwbGF5czogYW55KSB7XHJcblxyXG4gICAgICAgIC8qKiBAdHlwZSB7QXJyYXkuPG51bWJlcj59ICovXHJcbiAgICAgICAgbGV0IHpzID0gT2JqZWN0LmtleXModGhpcy5yZXBsYXlzQnlaSW5kZXhfKS5tYXAoTnVtYmVyKTtcclxuICAgICAgICB6cy5zb3J0KCg8YW55Pm9sKS5hcnJheS5udW1iZXJTYWZlQ29tcGFyZUZ1bmN0aW9uKTtcclxuXHJcbiAgICAgICAgLy8gc2V0dXAgY2xpcHBpbmcgc28gdGhhdCB0aGUgcGFydHMgb2Ygb3Zlci1zaW1wbGlmaWVkIGdlb21ldHJpZXMgYXJlIG5vdFxyXG4gICAgICAgIC8vIHZpc2libGUgb3V0c2lkZSB0aGUgY3VycmVudCBleHRlbnQgd2hlbiBwYW5uaW5nXHJcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcbiAgICAgICAgdGhpcy5jbGlwKGNvbnRleHQsIHRyYW5zZm9ybSk7XHJcblxyXG4gICAgICAgIGxldCByZXBsYXlUeXBlcyA9IG9wdF9yZXBsYXlUeXBlcyA/IG9wdF9yZXBsYXlUeXBlcyA6ICg8YW55Pm9sLnJlbmRlcikucmVwbGF5Lk9SREVSO1xyXG4gICAgICAgIGxldCBpLCBpaSwgaiwgamosIHJlcGxheXMsIHJlcGxheTtcclxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHpzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgbGV0IHpJbmRleEtleSA9IHpzW2ldLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHJlcGxheXMgPSB0aGlzLnJlcGxheXNCeVpJbmRleF9bekluZGV4S2V5XTtcclxuICAgICAgICAgICAgZm9yIChqID0gMCwgamogPSByZXBsYXlUeXBlcy5sZW5ndGg7IGogPCBqajsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVwbGF5VHlwZSA9IHJlcGxheVR5cGVzW2pdO1xyXG4gICAgICAgICAgICAgICAgcmVwbGF5ID0gcmVwbGF5c1tyZXBsYXlUeXBlXTtcclxuICAgICAgICAgICAgICAgIGlmIChyZXBsYXkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRfZGVjbHV0dGVyUmVwbGF5cyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAocmVwbGF5VHlwZSA9PT0gKDxhbnk+b2wucmVuZGVyKS5SZXBsYXlUeXBlLklNQUdFIHx8IHJlcGxheVR5cGUgPT09ICg8YW55Pm9sLnJlbmRlcikuUmVwbGF5VHlwZS5URVhUKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGVjbHV0dGVyID0gb3B0X2RlY2x1dHRlclJlcGxheXNbekluZGV4S2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkZWNsdXR0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdF9kZWNsdXR0ZXJSZXBsYXlzW3pJbmRleEtleV0gPSBbcmVwbGF5LCB0cmFuc2Zvcm0uc2xpY2UoMCldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjbHV0dGVyLnB1c2gocmVwbGF5LCB0cmFuc2Zvcm0uc2xpY2UoMCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGF5LnJlcGxheShjb250ZXh0LCB0cmFuc2Zvcm0sIHZpZXdSb3RhdGlvbiwgc2tpcHBlZEZlYXR1cmVzSGFzaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0UmVwbGF5Q3VzdG9tKHpJbmRleDogYW55LCByZXBsYXlUeXBlOiBhbnkpIHtcclxuICAgICAgICBsZXQgekluZGV4S2V5ID0gekluZGV4ICE9PSB1bmRlZmluZWQgPyB6SW5kZXgudG9TdHJpbmcoKSA6IFwiMFwiO1xyXG4gICAgICAgIGxldCByZXBsYXlzID0gdGhpcy5yZXBsYXlzQnlaSW5kZXhfW3pJbmRleEtleV07XHJcbiAgICAgICAgaWYgKHJlcGxheXMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXBsYXlzID0ge307XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGF5c0J5WkluZGV4X1t6SW5kZXhLZXldID0gcmVwbGF5cztcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHJlcGxheSA9IHJlcGxheXNbcmVwbGF5VHlwZV07XHJcbiAgICAgICAgaWYgKHJlcGxheSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGxldCBDb25zdHJ1Y3RvciA9IHRoaXMuQkFUQ0hfQ09OU1RSVUNUT1JTX1tyZXBsYXlUeXBlXTtcclxuICAgICAgICAgICAgcmVwbGF5ID0gbmV3IENvbnN0cnVjdG9yKHRoaXMudG9sZXJhbmNlXywgdGhpcy5tYXhFeHRlbnRfLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNvbHV0aW9uXywgdGhpcy5waXhlbFJhdGlvXywgdGhpcy5vdmVybGFwc18sIHRoaXMuZGVjbHV0dGVyVHJlZV8pO1xyXG4gICAgICAgICAgICByZXBsYXlzW3JlcGxheVR5cGVdID0gcmVwbGF5O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVwbGF5O1xyXG4gICAgfVxyXG5cclxuICAgIEJBVENIX0NPTlNUUlVDVE9SU19DVVNUT00gPSB7XHJcbiAgICAgICAgXCJDaXJjbGVcIjogKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuUG9seWdvblJlcGxheSxcclxuICAgICAgICBcIkRlZmF1bHRcIjogKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuUmVwbGF5LFxyXG4gICAgICAgIFwiSW1hZ2VcIjogKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuSW1hZ2VSZXBsYXksXHJcbiAgICAgICAgXCJMaW5lU3RyaW5nXCI6ICg8YW55Pm9sLnJlbmRlci5jYW52YXMpLkxpbmVTdHJpbmdSZXBsYXksXHJcbiAgICAgICAgXCJQb2x5Z29uXCI6ICg8YW55Pm9sLnJlbmRlci5jYW52YXMpLlBvbHlnb25SZXBsYXksXHJcbiAgICAgICAgXCJUZXh0XCI6IFRleHRSZXBsYXlDdXN0b21cclxuICAgIH07XHJcbn0iLCJpbXBvcnQgeyBUZXh0TGFiZWxpbmdTdHJhdGVneSB9IGZyb20gXCIuLi9zdHlsZS90ZXh0TGFiZWxpbmdTdHJhdGVneVwiO1xyXG5pbXBvcnQgeyBEZXRlY3RUZXh0TGFiZWxpbmdTdHJhdGVneSB9IGZyb20gXCIuLi9zdHlsZS9kZXRlY3RUZXh0TGFiZWxpbmdTdHJhdGVneVwiO1xyXG5pbXBvcnQgeyBHZW9UZXh0U3R5bGUgfSBmcm9tIFwiLi4vc3R5bGUvZ2VvVGV4dFN0eWxlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVGV4dFJlcGxheUN1c3RvbSBleHRlbmRzICgoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5UZXh0UmVwbGF5IGFzIHsgbmV3KHRvbGVyYW5jZTogbnVtYmVyLCBtYXhFeHRlbnQ6IGFueSwgcmVzb2x1dGlvbjogbnVtYmVyLCBwaXhlbFJhdGlvOiBudW1iZXIsIG92ZXJsYXBzOiBib29sZWFuLCBkZWNsdXR0ZXJUcmVlOiBhbnkpOyB9KSB7XHJcbiAgICBsYWJlbEluZm9DYWNoZTogYW55O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHRvbGVyYW5jZTogbnVtYmVyLCBtYXhFeHRlbnQ6IGFueSwgcmVzb2x1dGlvbjogbnVtYmVyLCBwaXhlbFJhdGlvOiBudW1iZXIsIG92ZXJsYXBzOiBib29sZWFuLCBkZWNsdXR0ZXJUcmVlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcih0b2xlcmFuY2UsIG1heEV4dGVudCwgcmVzb2x1dGlvbiwgcGl4ZWxSYXRpbywgb3ZlcmxhcHMsIGRlY2x1dHRlclRyZWUpO1xyXG4gICAgICAgIHRoaXMuZHJhd1RleHQgPSB0aGlzLmRyYXdUZXh0Q3VzdG9tO1xyXG4gICAgICAgIHRoaXMuc2V0VGV4dFN0eWxlID0gdGhpcy5zZXRUZXh0U3R5bGVDdXN0b207XHJcbiAgICAgICAgdGhpcy5yZXBsYXlfID0gdGhpcy5yZXBsYXlDdXN0b207XHJcbiAgICAgICAgdGhpcy5sYWJlbEluZm9DYWNoZSA9IG5ldyAoPGFueT5vbCkuc3RydWN0cy5MUlVDYWNoZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZXBsYXlDdXN0b20oY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB0cmFuc2Zvcm06IGFueSwgc2tpcHBlZEZlYXR1cmVzSGFzaDogYW55LCBpbnN0cnVjdGlvbnM6IGFueVtdLCBmZWF0dXJlQ2FsbGJhY2s6IGFueSwgb3B0X2hpdEV4dGVudDogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0pIHtcclxuICAgICAgICAvKiogQHR5cGUge0FycmF5LjxudW1iZXI+fSAqL1xyXG4gICAgICAgIGxldCBwaXhlbEV4dGVuO1xyXG5cclxuICAgICAgICBwaXhlbEV4dGVuID0gKDxhbnk+b2wuZ2VvbSkuZmxhdC50cmFuc2Zvcm0udHJhbnNmb3JtMkQodGhpcy5tYXhFeHRlbnQsIDAsIHRoaXMubWF4RXh0ZW50Lmxlbmd0aCwgMiwgdHJhbnNmb3JtLCB0aGlzW1wicGl4ZWxFeHRlblwiXSk7XHJcblxyXG4gICAgICAgIGxldCBwaXhlbENvb3JkaW5hdGVzO1xyXG4gICAgICAgIGlmICh0aGlzLnBpeGVsQ29vcmRpbmF0ZXNfICYmICg8YW55Pm9sKS5hcnJheS5lcXVhbHModHJhbnNmb3JtLCB0aGlzLnJlbmRlcmVkVHJhbnNmb3JtXykpIHtcclxuICAgICAgICAgICAgcGl4ZWxDb29yZGluYXRlcyA9IHRoaXMucGl4ZWxDb29yZGluYXRlc187XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnBpeGVsQ29vcmRpbmF0ZXNfKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBpeGVsQ29vcmRpbmF0ZXNfID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcGl4ZWxDb29yZGluYXRlcyA9ICg8YW55Pm9sLmdlb20pLmZsYXQudHJhbnNmb3JtLnRyYW5zZm9ybTJEKHRoaXMuY29vcmRpbmF0ZXMsIDAsIHRoaXMuY29vcmRpbmF0ZXMubGVuZ3RoLCAyLCB0cmFuc2Zvcm0sIHRoaXMucGl4ZWxDb29yZGluYXRlc18pOyAoPGFueT5vbCkudHJhbnNmb3JtLnNldEZyb21BcnJheSh0aGlzLnJlbmRlcmVkVHJhbnNmb3JtXywgdHJhbnNmb3JtKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBxdWlja1pvb20gPSBmYWxzZTtcclxuICAgICAgICBpZiAoY29udGV4dFtcInF1aWNrWm9vbVwiXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHF1aWNrWm9vbSA9IGNvbnRleHRbXCJxdWlja1pvb21cIl07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc2tpcEZlYXR1cmVzID0gISg8YW55Pm9sKS5vYmouaXNFbXB0eShza2lwcGVkRmVhdHVyZXNIYXNoKTtcclxuICAgICAgICBsZXQgaSA9IDA7IC8vIGluc3RydWN0aW9uIGluZGV4XHJcbiAgICAgICAgbGV0IGlpID0gaW5zdHJ1Y3Rpb25zLmxlbmd0aDsgLy8gZW5kIG9mIGluc3RydWN0aW9uc1xyXG4gICAgICAgIGxldCBkID0gMDsgLy8gZGF0YSBpbmRleFxyXG4gICAgICAgIGxldCBkZDsgLy8gZW5kIG9mIHBlci1pbnN0cnVjdGlvbiBkYXRhXHJcbiAgICAgICAgbGV0IGFuY2hvclgsIGFuY2hvclksIHByZXZYLCBwcmV2WSwgcm91bmRYLCByb3VuZFksIGRlY2x1dHRlckdyb3VwLCBpbWFnZTtcclxuICAgICAgICBsZXQgcGVuZGluZ0ZpbGwgPSAwO1xyXG4gICAgICAgIGxldCBwZW5kaW5nU3Ryb2tlID0gMDtcclxuICAgICAgICBsZXQgbGFzdEZpbGxJbnN0cnVjdGlvbiA9IG51bGw7XHJcbiAgICAgICAgbGV0IGxhc3RTdHJva2VJbnN0cnVjdGlvbiA9IG51bGw7XHJcbiAgICAgICAgbGV0IGNvb3JkaW5hdGVDYWNoZSA9IHRoaXMuY29vcmRpbmF0ZUNhY2hlXztcclxuICAgICAgICBsZXQgdmlld1JvdGF0aW9uID0gdGhpcy52aWV3Um90YXRpb25fO1xyXG5cclxuICAgICAgICBsZXQgc3RhdGUgPSAvKiogQHR5cGUge29seC5yZW5kZXIuU3RhdGV9ICovICh7XHJcbiAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXHJcbiAgICAgICAgICAgIHBpeGVsUmF0aW86IHRoaXMucGl4ZWxSYXRpbyxcclxuICAgICAgICAgICAgcmVzb2x1dGlvbjogdGhpcy5yZXNvbHV0aW9uLFxyXG4gICAgICAgICAgICByb3RhdGlvbjogdmlld1JvdGF0aW9uXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFdoZW4gdGhlIGJhdGNoIHNpemUgZ2V0cyB0b28gYmlnLCBwZXJmb3JtYW5jZSBkZWNyZWFzZXMuIDIwMCBpcyBhIGdvb2RcclxuICAgICAgICAvLyBiYWxhbmNlIGJldHdlZW4gYmF0Y2ggc2l6ZSBhbmQgbnVtYmVyIG9mIGZpbGwvc3Ryb2tlIGluc3RydWN0aW9ucy5cclxuICAgICAgICBsZXQgYmF0Y2hTaXplID0gdGhpcy5pbnN0cnVjdGlvbnMgIT09IGluc3RydWN0aW9ucyB8fCB0aGlzLm92ZXJsYXBzID8gMCA6IDIwMDtcclxuICAgICAgICB2YXIgY3VycmVudFJlc29sdXRpb24gPSBjb250ZXh0W1wiY3VycmVudFJlc29sdXRpb25cIl07XHJcbiAgICAgICAgdmFyIHJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gKiAxLjE5NDMyODU2Njk1NTg3OSAvIGN1cnJlbnRSZXNvbHV0aW9uO1xyXG4gICAgICAgIGlmKHJhdGlvID49IDMpe1xyXG4gICAgICAgICAgICByYXRpbyAvPSAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aGlsZSAoaSA8IGlpKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnN0cnVjdGlvbiA9IGluc3RydWN0aW9uc1tpXTtcclxuICAgICAgICAgICAgbGV0IHR5cGUgPSAvKiogQHR5cGUge29sLnJlbmRlci5jYW52YXMuSW5zdHJ1Y3Rpb259ICovIChpbnN0cnVjdGlvblswXSk7XHJcbiAgICAgICAgICAgIGxldCAvKiogQHR5cGUge29sLkZlYXR1cmV8b2wucmVuZGVyLkZlYXR1cmV9ICovIGZlYXR1cmUsIHgsIHk7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5JbnN0cnVjdGlvbi5CRUdJTl9HRU9NRVRSWTpcclxuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlID0gLyoqIEB0eXBlIHtvbC5GZWF0dXJlfG9sLnJlbmRlci5GZWF0dXJlfSAqLyAoaW5zdHJ1Y3Rpb25bMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoc2tpcEZlYXR1cmVzICYmIHNraXBwZWRGZWF0dXJlc0hhc2hbKDxhbnk+b2wpLmdldFVpZChmZWF0dXJlKS50b1N0cmluZygpXSkgfHwgIWZlYXR1cmUuZ2V0R2VvbWV0cnkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvblsyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRfaGl0RXh0ZW50ICE9PSB1bmRlZmluZWQgJiYgIW9sLmV4dGVudC5pbnRlcnNlY3RzKG9wdF9oaXRFeHRlbnQsIGZlYXR1cmUuZ2V0R2VvbWV0cnkoKS5nZXRFeHRlbnQoKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMl0pICsgMTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5JbnN0cnVjdGlvbi5CRUdJTl9QQVRIOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nRmlsbCA+IGJhdGNoU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbGxfKGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nRmlsbCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nU3Ryb2tlID4gYmF0Y2hTaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmdTdHJva2UgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXBlbmRpbmdGaWxsICYmICFwZW5kaW5nU3Ryb2tlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZYID0gcHJldlkgPSBOYU47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuSW5zdHJ1Y3Rpb24uQ0lSQ0xFOlxyXG4gICAgICAgICAgICAgICAgICAgIGQgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeDEgPSBwaXhlbENvb3JkaW5hdGVzW2RdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB5MSA9IHBpeGVsQ29vcmRpbmF0ZXNbZCArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB4MiA9IHBpeGVsQ29vcmRpbmF0ZXNbZCArIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB5MiA9IHBpeGVsQ29vcmRpbmF0ZXNbZCArIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkeCA9IHgyIC0geDE7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGR5ID0geTIgLSB5MTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgciA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oeDEgKyByLCB5MSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5hcmMoeDEsIHkxLCByLCAwLCAyICogTWF0aC5QSSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5JbnN0cnVjdGlvbi5DTE9TRV9QQVRIOlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5JbnN0cnVjdGlvbi5DVVNUT006XHJcbiAgICAgICAgICAgICAgICAgICAgZCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGRkID0gaW5zdHJ1Y3Rpb25bMl07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGdlb21ldHJ5ID0gLyoqIEB0eXBlIHtvbC5nZW9tLlNpbXBsZUdlb21ldHJ5fSAqLyAoaW5zdHJ1Y3Rpb25bM10pO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZW5kZXJlciA9IGluc3RydWN0aW9uWzRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmbiA9IGluc3RydWN0aW9uLmxlbmd0aCA9PT0gNiA/IGluc3RydWN0aW9uWzVdIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICg8YW55PnN0YXRlKS5nZW9tZXRyeSA9IGdlb21ldHJ5O1xyXG4gICAgICAgICAgICAgICAgICAgICg8YW55PnN0YXRlKS5mZWF0dXJlID0gZmVhdHVyZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShpIGluIGNvb3JkaW5hdGVDYWNoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZUNhY2hlW2ldID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb29yZHMgPSBjb29yZGluYXRlQ2FjaGVbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZuKHBpeGVsQ29vcmRpbmF0ZXMsIGQsIGRkLCAyLCBjb29yZHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3Jkc1swXSA9IHBpeGVsQ29vcmRpbmF0ZXNbZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3Jkc1sxXSA9IHBpeGVsQ29vcmRpbmF0ZXNbZCArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZHMubGVuZ3RoID0gMjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIoY29vcmRzLCBzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5JbnN0cnVjdGlvbi5EUkFXX0lNQUdFOlxyXG4gICAgICAgICAgICAgICAgICAgIGQgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICBkZCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlID0gIC8qKiBAdHlwZSB7SFRNTENhbnZhc0VsZW1lbnR8SFRNTFZpZGVvRWxlbWVudHxJbWFnZX0gKi8gKGluc3RydWN0aW9uWzNdKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBSZW1haW5pbmcgYXJndW1lbnRzIGluIERSQVdfSU1BR0UgYXJlIGluIGFscGhhYmV0aWNhbCBvcmRlclxyXG4gICAgICAgICAgICAgICAgICAgIGFuY2hvclggPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzRdKTtcclxuICAgICAgICAgICAgICAgICAgICBhbmNob3JZID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvbls1XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVjbHV0dGVyR3JvdXAgPSBmZWF0dXJlQ2FsbGJhY2sgPyBudWxsIDogLyoqIEB0eXBlIHtvbC5EZWNsdXR0ZXJHcm91cH0gKi8gKGluc3RydWN0aW9uWzZdKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaGVpZ2h0ID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvbls3XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9wYWNpdHkgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzhdKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgb3JpZ2luWCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bOV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBvcmlnaW5ZID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvblsxMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByb3RhdGVXaXRoVmlldyA9IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gKGluc3RydWN0aW9uWzExXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJvdGF0aW9uID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvblsxMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzY2FsZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMTNdKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc25hcFRvUGl4ZWwgPSAvKiogQHR5cGUge2Jvb2xlYW59ICovIChpbnN0cnVjdGlvblsxNF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB3aWR0aCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMTVdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhZGRpbmcsIGJhY2tncm91bmRGaWxsLCBiYWNrZ3JvdW5kU3Ryb2tlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnN0cnVjdGlvbi5sZW5ndGggPiAxNikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nID0gLyoqIEB0eXBlIHtBcnJheS48bnVtYmVyPn0gKi8gKGluc3RydWN0aW9uWzE2XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRGaWxsID0gLyoqIEB0eXBlIHtib29sZWFufSAqLyAoaW5zdHJ1Y3Rpb25bMTddKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZFN0cm9rZSA9IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gKGluc3RydWN0aW9uWzE4XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZyA9ICg8YW55Pm9sLnJlbmRlci5jYW52YXMpLmRlZmF1bHRQYWRkaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kRmlsbCA9IGJhY2tncm91bmRTdHJva2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyb3RhdGVXaXRoVmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbiArPSB2aWV3Um90YXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoOyBkIDwgZGQ7IGQgKz0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxheUltYWdlXyhjb250ZXh0LCBwaXhlbENvb3JkaW5hdGVzW2RdLCBwaXhlbENvb3JkaW5hdGVzW2QgKyAxXSwgaW1hZ2UsIGFuY2hvclgsIGFuY2hvclksIGRlY2x1dHRlckdyb3VwLCBoZWlnaHQsIG9wYWNpdHksIG9yaWdpblgsIG9yaWdpblksIHJvdGF0aW9uLCBzY2FsZSwgc25hcFRvUGl4ZWwsIHdpZHRoLCBwYWRkaW5nLCBiYWNrZ3JvdW5kRmlsbCA/IC8qKiBAdHlwZSB7QXJyYXkuPCo+fSAqLyAobGFzdEZpbGxJbnN0cnVjdGlvbikgOiBudWxsLCBiYWNrZ3JvdW5kU3Ryb2tlID8gLyoqIEB0eXBlIHtBcnJheS48Kj59ICovIChsYXN0U3Ryb2tlSW5zdHJ1Y3Rpb24pIDogbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyRGVjbHV0dGVyXyhkZWNsdXR0ZXJHcm91cCwgZmVhdHVyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5JbnN0cnVjdGlvbi5EUkFXX0NIQVJTOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcXVpY2tab29tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBiZWdpbiA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZW5kID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvblsyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBiYXNlbGluZSA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bM10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWNsdXR0ZXJHcm91cCA9IGZlYXR1cmVDYWxsYmFjayA/IG51bGwgOiAvKiogQHR5cGUge29sLkRlY2x1dHRlckdyb3VwfSAqLyAoaW5zdHJ1Y3Rpb25bNF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3ZlcmZsb3cgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzVdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGxLZXkgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKGluc3RydWN0aW9uWzZdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1heEFuZ2xlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvbls3XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtZWFzdXJlID0gLyoqIEB0eXBlIHtmdW5jdGlvbihzdHJpbmcpOm51bWJlcn0gKi8gKGluc3RydWN0aW9uWzhdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9mZnNldFkgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKGluc3RydWN0aW9uWzldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0cm9rZUtleSA9IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAoaW5zdHJ1Y3Rpb25bMTBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0cm9rZVdpZHRoID0gIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMTFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQgPSAvKiogQHR5cGUge3N0cmluZ30gKi8gKGluc3RydWN0aW9uWzEyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZXh0S2V5ID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChpbnN0cnVjdGlvblsxM10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dFNjYWxlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvblsxNF0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRlY2x1dHRlckdyb3VwcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGF0aExlbmd0aCA9ICg8YW55Pm9sLmdlb20pLmZsYXQubGVuZ3RoLmxpbmVTdHJpbmcocGl4ZWxDb29yZGluYXRlcywgYmVnaW4sIGVuZCwgMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZXh0TGVuZ3RoID0gbWVhc3VyZSh0ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG92ZXJmbG93IHx8IHRleHRMZW5ndGggKiAxLjIgPD0gcGF0aExlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIG9yaWdpbmFsIGxvZ2ljYWwgaXMgY3JlYXRlIGxhYmVsIGltYWdlIC0tPiBkZWNsdXR0ZXJHcm91cCAtLT4gZHJhdyBsYWJlbCBpbWFnZSB0byBjb250ZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgbmV3ZXN0IGxvZ2ljYWwgaXMgIGNyZWF0ZSBsYWJlbCBpbmZvIGFuZCBjcmVhdGUgaW1hZ2UgaW5zdHJ1Y3Rpb24gLS0+IGRlY2x1dHRlckdyb3VwIC0tPiBjcmVhdGUgbGFiZWwgaW1hZ2UgLS0+IGRyYXcgbGFiZWwgaW1hZ2UgdG8gY29udGV4dFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsYWJlbEluc3RydWN0aW9ucyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxhYmVsSW5kZXggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UmVzb2x1dGlvbiA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlzdGFuY2UgPSAxODAgKiByYXRpbztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wTGVuZ3RoID0gcGF0aExlbmd0aCAtIHRleHRMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNlbnRlclBvaW50ID0gdG1wTGVuZ3RoIC8gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVmdFBvaW50ID0gY2VudGVyUG9pbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJpZ2h0UG9pbnQgPSBjZW50ZXJQb2ludDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9pbnRBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50QXJyYXkucHVzaChjZW50ZXJQb2ludCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGxlZnRQb2ludCA+ICgodGV4dExlbmd0aCAvIDIpICsgZGlzdGFuY2UpKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdFBvaW50ID0gbGVmdFBvaW50IC0gZGlzdGFuY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50QXJyYXkucHVzaChsZWZ0UG9pbnQpOyAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKHJpZ2h0UG9pbnQgPCAoKHBhdGhMZW5ndGggLSB0ZXh0TGVuZ3RoIC8gMikgLSBkaXN0YW5jZSkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodFBvaW50ID0gcmlnaHRQb2ludCArIGRpc3RhbmNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50QXJyYXkucHVzaChyaWdodFBvaW50KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGxlbiA9IDA7IGxlbiA8IHBvaW50QXJyYXkubGVuZ3RoOyBsZW4rKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcERlY2x1dHRlckdyb3VwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVjbHV0dGVyR3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBEZWNsdXR0ZXJHcm91cCA9IGZlYXR1cmVDYWxsYmFjayA/IG51bGwgOiBkZWNsdXR0ZXJHcm91cC5zbGljZSgwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnRNID0gcG9pbnRBcnJheVtsZW5dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGFydHMgPSAoPGFueT5vbC5nZW9tKS5mbGF0LnRleHRwYXRoLmxpbmVTdHJpbmcocGl4ZWxDb29yZGluYXRlcywgYmVnaW4sIGVuZCwgMiwgdGV4dCwgbWVhc3VyZSwgc3RhcnRNLCBtYXhBbmdsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGMsIGNjLCBjaGFycywgbGFiZWwsIHBhcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3Ryb2tlS2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjID0gMCwgY2MgPSBwYXJ0cy5sZW5ndGg7IGMgPCBjYzsgKytjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnQgPSBwYXJ0c1tjXTsgLy8geCwgeSwgYW5jaG9yWCwgcm90YXRpb24sIGNodW5rXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJzID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXJ0WzRdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsYWJlbEluZm8gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wRGVjbHV0dGVyR3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsSW5mbyA9IHRoaXMuZ2V0SW1hZ2VJbmZvKGNoYXJzLCB0ZXh0S2V5LCBcIlwiLCBzdHJva2VLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxJbnN0cnVjdGlvbnNbbGFiZWxJbmRleF0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnM6IGNoYXJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRLZXk6IHRleHRLZXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbEtleTogZmlsbEtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VLZXk6IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsSW5kZXggKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsSW5mbyA9IC8qKiBAdHlwZSB7b2wucmVuZGVyLmNhbnZhcy5UZXh0UmVwbGF5fSAqLyAodGhpcykuZ2V0SW1hZ2UoY2hhcnMsIHRleHRLZXksIFwiXCIsIHN0cm9rZUtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvclggPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHBhcnRbMl0pICsgc3Ryb2tlV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvclkgPSBiYXNlbGluZSAqIGxhYmVsSW5mb1tcImhlaWdodFwiXSArICgwLjUgLSBiYXNlbGluZSkgKiAyICogc3Ryb2tlV2lkdGggLSBvZmZzZXRZO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxheUltYWdlXyhjb250ZXh0LCAvKiogQHR5cGUge251bWJlcn0gKi8ocGFydFswXSksIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyhwYXJ0WzFdKSwgbGFiZWxJbmZvLCBhbmNob3JYLCBhbmNob3JZLCB0ZW1wRGVjbHV0dGVyR3JvdXAsIGxhYmVsSW5mb1tcImhlaWdodFwiXSwgMSwgMCwgMCwgLyoqIEB0eXBlIHtudW1iZXJ9ICovKHBhcnRbM10pLCB0ZXh0U2NhbGUsIGZhbHNlLCBsYWJlbEluZm9bXCJ3aWR0aFwiXSwgKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuZGVmYXVsdFBhZGRpbmcsIG51bGwsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxsS2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjID0gMCwgY2MgPSBwYXJ0cy5sZW5ndGg7IGMgPCBjYzsgKytjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnQgPSBwYXJ0c1tjXTsgLy8geCwgeSwgYW5jaG9yWCwgcm90YXRpb24sIGNodW5rXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJzID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXJ0WzRdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxhYmVsSW5mbyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBEZWNsdXR0ZXJHcm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxJbmZvID0gdGhpcy5nZXRJbWFnZUluZm8oY2hhcnMsIHRleHRLZXksIGZpbGxLZXksIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxJbnN0cnVjdGlvbnNbbGFiZWxJbmRleF0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnM6IGNoYXJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRLZXk6IHRleHRLZXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbEtleTogZmlsbEtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VLZXk6IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsSW5kZXggKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsSW5mbyA9IC8qKiBAdHlwZSB7b2wucmVuZGVyLmNhbnZhcy5UZXh0UmVwbGF5fSAqLyAodGhpcykuZ2V0SW1hZ2UoY2hhcnMsIHRleHRLZXksIGZpbGxLZXksIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JYID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChwYXJ0WzJdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yWSA9IGJhc2VsaW5lICogbGFiZWxJbmZvW1wiaGVpZ2h0XCJdIC0gb2Zmc2V0WTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYXlJbWFnZV8oY29udGV4dCwgLyoqIEB0eXBlIHtudW1iZXJ9ICovKHBhcnRbMF0pLCAvKiogQHR5cGUge251bWJlcn0gKi8ocGFydFsxXSksIGxhYmVsSW5mbywgYW5jaG9yWCwgYW5jaG9yWSwgdGVtcERlY2x1dHRlckdyb3VwLCBsYWJlbEluZm9bXCJoZWlnaHRcIl0sIDEsIDAsIDAsIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyhwYXJ0WzNdKSwgdGV4dFNjYWxlLCBmYWxzZSwgbGFiZWxJbmZvW1wid2lkdGhcIl0sICg8YW55Pm9sLnJlbmRlci5jYW52YXMpLmRlZmF1bHRQYWRkaW5nLCBudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNsdXR0ZXJHcm91cHMucHVzaCh0ZW1wRGVjbHV0dGVyR3JvdXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBEZWNsdXR0ZXJHcm91cDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVjbHV0dGVyR3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcERlY2x1dHRlckdyb3VwID0gZmVhdHVyZUNhbGxiYWNrID8gbnVsbCA6IGRlY2x1dHRlckdyb3VwLnNsaWNlKDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dEFsaWduID0gLyoqIEB0eXBlIHtvbC5yZW5kZXIuY2FudmFzLlRleHRSZXBsYXl9ICovICh0aGlzKS50ZXh0U3RhdGVzW3RleHRLZXldLnRleHRBbGlnbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RhcnRNID0gKHBhdGhMZW5ndGggLSB0ZXh0TGVuZ3RoKSAqICg8YW55Pm9sLnJlbmRlcikucmVwbGF5LlRFWFRfQUxJR05bdGV4dEFsaWduXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGFydHMgPSAoPGFueT5vbC5nZW9tKS5mbGF0LnRleHRwYXRoLmxpbmVTdHJpbmcocGl4ZWxDb29yZGluYXRlcywgYmVnaW4sIGVuZCwgMiwgdGV4dCwgbWVhc3VyZSwgc3RhcnRNLCBtYXhBbmdsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjLCBjYywgY2hhcnMsIGxhYmVsLCBwYXJ0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3Ryb2tlS2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGMgPSAwLCBjYyA9IHBhcnRzLmxlbmd0aDsgYyA8IGNjOyArK2MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0ID0gcGFydHNbY107IC8vIHgsIHksIGFuY2hvclgsIHJvdGF0aW9uLCBjaHVua1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJzID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXJ0WzRdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxhYmVsSW5mbyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcERlY2x1dHRlckdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsSW5mbyA9IHRoaXMuZ2V0SW1hZ2VJbmZvKGNoYXJzLCB0ZXh0S2V5LCBcIlwiLCBzdHJva2VLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbEluc3RydWN0aW9uc1tsYWJlbEluZGV4XSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJzOiBjaGFycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRLZXk6IHRleHRLZXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsS2V5OiBmaWxsS2V5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlS2V5OiBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxJbmRleCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxJbmZvID0gLyoqIEB0eXBlIHtvbC5yZW5kZXIuY2FudmFzLlRleHRSZXBsYXl9ICovICh0aGlzKS5nZXRJbWFnZShjaGFycywgdGV4dEtleSwgXCJcIiwgc3Ryb2tlS2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsYWJlbCA9IC8qKiBAdHlwZSB7b2wucmVuZGVyLmNhbnZhcy5UZXh0UmVwbGF5fSAqLyAodGhpcykuZ2V0SW1hZ2UoY2hhcnMsIHRleHRLZXksIFwiXCIsIHN0cm9rZUtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yWCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocGFydFsyXSkgKyBzdHJva2VXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JZID0gYmFzZWxpbmUgKiBsYWJlbEluZm9bXCJoZWlnaHRcIl0gKyAoMC41IC0gYmFzZWxpbmUpICogMiAqIHN0cm9rZVdpZHRoIC0gb2Zmc2V0WTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxheUltYWdlXyhjb250ZXh0LCAvKiogQHR5cGUge251bWJlcn0gKi8ocGFydFswXSksIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyhwYXJ0WzFdKSwgbGFiZWxJbmZvLCBhbmNob3JYLCBhbmNob3JZLCB0ZW1wRGVjbHV0dGVyR3JvdXAsIGxhYmVsSW5mb1tcImhlaWdodFwiXSwgMSwgMCwgMCwgLyoqIEB0eXBlIHtudW1iZXJ9ICovKHBhcnRbM10pLCB0ZXh0U2NhbGUsIGZhbHNlLCBsYWJlbEluZm9bXCJ3aWR0aFwiXSwgKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuZGVmYXVsdFBhZGRpbmcsIG51bGwsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxsS2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGMgPSAwLCBjYyA9IHBhcnRzLmxlbmd0aDsgYyA8IGNjOyArK2MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0ID0gcGFydHNbY107IC8vIHgsIHksIGFuY2hvclgsIHJvdGF0aW9uLCBjaHVua1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJzID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXJ0WzRdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxhYmVsSW5mbyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVtcERlY2x1dHRlckdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsSW5mbyA9IHRoaXMuZ2V0SW1hZ2VJbmZvKGNoYXJzLCB0ZXh0S2V5LCBmaWxsS2V5LCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxJbnN0cnVjdGlvbnNbbGFiZWxJbmRleF0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyczogY2hhcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0S2V5OiB0ZXh0S2V5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbEtleTogZmlsbEtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZUtleTogXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsSW5kZXggKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsSW5mbyA9IC8qKiBAdHlwZSB7b2wucmVuZGVyLmNhbnZhcy5UZXh0UmVwbGF5fSAqLyAodGhpcykuZ2V0SW1hZ2UoY2hhcnMsIHRleHRLZXksIGZpbGxLZXksIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yWCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAocGFydFsyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yWSA9IGJhc2VsaW5lICogbGFiZWxJbmZvW1wiaGVpZ2h0XCJdIC0gb2Zmc2V0WTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxheUltYWdlXyhjb250ZXh0LCAvKiogQHR5cGUge251bWJlcn0gKi8ocGFydFswXSksIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyhwYXJ0WzFdKSwgbGFiZWxJbmZvLCBhbmNob3JYLCBhbmNob3JZLCB0ZW1wRGVjbHV0dGVyR3JvdXAsIGxhYmVsSW5mb1tcImhlaWdodFwiXSwgMSwgMCwgMCwgLyoqIEB0eXBlIHtudW1iZXJ9ICovKHBhcnRbM10pLCB0ZXh0U2NhbGUsIGZhbHNlLCBsYWJlbEluZm9bXCJ3aWR0aFwiXSwgKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuZGVmYXVsdFBhZGRpbmcsIG51bGwsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2x1dHRlckdyb3Vwcy5wdXNoKHRlbXBEZWNsdXR0ZXJHcm91cCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgZCA9IDA7IGQgPCBkZWNsdXR0ZXJHcm91cHMubGVuZ3RoOyBkKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0YXJnZXREZWNsdXR0ZXJHcm91cCA9IGRlY2x1dHRlckdyb3Vwc1tkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXREZWNsdXR0ZXJHcm91cCAmJiB0YXJnZXREZWNsdXR0ZXJHcm91cC5sZW5ndGggPiA1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRhcmdldEV4dGVudCA9IFt0YXJnZXREZWNsdXR0ZXJHcm91cFswXSwgdGFyZ2V0RGVjbHV0dGVyR3JvdXBbMV0sIHRhcmdldERlY2x1dHRlckdyb3VwWzJdLCB0YXJnZXREZWNsdXR0ZXJHcm91cFszXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldEV4dGVudFswXSA+IHBpeGVsRXh0ZW5bMF0gJiYgdGFyZ2V0RXh0ZW50WzFdID4gcGl4ZWxFeHRlblszXSAmJiB0YXJnZXRFeHRlbnRbMl0gPCBwaXhlbEV4dGVuWzJdICYmIHRhcmdldEV4dGVudFszXSA8IHBpeGVsRXh0ZW5bMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJEZWNsdXR0ZXJDaGFyXyh0YXJnZXREZWNsdXR0ZXJHcm91cCwgZmVhdHVyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuSW5zdHJ1Y3Rpb24uRU5EX0dFT01FVFJZOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlQ2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlID0gLyoqIEB0eXBlIHtvbC5GZWF0dXJlfG9sLnJlbmRlci5GZWF0dXJlfSAqLyAoaW5zdHJ1Y3Rpb25bMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gZmVhdHVyZUNhbGxiYWNrKGZlYXR1cmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuSW5zdHJ1Y3Rpb24uRklMTDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYmF0Y2hTaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmdGaWxsKys7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxsXyhjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5JbnN0cnVjdGlvbi5NT1ZFX1RPX0xJTkVfVE86XHJcbiAgICAgICAgICAgICAgICAgICAgZCA9IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoaW5zdHJ1Y3Rpb25bMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGRkID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChpbnN0cnVjdGlvblsyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IHBpeGVsQ29vcmRpbmF0ZXNbZF07XHJcbiAgICAgICAgICAgICAgICAgICAgeSA9IHBpeGVsQ29vcmRpbmF0ZXNbZCArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJvdW5kWCA9ICh4ICsgMC41KSB8IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgcm91bmRZID0gKHkgKyAwLjUpIHwgMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocm91bmRYICE9PSBwcmV2WCB8fCByb3VuZFkgIT09IHByZXZZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHgsIHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2WCA9IHJvdW5kWDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldlkgPSByb3VuZFk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoZCArPSAyOyBkIDwgZGQ7IGQgKz0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gcGl4ZWxDb29yZGluYXRlc1tkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeSA9IHBpeGVsQ29vcmRpbmF0ZXNbZCArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3VuZFggPSAoeCArIDAuNSkgfCAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3VuZFkgPSAoeSArIDAuNSkgfCAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZCA9PT0gZGQgLSAyIHx8IHJvdW5kWCAhPT0gcHJldlggfHwgcm91bmRZICE9PSBwcmV2WSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oeCwgeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2WCA9IHJvdW5kWDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZZID0gcm91bmRZO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuSW5zdHJ1Y3Rpb24uU0VUX0ZJTExfU1RZTEU6XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdEZpbGxJbnN0cnVjdGlvbiA9IGluc3RydWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsbE9yaWdpbl8gPSBpbnN0cnVjdGlvblsyXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlbmRpbmdGaWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsbF8oY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmdGaWxsID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlbmRpbmdTdHJva2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nU3Ryb2tlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAvKiogQHR5cGUge29sLkNvbG9yTGlrZX0gKi8gKGluc3RydWN0aW9uWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICg8YW55Pm9sLnJlbmRlci5jYW52YXMpLkluc3RydWN0aW9uLlNFVF9TVFJPS0VfU1RZTEU6XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdFN0cm9rZUluc3RydWN0aW9uID0gaW5zdHJ1Y3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlbmRpbmdTdHJva2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZ1N0cm9rZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3Ryb2tlU3R5bGVfKGNvbnRleHQsIC8qKiBAdHlwZSB7QXJyYXkuPCo+fSAqLyhpbnN0cnVjdGlvbikpO1xyXG4gICAgICAgICAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuSW5zdHJ1Y3Rpb24uU1RST0tFOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChiYXRjaFNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZ1N0cm9rZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgKytpOyAvLyBjb25zdW1lIHRoZSBpbnN0cnVjdGlvbiBhbnl3YXksIHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3BcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGVuZGluZ0ZpbGwpIHtcclxuICAgICAgICAgICAgdGhpcy5maWxsXyhjb250ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBlbmRpbmdTdHJva2UpIHtcclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVwbGF5SW1hZ2VfKGNvbnRleHQsIHgsIHksIGxhYmVsSW5mbyxcclxuICAgICAgICBhbmNob3JYLCBhbmNob3JZLCBkZWNsdXR0ZXJHcm91cCwgaGVpZ2h0LCBvcGFjaXR5LCBvcmlnaW5YLCBvcmlnaW5ZLFxyXG4gICAgICAgIHJvdGF0aW9uLCBzY2FsZSwgc25hcFRvUGl4ZWwsIHdpZHRoLCBwYWRkaW5nLCBmaWxsSW5zdHJ1Y3Rpb24sIHN0cm9rZUluc3RydWN0aW9uKSB7XHJcbiAgICAgICAgbGV0IGZpbGxTdHJva2UgPSBmaWxsSW5zdHJ1Y3Rpb24gfHwgc3Ryb2tlSW5zdHJ1Y3Rpb247XHJcbiAgICAgICAgbGV0IGxvY2FsVHJhbnNmb3JtID0gdGhpcy50bXBMb2NhbFRyYW5zZm9ybV87XHJcbiAgICAgICAgYW5jaG9yWCAqPSBzY2FsZTtcclxuICAgICAgICBhbmNob3JZICo9IHNjYWxlO1xyXG4gICAgICAgIHggLT0gYW5jaG9yWDtcclxuICAgICAgICB5IC09IGFuY2hvclk7XHJcbiAgICAgICAgaWYgKHNuYXBUb1BpeGVsKSB7XHJcbiAgICAgICAgICAgIHggPSBNYXRoLmNlaWwoeCk7XHJcbiAgICAgICAgICAgIHkgPSBNYXRoLmNlaWwoeSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdyA9ICh3aWR0aCArIG9yaWdpblggPiBsYWJlbEluZm8ud2lkdGgpID8gbGFiZWxJbmZvLndpZHRoIC0gb3JpZ2luWCA6IHdpZHRoO1xyXG4gICAgICAgIGxldCBoID0gKGhlaWdodCArIG9yaWdpblkgPiBsYWJlbEluZm8uaGVpZ2h0KSA/IGxhYmVsSW5mby5oZWlnaHQgLSBvcmlnaW5ZIDogaGVpZ2h0O1xyXG4gICAgICAgIGxldCBib3ggPSB0aGlzLnRtcEV4dGVudF87XHJcbiAgICAgICAgbGV0IGJveFcgPSBwYWRkaW5nWzNdICsgdyAqIHNjYWxlICsgcGFkZGluZ1sxXTtcclxuICAgICAgICBsZXQgYm94SCA9IHBhZGRpbmdbMF0gKyBoICogc2NhbGUgKyBwYWRkaW5nWzJdO1xyXG4gICAgICAgIGxldCBib3hYID0geCAtIHBhZGRpbmdbM107XHJcbiAgICAgICAgbGV0IGJveFkgPSB5IC0gcGFkZGluZ1swXTtcclxuXHJcbiAgICAgICAgLyoqIEB0eXBlIHtvbC5Db29yZGluYXRlfSAqL1xyXG4gICAgICAgIGxldCBwMTtcclxuICAgICAgICAvKiogQHR5cGUge29sLkNvb3JkaW5hdGV9ICovXHJcbiAgICAgICAgbGV0IHAyO1xyXG4gICAgICAgIC8qKiBAdHlwZSB7b2wuQ29vcmRpbmF0ZX0gKi9cclxuICAgICAgICBsZXQgcDM7XHJcbiAgICAgICAgLyoqIEB0eXBlIHtvbC5Db29yZGluYXRlfSAqL1xyXG4gICAgICAgIGxldCBwNDtcclxuICAgICAgICBpZiAoZmlsbFN0cm9rZSB8fCByb3RhdGlvbiAhPT0gMCkge1xyXG4gICAgICAgICAgICBwMSA9IFtib3hYLCBib3hZXTtcclxuICAgICAgICAgICAgcDIgPSBbYm94WCArIGJveFcsIGJveFldO1xyXG4gICAgICAgICAgICBwMyA9IFtib3hYICsgYm94VywgYm94WSArIGJveEhdO1xyXG4gICAgICAgICAgICBwNCA9IFtib3hYLCBib3hZICsgYm94SF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdHJhbnNmb3JtID0gbnVsbDtcclxuICAgICAgICBpZiAocm90YXRpb24gIT09IDApIHtcclxuICAgICAgICAgICAgdmFyIGNlbnRlclggPSB4ICsgYW5jaG9yWDtcclxuICAgICAgICAgICAgdmFyIGNlbnRlclkgPSB5ICsgYW5jaG9yWTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtID0gKDxhbnk+b2wpLnRyYW5zZm9ybS5jb21wb3NlKGxvY2FsVHJhbnNmb3JtLFxyXG4gICAgICAgICAgICAgICAgY2VudGVyWCwgY2VudGVyWSwgMSwgMSwgcm90YXRpb24sIC1jZW50ZXJYLCAtY2VudGVyWSk7XHJcblxyXG4gICAgICAgICAgICAoPGFueT5vbCkuZXh0ZW50LmNyZWF0ZU9yVXBkYXRlRW1wdHkoYm94KTtcclxuICAgICAgICAgICAgKDxhbnk+b2wpLmV4dGVudC5leHRlbmRDb29yZGluYXRlKGJveCwgKDxhbnk+b2wpLnRyYW5zZm9ybS5hcHBseShsb2NhbFRyYW5zZm9ybSwgcDEpKTtcclxuICAgICAgICAgICAgKDxhbnk+b2wpLmV4dGVudC5leHRlbmRDb29yZGluYXRlKGJveCwgKDxhbnk+b2wpLnRyYW5zZm9ybS5hcHBseShsb2NhbFRyYW5zZm9ybSwgcDIpKTtcclxuICAgICAgICAgICAgKDxhbnk+b2wpLmV4dGVudC5leHRlbmRDb29yZGluYXRlKGJveCwgKDxhbnk+b2wpLnRyYW5zZm9ybS5hcHBseShsb2NhbFRyYW5zZm9ybSwgcDMpKTtcclxuICAgICAgICAgICAgKDxhbnk+b2wpLmV4dGVudC5leHRlbmRDb29yZGluYXRlKGJveCwgKDxhbnk+b2wpLnRyYW5zZm9ybS5hcHBseShsb2NhbFRyYW5zZm9ybSwgcDQpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAoPGFueT5vbCkuZXh0ZW50LmNyZWF0ZU9yVXBkYXRlKGJveFgsIGJveFksIGJveFggKyBib3hXLCBib3hZICsgYm94SCwgYm94KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNhbnZhcyA9IGNvbnRleHQuY2FudmFzO1xyXG4gICAgICAgIHZhciBpbnRlcnNlY3RzID0gYm94WzBdIDw9IGNhbnZhcy53aWR0aCAmJiBib3hbMl0gPj0gMCAmJiBib3hbMV0gPD0gY2FudmFzLmhlaWdodCAmJiBib3hbM10gPj0gMDtcclxuICAgICAgICBpZiAoZGVjbHV0dGVyR3JvdXApIHtcclxuICAgICAgICAgICAgaWYgKCFpbnRlcnNlY3RzICYmIGRlY2x1dHRlckdyb3VwWzRdID09IDEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvbC5leHRlbnQuZXh0ZW5kKGRlY2x1dHRlckdyb3VwLCBib3gpO1xyXG4gICAgICAgICAgICB2YXIgZGVjbHV0dGVyQXJncyA9IGludGVyc2VjdHMgP1xyXG4gICAgICAgICAgICAgICAgW2NvbnRleHQsIHRyYW5zZm9ybSA/IHRyYW5zZm9ybS5zbGljZSgwKSA6IG51bGwsIG9wYWNpdHksIGxhYmVsSW5mbywgb3JpZ2luWCwgb3JpZ2luWSwgdywgaCwgeCwgeSwgc2NhbGVdIDpcclxuICAgICAgICAgICAgICAgIG51bGw7XHJcbiAgICAgICAgICAgIGlmIChkZWNsdXR0ZXJBcmdzICYmIGZpbGxTdHJva2UpIHtcclxuICAgICAgICAgICAgICAgIGRlY2x1dHRlckFyZ3MucHVzaChmaWxsSW5zdHJ1Y3Rpb24sIHN0cm9rZUluc3RydWN0aW9uLCBwMSwgcDIsIHAzLCBwNCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVjbHV0dGVyR3JvdXAucHVzaChkZWNsdXR0ZXJBcmdzKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGludGVyc2VjdHMpIHtcclxuICAgICAgICAgICAgaWYgKGZpbGxTdHJva2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVwbGF5VGV4dEJhY2tncm91bmRfKGNvbnRleHQsIHAxLCBwMiwgcDMsIHA0LFxyXG4gICAgICAgICAgICAgIC8qKiBAdHlwZSB7QXJyYXkuPCo+fSAqLyhmaWxsSW5zdHJ1Y3Rpb24pLFxyXG4gICAgICAgICAgICAgIC8qKiBAdHlwZSB7QXJyYXkuPCo+fSAqLyhzdHJva2VJbnN0cnVjdGlvbikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICg8YW55Pm9sKS5yZW5kZXIuY2FudmFzLmRyYXdJbWFnZShjb250ZXh0LCB0cmFuc2Zvcm0sIG9wYWNpdHksIGxhYmVsSW5mbywgb3JpZ2luWCwgb3JpZ2luWSwgdywgaCwgeCwgeSwgc2NhbGUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gR2V0IHRoZSBpbWFnZSBpbmZvLCBzdWNoIGFzIHdpZHRoLCBoZWlnaHRcclxuICAgIHB1YmxpYyBnZXRJbWFnZUluZm8odGV4dCwgdGV4dEtleSwgZmlsbEtleSwgc3Ryb2tlS2V5KSB7XHJcbiAgICAgICAgdmFyIGxhYmVsSW5mbyA9IHt9O1xyXG4gICAgICAgIGxhYmVsSW5mb1tcInRleHRcIl0gPSB0ZXh0O1xyXG4gICAgICAgIGxhYmVsSW5mb1tcInRleHRLZXlcIl0gPSB0ZXh0S2V5O1xyXG4gICAgICAgIGxhYmVsSW5mb1tcImZpbGxLZXlcIl0gPSBmaWxsS2V5O1xyXG4gICAgICAgIGxhYmVsSW5mb1tcInN0cm9rZUtleVwiXSA9IHN0cm9rZUtleTtcclxuICAgICAgICB2YXIgbGFiZWw7XHJcbiAgICAgICAgdmFyIGtleSA9IHN0cm9rZUtleSArIHRleHRLZXkgKyB0ZXh0ICsgZmlsbEtleSArIHRoaXMucGl4ZWxSYXRpbztcclxuXHJcblxyXG4gICAgICAgIGlmICghdGhpcy5sYWJlbEluZm9DYWNoZS5jb250YWluc0tleShrZXkpKSB7XHJcbiAgICAgICAgICAgIHZhciBzdHJva2VTdGF0ZSA9IHN0cm9rZUtleSA/IHRoaXMuc3Ryb2tlU3RhdGVzW3N0cm9rZUtleV0gfHwgdGhpcy50ZXh0U3Ryb2tlU3RhdGVfIDogbnVsbDtcclxuICAgICAgICAgICAgdmFyIGZpbGxTdGF0ZSA9IGZpbGxLZXkgPyB0aGlzLmZpbGxTdGF0ZXNbZmlsbEtleV0gfHwgdGhpcy50ZXh0RmlsbFN0YXRlXyA6IG51bGw7XHJcbiAgICAgICAgICAgIHZhciB0ZXh0U3RhdGUgPSB0aGlzLnRleHRTdGF0ZXNbdGV4dEtleV0gfHwgdGhpcy50ZXh0U3RhdGVfO1xyXG4gICAgICAgICAgICB2YXIgcGl4ZWxSYXRpbyA9IHRoaXMucGl4ZWxSYXRpbztcclxuICAgICAgICAgICAgdmFyIHNjYWxlID0gdGV4dFN0YXRlLnNjYWxlICogcGl4ZWxSYXRpbztcclxuICAgICAgICAgICAgdmFyIGFsaWduID0gKDxhbnk+b2wpLnJlbmRlci5yZXBsYXkuVEVYVF9BTElHTlt0ZXh0U3RhdGUudGV4dEFsaWduIHx8ICg8YW55Pm9sLnJlbmRlci5jYW52YXMpLmRlZmF1bHRUZXh0QWxpZ25dO1xyXG4gICAgICAgICAgICB2YXIgc3Ryb2tlV2lkdGggPSBzdHJva2VLZXkgJiYgc3Ryb2tlU3RhdGUubGluZVdpZHRoID8gc3Ryb2tlU3RhdGUubGluZVdpZHRoIDogMDtcclxuXHJcbiAgICAgICAgICAgIHZhciBsaW5lcyA9IHRleHQuc3BsaXQoJ1xcbicpO1xyXG4gICAgICAgICAgICB2YXIgbnVtTGluZXMgPSBsaW5lcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciB3aWR0aHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIHZhciB3aWR0aCA9ICg8YW55Pm9sKS5yZW5kZXIuY2FudmFzLlRleHRSZXBsYXkubWVhc3VyZVRleHRXaWR0aHModGV4dFN0YXRlLmZvbnQsIGxpbmVzLCB3aWR0aHMpO1xyXG4gICAgICAgICAgICB2YXIgbGluZUhlaWdodCA9IHRleHRTdGF0ZS5saW5lSGVpZ2h0O1xyXG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gbGluZUhlaWdodCAqIG51bUxpbmVzO1xyXG4gICAgICAgICAgICB2YXIgcmVuZGVyV2lkdGggPSAod2lkdGggKyBzdHJva2VXaWR0aCk7XHJcblxyXG4gICAgICAgICAgICBsYWJlbEluZm9bXCJ3aWR0aFwiXSA9IE1hdGguY2VpbChyZW5kZXJXaWR0aCAqIHNjYWxlKTtcclxuICAgICAgICAgICAgbGFiZWxJbmZvW1wid2lkdGhzXCJdID0gd2lkdGhzO1xyXG4gICAgICAgICAgICBsYWJlbEluZm9bXCJoZWlnaHRcIl0gPSBNYXRoLmNlaWwoKGhlaWdodCArIHN0cm9rZVdpZHRoKSAqIHNjYWxlKTtcclxuICAgICAgICAgICAgdGhpcy5sYWJlbEluZm9DYWNoZS5zZXQoa2V5LCBsYWJlbEluZm8pO1xyXG4gICAgICAgICAgICByZXR1cm4gbGFiZWxJbmZvO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGFiZWxJbmZvQ2FjaGUuZ2V0KGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SW1hZ2UodGV4dCwgdGV4dEtleSwgZmlsbEtleSwgc3Ryb2tlS2V5KSB7XHJcbiAgICAgICAgdmFyIGxhYmVsO1xyXG4gICAgICAgIHZhciBrZXkgPSBzdHJva2VLZXkgKyB0ZXh0S2V5ICsgdGV4dCArIGZpbGxLZXkgKyB0aGlzLnBpeGVsUmF0aW87XHJcblxyXG4gICAgICAgIHZhciBsYWJlbENhY2hlID0gKDxhbnk+b2wpLnJlbmRlci5jYW52YXMubGFiZWxDYWNoZTtcclxuICAgICAgICBpZiAoIWxhYmVsQ2FjaGUuY29udGFpbnNLZXkoa2V5KSkge1xyXG4gICAgICAgICAgICB2YXIgbGFiZWxJbmZvID0gdGhpcy5sYWJlbEluZm9DYWNoZVtcImtleVwiXTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzdHJva2VTdGF0ZSA9IHN0cm9rZUtleSA/IHRoaXMuc3Ryb2tlU3RhdGVzW3N0cm9rZUtleV0gfHwgdGhpcy50ZXh0U3Ryb2tlU3RhdGVfIDogbnVsbDtcclxuICAgICAgICAgICAgdmFyIGZpbGxTdGF0ZSA9IGZpbGxLZXkgPyB0aGlzLmZpbGxTdGF0ZXNbZmlsbEtleV0gfHwgdGhpcy50ZXh0RmlsbFN0YXRlXyA6IG51bGw7XHJcbiAgICAgICAgICAgIHZhciB0ZXh0U3RhdGUgPSB0aGlzLnRleHRTdGF0ZXNbdGV4dEtleV0gfHwgdGhpcy50ZXh0U3RhdGVfO1xyXG4gICAgICAgICAgICB2YXIgcGl4ZWxSYXRpbyA9IHRoaXMucGl4ZWxSYXRpbztcclxuICAgICAgICAgICAgdmFyIHNjYWxlID0gdGV4dFN0YXRlLnNjYWxlICogcGl4ZWxSYXRpbztcclxuICAgICAgICAgICAgdmFyIGFsaWduID0gKDxhbnk+b2wpLnJlbmRlci5yZXBsYXkuVEVYVF9BTElHTlt0ZXh0U3RhdGUudGV4dEFsaWduIHx8ICg8YW55Pm9sKS5yZW5kZXIuY2FudmFzLmRlZmF1bHRUZXh0QWxpZ25dO1xyXG4gICAgICAgICAgICB2YXIgc3Ryb2tlV2lkdGggPSBzdHJva2VLZXkgJiYgc3Ryb2tlU3RhdGUubGluZVdpZHRoID8gc3Ryb2tlU3RhdGUubGluZVdpZHRoIDogMDtcclxuXHJcbiAgICAgICAgICAgIHZhciBsaW5lcyA9IHRleHQuc3BsaXQoJ1xcbicpO1xyXG4gICAgICAgICAgICB2YXIgbnVtTGluZXMgPSBsaW5lcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciB3aWR0aHMgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHdpZHRoO1xyXG4gICAgICAgICAgICB2YXIgbGluZUhlaWdodDtcclxuICAgICAgICAgICAgaWYgKGxhYmVsSW5mbykge1xyXG4gICAgICAgICAgICAgICAgd2lkdGggPSBsYWJlbEluZm9bXCJ3aWR0aFwiXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoID0gKDxhbnk+b2wpLnJlbmRlci5jYW52YXMuVGV4dFJlcGxheS5tZWFzdXJlVGV4dFdpZHRocyh0ZXh0U3RhdGUuZm9udCwgbGluZXMsIHdpZHRocyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGxpbmVIZWlnaHQgPSB0ZXh0U3RhdGVbXCJsaW5lSGVpZ2h0XCJdO1xyXG5cclxuXHJcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSBsaW5lSGVpZ2h0ICogbnVtTGluZXM7XHJcbiAgICAgICAgICAgIHZhciByZW5kZXJXaWR0aCA9ICh3aWR0aCArIHN0cm9rZVdpZHRoKTtcclxuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSAoPGFueT5vbCkuZG9tLmNyZWF0ZUNhbnZhc0NvbnRleHQyRChcclxuICAgICAgICAgICAgICAgIE1hdGguY2VpbChyZW5kZXJXaWR0aCAqIHNjYWxlKSxcclxuICAgICAgICAgICAgICAgIE1hdGguY2VpbCgoaGVpZ2h0ICsgc3Ryb2tlV2lkdGgpICogc2NhbGUpKTtcclxuICAgICAgICAgICAgbGFiZWwgPSBjb250ZXh0LmNhbnZhcztcclxuICAgICAgICAgICAgbGFiZWxDYWNoZS5zZXQoa2V5LCBsYWJlbCk7XHJcbiAgICAgICAgICAgIGlmIChzY2FsZSAhPSAxKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnNjYWxlKHNjYWxlLCBzY2FsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29udGV4dC5mb250ID0gdGV4dFN0YXRlLmZvbnQ7XHJcbiAgICAgICAgICAgIGlmIChzdHJva2VLZXkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBzdHJva2VTdGF0ZS5zdHJva2VTdHlsZTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gc3Ryb2tlV2lkdGggKiAoKDxhbnk+b2wpLmhhcy5TQUZBUkkgPyBzY2FsZSA6IDEpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lQ2FwID0gc3Ryb2tlU3RhdGUubGluZUNhcDtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZUpvaW4gPSBzdHJva2VTdGF0ZS5saW5lSm9pbjtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQubWl0ZXJMaW1pdCA9IHN0cm9rZVN0YXRlLm1pdGVyTGltaXQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoKDxhbnk+b2wpLmhhcy5DQU5WQVNfTElORV9EQVNIICYmIHN0cm9rZVN0YXRlLmxpbmVEYXNoLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc2V0TGluZURhc2goc3Ryb2tlU3RhdGUubGluZURhc2gpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZURhc2hPZmZzZXQgPSBzdHJva2VTdGF0ZS5saW5lRGFzaE9mZnNldDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZmlsbEtleSkge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBmaWxsU3RhdGUuZmlsbFN0eWxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRleHQudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XHJcbiAgICAgICAgICAgIGNvbnRleHQudGV4dEFsaWduID0gJ2NlbnRlcic7XHJcbiAgICAgICAgICAgIHZhciBsZWZ0UmlnaHQgPSAoMC41IC0gYWxpZ24pO1xyXG4gICAgICAgICAgICB2YXIgeCA9IGFsaWduICogbGFiZWwud2lkdGggLyBzY2FsZSArIGxlZnRSaWdodCAqIHN0cm9rZVdpZHRoO1xyXG4gICAgICAgICAgICB2YXIgaTtcclxuICAgICAgICAgICAgaWYgKHN0cm9rZUtleSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bUxpbmVzOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVRleHQobGluZXNbaV0sIHggKyBsZWZ0UmlnaHQgKiB3aWR0aHNbaV0sIDAuNSAqIChzdHJva2VXaWR0aCArIGxpbmVIZWlnaHQpICsgaSAqIGxpbmVIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChmaWxsS2V5KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtTGluZXM7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQobGluZXNbaV0sIHggKyBsZWZ0UmlnaHQgKiB3aWR0aHNbaV0sIDAuNSAqIChzdHJva2VXaWR0aCArIGxpbmVIZWlnaHQpICsgaSAqIGxpbmVIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBsYWJlbENhY2hlLmdldChrZXkpO1xyXG4gICAgfTtcclxuXHJcbiAgICBkcmF3Q2hhcnNfKGJlZ2luLCBlbmQsIGRlY2x1dHRlckdyb3VwKSB7XHJcbiAgICAgICAgdmFyIHN0cm9rZVN0YXRlID0gdGhpcy50ZXh0U3Ryb2tlU3RhdGVfO1xyXG4gICAgICAgIHZhciB0ZXh0U3RhdGUgPSB0aGlzLnRleHRTdGF0ZV87XHJcbiAgICAgICAgdmFyIGZpbGxTdGF0ZSA9IHRoaXMudGV4dEZpbGxTdGF0ZV87XHJcblxyXG4gICAgICAgIHZhciBzdHJva2VLZXkgPSB0aGlzLnN0cm9rZUtleV87XHJcbiAgICAgICAgaWYgKHN0cm9rZVN0YXRlKSB7XHJcbiAgICAgICAgICAgIGlmICghKHN0cm9rZUtleSBpbiB0aGlzLnN0cm9rZVN0YXRlcykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3Ryb2tlU3RhdGVzW3N0cm9rZUtleV0gPSAvKiogQHR5cGUge29sLkNhbnZhc1N0cm9rZVN0YXRlfSAqLyAoe1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiBzdHJva2VTdGF0ZS5zdHJva2VTdHlsZSxcclxuICAgICAgICAgICAgICAgICAgICBsaW5lQ2FwOiBzdHJva2VTdGF0ZS5saW5lQ2FwLFxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVEYXNoT2Zmc2V0OiBzdHJva2VTdGF0ZS5saW5lRGFzaE9mZnNldCxcclxuICAgICAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IHN0cm9rZVN0YXRlLmxpbmVXaWR0aCxcclxuICAgICAgICAgICAgICAgICAgICBsaW5lSm9pbjogc3Ryb2tlU3RhdGUubGluZUpvaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgbWl0ZXJMaW1pdDogc3Ryb2tlU3RhdGUubWl0ZXJMaW1pdCxcclxuICAgICAgICAgICAgICAgICAgICBsaW5lRGFzaDogc3Ryb2tlU3RhdGUubGluZURhc2hcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB0ZXh0S2V5ID0gdGhpcy50ZXh0S2V5XztcclxuICAgICAgICBpZiAoISh0aGlzLnRleHRLZXlfIGluIHRoaXMudGV4dFN0YXRlcykpIHtcclxuICAgICAgICAgICAgdGhpcy50ZXh0U3RhdGVzW3RoaXMudGV4dEtleV9dID0gLyoqIEB0eXBlIHtvbC5DYW52YXNUZXh0U3RhdGV9ICovICh7XHJcbiAgICAgICAgICAgICAgICBmb250OiB0ZXh0U3RhdGUuZm9udCxcclxuICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6ICg8YW55Pm9sLnJlbmRlci5jYW52YXMpLm1lYXN1cmVUZXh0SGVpZ2h0KHRleHRTdGF0ZS5mb250KSxcclxuICAgICAgICAgICAgICAgIHRleHRBbGlnbjogdGV4dFN0YXRlLnRleHRBbGlnbiB8fCAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5kZWZhdWx0VGV4dEFsaWduLFxyXG4gICAgICAgICAgICAgICAgc2NhbGU6IHRleHRTdGF0ZS5zY2FsZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGZpbGxLZXkgPSB0aGlzLmZpbGxLZXlfO1xyXG4gICAgICAgIGlmIChmaWxsU3RhdGUpIHtcclxuICAgICAgICAgICAgaWYgKCEoZmlsbEtleSBpbiB0aGlzLmZpbGxTdGF0ZXMpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGxTdGF0ZXNbZmlsbEtleV0gPSAvKiogQHR5cGUge29sLkNhbnZhc0ZpbGxTdGF0ZX0gKi8gKHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxsU3R5bGU6IGZpbGxTdGF0ZS5maWxsU3R5bGVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgcGl4ZWxSYXRpbyA9IHRoaXMucGl4ZWxSYXRpbztcclxuICAgICAgICB2YXIgYmFzZWxpbmUgPSAoPGFueT5vbC5yZW5kZXIpLnJlcGxheS5URVhUX0FMSUdOW3RleHRTdGF0ZS50ZXh0QmFzZWxpbmVdO1xyXG5cclxuICAgICAgICB2YXIgb2Zmc2V0WSA9IHRoaXMudGV4dE9mZnNldFlfICogcGl4ZWxSYXRpbztcclxuICAgICAgICB2YXIgdGV4dCA9IHRoaXMudGV4dF87XHJcbiAgICAgICAgdmFyIGZvbnQgPSB0ZXh0U3RhdGUuZm9udDtcclxuICAgICAgICB2YXIgdGV4dFNjYWxlID0gdGV4dFN0YXRlLnNjYWxlO1xyXG4gICAgICAgIHZhciBzdHJva2VXaWR0aCA9IHN0cm9rZVN0YXRlID8gc3Ryb2tlU3RhdGUubGluZVdpZHRoICogdGV4dFNjYWxlIC8gMiA6IDA7XHJcbiAgICAgICAgdmFyIHdpZHRocyA9IHRoaXMud2lkdGhzX1tmb250XTtcclxuICAgICAgICBpZiAoIXdpZHRocykge1xyXG4gICAgICAgICAgICB0aGlzLndpZHRoc19bZm9udF0gPSB3aWR0aHMgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pbnN0cnVjdGlvbnMucHVzaChbKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuSW5zdHJ1Y3Rpb24uRFJBV19DSEFSUyxcclxuICAgICAgICAgICAgYmVnaW4sIGVuZCwgYmFzZWxpbmUsIGRlY2x1dHRlckdyb3VwLFxyXG4gICAgICAgIHRleHRTdGF0ZS5vdmVyZmxvdywgZmlsbEtleSwgdGV4dFN0YXRlLm1heEFuZ2xlLFxyXG4gICAgICAgIGZ1bmN0aW9uICh0ZXh0KSB7XHJcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IHdpZHRoc1t0ZXh0XTtcclxuICAgICAgICAgICAgaWYgKCF3aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgd2lkdGggPSB3aWR0aHNbdGV4dF0gPSAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5tZWFzdXJlVGV4dFdpZHRoKGZvbnQsIHRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB3aWR0aCAqIHRleHRTY2FsZSAqIHBpeGVsUmF0aW87XHJcbiAgICAgICAgfSxcclxuICAgICAgICAgICAgb2Zmc2V0WSwgc3Ryb2tlS2V5LCBzdHJva2VXaWR0aCAqIHBpeGVsUmF0aW8sIHRleHQsIHRleHRLZXksIDFcclxuICAgICAgICBdKTtcclxuICAgICAgICB0aGlzLmhpdERldGVjdGlvbkluc3RydWN0aW9ucy5wdXNoKFsoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5JbnN0cnVjdGlvbi5EUkFXX0NIQVJTLFxyXG4gICAgICAgICAgICBiZWdpbiwgZW5kLCBiYXNlbGluZSwgZGVjbHV0dGVyR3JvdXAsXHJcbiAgICAgICAgdGV4dFN0YXRlLm92ZXJmbG93LCBmaWxsS2V5LCB0ZXh0U3RhdGUubWF4QW5nbGUsXHJcbiAgICAgICAgZnVuY3Rpb24gKHRleHQpIHtcclxuICAgICAgICAgICAgdmFyIHdpZHRoID0gd2lkdGhzW3RleHRdO1xyXG4gICAgICAgICAgICBpZiAoIXdpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aCA9IHdpZHRoc1t0ZXh0XSA9ICg8YW55Pm9sLnJlbmRlci5jYW52YXMpLm1lYXN1cmVUZXh0V2lkdGgoZm9udCwgdGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHdpZHRoICogdGV4dFNjYWxlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9mZnNldFksIHN0cm9rZUtleSwgc3Ryb2tlV2lkdGgsIHRleHQsIHRleHRLZXksIDEgLyBwaXhlbFJhdGlvXHJcbiAgICAgICAgXSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJlbmRlckRlY2x1dHRlckNoYXJfID0gZnVuY3Rpb24gKGRlY2x1dHRlckdyb3VwLCBmZWF0dXJlKSB7XHJcbiAgICAgICAgaWYgKGRlY2x1dHRlckdyb3VwICYmIGRlY2x1dHRlckdyb3VwLmxlbmd0aCA+IDUpIHtcclxuICAgICAgICAgICAgdmFyIGdyb3VwQ291bnQgPSBkZWNsdXR0ZXJHcm91cFs0XTtcclxuICAgICAgICAgICAgaWYgKGdyb3VwQ291bnQgPT0gMSB8fCBncm91cENvdW50ID09IGRlY2x1dHRlckdyb3VwLmxlbmd0aCAtIDUpIHtcclxuICAgICAgICAgICAgICAgIC8qKiBAdHlwZSB7b2wuUkJ1c2hFbnRyeX0gKi9cclxuICAgICAgICAgICAgICAgIHZhciBib3ggPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWluWDogLyoqIEB0eXBlIHtudW1iZXJ9ICovIChkZWNsdXR0ZXJHcm91cFswXSksXHJcbiAgICAgICAgICAgICAgICAgICAgbWluWTogLyoqIEB0eXBlIHtudW1iZXJ9ICovIChkZWNsdXR0ZXJHcm91cFsxXSksXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4WDogLyoqIEB0eXBlIHtudW1iZXJ9ICovIChkZWNsdXR0ZXJHcm91cFsyXSksXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4WTogLyoqIEB0eXBlIHtudW1iZXJ9ICovIChkZWNsdXR0ZXJHcm91cFszXSksXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZlYXR1cmVcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZGVjbHV0dGVyVHJlZS5jb2xsaWRlcyhib3gpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWNsdXR0ZXJUcmVlLmluc2VydChib3gpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkcmF3SW1hZ2UgPSAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5kcmF3SW1hZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDUsIGpqID0gZGVjbHV0dGVyR3JvdXAubGVuZ3RoOyBqIDwgamo7ICsraikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVjbHV0dGVyRGF0YSA9IC8qKiBAdHlwZSB7QXJyYXl9ICovIChkZWNsdXR0ZXJHcm91cFtqXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWNsdXR0ZXJEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVjbHV0dGVyRGF0YS5sZW5ndGggPiAxMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGF5VGV4dEJhY2tncm91bmRfKGRlY2x1dHRlckRhdGFbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2x1dHRlckRhdGFbMTNdLCBkZWNsdXR0ZXJEYXRhWzE0XSwgZGVjbHV0dGVyRGF0YVsxNV0sIGRlY2x1dHRlckRhdGFbMTZdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNsdXR0ZXJEYXRhWzExXSwgZGVjbHV0dGVyRGF0YVsxMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxhYmVsSW5mbyA9IGRlY2x1dHRlckRhdGFbM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGFiZWxJbWFnZSA9IHRoaXMuZ2V0SW1hZ2UobGFiZWxJbmZvW1widGV4dFwiXSwgbGFiZWxJbmZvW1widGV4dEtleVwiXSwgbGFiZWxJbmZvW1wiZmlsbEtleVwiXSwgbGFiZWxJbmZvW1wic3Ryb2tlS2V5XCJdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2x1dHRlckRhdGFbM10gPSBsYWJlbEltYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhd0ltYWdlLmFwcGx5KHVuZGVmaW5lZCwgZGVjbHV0dGVyRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkZWNsdXR0ZXJHcm91cC5sZW5ndGggPSA1O1xyXG4gICAgICAgICAgICAgICAgKDxhbnk+b2wuZXh0ZW50KS5jcmVhdGVPclVwZGF0ZUVtcHR5KGRlY2x1dHRlckdyb3VwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcHVibGljIHNldFRleHRTdHlsZUN1c3RvbSh0ZXh0U3R5bGU6IGFueSwgZGVjbHV0dGVyR3JvdXA6IGFueSkge1xyXG4gICAgICAgIGxldCB0ZXh0U3RhdGUsIGZpbGxTdGF0ZSwgc3Ryb2tlU3RhdGU7XHJcbiAgICAgICAgaWYgKCF0ZXh0U3R5bGUpIHtcclxuICAgICAgICAgICAgdGhpcy50ZXh0XyA9IFwiXCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5kZWNsdXR0ZXJHcm91cF8gPSAvKiogQHR5cGUge29sLkRlY2x1dHRlckdyb3VwfSAqLyAoZGVjbHV0dGVyR3JvdXApO1xyXG5cclxuICAgICAgICAgICAgbGV0IHRleHRGaWxsU3R5bGUgPSB0ZXh0U3R5bGUuZ2V0RmlsbCgpO1xyXG4gICAgICAgICAgICBpZiAoIXRleHRGaWxsU3R5bGUpIHtcclxuICAgICAgICAgICAgICAgIGZpbGxTdGF0ZSA9IHRoaXMudGV4dEZpbGxTdGF0ZV8gPSBudWxsO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZmlsbFN0YXRlID0gdGhpcy50ZXh0RmlsbFN0YXRlXztcclxuICAgICAgICAgICAgICAgIGlmICghZmlsbFN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbFN0YXRlID0gdGhpcy50ZXh0RmlsbFN0YXRlXyA9IC8qKiBAdHlwZSB7b2wuQ2FudmFzRmlsbFN0YXRlfSAqLyAoe30pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZmlsbFN0YXRlLmZpbGxTdHlsZSA9IG9sLmNvbG9ybGlrZS5hc0NvbG9yTGlrZShcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0RmlsbFN0eWxlLmdldENvbG9yKCkgfHwgKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuZGVmYXVsdEZpbGxTdHlsZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCB0ZXh0U3Ryb2tlU3R5bGUgPSB0ZXh0U3R5bGUuZ2V0U3Ryb2tlKCk7XHJcbiAgICAgICAgICAgIGlmICghdGV4dFN0cm9rZVN0eWxlKSB7XHJcbiAgICAgICAgICAgICAgICBzdHJva2VTdGF0ZSA9IHRoaXMudGV4dFN0cm9rZVN0YXRlXyA9IG51bGw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdHJva2VTdGF0ZSA9IHRoaXMudGV4dFN0cm9rZVN0YXRlXztcclxuICAgICAgICAgICAgICAgIGlmICghc3Ryb2tlU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2VTdGF0ZSA9IHRoaXMudGV4dFN0cm9rZVN0YXRlXyA9IC8qKiBAdHlwZSB7b2wuQ2FudmFzU3Ryb2tlU3RhdGV9ICovICh7fSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXQgbGluZURhc2ggPSB0ZXh0U3Ryb2tlU3R5bGUuZ2V0TGluZURhc2goKTtcclxuICAgICAgICAgICAgICAgIGxldCBsaW5lRGFzaE9mZnNldCA9IHRleHRTdHJva2VTdHlsZS5nZXRMaW5lRGFzaE9mZnNldCgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGxpbmVXaWR0aCA9IHRleHRTdHJva2VTdHlsZS5nZXRXaWR0aCgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG1pdGVyTGltaXQgPSB0ZXh0U3Ryb2tlU3R5bGUuZ2V0TWl0ZXJMaW1pdCgpO1xyXG4gICAgICAgICAgICAgICAgc3Ryb2tlU3RhdGUubGluZUNhcCA9IHRleHRTdHJva2VTdHlsZS5nZXRMaW5lQ2FwKCkgfHwgKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuZGVmYXVsdExpbmVDYXA7XHJcbiAgICAgICAgICAgICAgICBzdHJva2VTdGF0ZS5saW5lRGFzaCA9IGxpbmVEYXNoID8gbGluZURhc2guc2xpY2UoKSA6ICg8YW55Pm9sLnJlbmRlci5jYW52YXMpLmRlZmF1bHRMaW5lRGFzaDtcclxuICAgICAgICAgICAgICAgIHN0cm9rZVN0YXRlLmxpbmVEYXNoT2Zmc2V0ID1cclxuICAgICAgICAgICAgICAgICAgICBsaW5lRGFzaE9mZnNldCA9PT0gdW5kZWZpbmVkID8gKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuZGVmYXVsdExpbmVEYXNoT2Zmc2V0IDogbGluZURhc2hPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBzdHJva2VTdGF0ZS5saW5lSm9pbiA9IHRleHRTdHJva2VTdHlsZS5nZXRMaW5lSm9pbigpIHx8ICg8YW55Pm9sLnJlbmRlci5jYW52YXMpLmRlZmF1bHRMaW5lSm9pbjtcclxuICAgICAgICAgICAgICAgIHN0cm9rZVN0YXRlLmxpbmVXaWR0aCA9XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoID09PSB1bmRlZmluZWQgPyAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5kZWZhdWx0TGluZVdpZHRoIDogbGluZVdpZHRoO1xyXG4gICAgICAgICAgICAgICAgc3Ryb2tlU3RhdGUubWl0ZXJMaW1pdCA9XHJcbiAgICAgICAgICAgICAgICAgICAgbWl0ZXJMaW1pdCA9PT0gdW5kZWZpbmVkID8gKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuZGVmYXVsdE1pdGVyTGltaXQgOiBtaXRlckxpbWl0O1xyXG4gICAgICAgICAgICAgICAgc3Ryb2tlU3RhdGUuc3Ryb2tlU3R5bGUgPSBvbC5jb2xvcmxpa2UuYXNDb2xvckxpa2UoXHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dFN0cm9rZVN0eWxlLmdldENvbG9yKCkgfHwgKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuZGVmYXVsdFN0cm9rZVN0eWxlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGV4dFN0YXRlID0gdGhpcy50ZXh0U3RhdGVfO1xyXG4gICAgICAgICAgICBsZXQgZm9udCA9IHRleHRTdHlsZS5nZXRGb250KCkgfHwgKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuZGVmYXVsdEZvbnQ7XHJcbiAgICAgICAgICAgICg8YW55Pm9sLnJlbmRlci5jYW52YXMpLmNoZWNrRm9udChmb250KTtcclxuICAgICAgICAgICAgbGV0IHRleHRTY2FsZSA9IHRleHRTdHlsZS5nZXRTY2FsZSgpO1xyXG4gICAgICAgICAgICB0ZXh0U3RhdGUub3ZlcmZsb3cgPSB0ZXh0U3R5bGUuZ2V0T3ZlcmZsb3coKTtcclxuICAgICAgICAgICAgdGV4dFN0YXRlLmZvbnQgPSBmb250O1xyXG4gICAgICAgICAgICB0ZXh0U3RhdGUubWF4QW5nbGUgPSB0ZXh0U3R5bGUuZ2V0TWF4QW5nbGUoKTtcclxuICAgICAgICAgICAgdGV4dFN0YXRlLnBsYWNlbWVudCA9IHRleHRTdHlsZS5nZXRQbGFjZW1lbnQoKTtcclxuICAgICAgICAgICAgdGV4dFN0YXRlLnRleHRBbGlnbiA9IHRleHRTdHlsZS5nZXRUZXh0QWxpZ24oKTtcclxuICAgICAgICAgICAgdGV4dFN0YXRlLnRleHRCYXNlbGluZSA9IHRleHRTdHlsZS5nZXRUZXh0QmFzZWxpbmUoKSB8fCAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5kZWZhdWx0VGV4dEJhc2VsaW5lO1xyXG4gICAgICAgICAgICB0ZXh0U3RhdGUuYmFja2dyb3VuZEZpbGwgPSB0ZXh0U3R5bGUuZ2V0QmFja2dyb3VuZEZpbGwoKTtcclxuICAgICAgICAgICAgdGV4dFN0YXRlLmJhY2tncm91bmRTdHJva2UgPSB0ZXh0U3R5bGUuZ2V0QmFja2dyb3VuZFN0cm9rZSgpO1xyXG4gICAgICAgICAgICB0ZXh0U3RhdGUucGFkZGluZyA9IHRleHRTdHlsZS5nZXRQYWRkaW5nKCkgfHwgKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuZGVmYXVsdFBhZGRpbmc7XHJcbiAgICAgICAgICAgIHRleHRTdGF0ZS5zY2FsZSA9IHRleHRTY2FsZSA9PT0gdW5kZWZpbmVkID8gMSA6IHRleHRTY2FsZTtcclxuXHJcbiAgICAgICAgICAgIGxldCB0ZXh0T2Zmc2V0WCA9IHRleHRTdHlsZS5nZXRPZmZzZXRYKCk7XHJcbiAgICAgICAgICAgIGxldCB0ZXh0T2Zmc2V0WSA9IHRleHRTdHlsZS5nZXRPZmZzZXRZKCk7XHJcbiAgICAgICAgICAgIGxldCB0ZXh0Um90YXRlV2l0aFZpZXcgPSB0ZXh0U3R5bGUuZ2V0Um90YXRlV2l0aFZpZXcoKTtcclxuICAgICAgICAgICAgbGV0IHRleHRSb3RhdGlvbiA9IHRleHRTdHlsZS5nZXRSb3RhdGlvbigpO1xyXG4gICAgICAgICAgICB0aGlzLnRleHRfID0gdGV4dFN0eWxlLmdldFRleHQoKSB8fCBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLnRleHRPZmZzZXRYXyA9IHRleHRPZmZzZXRYID09PSB1bmRlZmluZWQgPyAwIDogdGV4dE9mZnNldFg7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dE9mZnNldFlfID0gdGV4dE9mZnNldFkgPT09IHVuZGVmaW5lZCA/IDAgOiB0ZXh0T2Zmc2V0WTtcclxuICAgICAgICAgICAgdGhpcy50ZXh0Um90YXRlV2l0aFZpZXdfID0gdGV4dFJvdGF0ZVdpdGhWaWV3ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IHRleHRSb3RhdGVXaXRoVmlldztcclxuICAgICAgICAgICAgdGhpcy50ZXh0Um90YXRpb25fID0gdGV4dFJvdGF0aW9uID09PSB1bmRlZmluZWQgPyAwIDogdGV4dFJvdGF0aW9uO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zdHJva2VLZXlfID0gc3Ryb2tlU3RhdGUgP1xyXG4gICAgICAgICAgICAgICAgKHR5cGVvZiBzdHJva2VTdGF0ZS5zdHJva2VTdHlsZSA9PT0gXCJzdHJpbmdcIiA/IHN0cm9rZVN0YXRlLnN0cm9rZVN0eWxlIDogKDxhbnk+b2wpLmdldFVpZChzdHJva2VTdGF0ZS5zdHJva2VTdHlsZSkpICtcclxuICAgICAgICAgICAgICAgIHN0cm9rZVN0YXRlLmxpbmVDYXAgKyBzdHJva2VTdGF0ZS5saW5lRGFzaE9mZnNldCArIFwifFwiICsgc3Ryb2tlU3RhdGUubGluZVdpZHRoICtcclxuICAgICAgICAgICAgICAgIHN0cm9rZVN0YXRlLmxpbmVKb2luICsgc3Ryb2tlU3RhdGUubWl0ZXJMaW1pdCArIFwiW1wiICsgc3Ryb2tlU3RhdGUubGluZURhc2guam9pbigpICsgXCJdXCIgOlxyXG4gICAgICAgICAgICAgICAgXCJcIjtcclxuICAgICAgICAgICAgdGhpcy50ZXh0S2V5XyA9IHRleHRTdGF0ZS5mb250ICsgdGV4dFN0YXRlLnNjYWxlICsgKHRleHRTdGF0ZS50ZXh0QWxpZ24gfHwgXCI/XCIpO1xyXG4gICAgICAgICAgICB0aGlzLmZpbGxLZXlfID0gZmlsbFN0YXRlID9cclxuICAgICAgICAgICAgICAgICh0eXBlb2YgZmlsbFN0YXRlLmZpbGxTdHlsZSA9PT0gXCJzdHJpbmdcIiA/IGZpbGxTdGF0ZS5maWxsU3R5bGUgOiAoXCJ8XCIgKyAoPGFueT5vbCkuZ2V0VWlkKGZpbGxTdGF0ZS5maWxsU3R5bGUpKSkgOlxyXG4gICAgICAgICAgICAgICAgXCJcIjtcclxuICAgICAgICAgICAgdGhpcy5sYWJlbCA9IHRleHRTdHlsZS5sYWJlbDtcclxuICAgICAgICAgICAgdGhpcy5sYWJlbFBvc2l0aW9uID0gdGV4dFN0eWxlLmxhYmVsUG9zaXRpb247XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3VGV4dEN1c3RvbShnZW9tZXRyeTogYW55LCBmZWF0dXJlOiBhbnkpIHtcclxuICAgICAgICBsZXQgZmlsbFN0YXRlID0gdGhpcy50ZXh0RmlsbFN0YXRlXztcclxuICAgICAgICBsZXQgc3Ryb2tlU3RhdGUgPSB0aGlzLnRleHRTdHJva2VTdGF0ZV87XHJcbiAgICAgICAgbGV0IHRleHRTdGF0ZSA9IHRoaXMudGV4dFN0YXRlXztcclxuICAgICAgICBsZXQgZ2VvbWV0cnlUeXBlID0gZ2VvbWV0cnkuZ2V0VHlwZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50ZXh0XyA9PT0gXCJcIiB8fCAhdGV4dFN0YXRlIHx8ICghZmlsbFN0YXRlICYmICFzdHJva2VTdGF0ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMubGFiZWxQb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgoZ2VvbWV0cnlUeXBlID09PSAoPGFueT5vbC5nZW9tKS5HZW9tZXRyeVR5cGUuTElORV9TVFJJTkcgfHwgZ2VvbWV0cnlUeXBlID09PSAoPGFueT5vbC5nZW9tKS5HZW9tZXRyeVR5cGUuTVVMVElfTElORV9TVFJJTkcpICYmICF0aGlzLmxhYmVsKSB7XHJcbiAgICAgICAgICAgIGxldCBiZWdpbiA9IHRoaXMuY29vcmRpbmF0ZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICBsZXQgZ2VvbWV0cnlUeXBlID0gZ2VvbWV0cnkuZ2V0VHlwZSgpO1xyXG4gICAgICAgICAgICBsZXQgZmxhdENvb3JkaW5hdGVzID0gdGhpcy5sYWJlbFBvc2l0aW9uO1xyXG4gICAgICAgICAgICBsZXQgZW5kID0gMjtcclxuICAgICAgICAgICAgbGV0IHN0cmlkZSA9IDI7XHJcbiAgICAgICAgICAgIGxldCBpLCBpaTtcclxuICAgICAgICAgICAgLy8gaWYgKCFvbC5leHRlbnQuaW50ZXJzZWN0cyh0aGlzLmdldEJ1ZmZlcmVkTWF4RXh0ZW50KCksIGdlb21ldHJ5LmdldEV4dGVudCgpKSkge1xyXG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIGxldCBlbmRzO1xyXG4gICAgICAgICAgICAvLyBmbGF0Q29vcmRpbmF0ZXMgPSBnZW9tZXRyeS5nZXRGbGF0Q29vcmRpbmF0ZXMoKTtcclxuICAgICAgICAgICAgc3RyaWRlID0gZ2VvbWV0cnkuZ2V0U3RyaWRlKCk7XHJcbiAgICAgICAgICAgIGlmIChnZW9tZXRyeVR5cGUgPT09ICg8YW55Pm9sLmdlb20pLkdlb21ldHJ5VHlwZS5MSU5FX1NUUklORykge1xyXG4gICAgICAgICAgICAgICAgZW5kcyA9IFtmbGF0Q29vcmRpbmF0ZXMubGVuZ3RoXTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChnZW9tZXRyeVR5cGUgPT09ICg8YW55Pm9sLmdlb20pLkdlb21ldHJ5VHlwZS5NVUxUSV9MSU5FX1NUUklORykge1xyXG4gICAgICAgICAgICAgICAgZW5kcyA9IGdlb21ldHJ5LmdldEVuZHMoKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChnZW9tZXRyeVR5cGUgPT09ICg8YW55Pm9sLmdlb20pLkdlb21ldHJ5VHlwZS5QT0xZR09OKSB7XHJcbiAgICAgICAgICAgICAgICBlbmRzID0gZ2VvbWV0cnkuZ2V0RW5kcygpLnNsaWNlKDAsIDEpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGdlb21ldHJ5VHlwZSA9PT0gKDxhbnk+b2wuZ2VvbSkuR2VvbWV0cnlUeXBlLk1VTFRJX1BPTFlHT04pIHtcclxuICAgICAgICAgICAgICAgIGxldCBlbmRzcyA9IGdlb21ldHJ5LmdldEVuZHNzKCk7XHJcbiAgICAgICAgICAgICAgICBlbmRzID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGVuZHNzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmRzLnB1c2goZW5kc3NbaV1bMF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYmVnaW5HZW9tZXRyeShnZW9tZXRyeSwgZmVhdHVyZSk7XHJcbiAgICAgICAgICAgIGxldCB0ZXh0QWxpZ24gPSB0ZXh0U3RhdGUudGV4dEFsaWduO1xyXG4gICAgICAgICAgICBsZXQgZmxhdE9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgIGxldCBmbGF0RW5kO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBvID0gMCwgb28gPSBlbmRzLmxlbmd0aDsgbyA8IG9vOyArK28pIHtcclxuICAgICAgICAgICAgICAgIGlmICh0ZXh0QWxpZ24gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByYW5nZSA9ICg8YW55Pm9sLmdlb20pLmZsYXQuc3RyYWlnaHRjaHVuay5saW5lU3RyaW5nKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0U3RhdGUubWF4QW5nbGUsIGZsYXRDb29yZGluYXRlcywgZmxhdE9mZnNldCwgZW5kc1tvXSwgc3RyaWRlKTtcclxuICAgICAgICAgICAgICAgICAgICBmbGF0T2Zmc2V0ID0gcmFuZ2VbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgZmxhdEVuZCA9IHJhbmdlWzFdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmbGF0RW5kID0gZW5kc1tvXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IGZsYXRPZmZzZXQ7IGkgPCBmbGF0RW5kOyBpICs9IHN0cmlkZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRpbmF0ZXMucHVzaChmbGF0Q29vcmRpbmF0ZXNbaV0sIGZsYXRDb29yZGluYXRlc1tpICsgMV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZW5kID0gdGhpcy5jb29yZGluYXRlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBmbGF0T2Zmc2V0ID0gZW5kc1tvXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZHJhd0NoYXJzXyhiZWdpbiwgZW5kLCB0aGlzLmRlY2x1dHRlckdyb3VwXyk7XHJcbiAgICAgICAgICAgICAgICBiZWdpbiA9IGVuZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5lbmRHZW9tZXRyeShnZW9tZXRyeSwgZmVhdHVyZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGlmICh0aGlzLmxhYmVsID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9XHJcblxyXG4gICAgICAgIGxldCBiZWdpbiA9IHRoaXMuY29vcmRpbmF0ZXMubGVuZ3RoO1xyXG4gICAgICAgIGxldCBmbGF0Q29vcmRpbmF0ZXMgPSB0aGlzLmxhYmVsUG9zaXRpb247XHJcbiAgICAgICAgbGV0IGVuZCA9IDI7XHJcbiAgICAgICAgbGV0IHN0cmlkZSA9IDI7XHJcbiAgICAgICAgbGV0IGxhYmVsID0gdGhpcy5sYWJlbDtcclxuXHJcbiAgICAgICAgaWYgKGdlb21ldHJ5LmdldFR5cGUoKSA9PT0gKDxhbnk+b2wuZ2VvbSkuR2VvbWV0cnlUeXBlLlBPTFlHT04pIHtcclxuICAgICAgICAgICAgc3RyaWRlID0gMztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVuZCA9IHRoaXMuYXBwZW5kRmxhdENvb3JkaW5hdGVzKGZsYXRDb29yZGluYXRlcywgMCwgZW5kLCBzdHJpZGUsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5iZWdpbkdlb21ldHJ5KGdlb21ldHJ5LCBmZWF0dXJlKTtcclxuICAgICAgICBpZiAodGV4dFN0YXRlLmJhY2tncm91bmRGaWxsIHx8IHRleHRTdGF0ZS5iYWNrZ3JvdW5kU3Ryb2tlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RmlsbFN0cm9rZVN0eWxlKHRleHRTdGF0ZS5iYWNrZ3JvdW5kRmlsbCwgdGV4dFN0YXRlLmJhY2tncm91bmRTdHJva2UpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUZpbGxTdHlsZSh0aGlzLnN0YXRlLCB0aGlzLmFwcGx5RmlsbCwgZ2VvbWV0cnkpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVN0cm9rZVN0eWxlKHRoaXMuc3RhdGUsIHRoaXMuYXBwbHlTdHJva2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRyYXdUZXh0SW1hZ2VfKGxhYmVsLCBiZWdpbiwgZW5kKTtcclxuICAgICAgICB0aGlzLmVuZEdlb21ldHJ5KGdlb21ldHJ5LCBmZWF0dXJlKTtcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG4gICAgQkFUQ0hfQ09OU1RSVUNUT1JTX0NVU1RPTSA9IHtcclxuICAgICAgICBcIlBvaW50XCI6IERldGVjdFRleHRMYWJlbGluZ1N0cmF0ZWd5LFxyXG4gICAgICAgIFwiTXVsdGlQb2ludFwiOiBUZXh0TGFiZWxpbmdTdHJhdGVneSxcclxuICAgICAgICBcIkxpbmVTdHJpbmdcIjogVGV4dExhYmVsaW5nU3RyYXRlZ3ksXHJcbiAgICAgICAgXCJDaXJjbGVcIjogVGV4dExhYmVsaW5nU3RyYXRlZ3ksXHJcbiAgICAgICAgXCJNdWx0aUxpbmVTdHJpbmdcIjogVGV4dExhYmVsaW5nU3RyYXRlZ3ksXHJcbiAgICAgICAgXCJQb2x5Z29uXCI6IFRleHRMYWJlbGluZ1N0cmF0ZWd5LFxyXG4gICAgICAgIFwiTXVsdGlQb2x5Z29uXCI6IFRleHRMYWJlbGluZ1N0cmF0ZWd5XHJcbiAgICB9O1xyXG59IiwiXHJcbmV4cG9ydCBjbGFzcyBHZW9WZWN0b3JUaWxlU291cmNlIGV4dGVuZHMgKG9sLnNvdXJjZS5WZWN0b3JUaWxlIGFzIHsgbmV3KHA6IG9seC5zb3VyY2UuVmVjdG9yVGlsZU9wdGlvbnMpOiBhbnk7IH0pIHtcclxuICAgIGdlb0Zvcm1hdDogYW55O1xyXG4gICAgaXNNdWx0aXRocmVhZDogYm9vbGVhbjtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihvcHRpb25zKTtcclxuICAgICAgICB0aGlzLm1heERhdGFab29tID0gb3B0aW9ucy5tYXhEYXRhWm9vbTtcclxuICAgICAgICBpZiAob3B0aW9uc1tcInRpbGVVcmxGdW5jdGlvblwiXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VGlsZVVybEZ1bmN0aW9uKHRoaXMuZ2V0R2VvVGlsZVVybEZ1bmN0aW9uKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNsaWVudElkID0gb3B0aW9ucy5jbGllbnRJZDtcclxuICAgICAgICB0aGlzLmNsaWVudFNlY3JldCA9IG9wdGlvbnMuY2xpZW50U2VjcmV0O1xyXG4gICAgICAgIHRoaXMuZ2VvRm9ybWF0ID0gb3B0aW9ucy5mb3JtYXQ7XHJcbiAgICAgICAgdGhpcy50aWxlTG9hZEZ1bmN0aW9uID0gdGhpcy52ZWN0b3JUaWxlTG9hZEZ1bmN0aW9uLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5pc011bHRpdGhyZWFkID0gb3B0aW9uc1tcIm11bHRpdGhyZWFkXCJdID09PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0aW9uc1tcIm11bHRpdGhyZWFkXCJdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEdlb0Zvcm1hdCgpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdlb0Zvcm1hdDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0R2VvVGlsZVVybEZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGxldCB6UmVnRXggPSAvXFx7elxcfS9nO1xyXG4gICAgICAgIGxldCB4UmVnRXggPSAvXFx7eFxcfS9nO1xyXG4gICAgICAgIGxldCB5UmVnRXggPSAvXFx7eVxcfS9nO1xyXG4gICAgICAgIGxldCBkYXNoWVJlZ0V4ID0gL1xcey15XFx9L2c7XHJcbiAgICAgICAgbGV0IHVybHMgPSB0aGlzLnVybHM7XHJcbiAgICAgICAgbGV0IHRpbGVHcmlkID0gdGhpcy50aWxlR3JpZDtcclxuICAgICAgICBsZXQgbWF4RGF0YVpvb20gPSB0aGlzLm1heERhdGFab29tO1xyXG5cclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRpbGVDb29yZCkge1xyXG4gICAgICAgICAgICBpZiAoIXRpbGVDb29yZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCByZXF1ZXN0Q29vcmQgPSBbdGlsZUNvb3JkWzBdLCB0aWxlQ29vcmRbMV0sIHRpbGVDb29yZFsyXV07XHJcbiAgICAgICAgICAgICAgICBpZiAobWF4RGF0YVpvb20gJiYgcmVxdWVzdENvb3JkWzBdID4gbWF4RGF0YVpvb20pIHtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAocmVxdWVzdENvb3JkWzBdICE9PSBtYXhEYXRhWm9vbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Q29vcmRbMF0gLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdENvb3JkWzFdID0gTWF0aC5mbG9vcihyZXF1ZXN0Q29vcmRbMV0gLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdENvb3JkWzJdID0gTWF0aC5mbG9vcihyZXF1ZXN0Q29vcmRbMl0gLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXQgaCA9ICg8YW55Pm9sKS50aWxlY29vcmQuaGFzaCh0aWxlQ29vcmQpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gKDxhbnk+b2wpLm1hdGgubW9kdWxvKGgsIHVybHMubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIGxldCB0ZW1wbGF0ZSA9IHVybHNbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlLnJlcGxhY2UoelJlZ0V4LCByZXF1ZXN0Q29vcmRbMF0udG9TdHJpbmcoKSlcclxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSh4UmVnRXgsIHJlcXVlc3RDb29yZFsxXS50b1N0cmluZygpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKHlSZWdFeCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeSA9IC1yZXF1ZXN0Q29vcmRbMl0gLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoZGFzaFlSZWdFeCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeiA9IHJlcXVlc3RDb29yZFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJhbmdlID0gdGlsZUdyaWQuZ2V0RnVsbFRpbGVSYW5nZSh6KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKDxhbnk+b2wpLmFzc2VydHMuYXNzZXJ0KHJhbmdlLCA1NSk7IC8vIFRoZSB7LXl9IHBsYWNlaG9sZGVyIHJlcXVpcmVzIGEgdGlsZSBncmlkIHdpdGggZXh0ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB5ID0gcmFuZ2UuZ2V0SGVpZ2h0KCkgKyByZXF1ZXN0Q29vcmRbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB5LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB2ZWN0b3JUaWxlTG9hZEZ1bmN0aW9uKHRpbGU6IG9sLlZlY3RvclRpbGUsIHVybDogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IGxvYWRlciA9IHRoaXMubG9hZEZlYXR1cmVzWGhyKFxyXG4gICAgICAgICAgICB1cmwsXHJcbiAgICAgICAgICAgIHRpbGUuZ2V0Rm9ybWF0KCksXHJcbiAgICAgICAgICAgICg8YW55PnRpbGUpLm9uTG9hZC5iaW5kKHRpbGUpLFxyXG4gICAgICAgICAgICAoPGFueT50aWxlKS5vbkVycm9yLmJpbmQodGlsZSksXHJcbiAgICAgICAgICAgIHRoaXNcclxuICAgICAgICApO1xyXG4gICAgICAgIHRpbGUuc2V0TG9hZGVyKGxvYWRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldElEQW5kU2VjcmV0KHNlbGYpIHtcclxuICAgICAgICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgbGV0IHVybCA9ICdodHRwczovL2dpc3NlcnZlci50aGlua2dlby5jb20vYXBpL3YxL2F1dGgvdG9rZW4nO1xyXG4gICAgICAgIGxldCBjb250ZW50ID0gJ0FwaUtleT0nICsgc2VsZi5jbGllbnRJZCArICcmQXBpU2VjcmV0PScgKyBzZWxmLmNsaWVudFNlY3JldDtcclxuXHJcbiAgICAgICAgeGhyLm9wZW4oXCJQT1NUXCIsIHVybCwgZmFsc2UpO1xyXG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyk7XHJcbiAgICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uIChldmVudDogYW55KSB7XHJcbiAgICAgICAgICAgIGlmICgheGhyLnN0YXR1cyB8fCB4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDwgMzAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdG9rZW4gPSBKU09OLnBhcnNlKDxhbnk+eGhyLnJlc3BvbnNlVGV4dCkuZGF0YS5hY2Nlc3NfdG9rZW47XHJcbiAgICAgICAgICAgICAgICBzZWxmLnRva2VuID0gdG9rZW47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LmJpbmQodGhpcyk7XHJcbiAgICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHhoci5zZW5kKGNvbnRlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBsb2FkRmVhdHVyZXNYaHIodXJsOiBzdHJpbmcsIGZvcm1hdDogYW55LCBzdWNjZXNzOiBhbnksIGZhaWx1cmU6IGFueSwgc2VsZjogYW55KSB7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChleHRlbnQ6IGFueSwgcmVzb2x1dGlvbjogYW55LCBwcm9qZWN0aW9uOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzb3VyY2VUaWxlID0gdGhpcztcclxuICAgICAgICAgICAgICAgIGxldCBtYXhEYXRhWm9vbSA9IGZvcm1hdC5tYXhEYXRhWm9vbTtcclxuICAgICAgICAgICAgICAgIGxldCByZXF1ZXN0VGlsZUNvb3JkID0gW3RoaXMudGlsZUNvb3JkWzBdLCB0aGlzLnRpbGVDb29yZFsxXSwgdGhpcy50aWxlQ29vcmRbMl1dO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1heERhdGFab29tICYmIHJlcXVlc3RUaWxlQ29vcmRbMF0gPiBtYXhEYXRhWm9vbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChyZXF1ZXN0VGlsZUNvb3JkWzBdICE9PSBtYXhEYXRhWm9vbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VGlsZUNvb3JkWzBdIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RUaWxlQ29vcmRbMV0gPSBNYXRoLmZsb29yKHJlcXVlc3RUaWxlQ29vcmRbMV0gLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFRpbGVDb29yZFsyXSA9IE1hdGguZmxvb3IocmVxdWVzdFRpbGVDb29yZFsyXSAvIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMucmVxdWVzdFRpbGVDb29yZCA9IHJlcXVlc3RUaWxlQ29vcmQ7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHRpbGVHcmlkPXNlbGYuZ2V0VGlsZUdyaWQoKTtcclxuICAgICAgICAgICAgICAgIGxldCB0aWxlRXh0ZW50PSB0aWxlR3JpZC5nZXRUaWxlQ29vcmRFeHRlbnQoc291cmNlVGlsZS50aWxlQ29vcmQpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRpbGVSZXNvbHV0aW9uID0gdGlsZUdyaWQuZ2V0UmVzb2x1dGlvbihzb3VyY2VUaWxlLnRpbGVDb29yZFswXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGNhbGxiYWNrID0gZnVuY3Rpb24gKHRpbGUsIGNhbGxiYWNrRnVuY3Rpb24sIHNvdXJjZVByb2plY3Rpb24sIGxhc3RFeHRlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja0Z1bmN0aW9uLmNhbGwodGlsZSwgc291cmNlUHJvamVjdGlvbiwgbGFzdEV4dGVudCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBoYXNSZXF1ZXN0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICBoYXNSZXF1ZXN0ZWQgPSBmb3JtYXQucmVnaXN0ZXJUaWxlTG9hZEV2ZW50KHRoaXMsIHN1Y2Nlc3MsIGZhaWx1cmUsIGNhbGxiYWNrKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWhhc1JlcXVlc3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIENsaWVudCBJRCBhbmQgQ2xpZW50IFNlY3JldCAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZignYXBpS2V5JykgPT09IC0xICYmIHNlbGYuY2xpZW50SWQgJiYgc2VsZi5jbGllbnRTZWNyZXQgJiYgIXNlbGYudG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5nZXRJREFuZFNlY3JldChzZWxmKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuaXNNdWx0aXRocmVhZCAmJiBmb3JtYXQud29ya2VyTWFuYWdlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVxdWVzdEluZm8gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHR5cGVvZiB1cmwgPT09IFwiZnVuY3Rpb25cIiA/ICg8YW55PnVybCkoZXh0ZW50LCByZXNvbHV0aW9uLCBwcm9qZWN0aW9uKSA6IHVybCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGZvcm1hdC5nZXRUeXBlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWxlQ29vcmQ6IHRoaXMudGlsZUNvb3JkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdENvb3JkOiByZXF1ZXN0VGlsZUNvb3JkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluaW1hbGlzdDogZm9ybWF0Lm1pbmltYWxpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhEYXRhWm9vbTogZm9ybWF0Lm1heERhdGFab29tLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0SWQ6ICg8YW55Pm9sKS5nZXRVaWQoZm9ybWF0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyTmFtZTogZm9ybWF0LmxheWVyTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiBzZWxmLnRva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjdG9yVGlsZURhdGFDYWhjZVNpemU6IGZvcm1hdFtcInZlY3RvclRpbGVEYXRhQ2FoY2VTaXplXCJdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlsZVJhbmdlOiBzb3VyY2VUaWxlLnRpbGVSYW5nZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRpbGVDb29yZFdpdGhTb3VyY2VDb29yZDogc291cmNlVGlsZS50aWxlQ29vcmRXaXRoU291cmNlQ29vcmQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3JJbWFnZVRpbGVDb29yZDogc291cmNlVGlsZS52ZWN0b3JJbWFnZVRpbGVDb29yZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbGVFeHRlbnQ6dGlsZUV4dGVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbGVSZXNvbHV0aW9uOnRpbGVSZXNvbHV0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlsZVNpemU6IHRoaXMuZm9ybWF0Xy5zb3VyY2UudGlsZUdyaWQudGlsZVNpemVfICogc291cmNlVGlsZS5waXhlbFJhdGlvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbG9hZGVkQ2FsbGJhY2sgPSBmdW5jdGlvbiAoZGF0YSwgbWV0aG9kSW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlcXVlc3RLZXkgPSBkYXRhLnJlcXVlc3RLZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGlsZUxvYWRFdmVudEluZm9zID0gZm9ybWF0LnJlZ2lzdGVyZWRMb2FkRXZlbnRzW3JlcXVlc3RLZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGZvcm1hdC5yZWdpc3RlcmVkTG9hZEV2ZW50c1tyZXF1ZXN0S2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGlsZUxvYWRFdmVudEluZm9zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxvYWRFdmVudEluZm8gPSB0aWxlTG9hZEV2ZW50SW5mb3NbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZEV2ZW50SW5mby50aWxlLndvcmtlcklkID0gbWV0aG9kSW5mby53b3JrZXJJZDsgLy8gQ3VycmVudGx5LCB3ZSBqdXN0IG9uZSB3ZWIgd29ya2VyIGZvciBvbmUgbGF5ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGV0IHRpbGVLZXkgPSBcIlwiICsgbG9hZEV2ZW50SW5mby50aWxlLnRpbGVDb29yZFsxXSArIFwiLFwiICsgbG9hZEV2ZW50SW5mby50aWxlLnRpbGVDb29yZFsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGSVhNRSBFcmljXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc3RhdHVzID09PSBcImNhbmNlbFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRFdmVudEluZm8udGlsZS5zZXRTdGF0ZSgoPGFueT5vbCkuVGlsZVN0YXRlLkNBTkNFTCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLnN0YXR1cyA9PT0gXCJzdWNjZWVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZEV2ZW50SW5mby5jYWxsYmFjayhsb2FkRXZlbnRJbmZvLnRpbGUsIGxvYWRFdmVudEluZm8uc3VjY2Vzc0Z1bmN0aW9uLCBmb3JtYXQucmVhZFByb2plY3Rpb24oKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkRXZlbnRJbmZvLmNhbGxiYWNrKGxvYWRFdmVudEluZm8udGlsZSwgbG9hZEV2ZW50SW5mby5mYWlsdXJlRnVuY3Rpb24sIGZvcm1hdC5yZWFkUHJvamVjdGlvbigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdC53b3JrZXJNYW5hZ2VyLnBvc3RNZXNzYWdlKHRoaXMudGlsZUNvb3JkICsgKDxhbnk+b2wpLmdldFVpZChsb2FkZWRDYWxsYmFjayksIFwicmVxdWVzdFwiLCByZXF1ZXN0SW5mbywgbG9hZGVkQ2FsbGJhY2ssIHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRpbGVDb29yZCA9IHRoaXMudGlsZUNvb3JkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGlsZSA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeGhyLm9wZW4oXCJHRVRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiB1cmwgPT09IFwiZnVuY3Rpb25cIiA/ICg8YW55PnVybCkoZXh0ZW50LCByZXNvbHV0aW9uLCBwcm9qZWN0aW9uKSA6IHVybCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYudG9rZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBdXRob3JpemF0aW9uJywgJ0JlYXJlciAnICsgc2VsZi50b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXQuZ2V0VHlwZSgpID09PSAoPGFueT5vbCkuZm9ybWF0LkZvcm1hdFR5cGUuQVJSQVlfQlVGRkVSKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKGV2ZW50OiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgheGhyLnN0YXR1cyB8fCB4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDwgMzAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHR5cGUgPSBmb3JtYXQuZ2V0VHlwZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKiBAdHlwZSB7RG9jdW1lbnR8Tm9kZXxPYmplY3R8c3RyaW5nfHVuZGVmaW5lZH0gKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc291cmNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAoPGFueT5vbCkuZm9ybWF0LkZvcm1hdFR5cGUuSlNPTiB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlID09PSAoPGFueT5vbCkuZm9ybWF0LkZvcm1hdFR5cGUuVEVYVCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UgPSB4aHIucmVzcG9uc2VUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gKDxhbnk+b2wpLmZvcm1hdC5Gb3JtYXRUeXBlLlhNTCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UgPSB4aHIucmVzcG9uc2VYTUw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UgPSAoPGFueT5vbCkueG1sLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAoPGFueT5vbCkuZm9ybWF0LkZvcm1hdFR5cGUuQVJSQVlfQlVGRkVSKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZSA9IC8qKiBAdHlwZSB7QXJyYXlCdWZmZXJ9ICovICh4aHIucmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWFkRmVhdHVyZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBmb3JtYXQucmVhZEZlYXR1cmVzQW5kQ3JlYXRlSW5zdHJ1Y3RzTmV3KHNvdXJjZSwgcmVxdWVzdFRpbGVDb29yZCwgdGlsZUNvb3JkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhbGwgTG9hZCBFdmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVxdWVzdEtleSA9IHRpbGUucmVxdWVzdFRpbGVDb29yZC5qb2luKFwiLFwiKSArIFwiLFwiICsgdGlsZS50aWxlQ29vcmRbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0aWxlTG9hZEV2ZW50SW5mb3MgPSBmb3JtYXQucmVnaXN0ZXJlZExvYWRFdmVudHNbcmVxdWVzdEtleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBmb3JtYXQucmVnaXN0ZXJlZExvYWRFdmVudHNbcmVxdWVzdEtleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGlsZUxvYWRFdmVudEluZm9zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbG9hZEV2ZW50SW5mbyA9IHRpbGVMb2FkRXZlbnRJbmZvc1tpXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGlsZUtleSA9IFwiXCIgKyBsb2FkRXZlbnRJbmZvLnRpbGUudGlsZUNvb3JkWzFdICsgXCIsXCIgKyBsb2FkRXZlbnRJbmZvLnRpbGUudGlsZUNvb3JkWzJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZEV2ZW50SW5mby50aWxlLmZlYXR1cmVzQW5kSW5zdHJ1Y3RzID0geyBmZWF0dXJlczogZGF0YVswXSwgaW5zdHJ1Y3RzOiBkYXRhWzFdW3RpbGVLZXldIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRFdmVudEluZm8uY2FsbGJhY2sobG9hZEV2ZW50SW5mby50aWxlLCBsb2FkRXZlbnRJbmZvLnN1Y2Nlc3NGdW5jdGlvbiwgZm9ybWF0LnJlYWRQcm9qZWN0aW9uKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWx1cmUuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWx1cmUuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWx1cmUuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW1wieGhyXCJdID0geGhyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQuc291cmNlLmRpc3BhdGNoRXZlbnQobmV3ICg8YW55Pm9sLlZlY3RvclRpbGUpLkV2ZW50KFwic2VuZGluZ1RpbGVSZXF1ZXN0XCIsIHhocikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4aHIuc2VuZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBUZXh0TGFiZWxpbmdTdHJhdGVneSB9IGZyb20gXCIuL3RleHRMYWJlbGluZ1N0cmF0ZWd5XCI7XHJcbmltcG9ydCB7IEdlb1RleHRTdHlsZSB9IGZyb20gXCIuL2dlb1RleHRTdHlsZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIERldGVjdFRleHRMYWJlbGluZ1N0cmF0ZWd5IGV4dGVuZHMgVGV4dExhYmVsaW5nU3RyYXRlZ3kge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLm1hcmtMb2NhdGlvbkNvcmUgPSB0aGlzLm1hcmtMb2NhdGlvbkNvcmVDdXN0b207XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG1hcmtMb2NhdGlvbkNvcmVDdXN0b20oZmxhdENvb3JkaW5hdGVzOiBhbnksIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCByZXNvbHV0aW9uOiBhbnksIGdlb21ldHJ5VHlwZTogYW55LCB0ZXh0U3R5bGU6IEdlb1RleHRTdHlsZSwgZ3JpZDogYW55LCBmcmFtZVN0YXRlOiBvbHguRnJhbWVTdGF0ZSkge1xyXG4gICAgICAgIHN3aXRjaCAoZ2VvbWV0cnlUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgKDxhbnk+b2wuZ2VvbSkuR2VvbWV0cnlUeXBlLlBPSU5UOlxyXG4gICAgICAgICAgICBjYXNlICg8YW55Pm9sLmdlb20pLkdlb21ldHJ5VHlwZS5NVUxUSV9QT0lOVDpcclxuICAgICAgICAgICAgY2FzZSAoPGFueT5vbC5nZW9tKS5HZW9tZXRyeVR5cGUuQ0lSQ0xFOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNPdmVybGFwcGluZyhmbGF0Q29vcmRpbmF0ZXMsIHdpZHRoLCBoZWlnaHQsIHRleHRTdHlsZS5tYXJnaW4sIHRleHRTdHlsZS5taW5EaXN0YW5jZSwgdGV4dFN0eWxlLm1pblBhZGRpbmcsIHRleHRTdHlsZS5zcGFjaW5nLCBncmlkLCBmcmFtZVN0YXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZsYXRDb29yZGluYXRlcyA9IHRoaXMubW92ZVBvaW50TGFiZWwoZmxhdENvb3JkaW5hdGVzLCB3aWR0aCwgaGVpZ2h0LCByZXNvbHV0aW9uLCB0ZXh0U3R5bGUsIGdyaWQsIGZyYW1lU3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgKDxhbnk+b2wuZ2VvbSkuR2VvbWV0cnlUeXBlLkxJTkVfU1RSSU5HOlxyXG4gICAgICAgICAgICBjYXNlICg8YW55Pm9sLmdlb20pLkdlb21ldHJ5VHlwZS5NVUxUSV9MSU5FX1NUUklORzpcclxuICAgICAgICAgICAgY2FzZSAoPGFueT5vbC5nZW9tKS5HZW9tZXRyeVR5cGUuUE9MWUdPTjpcclxuICAgICAgICAgICAgY2FzZSAoPGFueT5vbC5nZW9tKS5HZW9tZXRyeVR5cGUuTVVMVElfUE9MWUdPTjpcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzT3ZlcmxhcHBpbmcoZmxhdENvb3JkaW5hdGVzLCB3aWR0aCwgaGVpZ2h0LCB0ZXh0U3R5bGUubWFyZ2luLCB0ZXh0U3R5bGUubWluRGlzdGFuY2UsIHRleHRTdHlsZS5taW5QYWRkaW5nLCB0ZXh0U3R5bGUuc3BhY2luZywgZ3JpZCwgZnJhbWVTdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmbGF0Q29vcmRpbmF0ZXMgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmxhdENvb3JkaW5hdGVzO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdmVQb2ludExhYmVsKGZsYXRDb29yZGluYXRlczogYW55LCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgcmVzb2x1dGlvbjogYW55LCB0ZXh0U3R5bGU6IEdlb1RleHRTdHlsZSwgZ3JpZDogYW55LCBmcmFtZVN0YXRlOiBvbHguRnJhbWVTdGF0ZSkge1xyXG4gICAgICAgIGxldCBncmlkU2l6ZSA9IDUwO1xyXG4gICAgICAgIGxldCBkaXN0YW5jZSA9IGdyaWRTaXplICogcmVzb2x1dGlvbjtcclxuXHJcbiAgICAgICAgaWYgKHRleHRTdHlsZS5wbGFjZW1lbnRzKSB7XHJcbiAgICAgICAgICAgIGxldCBwbGFjZW1lbnRzID0gdGV4dFN0eWxlLnBsYWNlbWVudHMuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBwbGFjZW1lbnQgb2YgcGxhY2VtZW50cykge1xyXG4gICAgICAgICAgICAgICAgbGV0IG5ld0ZsYXRDb29yZGluYXRlcyA9IHRoaXMuZ2V0TW92ZWRQb3NpdGlvbihmbGF0Q29vcmRpbmF0ZXMsIHBsYWNlbWVudCwgZGlzdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzT3ZlcmxhcHBpbmcobmV3RmxhdENvb3JkaW5hdGVzLCB3aWR0aCwgaGVpZ2h0LCB0ZXh0U3R5bGUubWFyZ2luLCB0ZXh0U3R5bGUubWluRGlzdGFuY2UsIHRleHRTdHlsZS5taW5QYWRkaW5nLCB0ZXh0U3R5bGUuc3BhY2luZywgZ3JpZCwgZnJhbWVTdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3RmxhdENvb3JkaW5hdGVzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE1vdmVkUG9zaXRpb24oZmxhdENvb3JkaW5hdGVzOiBhbnksIHBsYWNlbWVudDogc3RyaW5nLCBkaXN0YW5jZTogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IG5ld0ZsYXRDb29yZGluYXRlczogYW55O1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHBsYWNlbWVudCkge1xyXG4gICAgICAgICAgICBjYXNlIFwiVVJcIjpcclxuICAgICAgICAgICAgICAgIG5ld0ZsYXRDb29yZGluYXRlcyA9IHRoaXMubW92ZVRvVVIoZmxhdENvb3JkaW5hdGVzLCBkaXN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIlVcIjpcclxuICAgICAgICAgICAgICAgIG5ld0ZsYXRDb29yZGluYXRlcyA9IHRoaXMubW92ZVRvVShmbGF0Q29vcmRpbmF0ZXMsIGRpc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiVUxcIjpcclxuICAgICAgICAgICAgICAgIG5ld0ZsYXRDb29yZGluYXRlcyA9IHRoaXMubW92ZVRvVUwoZmxhdENvb3JkaW5hdGVzLCBkaXN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIkJcIjpcclxuICAgICAgICAgICAgICAgIG5ld0ZsYXRDb29yZGluYXRlcyA9IHRoaXMubW92ZVRvQihmbGF0Q29vcmRpbmF0ZXMsIGRpc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiQlJcIjpcclxuICAgICAgICAgICAgICAgIG5ld0ZsYXRDb29yZGluYXRlcyA9IHRoaXMubW92ZVRvQlIoZmxhdENvb3JkaW5hdGVzLCBkaXN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIkJMXCI6XHJcbiAgICAgICAgICAgICAgICBuZXdGbGF0Q29vcmRpbmF0ZXMgPSB0aGlzLm1vdmVUb0JMKGZsYXRDb29yZGluYXRlcywgZGlzdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJMXCI6XHJcbiAgICAgICAgICAgICAgICBuZXdGbGF0Q29vcmRpbmF0ZXMgPSB0aGlzLm1vdmVUb0woZmxhdENvb3JkaW5hdGVzLCBkaXN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIlJcIjpcclxuICAgICAgICAgICAgICAgIG5ld0ZsYXRDb29yZGluYXRlcyA9IHRoaXMubW92ZVRvUihmbGF0Q29vcmRpbmF0ZXMsIGRpc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5ld0ZsYXRDb29yZGluYXRlcztcclxuICAgIH1cclxuXHJcbiAgICBtb3ZlVG9VUihmbGF0Q29vcmRpbmF0ZXM6IGFueSwgZGlzdGFuY2U6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBuZXdGbGF0Q29vcmRpbmF0ZXMgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICBuZXdGbGF0Q29vcmRpbmF0ZXMucHVzaChmbGF0Q29vcmRpbmF0ZXNbMF0gKyBkaXN0YW5jZSk7XHJcbiAgICAgICAgbmV3RmxhdENvb3JkaW5hdGVzLnB1c2goZmxhdENvb3JkaW5hdGVzWzFdICsgZGlzdGFuY2UpO1xyXG4gICAgICAgIG5ld0ZsYXRDb29yZGluYXRlcy5wdXNoKGZsYXRDb29yZGluYXRlc1syXSk7XHJcbiAgICAgICAgcmV0dXJuIG5ld0ZsYXRDb29yZGluYXRlcztcclxuICAgIH1cclxuXHJcbiAgICBtb3ZlVG9VKGZsYXRDb29yZGluYXRlczogYW55LCBkaXN0YW5jZTogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IG5ld0ZsYXRDb29yZGluYXRlcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIG5ld0ZsYXRDb29yZGluYXRlcy5wdXNoKGZsYXRDb29yZGluYXRlc1swXSk7XHJcbiAgICAgICAgbmV3RmxhdENvb3JkaW5hdGVzLnB1c2goZmxhdENvb3JkaW5hdGVzWzFdICsgZGlzdGFuY2UpO1xyXG4gICAgICAgIG5ld0ZsYXRDb29yZGluYXRlcy5wdXNoKGZsYXRDb29yZGluYXRlc1syXSk7XHJcbiAgICAgICAgcmV0dXJuIG5ld0ZsYXRDb29yZGluYXRlcztcclxuICAgIH1cclxuXHJcbiAgICBtb3ZlVG9VTChmbGF0Q29vcmRpbmF0ZXM6IGFueSwgZGlzdGFuY2U6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBuZXdGbGF0Q29vcmRpbmF0ZXMgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICBuZXdGbGF0Q29vcmRpbmF0ZXMucHVzaChmbGF0Q29vcmRpbmF0ZXNbMF0gLSBkaXN0YW5jZSk7XHJcbiAgICAgICAgbmV3RmxhdENvb3JkaW5hdGVzLnB1c2goZmxhdENvb3JkaW5hdGVzWzFdICsgZGlzdGFuY2UpO1xyXG4gICAgICAgIG5ld0ZsYXRDb29yZGluYXRlcy5wdXNoKGZsYXRDb29yZGluYXRlc1syXSk7XHJcbiAgICAgICAgcmV0dXJuIG5ld0ZsYXRDb29yZGluYXRlcztcclxuICAgIH1cclxuXHJcbiAgICBtb3ZlVG9CKGZsYXRDb29yZGluYXRlczogYW55LCBkaXN0YW5jZTogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IG5ld0ZsYXRDb29yZGluYXRlcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIG5ld0ZsYXRDb29yZGluYXRlcy5wdXNoKGZsYXRDb29yZGluYXRlc1swXSk7XHJcbiAgICAgICAgbmV3RmxhdENvb3JkaW5hdGVzLnB1c2goZmxhdENvb3JkaW5hdGVzWzFdIC0gZGlzdGFuY2UpO1xyXG4gICAgICAgIG5ld0ZsYXRDb29yZGluYXRlcy5wdXNoKGZsYXRDb29yZGluYXRlc1syXSk7XHJcbiAgICAgICAgcmV0dXJuIG5ld0ZsYXRDb29yZGluYXRlcztcclxuICAgIH1cclxuXHJcbiAgICBtb3ZlVG9CUihmbGF0Q29vcmRpbmF0ZXM6IGFueSwgZGlzdGFuY2U6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBuZXdGbGF0Q29vcmRpbmF0ZXMgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICBuZXdGbGF0Q29vcmRpbmF0ZXMucHVzaChmbGF0Q29vcmRpbmF0ZXNbMF0gKyBkaXN0YW5jZSk7XHJcbiAgICAgICAgbmV3RmxhdENvb3JkaW5hdGVzLnB1c2goZmxhdENvb3JkaW5hdGVzWzFdIC0gZGlzdGFuY2UpO1xyXG4gICAgICAgIG5ld0ZsYXRDb29yZGluYXRlcy5wdXNoKGZsYXRDb29yZGluYXRlc1syXSk7XHJcbiAgICAgICAgcmV0dXJuIG5ld0ZsYXRDb29yZGluYXRlcztcclxuICAgIH1cclxuXHJcbiAgICBtb3ZlVG9CTChmbGF0Q29vcmRpbmF0ZXM6IGFueSwgZGlzdGFuY2U6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBuZXdGbGF0Q29vcmRpbmF0ZXMgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICBuZXdGbGF0Q29vcmRpbmF0ZXMucHVzaChmbGF0Q29vcmRpbmF0ZXNbMF0gLSBkaXN0YW5jZSk7XHJcbiAgICAgICAgbmV3RmxhdENvb3JkaW5hdGVzLnB1c2goZmxhdENvb3JkaW5hdGVzWzFdIC0gZGlzdGFuY2UpO1xyXG4gICAgICAgIG5ld0ZsYXRDb29yZGluYXRlcy5wdXNoKGZsYXRDb29yZGluYXRlc1syXSk7XHJcbiAgICAgICAgcmV0dXJuIG5ld0ZsYXRDb29yZGluYXRlcztcclxuICAgIH1cclxuXHJcbiAgICBtb3ZlVG9MKGZsYXRDb29yZGluYXRlczogYW55LCBkaXN0YW5jZTogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IG5ld0ZsYXRDb29yZGluYXRlcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIG5ld0ZsYXRDb29yZGluYXRlcy5wdXNoKGZsYXRDb29yZGluYXRlc1swXSAtIGRpc3RhbmNlKTtcclxuICAgICAgICBuZXdGbGF0Q29vcmRpbmF0ZXMucHVzaChmbGF0Q29vcmRpbmF0ZXNbMV0pO1xyXG4gICAgICAgIG5ld0ZsYXRDb29yZGluYXRlcy5wdXNoKGZsYXRDb29yZGluYXRlc1syXSk7XHJcbiAgICAgICAgcmV0dXJuIG5ld0ZsYXRDb29yZGluYXRlcztcclxuICAgIH1cclxuXHJcbiAgICBtb3ZlVG9SKGZsYXRDb29yZGluYXRlczogYW55LCBkaXN0YW5jZTogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IG5ld0ZsYXRDb29yZGluYXRlcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIG5ld0ZsYXRDb29yZGluYXRlcy5wdXNoKGZsYXRDb29yZGluYXRlc1swXSArIGRpc3RhbmNlKTtcclxuICAgICAgICBuZXdGbGF0Q29vcmRpbmF0ZXMucHVzaChmbGF0Q29vcmRpbmF0ZXNbMV0pO1xyXG4gICAgICAgIG5ld0ZsYXRDb29yZGluYXRlcy5wdXNoKGZsYXRDb29yZGluYXRlc1syXSk7XHJcbiAgICAgICAgcmV0dXJuIG5ld0ZsYXRDb29yZGluYXRlcztcclxuICAgIH1cclxufSIsImltcG9ydCB7IEdlb1N0eWxlIH0gZnJvbSBcIi4vZ2VvU3R5bGVcIjtcclxuaW1wb3J0IHsgR2VvQnJ1c2ggfSBmcm9tIFwiLi4vc3R5bGUvZ2VvQnJ1c2hcIjtcclxuaW1wb3J0IHsgR2VvQnJ1c2hUeXBlIH0gZnJvbSBcIi4vZ2VvQnJ1c2hUeXBlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgR2VvQXJlYVN0eWxlIGV4dGVuZHMgR2VvU3R5bGUge1xyXG5cclxuICAgIHN0YXRpYyBhcmVhU3R5bGUgPSBuZXcgb2wuc3R5bGUuU3R5bGUoe1xyXG4gICAgICAgIGZpbGw6IG5ldyBvbC5zdHlsZS5GaWxsKHt9KSxcclxuICAgICAgICBzdHJva2U6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe30pXHJcbiAgICB9KTtcclxuXHJcbiAgICBzdGF0aWMgYXJlYVNoYWRvd1N0eWxlID0gbmV3IG9sLnN0eWxlLlN0eWxlKHtcclxuICAgICAgICBmaWxsOiBuZXcgb2wuc3R5bGUuRmlsbCh7fSksXHJcbiAgICB9KTtcclxuXHJcbiAgICBicnVzaFR5cGU6IHN0cmluZztcclxuICAgIHJvdGF0ZUFuZ2xlOiBudW1iZXI7XHJcbiAgICBkeDogbnVtYmVyO1xyXG4gICAgZHk6IG51bWJlcjtcclxuICAgIGZpbGw6IHN0cmluZztcclxuICAgIGZvcmVncm91bmRGaWxsOiBzdHJpbmc7XHJcbiAgICBnYW1tYTogc3RyaW5nO1xyXG4gICAgZ2VvbWV0cnlUcmFuc2Zvcm06IHN0cmluZztcclxuICAgIGhhdGNoU3R5bGU6IHN0cmluZztcclxuICAgIG9wYWNpdHk6IG51bWJlcjtcclxuICAgIG91dGxpbmVDb2xvcjogc3RyaW5nO1xyXG4gICAgb3V0bGluZURhc2hBcnJheTogYW55O1xyXG4gICAgb3V0bGluZU9wYWNpdHk6IG51bWJlcjtcclxuICAgIG91dGxpbmVXaWR0aDogbnVtYmVyO1xyXG4gICAgbGluZWFyR3JhZGllbnQ6IHN0cmluZztcclxuICAgIHJhZGlhbEdyYWRpZW50OiBzdHJpbmc7XHJcbiAgICB0ZXh0dXJlRmlsZTogc3RyaW5nO1xyXG4gICAgc2hhZG93Q29sb3I6IHN0cmluZztcclxuICAgIHNoYWRvd0R4OiBudW1iZXI7XHJcbiAgICBzaGFkb3dEeTogbnVtYmVyO1xyXG5cclxuICAgIGJydXNoT3B0aW9uczogYW55O1xyXG4gICAgZ2VvQnJ1c2g6IHN0cmluZztcclxuICAgIGNvbnZlcnRlZE91dGxpbmVDb2xvcjogc3RyaW5nO1xyXG4gICAgY29udmVydGVkT3V0bGluZURhc2hBcnJheTogbnVtYmVyW107XHJcbiAgICBjb252ZXJ0ZWRTaGFkb3dDb2xvcjogc3RyaW5nO1xyXG4gICAgZ2VvbWV0cnlUcmFuc2Zvcm1WYWx1ZTogYW55O1xyXG4gICAgc2hhZG93VHJhbnNsYXRlOiBzdHJpbmc7XHJcbiAgICBzaGFkb3dUcmFuc2xhdGVWYWx1ZUJ5UmVzb2x1dGlvbjogYW55O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHN0eWxlSnNvbj86IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHN0eWxlSnNvbik7XHJcbiAgICAgICAgaWYgKHN0eWxlSnNvbikge1xyXG4gICAgICAgICAgICB0aGlzLmJydXNoVHlwZSA9IHN0eWxlSnNvbltcInBvbHlnb24tYnJ1c2gtdHlwZVwiXTtcclxuICAgICAgICAgICAgdGhpcy5yb3RhdGVBbmdsZSA9IHN0eWxlSnNvbltcInBvbHlnb24tcm90YXRlLWFuZ2xlXCJdO1xyXG4gICAgICAgICAgICB0aGlzLmR4ID0gc3R5bGVKc29uW1wicG9seWdvbi1keFwiXTtcclxuICAgICAgICAgICAgdGhpcy5keSA9IHN0eWxlSnNvbltcInBvbHlnb24tZHlcIl07XHJcbiAgICAgICAgICAgIHRoaXMuZmlsbCA9IHN0eWxlSnNvbltcInBvbHlnb24tZmlsbFwiXTtcclxuICAgICAgICAgICAgdGhpcy5mb3JlZ3JvdW5kRmlsbCA9IHN0eWxlSnNvbltcInBvbHlnb24tZm9yZWdyb3VuZC1maWxsXCJdO1xyXG4gICAgICAgICAgICB0aGlzLmdhbW1hID0gc3R5bGVKc29uW1wicG9seWdvbi1nYW1tYVwiXSA/IHN0eWxlSnNvbltcInBvbHlnb24tZ2FtbWFcIl0gOiB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmdlb21ldHJ5VHJhbnNmb3JtID0gc3R5bGVKc29uW1wicG9seWdvbi1nZW9tZXRyeS10cmFuc2Zvcm1cIl07XHJcbiAgICAgICAgICAgIHRoaXMuaGF0Y2hTdHlsZSA9IHN0eWxlSnNvbltcInBvbHlnb24taGF0Y2gtc3R5bGVcIl07XHJcbiAgICAgICAgICAgIHRoaXMub3BhY2l0eSA9IHN0eWxlSnNvbltcInBvbHlnb24tb3BhY2l0eVwiXTtcclxuICAgICAgICAgICAgdGhpcy5vdXRsaW5lQ29sb3IgPSBzdHlsZUpzb25bXCJwb2x5Z29uLW91dGxpbmUtY29sb3JcIl07XHJcbiAgICAgICAgICAgIHRoaXMub3V0bGluZURhc2hBcnJheSA9IHN0eWxlSnNvbltcInBvbHlnb24tb3V0bGluZS1kYXNoYXJyYXlcIl07XHJcbiAgICAgICAgICAgIHRoaXMub3V0bGluZU9wYWNpdHkgPSBzdHlsZUpzb25bXCJwb2x5Z29uLW91dGxpbmUtb3BhY2l0eVwiXTtcclxuICAgICAgICAgICAgdGhpcy5vdXRsaW5lV2lkdGggPSBzdHlsZUpzb25bXCJwb2x5Z29uLW91dGxpbmUtd2lkdGhcIl07XHJcbiAgICAgICAgICAgIHRoaXMubGluZWFyR3JhZGllbnQgPSBzdHlsZUpzb25bXCJwb2x5Z29uLWxpbmVhci1ncmFkaWVudFwiXTtcclxuICAgICAgICAgICAgdGhpcy5yYWRpYWxHcmFkaWVudCA9IHN0eWxlSnNvbltcInBvbHlnb24tcmFkaWFsLWdyYWRpZW50XCJdO1xyXG4gICAgICAgICAgICB0aGlzLnRleHR1cmVGaWxlID0gc3R5bGVKc29uW1wicG9seWdvbi10ZXh0dXJlLWZpbGVcIl07XHJcbiAgICAgICAgICAgIHRoaXMuc2hhZG93Q29sb3IgPSBzdHlsZUpzb25bXCJwb2x5Z29uLXNoYWRvdy1jb2xvclwiXTtcclxuICAgICAgICAgICAgdGhpcy5zaGFkb3dEeCA9IHN0eWxlSnNvbltcInBvbHlnb24tc2hhZG93LWR4XCJdO1xyXG4gICAgICAgICAgICB0aGlzLnNoYWRvd0R5ID0gc3R5bGVKc29uW1wicG9seWdvbi1zaGFkb3ctZHlcIl07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGluaXRpYWxpemVDb3JlKCkge1xyXG4gICAgICAgIHRoaXMuYnJ1c2hUeXBlID0gdGhpcy5icnVzaFR5cGUgfHwgXCJzb2xpZFwiO1xyXG4gICAgICAgIHRoaXMuYnJ1c2hPcHRpb25zID0ge1xyXG4gICAgICAgICAgICBmaWxsQ29sb3I6IHRoaXMuZmlsbCxcclxuICAgICAgICAgICAgZmlsbE9wYWNpdHk6IHRoaXMub3BhY2l0eSxcclxuICAgICAgICAgICAgbGluZWFyR3JhZGllbnQ6IHRoaXMubGluZWFyR3JhZGllbnQsXHJcbiAgICAgICAgICAgIHJhZGlhbEdyYWRpZW50OiB0aGlzLnJhZGlhbEdyYWRpZW50LFxyXG4gICAgICAgICAgICB0ZXh0dXJlRmlsZTogdGhpcy50ZXh0dXJlRmlsZSxcclxuICAgICAgICAgICAgZm9yZWdyb3VuZEZpbGw6IHRoaXMuZm9yZWdyb3VuZEZpbGwsXHJcbiAgICAgICAgICAgIGhhdGNoU3R5bGU6IHRoaXMuaGF0Y2hTdHlsZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmdlb21ldHJ5VHJhbnNmb3JtKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2VvbWV0cnlUcmFuc2Zvcm1WYWx1ZSA9IHRoaXMuZ2V0VHJhbnNmb3JtVmFsdWVzKHRoaXMuZ2VvbWV0cnlUcmFuc2Zvcm0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuYnJ1c2hUeXBlID09PSBcInNvbGlkXCIgfHwgdGhpcy5icnVzaFR5cGUgPT09IFwiaGF0Y2hcIikge1xyXG4gICAgICAgICAgICB0aGlzLmdlb0JydXNoID0gR2VvQnJ1c2guY3JlYXRlQnJ1c2hCeVR5cGUodGhpcy5icnVzaFR5cGUsIG51bGwsIG51bGwsIHRoaXMuYnJ1c2hPcHRpb25zKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm91dGxpbmVDb2xvcikge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnZlcnRlZE91dGxpbmVDb2xvciA9IEdlb1N0eWxlLnRvUkdCQUNvbG9yKHRoaXMub3V0bGluZUNvbG9yLCB0aGlzLm91dGxpbmVPcGFjaXR5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMub3V0bGluZURhc2hBcnJheSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnZlcnRlZE91dGxpbmVEYXNoQXJyYXkgPSB0aGlzLm91dGxpbmVEYXNoQXJyYXkuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zaGFkb3dDb2xvcikge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnZlcnRlZFNoYWRvd0NvbG9yID0gR2VvU3R5bGUudG9SR0JBQ29sb3IodGhpcy5zaGFkb3dDb2xvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2hhZG93VHJhbnNsYXRlVmFsdWVCeVJlc29sdXRpb24gPSB7fTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRUcmFuc2Zvcm1WYWx1ZXModHJhbnNmb3JtOiBzdHJpbmcpOiBhbnkge1xyXG4gICAgICAgIC8vIGdldCB0cmFuc2Zvcm0gdmFsdWVzIHdoaWNoIGxvb2sgbGlrZSB0cmFuc2Zvcm0odmFsdWUxLCB2YWx1ZTIpXHJcbiAgICAgICAgbGV0IHN0YXJ0ID0gdHJhbnNmb3JtLmluZGV4T2YoXCIoXCIpO1xyXG4gICAgICAgIGxldCBlbmQgPSB0cmFuc2Zvcm0uaW5kZXhPZihcIilcIik7XHJcbiAgICAgICAgbGV0IHZhbHVlU3RyaW5nID0gdHJhbnNmb3JtLnN1YnN0cmluZyhzdGFydCArIDEsIGVuZCk7XHJcblxyXG4gICAgICAgIGxldCB2YWx1ZXMgPSBbXTtcclxuICAgICAgICBpZiAodmFsdWVTdHJpbmcuaW5jbHVkZXMoXCIsXCIpKSB7XHJcbiAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlU3RyaW5nLnNwbGl0KFwiLFwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZVN0cmluZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdmFsdWVzO1xyXG4gICAgfVxyXG5cclxuICAgIEdldFRyYW5zZm9ybWVkQ29vcmRpbmF0ZXMoZmVhdHVyZSkge1xyXG4gICAgICAgIGxldCB0bXBGbGF0Q29vcmRpbmF0ZXMgPSBmZWF0dXJlLmdldEZsYXRDb29yZGluYXRlcygpO1xyXG4gICAgICAgIGxldCB0bXBDb29yZGluYXRlczogb2wuQ29vcmRpbmF0ZVtdW10gPSBbW11dO1xyXG4gICAgICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0bXBGbGF0Q29vcmRpbmF0ZXMubGVuZ3RoOyBpICs9IDIpIHtcclxuICAgICAgICAgICAgdG1wQ29vcmRpbmF0ZXNbaW5kZXhdIHx8ICh0bXBDb29yZGluYXRlc1tpbmRleF0gPSBbXSk7XHJcbiAgICAgICAgICAgIHRtcENvb3JkaW5hdGVzW2luZGV4XS5wdXNoKFt0bXBGbGF0Q29vcmRpbmF0ZXNbaV0sIHRtcEZsYXRDb29yZGluYXRlc1tpICsgMV1dKTtcclxuICAgICAgICAgICAgaWYgKHRtcENvb3JkaW5hdGVzW2luZGV4XS5sZW5ndGggPiAzICYmIHRtcENvb3JkaW5hdGVzW2luZGV4XVswXVswXSA9PT0gdG1wRmxhdENvb3JkaW5hdGVzW2ldICYmIHRtcENvb3JkaW5hdGVzW2luZGV4XVswXVsxXSA9PT0gdG1wRmxhdENvb3JkaW5hdGVzW2kgKyAxXSkge1xyXG4gICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgZ2VvbWV0cnkgPSBuZXcgb2wuZ2VvbS5Qb2x5Z29uKHRtcENvb3JkaW5hdGVzLCBcIlhZXCIpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5nZW9tZXRyeVRyYW5zZm9ybS5pbmRleE9mKFwidHJhbnNsYXRlXCIpID09PSAwKSB7XHJcbiAgICAgICAgICAgIGdlb21ldHJ5LnRyYW5zbGF0ZSgrdGhpcy5nZW9tZXRyeVRyYW5zZm9ybVZhbHVlWzBdLnRyaW0oKSwgK3RoaXMuZ2VvbWV0cnlUcmFuc2Zvcm1WYWx1ZVsxXS50cmltKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmdlb21ldHJ5VHJhbnNmb3JtLmluZGV4T2YoXCJzY2FsZVwiKSA9PT0gMCkge1xyXG4gICAgICAgICAgICBnZW9tZXRyeS5zY2FsZSgrdGhpcy5nZW9tZXRyeVRyYW5zZm9ybVZhbHVlWzBdLnRyaW0oKSwgK3RoaXMuZ2VvbWV0cnlUcmFuc2Zvcm1WYWx1ZVsxXS50cmltKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmdlb21ldHJ5VHJhbnNmb3JtLmluZGV4T2YoXCJyb3RhdGVcIikgPT09IDApIHtcclxuICAgICAgICAgICAgbGV0IGNlbnRlciA9IG9sLmV4dGVudC5nZXRDZW50ZXIoZ2VvbWV0cnkuZ2V0RXh0ZW50KCkpO1xyXG4gICAgICAgICAgICBsZXQgYW5nbGUgPSArdGhpcy5nZW9tZXRyeVRyYW5zZm9ybVZhbHVlWzBdLnRyaW0oKSAqIE1hdGguUEkgLyAxODA7XHJcbiAgICAgICAgICAgIGdlb21ldHJ5LnJvdGF0ZShhbmdsZSwgY2VudGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5nZW9tZXRyeVRyYW5zZm9ybS5pbmRleE9mKFwic2tld1wiKSA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnNrZXdHZW9tZXRyeShnZW9tZXRyeSwgK3RoaXMuZ2VvbWV0cnlUcmFuc2Zvcm1WYWx1ZVswXS50cmltKCksICt0aGlzLmdlb21ldHJ5VHJhbnNmb3JtVmFsdWVbMV0udHJpbSgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoPGFueT5nZW9tZXRyeSkuZmxhdENvb3JkaW5hdGVzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENvbnZlcnRlZFN0eWxlQ29yZShmZWF0dXJlOiBhbnksIHJlc29sdXRpb246IG51bWJlciwgb3B0aW9ucyk6IG9sLnN0eWxlLlN0eWxlW10ge1xyXG4gICAgICAgIGxldCBsZW5ndGggPSAwO1xyXG4gICAgICAgIHRoaXMuc3R5bGVzID0gW107XHJcbiAgICAgICAgaWYgKHRoaXMuZmlsbCB8fCAodGhpcy5vdXRsaW5lQ29sb3IgJiYgdGhpcy5vdXRsaW5lV2lkdGgpIHx8IHRoaXMubGluZWFyR3JhZGllbnQgfHwgdGhpcy5yYWRpYWxHcmFkaWVudCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5nZW9tZXRyeVRyYW5zZm9ybSkge1xyXG4gICAgICAgICAgICAgICAgZmVhdHVyZS5mbGF0Q29vcmRpbmF0ZXNfID0gdGhpcy5HZXRUcmFuc2Zvcm1lZENvb3JkaW5hdGVzKGZlYXR1cmUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zaGFkb3dEeCB8fCB0aGlzLnNoYWRvd0R5KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2hhZG93VHJhbnNsYXRlVmFsdWUgPSB0aGlzLnNoYWRvd1RyYW5zbGF0ZVZhbHVlQnlSZXNvbHV0aW9uW3Jlc29sdXRpb25dO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNoYWRvd1RyYW5zbGF0ZVZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdG1wUmVzb2x1dGlvbiA9IE1hdGgucm91bmQocmVzb2x1dGlvbiAqIDEwMDAwMDAwMCkgLyAxMDAwMDAwMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGFkb3dUcmFuc2xhdGUgPSAoYHRyYW5zbGF0ZSgkeyh0aGlzLnNoYWRvd0R4ID8gdGhpcy5zaGFkb3dEeCA6IDApICogdG1wUmVzb2x1dGlvbn0sJHsodGhpcy5zaGFkb3dEeSA/IHRoaXMuc2hhZG93RHkgOiAwKSAqIHRtcFJlc29sdXRpb259KWApO1xyXG4gICAgICAgICAgICAgICAgICAgIHNoYWRvd1RyYW5zbGF0ZVZhbHVlID0gdGhpcy5nZXRUcmFuc2Zvcm1WYWx1ZXModGhpcy5zaGFkb3dUcmFuc2xhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hhZG93VHJhbnNsYXRlVmFsdWVCeVJlc29sdXRpb25bcmVzb2x1dGlvbl0gPSBzaGFkb3dUcmFuc2xhdGVWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wRmxhdENvb3JkaW5hdGVzID0gZmVhdHVyZS5nZXRGbGF0Q29vcmRpbmF0ZXMoKTtcclxuICAgICAgICAgICAgICAgIGxldCBuZXdGbGF0Q29vcmRpbmF0ZXMgPSAoPGFueT5vbC5nZW9tKS5mbGF0LnRyYW5zZm9ybS50cmFuc2xhdGUodG1wRmxhdENvb3JkaW5hdGVzLCAwLCB0bXBGbGF0Q29vcmRpbmF0ZXMubGVuZ3RoLCAyLCArc2hhZG93VHJhbnNsYXRlVmFsdWVbMF0udHJpbSgpLCArc2hhZG93VHJhbnNsYXRlVmFsdWVbMV0udHJpbSgpLCB1bmRlZmluZWQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCB0bXBDb29yZGluYXRlczogb2wuQ29vcmRpbmF0ZVtdW10gPSBbW11dO1xyXG4gICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3RmxhdENvb3JkaW5hdGVzLmxlbmd0aDsgaSArPSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wQ29vcmRpbmF0ZXNbaW5kZXhdIHx8ICh0bXBDb29yZGluYXRlc1tpbmRleF0gPSBbXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wQ29vcmRpbmF0ZXNbaW5kZXhdLnB1c2goW25ld0ZsYXRDb29yZGluYXRlc1tpXSwgbmV3RmxhdENvb3JkaW5hdGVzW2kgKyAxXV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0bXBDb29yZGluYXRlc1tpbmRleF0ubGVuZ3RoID4gMyAmJiB0bXBDb29yZGluYXRlc1tpbmRleF1bMF1bMF0gPT09IG5ld0ZsYXRDb29yZGluYXRlc1tpXSAmJiB0bXBDb29yZGluYXRlc1tpbmRleF1bMF1bMV0gPT09IG5ld0ZsYXRDb29yZGluYXRlc1tpICsgMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXQgZ2VvbWV0cnkgPSBuZXcgb2wuZ2VvbS5Qb2x5Z29uKHRtcENvb3JkaW5hdGVzLCBcIlhZXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIEdlb0FyZWFTdHlsZS5hcmVhU2hhZG93U3R5bGUuZ2V0RmlsbCgpLnNldENvbG9yKHRoaXMuY29udmVydGVkU2hhZG93Q29sb3IpO1xyXG5cclxuICAgICAgICAgICAgICAgIEdlb0FyZWFTdHlsZS5hcmVhU2hhZG93U3R5bGUuc2V0R2VvbWV0cnkoZ2VvbWV0cnkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHlsZXNbbGVuZ3RoKytdID0gR2VvQXJlYVN0eWxlLmFyZWFTaGFkb3dTdHlsZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZW9CcnVzaCA9IEdlb0JydXNoLmNyZWF0ZUJydXNoQnlUeXBlKHRoaXMuYnJ1c2hUeXBlLCBmZWF0dXJlLCByZXNvbHV0aW9uLCB0aGlzLmJydXNoT3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICBHZW9BcmVhU3R5bGUuYXJlYVN0eWxlLmdldEZpbGwoKS5zZXRDb2xvcih0aGlzLmdlb0JydXNoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gc3Ryb2tlIHRvIGhhbmRsZSBvdXRsaW5lQ29sb3IsIG91dGxpbmVEYXNoQXJyYXksIG91dGxpbmVPcGFjaXR5IGFuZCBvdXRsaW5lV2lkdGhcclxuICAgICAgICAgICAgaWYgKHRoaXMub3V0bGluZUNvbG9yIHx8IHRoaXMub3V0bGluZURhc2hBcnJheSB8fCB0aGlzLm91dGxpbmVXaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG5ld1N0cm9rZSA9IG5ldyBvbC5zdHlsZS5TdHJva2UoKTtcclxuICAgICAgICAgICAgICAgIG5ld1N0cm9rZS5zZXRDb2xvcih0aGlzLmNvbnZlcnRlZE91dGxpbmVDb2xvcik7XHJcbiAgICAgICAgICAgICAgICBuZXdTdHJva2Uuc2V0TGluZURhc2godGhpcy5jb252ZXJ0ZWRPdXRsaW5lRGFzaEFycmF5KTtcclxuICAgICAgICAgICAgICAgIG5ld1N0cm9rZS5zZXRXaWR0aCh0aGlzLm91dGxpbmVXaWR0aCk7XHJcbiAgICAgICAgICAgICAgICBHZW9BcmVhU3R5bGUuYXJlYVN0eWxlLnNldFN0cm9rZShuZXdTdHJva2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgR2VvQXJlYVN0eWxlLmFyZWFTdHlsZS5zZXRTdHJva2UodW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgR2VvQXJlYVN0eWxlLmFyZWFTdHlsZS5zZXRHZW9tZXRyeShmZWF0dXJlKTtcclxuICAgICAgICAgICAgdGhpcy5zdHlsZXNbbGVuZ3RoKytdID0gR2VvQXJlYVN0eWxlLmFyZWFTdHlsZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdhbW1hICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5sYXllcikge1xyXG4gICAgICAgICAgICAgICAgbGV0IHN0eWxlR2FtbWEgPSB0aGlzLmdhbW1hO1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5sYXllci5vbihcInByZWNvbXBvc2VcIiwgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2dC5jb250ZXh0LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IHN0eWxlR2FtbWE7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZ0LmNvbnRleHQud2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gc3R5bGVHYW1tYTtcclxuICAgICAgICAgICAgICAgICAgICBldnQuY29udGV4dC5tb3pJbWFnZVNtb290aGluZ0VuYWJsZWQgPSBzdHlsZUdhbW1hO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2dC5jb250ZXh0Lm1zSW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gc3R5bGVHYW1tYTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5zdHlsZXM7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBCcnVzaFR5cGVPcHRpb25zIH0gZnJvbSBcIi4vYnJ1c2hUeXBlT3B0aW9uc1wiO1xyXG5pbXBvcnQgeyBHZW9TdHlsZSB9IGZyb20gXCIuL2dlb1N0eWxlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgR2VvQnJ1c2gge1xyXG4gICAgc3RhdGljIGdlb0JydXNoRnVuY3Rpb25zID0ge1xyXG4gICAgICAgIHNvbGlkOiBHZW9CcnVzaC5jcmVhdGVHZW9Tb2xpZEJydXNoLFxyXG4gICAgICAgIHJhZGlhbGdyYWRpZW50OiBHZW9CcnVzaC5jcmVhdGVSYWRpYWxHcmFkaWVudENvbG9yLFxyXG4gICAgICAgIGxpbmVhcmdyYWRpZW50OiBHZW9CcnVzaC5jcmVhdGVMaW5lYXJHcmFkaWVudENvbG9yLFxyXG4gICAgICAgIGhhdGNoOiBHZW9CcnVzaC5jcmVhdGVQYXR0ZXJuQ29sb3IsXHJcbiAgICAgICAgdGV4dHVyZTogR2VvQnJ1c2guY3JlYXRlSW1hZ2VDYW52YXNQYXR0ZXJuXHJcbiAgICB9O1xyXG5cclxuICAgIHN0YXRpYyBnZW9QYXR0ZXJuRnVuY3Rpb25zID0ge1xyXG4gICAgICAgIENyb3NzOiBHZW9CcnVzaC5nZXRDcm9zc1BhdHRlcm4sXHJcbiAgICAgICAgSG9yaXpvbnRhbDogR2VvQnJ1c2guZ2V0SG9yaXpvbnRhbFBhdHRlcm4sXHJcbiAgICAgICAgVmVydGljYWw6IEdlb0JydXNoLmdldFZlcnRpY2FsUGF0dGVybixcclxuICAgICAgICBGb3J3YXJkRGlhZ29uYWw6IEdlb0JydXNoLmdldEZvcndhcmREaWFnb25hbFBhdHRlcm4sXHJcbiAgICAgICAgQmFja3dhcmREaWFnb25hbDogR2VvQnJ1c2guZ2V0QmFja3dhcmREaWFnb25hbFBhdHRlcm4sXHJcbiAgICAgICAgTGFyZ2VHcmlkOiBHZW9CcnVzaC5nZXRMYXJnZUdyaWRQYXR0ZXJuLFxyXG4gICAgICAgIERpYWdvbmFsQ3Jvc3M6IEdlb0JydXNoLmdldERpYWdvbmFsQ3Jvc3NQYXR0ZXJuLFxyXG4gICAgICAgIFBlcmNlbnQwNTogR2VvQnJ1c2guZ2V0UGVyY2VudDA1UGF0dGVybixcclxuICAgICAgICBQZXJjZW50MTA6IEdlb0JydXNoLmdldFBlcmNlbnQxMFBhdHRlcm4sXHJcbiAgICAgICAgUGVyY2VudDIwOiBHZW9CcnVzaC5nZXRQZXJjZW50MjBQYXR0ZXJuLFxyXG4gICAgICAgIFBlcmNlbnQyNTogR2VvQnJ1c2guZ2V0UGVyY2VudDI1UGF0dGVybixcclxuICAgICAgICBQZXJjZW50MzA6IEdlb0JydXNoLmdldFBlcmNlbnQzMFBhdHRlcm4sXHJcbiAgICAgICAgUGVyY2VudDQwOiBHZW9CcnVzaC5nZXRQZXJjZW50NDBQYXR0ZXJuLFxyXG4gICAgICAgIFBlcmNlbnQ1MDogR2VvQnJ1c2guZ2V0UGVyY2VudDUwUGF0dGVybixcclxuICAgICAgICBQZXJjZW50NjA6IEdlb0JydXNoLmdldFBlcmNlbnQ2MFBhdHRlcm4sXHJcbiAgICAgICAgUGVyY2VudDcwOiBHZW9CcnVzaC5nZXRQZXJjZW50NzBQYXR0ZXJuLFxyXG4gICAgICAgIFBlcmNlbnQ3NTogR2VvQnJ1c2guZ2V0UGVyY2VudDc1UGF0dGVybixcclxuICAgICAgICBQZXJjZW50ODA6IEdlb0JydXNoLmdldFBlcmNlbnQ4MFBhdHRlcm4sXHJcbiAgICAgICAgUGVyY2VudDkwOiBHZW9CcnVzaC5nZXRQZXJjZW50OTBQYXR0ZXJuLFxyXG4gICAgfTtcclxuXHJcbiAgICBzdGF0aWMgY3JlYXRlQnJ1c2hCeVR5cGUoYnJ1c2hUeXBlOiBhbnksIGZlYXR1cmU6IGFueSwgcmVzb2x1dGlvbjogbnVtYmVyLCBicnVzaFR5cGVPcHRpb25zPzogQnJ1c2hUeXBlT3B0aW9ucykge1xyXG4gICAgICAgIGxldCBnZW9CcnVzaEZ1bmN0aW9uID0gdGhpcy5nZW9CcnVzaEZ1bmN0aW9uc1ticnVzaFR5cGVdO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZ2VvQnJ1c2hGdW5jdGlvbiA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZW9CcnVzaEZ1bmN0aW9uKGZlYXR1cmUsIHJlc29sdXRpb24sIGJydXNoVHlwZU9wdGlvbnMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcmVnaXN0ZXJHZW9CcnVzaEZ1bmN0aW9uKGtleTogc3RyaW5nLCBnZW9CcnVzaEZ1bmN0aW9uOiBhbnkpIHtcclxuICAgICAgICB0aGlzLmdlb0JydXNoRnVuY3Rpb25zW2tleV0gPSBnZW9CcnVzaEZ1bmN0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjcmVhdGVHZW9Tb2xpZEJydXNoKGZlYXR1cmU6IGFueSwgcmVzb2x1dGlvbjogbnVtYmVyLCBnZW9CcnVzaE9wdGlvbnM6IEJydXNoVHlwZU9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoZ2VvQnJ1c2hPcHRpb25zLmZpbGxDb2xvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gR2VvU3R5bGUudG9SR0JBQ29sb3IoZ2VvQnJ1c2hPcHRpb25zLmZpbGxDb2xvciwgZ2VvQnJ1c2hPcHRpb25zLmZpbGxPcGFjaXR5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNyZWF0ZVJhZGlhbEdyYWRpZW50Q29sb3IoZmVhdHVyZTogYW55LCByZXNvbHV0aW9uOiBudW1iZXIsIGdlb0JydXNoT3B0aW9uczogQnJ1c2hUeXBlT3B0aW9ucykge1xyXG4gICAgICAgIGxldCBleHRlbnQgPSBmZWF0dXJlLmdldEV4dGVudCgpO1xyXG5cclxuICAgICAgICAvLyBUT0RPOiB0cnkgdG8gY3JlYXRlIGl0IHdoZW4gY3JlYXRpbmcgdGhlIEdlb1N0eWxlLlxyXG4gICAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyXG4gICAgICAgIGxldCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuXHJcbiAgICAgICAgLy8gVE9ETzogY2hlY2sgaWYgdGhlcmUgaXMgYSBkaWZmZXJlbmNlIGJ5IHNyaWQuXHJcbiAgICAgICAgbGV0IHdpZHRoID0gb2wuZXh0ZW50LmdldFdpZHRoKGV4dGVudCkgLyByZXNvbHV0aW9uICogb2wuaGFzLkRFVklDRV9QSVhFTF9SQVRJTztcclxuICAgICAgICBsZXQgaGVpZ2h0ID0gb2wuZXh0ZW50LmdldEhlaWdodChleHRlbnQpIC8gcmVzb2x1dGlvbiAqIG9sLmhhcy5ERVZJQ0VfUElYRUxfUkFUSU87XHJcbiAgICAgICAgLy8gVE9ETzogdGhlICh4MCx5MCkgaXMgdGhlIGNlbnRlciBvZiBmZWF0dXJlIGV4dGVudCwgb3B0aW1pemUgaXRcclxuICAgICAgICBsZXQgeDAgPSB3aWR0aCAvIDI7XHJcbiAgICAgICAgbGV0IHkwID0gaGVpZ2h0IC8gMjtcclxuICAgICAgICBsZXQgcjEgPSB4MDtcclxuICAgICAgICBsZXQgZ3JkID0gY29udGV4dC5jcmVhdGVSYWRpYWxHcmFkaWVudCh4MCwgeTAsIDAsIHgwLCB5MCwgcjEpO1xyXG5cclxuICAgICAgICBsZXQgZ3JhZGllbnRDb2xvcnMgPSBnZW9CcnVzaE9wdGlvbnMucmFkaWFsR3JhZGllbnQuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgIGZvciAobGV0IGdyYWRpZW50Q29sb3Igb2YgZ3JhZGllbnRDb2xvcnMpIHtcclxuICAgICAgICAgICAgZ3JhZGllbnRDb2xvciA9IGdyYWRpZW50Q29sb3IudHJpbSgpO1xyXG4gICAgICAgICAgICBsZXQgY29sb3JTdG9wID0gZ3JhZGllbnRDb2xvci5zdWJzdHIoMSwgZ3JhZGllbnRDb2xvci5sZW5ndGggLSAyKTtcclxuICAgICAgICAgICAgbGV0IGNzID0gY29sb3JTdG9wLnNwbGl0KFwiOlwiKTtcclxuICAgICAgICAgICAgZ3JkLmFkZENvbG9yU3RvcChOdW1iZXIoY3NbMF0udHJpbSgpKSwgR2VvU3R5bGUudG9SR0JBQ29sb3IoY3NbMV0udHJpbSgpLCBnZW9CcnVzaE9wdGlvbnMuZmlsbE9wYWNpdHkpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBncmQ7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNyZWF0ZUxpbmVhckdyYWRpZW50Q29sb3IoZmVhdHVyZTogYW55LCByZXNvbHV0aW9uOiBudW1iZXIsIGdlb0JydXNoT3B0aW9uczogQnJ1c2hUeXBlT3B0aW9ucykge1xyXG4gICAgICAgIGxldCBleHRlbnQgPSBmZWF0dXJlLmdldEV4dGVudCgpO1xyXG4gICAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyXG4gICAgICAgIGxldCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICAvLyBUT0RPOiB0aGUgZGlyZWN0aW9uIEFuZ2xlIGJ5IHgwLHkwLHgxLHkxLiB0aGlzLmRpcmVjdGlvbkFuZ2xlXHJcbiAgICAgICAgbGV0IGdyZCA9IGNvbnRleHQuY3JlYXRlTGluZWFyR3JhZGllbnQoMCwgMCwgb2wuZXh0ZW50LmdldFdpZHRoKGV4dGVudCkgLyByZXNvbHV0aW9uICogb2wuaGFzLkRFVklDRV9QSVhFTF9SQVRJTywgb2wuZXh0ZW50LmdldEhlaWdodChleHRlbnQpIC8gcmVzb2x1dGlvbiAqIG9sLmhhcy5ERVZJQ0VfUElYRUxfUkFUSU8pO1xyXG5cclxuICAgICAgICBsZXQgZ3JhZGllbnRDb2xvcnMgPSBnZW9CcnVzaE9wdGlvbnMubGluZWFyR3JhZGllbnQuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgIGZvciAobGV0IGdyYWRpZW50Q29sb3Igb2YgZ3JhZGllbnRDb2xvcnMpIHtcclxuICAgICAgICAgICAgZ3JhZGllbnRDb2xvciA9IGdyYWRpZW50Q29sb3IudHJpbSgpO1xyXG4gICAgICAgICAgICBsZXQgY29sb3JTdG9wID0gZ3JhZGllbnRDb2xvci5zdWJzdHIoMSwgZ3JhZGllbnRDb2xvci5sZW5ndGggLSAyKTtcclxuICAgICAgICAgICAgbGV0IGNzID0gY29sb3JTdG9wLnNwbGl0KFwiOlwiKTtcclxuICAgICAgICAgICAgZ3JkLmFkZENvbG9yU3RvcChOdW1iZXIoY3NbMF0udHJpbSgpKSwgR2VvU3R5bGUudG9SR0JBQ29sb3IoY3NbMV0udHJpbSgpLCBnZW9CcnVzaE9wdGlvbnMuZmlsbE9wYWNpdHkpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBncmQ7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNyZWF0ZUltYWdlQ2FudmFzUGF0dGVybihmZWF0dXJlOiBhbnksIHJlc29sdXRpb246IG51bWJlciwgZ2VvQnJ1c2hPcHRpb25zOiBCcnVzaFR5cGVPcHRpb25zKSB7XHJcbiAgICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgbGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIGxldCBpbWFnZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xyXG4gICAgICAgIGltYWdlRWxlbWVudC5zcmMgPSBnZW9CcnVzaE9wdGlvbnMudGV4dHVyZUZpbGU7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRleHQuY3JlYXRlUGF0dGVybihpbWFnZUVsZW1lbnQsIFwicmVwZWF0XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjcmVhdGVQYXR0ZXJuQ29sb3IoZmVhdHVyZTogYW55LCByZXNvbHV0aW9uOiBudW1iZXIsIGdlb0JydXNoT3B0aW9uczogQnJ1c2hUeXBlT3B0aW9ucykge1xyXG4gICAgICAgIGxldCBjcmVhdGVQYXR0ZXJuRnVuY3Rpb24gPSBHZW9CcnVzaC5nZW9QYXR0ZXJuRnVuY3Rpb25zW2dlb0JydXNoT3B0aW9ucy5oYXRjaFN0eWxlXTtcclxuICAgICAgICBpZiAodHlwZW9mIGNyZWF0ZVBhdHRlcm5GdW5jdGlvbiA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVQYXR0ZXJuRnVuY3Rpb24oZ2VvQnJ1c2hPcHRpb25zLmZpbGxDb2xvciwgZ2VvQnJ1c2hPcHRpb25zLmZvcmVncm91bmRGaWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBHZW9TdHlsZS50b1JHQkFDb2xvcihcclxuICAgICAgICAgICAgICAgIGdlb0JydXNoT3B0aW9ucy5maWxsQ29sb3IsXHJcbiAgICAgICAgICAgICAgICBnZW9CcnVzaE9wdGlvbnMuZmlsbE9wYWNpdHlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldENyb3NzUGF0dGVybihmaWxsOiBzdHJpbmcsIGZvcmVncm91bmRGaWxsOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgc2l6ZSA9IDY7XHJcbiAgICAgICAgbGV0IHJhdGlvID0gb2wuaGFzLkRFVklDRV9QSVhFTF9SQVRJTztcclxuXHJcblxyXG4gICAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IHNpemUgKiAyICogcmF0aW87XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IHNpemUgKiAyICogcmF0aW87XHJcblxyXG4gICAgICAgIGxldCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGZpbGw7XHJcbiAgICAgICAgY29udGV4dC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG5cclxuICAgICAgICAvLyBob3Jpem9uIGxpbmVcclxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGZvcmVncm91bmRGaWxsO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgY2FudmFzLmhlaWdodCAvIDIsIGNhbnZhcy53aWR0aCwgMSk7XHJcblxyXG4gICAgICAgIC8vIHZlcnRpY2FsIGxpbmVcclxuICAgICAgICBjb250ZXh0LmZpbGxSZWN0KGNhbnZhcy53aWR0aCAvIDIsIDAsIDEsIGNhbnZhcy5oZWlnaHQpO1xyXG5cclxuICAgICAgICByZXR1cm4gY29udGV4dC5jcmVhdGVQYXR0ZXJuKGNhbnZhcywgXCJyZXBlYXRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldEhvcml6b250YWxQYXR0ZXJuKGZpbGw6IHN0cmluZywgZm9yZWdyb3VuZEZpbGw6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBzaXplID0gNjtcclxuICAgICAgICBsZXQgcmF0aW8gPSBvbC5oYXMuREVWSUNFX1BJWEVMX1JBVElPO1xyXG5cclxuICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcclxuICAgICAgICBjYW52YXMud2lkdGggPSBzaXplICogMiAqIHJhdGlvO1xyXG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBzaXplICogMiAqIHJhdGlvO1xyXG5cclxuICAgICAgICBsZXQgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBmaWxsO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgLy8gaG9yaXpvbiBsaW5lXHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBmb3JlZ3JvdW5kRmlsbDtcclxuICAgICAgICBjb250ZXh0LmZpbGxSZWN0KDAsIGNhbnZhcy5oZWlnaHQgLyAyLCBjYW52YXMud2lkdGgsIDEpO1xyXG5cclxuICAgICAgICByZXR1cm4gY29udGV4dC5jcmVhdGVQYXR0ZXJuKGNhbnZhcywgXCJyZXBlYXRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldFZlcnRpY2FsUGF0dGVybihmaWxsOiBzdHJpbmcsIGZvcmVncm91bmRGaWxsOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgc2l6ZSA9IDY7XHJcbiAgICAgICAgbGV0IHJhdGlvID0gb2wuaGFzLkRFVklDRV9QSVhFTF9SQVRJTztcclxuXHJcbiAgICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgY2FudmFzLndpZHRoID0gc2l6ZSAqIDIgKiByYXRpbztcclxuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gc2l6ZSAqIDIgKiByYXRpbztcclxuXHJcbiAgICAgICAgbGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbDtcclxuICAgICAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcblxyXG4gICAgICAgIC8vIHZlcnRpY2FsIGxpbmVcclxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGZvcmVncm91bmRGaWxsO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoY2FudmFzLndpZHRoIC8gMiwgMCwgMSwgY2FudmFzLmhlaWdodCk7XHJcblxyXG4gICAgICAgIHJldHVybiBjb250ZXh0LmNyZWF0ZVBhdHRlcm4oY2FudmFzLCBcInJlcGVhdFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0Rm9yd2FyZERpYWdvbmFsUGF0dGVybihmaWxsOiBzdHJpbmcsIGZvcmVncm91bmRGaWxsOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgc2l6ZSA9IDY7XHJcbiAgICAgICAgbGV0IHJhdGlvID0gb2wuaGFzLkRFVklDRV9QSVhFTF9SQVRJTztcclxuXHJcbiAgICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgY2FudmFzLndpZHRoID0gc2l6ZSAqIDIgKiByYXRpbztcclxuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gc2l6ZSAqIDIgKiByYXRpbztcclxuXHJcbiAgICAgICAgbGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbDtcclxuICAgICAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcblxyXG4gICAgICAgIC8vIHZlcnRpY2FsIGxpbmVcclxuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gZm9yZWdyb3VuZEZpbGw7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oMCwgMCk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG5cclxuICAgICAgICAvLyBjb250ZXh0LmZpbGxTdHlsZSA9IGZvcmVncm91bmRGaWxsO1xyXG4gICAgICAgIC8vIGNvbnRleHQubW92ZVRvKC0xLCAtMSk7XHJcbiAgICAgICAgLy8gY29udGV4dC5saW5lVG8oMSwgLTEpO1xyXG4gICAgICAgIC8vIGNvbnRleHQubGluZVRvKGNhbnZhcy53aWR0aCArIDEsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgIC8vIGNvbnRleHQubGluZVRvKGNhbnZhcy53aWR0aCArIDEsIGNhbnZhcy5oZWlnaHQgKyAxKTtcclxuICAgICAgICAvLyBjb250ZXh0LmxpbmVUbyhjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQgKyAxKTtcclxuICAgICAgICAvLyBjb250ZXh0LmxpbmVUbygtMSwgMCk7XHJcbiAgICAgICAgLy8gY29udGV4dC5saW5lVG8oLTEsIC0xKTtcclxuICAgICAgICAvLyBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIC8vIGNvbnRleHQuZmlsbCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gY29udGV4dC5jcmVhdGVQYXR0ZXJuKGNhbnZhcywgXCJyZXBlYXRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldEJhY2t3YXJkRGlhZ29uYWxQYXR0ZXJuKGZpbGw6IHN0cmluZywgZm9yZWdyb3VuZEZpbGw6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBzaXplID0gNjtcclxuICAgICAgICBsZXQgcmF0aW8gPSBvbC5oYXMuREVWSUNFX1BJWEVMX1JBVElPO1xyXG5cclxuICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcclxuICAgICAgICBjYW52YXMud2lkdGggPSBzaXplICogMiAqIHJhdGlvO1xyXG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBzaXplICogMiAqIHJhdGlvO1xyXG5cclxuICAgICAgICBsZXQgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBmaWxsO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgLy8gdmVydGljYWwgbGluZVxyXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBmb3JlZ3JvdW5kRmlsbDtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhjYW52YXMud2lkdGgsIDApO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKDAsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBjb250ZXh0LmNyZWF0ZVBhdHRlcm4oY2FudmFzLCBcInJlcGVhdFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0UGVyY2VudDA1UGF0dGVybihmaWxsOiBzdHJpbmcsIGZvcmVncm91bmRGaWxsOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgc2l6ZSA9IDU7XHJcbiAgICAgICAgbGV0IHJhdGlvID0gb2wuaGFzLkRFVklDRV9QSVhFTF9SQVRJTztcclxuXHJcbiAgICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgY2FudmFzLndpZHRoID0gc2l6ZSAqICgyICogMC45NSArIDEpICogcmF0aW87XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IHNpemUgKiAoMiAqIDAuOTUgKyAxKSAqIHJhdGlvO1xyXG5cclxuICAgICAgICBsZXQgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBmaWxsO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgLy8gcGVyY2VudGFnZSByZWdpb25cclxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGZvcmVncm91bmRGaWxsO1xyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oY2FudmFzLndpZHRoICogMC41LCBjYW52YXMuaGVpZ2h0ICogMC40NSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoICogMC41NSwgY2FudmFzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoICogMC41LCBjYW52YXMuaGVpZ2h0ICogMC41NSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoICogMC40NSwgY2FudmFzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoICogMC41LCBjYW52YXMuaGVpZ2h0ICogMC40NSk7XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRleHQuY3JlYXRlUGF0dGVybihjYW52YXMsIFwicmVwZWF0XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRQZXJjZW50MTBQYXR0ZXJuKGZpbGw6IHN0cmluZywgZm9yZWdyb3VuZEZpbGw6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBzaXplID0gNTtcclxuICAgICAgICBsZXQgcmF0aW8gPSBvbC5oYXMuREVWSUNFX1BJWEVMX1JBVElPO1xyXG5cclxuICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcclxuICAgICAgICBjYW52YXMud2lkdGggPSBzaXplICogKDIgKiAwLjkgKyAxKSAqIHJhdGlvO1xyXG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBzaXplICogKDIgKiAwLjkgKyAxKSAqIHJhdGlvO1xyXG5cclxuICAgICAgICBsZXQgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBmaWxsO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgLy8gcGVyY2VudGFnZSByZWdpb25cclxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGZvcmVncm91bmRGaWxsO1xyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oY2FudmFzLndpZHRoICogMC41LCBjYW52YXMuaGVpZ2h0ICogMC40KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhjYW52YXMud2lkdGggKiAwLjYsIGNhbnZhcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGNhbnZhcy53aWR0aCAqIDAuNSwgY2FudmFzLmhlaWdodCAqIDAuNik7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoICogMC40LCBjYW52YXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhjYW52YXMud2lkdGggKiAwLjUsIGNhbnZhcy5oZWlnaHQgKiAwLjQpO1xyXG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5maWxsKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBjb250ZXh0LmNyZWF0ZVBhdHRlcm4oY2FudmFzLCBcInJlcGVhdFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0UGVyY2VudDIwUGF0dGVybihmaWxsOiBzdHJpbmcsIGZvcmVncm91bmRGaWxsOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgc2l6ZSA9IDU7XHJcbiAgICAgICAgbGV0IHJhdGlvID0gb2wuaGFzLkRFVklDRV9QSVhFTF9SQVRJTztcclxuXHJcbiAgICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgY2FudmFzLndpZHRoID0gc2l6ZSAqICgyICogMC44ICsgMSkgKiByYXRpbztcclxuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gc2l6ZSAqICgyICogMC44ICsgMSkgKiByYXRpbztcclxuXHJcbiAgICAgICAgbGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbDtcclxuICAgICAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcblxyXG4gICAgICAgIC8vIHBlcmNlbnRhZ2UgcmVnaW9uXHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBmb3JlZ3JvdW5kRmlsbDtcclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQubW92ZVRvKGNhbnZhcy53aWR0aCAqIDAuNSwgY2FudmFzLmhlaWdodCAqIDAuMyk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoICogMC43LCBjYW52YXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhjYW52YXMud2lkdGggKiAwLjUsIGNhbnZhcy5oZWlnaHQgKiAwLjcpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGNhbnZhcy53aWR0aCAqIDAuMywgY2FudmFzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoICogMC41LCBjYW52YXMuaGVpZ2h0ICogMC4zKTtcclxuICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gY29udGV4dC5jcmVhdGVQYXR0ZXJuKGNhbnZhcywgXCJyZXBlYXRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldFBlcmNlbnQyNVBhdHRlcm4oZmlsbDogc3RyaW5nLCBmb3JlZ3JvdW5kRmlsbDogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IHNpemUgPSA1O1xyXG4gICAgICAgIGxldCByYXRpbyA9IG9sLmhhcy5ERVZJQ0VfUElYRUxfUkFUSU87XHJcblxyXG4gICAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IHNpemUgKiAwLjQgKiByYXRpbztcclxuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gc2l6ZSAqIDAuNCAqIHJhdGlvO1xyXG5cclxuICAgICAgICBsZXQgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBmaWxsO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgLy8gcGVyY2VudGFnZSByZWdpb25cclxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGZvcmVncm91bmRGaWxsO1xyXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBmb3JlZ3JvdW5kRmlsbDtcclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuZWxsaXBzZShcclxuICAgICAgICAgICAgY2FudmFzLndpZHRoICogMC4yNSxcclxuICAgICAgICAgICAgY2FudmFzLmhlaWdodCAqIDAuMjUsXHJcbiAgICAgICAgICAgIDAuOCxcclxuICAgICAgICAgICAgMC44LFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAyICogTWF0aC5QSVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgLy8gY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRleHQuY3JlYXRlUGF0dGVybihjYW52YXMsIFwicmVwZWF0XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRQZXJjZW50MzBQYXR0ZXJuKGZpbGw6IHN0cmluZywgZm9yZWdyb3VuZEZpbGw6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBzaXplID0gNTtcclxuICAgICAgICBsZXQgcmF0aW8gPSBvbC5oYXMuREVWSUNFX1BJWEVMX1JBVElPO1xyXG5cclxuICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcclxuICAgICAgICBjYW52YXMud2lkdGggPSBzaXplICogKDIgKiAwLjcgKyAxKSAqIHJhdGlvO1xyXG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBzaXplICogKDIgKiAwLjcgKyAxKSAqIHJhdGlvO1xyXG5cclxuICAgICAgICBsZXQgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBmaWxsO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgLy8gcGVyY2VudGFnZSByZWdpb25cclxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGZvcmVncm91bmRGaWxsO1xyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oY2FudmFzLndpZHRoICogMC41LCBjYW52YXMuaGVpZ2h0ICogMC4yKTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhjYW52YXMud2lkdGggKiAwLjgsIGNhbnZhcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGNhbnZhcy53aWR0aCAqIDAuNSwgY2FudmFzLmhlaWdodCAqIDAuOCk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoICogMC4yLCBjYW52YXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhjYW52YXMud2lkdGggKiAwLjUsIGNhbnZhcy5oZWlnaHQgKiAwLjIpO1xyXG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5maWxsKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBjb250ZXh0LmNyZWF0ZVBhdHRlcm4oY2FudmFzLCBcInJlcGVhdFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0UGVyY2VudDQwUGF0dGVybihmaWxsOiBzdHJpbmcsIGZvcmVncm91bmRGaWxsOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgc2l6ZSA9IDU7XHJcbiAgICAgICAgbGV0IHJhdGlvID0gb2wuaGFzLkRFVklDRV9QSVhFTF9SQVRJTztcclxuXHJcbiAgICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgY2FudmFzLndpZHRoID0gc2l6ZSAqICgyICogMC40ICsgMSkgKiByYXRpbztcclxuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gc2l6ZSAqICgyICogMC40ICsgMSkgKiByYXRpbztcclxuXHJcbiAgICAgICAgbGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbDtcclxuICAgICAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcblxyXG4gICAgICAgIC8vIHBlcmNlbnRhZ2UgcmVnaW9uXHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBmb3JlZ3JvdW5kRmlsbDtcclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQubW92ZVRvKGNhbnZhcy53aWR0aCAqIDAuNSwgY2FudmFzLmhlaWdodCAqIDAuMSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoICogMC45LCBjYW52YXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhjYW52YXMud2lkdGggKiAwLjUsIGNhbnZhcy5oZWlnaHQgKiAwLjkpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGNhbnZhcy53aWR0aCAqIDAuMSwgY2FudmFzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoICogMC41LCBjYW52YXMuaGVpZ2h0ICogMC4xKTtcclxuICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gY29udGV4dC5jcmVhdGVQYXR0ZXJuKGNhbnZhcywgXCJyZXBlYXRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldFBlcmNlbnQ1MFBhdHRlcm4oZmlsbDogc3RyaW5nLCBmb3JlZ3JvdW5kRmlsbDogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IHNpemUgPSA1O1xyXG4gICAgICAgIGxldCByYXRpbyA9IG9sLmhhcy5ERVZJQ0VfUElYRUxfUkFUSU87XHJcblxyXG4gICAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IHNpemUgKiAoMiAqIDAuNSArIDEpICogcmF0aW87XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IHNpemUgKiAoMiAqIDAuNSArIDEpICogcmF0aW87XHJcblxyXG4gICAgICAgIGxldCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGZpbGw7XHJcbiAgICAgICAgY29udGV4dC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG5cclxuICAgICAgICAvLyBwZXJjZW50YWdlIHJlZ2lvblxyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZm9yZWdyb3VuZEZpbGw7XHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhjYW52YXMud2lkdGggKiAwLjUsIDApO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoICogMC41LCBjYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbygwLCBjYW52YXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhjYW52YXMud2lkdGggKiAwLjUsIDApO1xyXG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5maWxsKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBjb250ZXh0LmNyZWF0ZVBhdHRlcm4oY2FudmFzLCBcInJlcGVhdFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0UGVyY2VudDYwUGF0dGVybihmaWxsOiBzdHJpbmcsIGZvcmVncm91bmRGaWxsOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgc2l6ZSA9IDU7XHJcbiAgICAgICAgbGV0IHJhdGlvID0gb2wuaGFzLkRFVklDRV9QSVhFTF9SQVRJTztcclxuXHJcbiAgICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgY2FudmFzLndpZHRoID0gc2l6ZSAqICgyICogMC40ICsgMSkgKiByYXRpbztcclxuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gc2l6ZSAqICgyICogMC40ICsgMSkgKiByYXRpbztcclxuXHJcbiAgICAgICAgbGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbDtcclxuICAgICAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcblxyXG4gICAgICAgIC8vIHBlcmNlbnRhZ2UgcmVnaW9uXHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBmb3JlZ3JvdW5kRmlsbDtcclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQubW92ZVRvKGNhbnZhcy53aWR0aCAqIDAuNCwgMCk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoICogMC42LCAwKTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQgKiAwLjQpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCAqIDAuNik7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoICogMC42LCBjYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhjYW52YXMud2lkdGggKiAwLjQsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKDAsIGNhbnZhcy5oZWlnaHQgKiAwLjYpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKDAsIGNhbnZhcy5oZWlnaHQgKiAwLjQpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGNhbnZhcy53aWR0aCAqIDAuNCwgMCk7XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRleHQuY3JlYXRlUGF0dGVybihjYW52YXMsIFwicmVwZWF0XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRQZXJjZW50NzBQYXR0ZXJuKGZpbGw6IHN0cmluZywgZm9yZWdyb3VuZEZpbGw6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBzaXplID0gNTtcclxuICAgICAgICBsZXQgcmF0aW8gPSBvbC5oYXMuREVWSUNFX1BJWEVMX1JBVElPO1xyXG5cclxuICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcclxuICAgICAgICBjYW52YXMud2lkdGggPSBzaXplICogKDIgKiAwLjMgKyAxKSAqIHJhdGlvO1xyXG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBzaXplICogKDIgKiAwLjMgKyAxKSAqIHJhdGlvO1xyXG5cclxuICAgICAgICBsZXQgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBmaWxsO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgLy8gcGVyY2VudGFnZSByZWdpb25cclxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGZvcmVncm91bmRGaWxsO1xyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oY2FudmFzLndpZHRoICogMC4zLCAwKTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhjYW52YXMud2lkdGggKiAwLjcsIDApO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCAqIDAuMyk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0ICogMC43KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhjYW52YXMud2lkdGggKiAwLjcsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGNhbnZhcy53aWR0aCAqIDAuMywgY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oMCwgY2FudmFzLmhlaWdodCAqIDAuNyk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oMCwgY2FudmFzLmhlaWdodCAqIDAuMyk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoICogMC4zLCAwKTtcclxuICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gY29udGV4dC5jcmVhdGVQYXR0ZXJuKGNhbnZhcywgXCJyZXBlYXRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldFBlcmNlbnQ3NVBhdHRlcm4oZmlsbDogc3RyaW5nLCBmb3JlZ3JvdW5kRmlsbDogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IHNpemUgPSA1O1xyXG4gICAgICAgIGxldCByYXRpbyA9IG9sLmhhcy5ERVZJQ0VfUElYRUxfUkFUSU87XHJcblxyXG4gICAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IHNpemUgKiAoMiAqIDAuMjUgKyAxKSAqIHJhdGlvO1xyXG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBzaXplICogKDIgKiAwLjI1ICsgMSkgKiByYXRpbztcclxuXHJcbiAgICAgICAgbGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbDtcclxuICAgICAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcblxyXG4gICAgICAgIC8vIHBlcmNlbnRhZ2UgcmVnaW9uXHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBmb3JlZ3JvdW5kRmlsbDtcclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQubW92ZVRvKGNhbnZhcy53aWR0aCAqIDAuMjUsIDApO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGNhbnZhcy53aWR0aCAqIDAuNzUsIDApO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCAqIDAuMjUpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCAqIDAuNzUpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGNhbnZhcy53aWR0aCAqIDAuNzUsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKGNhbnZhcy53aWR0aCAqIDAuMjUsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKDAsIGNhbnZhcy5oZWlnaHQgKiAwLjc1KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbygwLCBjYW52YXMuaGVpZ2h0ICogMC4yNSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoICogMC4yNSwgMCk7XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRleHQuY3JlYXRlUGF0dGVybihjYW52YXMsIFwicmVwZWF0XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRQZXJjZW50ODBQYXR0ZXJuKGZpbGw6IHN0cmluZywgZm9yZWdyb3VuZEZpbGw6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBzaXplID0gNTtcclxuICAgICAgICBsZXQgcmF0aW8gPSBvbC5oYXMuREVWSUNFX1BJWEVMX1JBVElPO1xyXG5cclxuICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcclxuICAgICAgICBjYW52YXMud2lkdGggPSBzaXplICogMC44ICogcmF0aW87XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IHNpemUgKiAwLjggKiByYXRpbztcclxuXHJcbiAgICAgICAgbGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbDtcclxuICAgICAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcblxyXG4gICAgICAgIC8vIHBlcmNlbnRhZ2UgcmVnaW9uXHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBmb3JlZ3JvdW5kRmlsbDtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gZm9yZWdyb3VuZEZpbGw7XHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LmVsbGlwc2UoY2FudmFzLndpZHRoICogMC4xLCBjYW52YXMuaGVpZ2h0ICogMC4xLCAwLjgsIDAuOCwgMCwgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIC8vIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgY29udGV4dC5maWxsKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBjb250ZXh0LmNyZWF0ZVBhdHRlcm4oY2FudmFzLCBcInJlcGVhdFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0UGVyY2VudDkwUGF0dGVybihmaWxsOiBzdHJpbmcsIGZvcmVncm91bmRGaWxsOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgc2l6ZSA9IDU7XHJcbiAgICAgICAgbGV0IHJhdGlvID0gb2wuaGFzLkRFVklDRV9QSVhFTF9SQVRJTztcclxuXHJcbiAgICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgY2FudmFzLndpZHRoID0gc2l6ZSAqICgyICogMC4xICsgMSkgKiByYXRpbztcclxuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gc2l6ZSAqICgyICogMC4xICsgMSkgKiByYXRpbztcclxuXHJcbiAgICAgICAgbGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbDtcclxuICAgICAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcblxyXG4gICAgICAgIC8vIHBlcmNlbnRhZ2UgcmVnaW9uXHJcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBmb3JlZ3JvdW5kRmlsbDtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gZm9yZWdyb3VuZEZpbGw7XHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LmVsbGlwc2UoY2FudmFzLndpZHRoICogMC4xLCBjYW52YXMuaGVpZ2h0ICogMC4xLCAwLjQsIDAuNCwgMCwgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIC8vIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgY29udGV4dC5maWxsKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBjb250ZXh0LmNyZWF0ZVBhdHRlcm4oY2FudmFzLCBcInJlcGVhdFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0TGFyZ2VHcmlkUGF0dGVybihmaWxsOiBzdHJpbmcsIGZvcmVncm91bmRGaWxsOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgc2l6ZSA9IDY7XHJcbiAgICAgICAgbGV0IHJhdGlvID0gb2wuaGFzLkRFVklDRV9QSVhFTF9SQVRJTztcclxuXHJcbiAgICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgY2FudmFzLndpZHRoID0gc2l6ZSAqIDIgKiByYXRpbztcclxuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gc2l6ZSAqIDIgKiByYXRpbztcclxuXHJcbiAgICAgICAgbGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbDtcclxuICAgICAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcblxyXG4gICAgICAgIC8vIGdyaWQgcmVjdFxyXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBmb3JlZ3JvdW5kRmlsbDtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZVJlY3QoXHJcbiAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCxcclxuICAgICAgICAgICAgY2FudmFzLmhlaWdodFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHJldHVybiBjb250ZXh0LmNyZWF0ZVBhdHRlcm4oY2FudmFzLCBcInJlcGVhdFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0RGlhZ29uYWxDcm9zc1BhdHRlcm4oZmlsbDogc3RyaW5nLCBmb3JlZ3JvdW5kRmlsbDogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IHNpemUgPSA2O1xyXG4gICAgICAgIGxldCByYXRpbyA9IG9sLmhhcy5ERVZJQ0VfUElYRUxfUkFUSU87XHJcblxyXG4gICAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IHNpemUgKiAyICogcmF0aW87XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IHNpemUgKiAyICogcmF0aW87XHJcblxyXG4gICAgICAgIGxldCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGZpbGw7XHJcbiAgICAgICAgY29udGV4dC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG5cclxuICAgICAgICAvLyBsZWZ0IHRvIHJpZ2h0IGRpYWdvbmFsIGxpbmVcclxuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gZm9yZWdyb3VuZEZpbGw7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oMCwgMCk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG5cclxuICAgICAgICAvLyByaWdodCB0byBsZWZ0IGRpYWdvbmFsIGxpbmVcclxuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gZm9yZWdyb3VuZEZpbGw7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oY2FudmFzLndpZHRoLCAwKTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbygwLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gY29udGV4dC5jcmVhdGVQYXR0ZXJuKGNhbnZhcywgXCJyZXBlYXRcIik7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBHZW9TdHlsZSB9IGZyb20gXCIuL2dlb1N0eWxlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgR2VvTGluZVN0eWxlIGV4dGVuZHMgR2VvU3R5bGUge1xyXG4gICAgZ2VvbWV0cnlMaW5lQ2FwcyA9IFtcclxuICAgICAgICBcInRyaWFuZ2xlXCIsXHJcbiAgICAgICAgXCJzcXVhcmVhbmNob3JcIixcclxuICAgICAgICBcInJvdW5kYW5jaG9yXCIsXHJcbiAgICAgICAgXCJkaWFtb25kYW5jaG9yXCIsXHJcbiAgICAgICAgXCJhcnJvd2FuY2hvclwiXHJcbiAgICBdO1xyXG4gICAgb2xMaW5lQ2Fwc01hcCA9IHtcclxuICAgICAgICBidXR0OiBcImJ1dHRcIixcclxuICAgICAgICBmbGF0OiBcInNxdWFyZVwiLFxyXG4gICAgICAgIHNxdWFyZTogXCJzcXVhcmVcIixcclxuICAgICAgICByb3VuZDogXCJyb3VuZFwiLFxyXG4gICAgICAgIG5vYW5jaG9yOiBcInNxdWFyZVwiLFxyXG4gICAgICAgIGFuY2hvcm1hc2s6IFwic3F1YXJlXCIsXHJcbiAgICAgICAgY3VzdG9tOiBcInNxdWFyZVwiXHJcbiAgICB9O1xyXG5cclxuICAgIGxpbmVDYXA6IHN0cmluZztcclxuICAgIGNvbG9yOiBzdHJpbmc7XHJcbiAgICBkYXNoQXJyYXk6IGFueTtcclxuICAgIGdhbW1hOiBzdHJpbmc7XHJcbiAgICBnZW9tZXRyeVRyYW5zZm9ybTogc3RyaW5nO1xyXG4gICAgbGluZUpvaW46IHN0cmluZztcclxuICAgIG1pdGVyTGltaXQ6IG51bWJlcjtcclxuICAgIG9mZnNldDogc3RyaW5nO1xyXG4gICAgb3BhY2l0eTogbnVtYmVyO1xyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIG9uZXdheVN5bWJvbDogYW55O1xyXG5cclxuICAgIGxpbmVDYXBJbm5lcjogc3RyaW5nO1xyXG4gICAgY29sb3JJbm5lcjogc3RyaW5nO1xyXG4gICAgZGFzaEFycmF5SW5uZXI6IGFueTtcclxuICAgIGxpbmVKb2luSW5uZXI6IHN0cmluZztcclxuICAgIG1pdGVyTGltaXRJbm5lcjogbnVtYmVyO1xyXG4gICAgd2lkdGhJbm5lcjogbnVtYmVyO1xyXG5cclxuICAgIGxpbmVDYXBDZW50ZXI6IHN0cmluZztcclxuICAgIGNvbG9yQ2VudGVyOiBzdHJpbmc7XHJcbiAgICBkYXNoQXJyYXlDZW50ZXI6IGFueTtcclxuICAgIGxpbmVKb2luQ2VudGVyOiBzdHJpbmc7XHJcbiAgICBtaXRlckxpbWl0Q2VudGVyOiBudW1iZXI7XHJcbiAgICB3aWR0aENlbnRlcjogbnVtYmVyO1xyXG5cclxuICAgIG9sQ29sb3I6IHN0cmluZztcclxuICAgIGNvbnZlcnRlZERhc2hBcnJheTogbnVtYmVyW10gPSBuZXcgQXJyYXk8bnVtYmVyPigpO1xyXG5cclxuICAgIG9sSW5uZXJDb2xvcjogc3RyaW5nO1xyXG4gICAgY29udmVydGVkSW5uZXJEYXNoQXJyYXk6IG51bWJlcltdID0gbmV3IEFycmF5PG51bWJlcj4oKTtcclxuXHJcbiAgICBvbENlbnRlckNvbG9yOiBzdHJpbmc7XHJcbiAgICBjb252ZXJ0ZWRDZW50ZXJEYXNoQXJyYXk6IG51bWJlcltdID0gbmV3IEFycmF5PG51bWJlcj4oKTtcclxuXHJcbiAgICBsaW5lU3Ryb2tlOiBhbnk7XHJcbiAgICBsaW5lU3R5bGU6IGFueTtcclxuXHJcbiAgICBsaW5lQ2FwRmlsbDogYW55O1xyXG4gICAgbGluZUNhcFN0eWxlOiBhbnk7XHJcblxyXG4gICAgbGluZUlubmVyU3Ryb2tlOiBhbnk7XHJcbiAgICBsaW5lSW5uZXJTdHlsZTogYW55O1xyXG5cclxuICAgIGxpbmVDYXBJbm5lckZpbGw6IGFueTtcclxuICAgIGxpbmVDYXBJbm5lclN0eWxlOiBhbnk7XHJcblxyXG4gICAgbGluZUNlbnRlclN0cm9rZTogYW55O1xyXG4gICAgbGluZUNlbnRlclN0eWxlOiBhbnk7XHJcblxyXG4gICAgbGluZUNhcENlbnRlckZpbGw6IGFueTtcclxuICAgIGxpbmVDYXBDZW50ZXJTdHlsZTogYW55O1xyXG5cclxuICAgIG9uZXdheUljb246IGFueTtcclxuICAgIG9uZXdheVN0eWxlOiBhbnk7XHJcblxyXG4gICAgc3RhdGljIG9uZXdheUltZzogYW55O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHN0eWxlSnNvbj86IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHN0eWxlSnNvbik7XHJcblxyXG4gICAgICAgIHRoaXMubGluZVN0cm9rZSA9IG5ldyBvbC5zdHlsZS5TdHJva2UoKTtcclxuICAgICAgICB0aGlzLmxpbmVTdHlsZSA9IG5ldyBvbC5zdHlsZS5TdHlsZSh7IHN0cm9rZTogdGhpcy5saW5lU3Ryb2tlIH0pO1xyXG4gICAgICAgIHRoaXMubGluZUNhcEZpbGwgPSBuZXcgb2wuc3R5bGUuRmlsbCgpO1xyXG4gICAgICAgIHRoaXMubGluZUNhcFN0eWxlID0gbmV3IG9sLnN0eWxlLlN0eWxlKHsgZmlsbDogdGhpcy5saW5lQ2FwRmlsbCB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5saW5lSW5uZXJTdHJva2UgPSBuZXcgb2wuc3R5bGUuU3Ryb2tlKCk7XHJcbiAgICAgICAgdGhpcy5saW5lSW5uZXJTdHlsZSA9IG5ldyBvbC5zdHlsZS5TdHlsZSh7IHN0cm9rZTogdGhpcy5saW5lSW5uZXJTdHJva2UgfSk7XHJcbiAgICAgICAgdGhpcy5saW5lQ2FwSW5uZXJGaWxsID0gbmV3IG9sLnN0eWxlLkZpbGwoKTtcclxuICAgICAgICB0aGlzLmxpbmVDYXBJbm5lclN0eWxlID0gbmV3IG9sLnN0eWxlLlN0eWxlKHtcclxuICAgICAgICAgICAgZmlsbDogdGhpcy5saW5lQ2FwSW5uZXJGaWxsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMubGluZUNlbnRlclN0cm9rZSA9IG5ldyBvbC5zdHlsZS5TdHJva2UoKTtcclxuICAgICAgICB0aGlzLmxpbmVDZW50ZXJTdHlsZSA9IG5ldyBvbC5zdHlsZS5TdHlsZSh7XHJcbiAgICAgICAgICAgIHN0cm9rZTogdGhpcy5saW5lQ2VudGVyU3Ryb2tlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5saW5lQ2FwQ2VudGVyRmlsbCA9IG5ldyBvbC5zdHlsZS5GaWxsKCk7XHJcbiAgICAgICAgdGhpcy5saW5lQ2FwQ2VudGVyU3R5bGUgPSBuZXcgb2wuc3R5bGUuU3R5bGUoe1xyXG4gICAgICAgICAgICBmaWxsOiB0aGlzLmxpbmVDYXBDZW50ZXJGaWxsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmIChzdHlsZUpzb24pIHtcclxuICAgICAgICAgICAgdGhpcy5saW5lQ2FwID0gc3R5bGVKc29uW1wibGluZS1jYXBcIl07XHJcbiAgICAgICAgICAgIHRoaXMuY29sb3IgPSBzdHlsZUpzb25bXCJsaW5lLWNvbG9yXCJdO1xyXG4gICAgICAgICAgICB0aGlzLmRhc2hBcnJheSA9IHN0eWxlSnNvbltcImxpbmUtZGFzaGFycmF5XCJdO1xyXG4gICAgICAgICAgICB0aGlzLmdhbW1hID0gc3R5bGVKc29uW1wibGluZS1nYW1tYVwiXTtcclxuICAgICAgICAgICAgdGhpcy5nZW9tZXRyeVRyYW5zZm9ybSA9IHN0eWxlSnNvbltcImxpbmUtZ2VvbWV0cnktdHJhbnNmb3JtXCJdO1xyXG4gICAgICAgICAgICB0aGlzLmxpbmVKb2luID0gc3R5bGVKc29uW1wibGluZS1qb2luXCJdO1xyXG4gICAgICAgICAgICB0aGlzLm1pdGVyTGltaXQgPSBzdHlsZUpzb25bXCJsaW5lLW1pdGVybGltaXRcIl07XHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gc3R5bGVKc29uW1wibGluZS1vZmZzZXRcIl07XHJcbiAgICAgICAgICAgIHRoaXMub3BhY2l0eSA9IHN0eWxlSnNvbltcImxpbmUtb3BhY2l0eVwiXTtcclxuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHN0eWxlSnNvbltcImxpbmUtd2lkdGhcIl07XHJcbiAgICAgICAgICAgIHRoaXMubGluZUNhcElubmVyID0gc3R5bGVKc29uW1wibGluZS1jYXAtaW5uZXJcIl07XHJcbiAgICAgICAgICAgIHRoaXMuY29sb3JJbm5lciA9IHN0eWxlSnNvbltcImxpbmUtY29sb3ItaW5uZXJcIl07XHJcbiAgICAgICAgICAgIHRoaXMuZGFzaEFycmF5SW5uZXIgPSBzdHlsZUpzb25bXCJsaW5lLWRhc2hhcnJheS1pbm5lclwiXTtcclxuICAgICAgICAgICAgdGhpcy5saW5lSm9pbklubmVyID0gc3R5bGVKc29uW1wibGluZS1qb2luLWlubmVyXCJdO1xyXG4gICAgICAgICAgICB0aGlzLm1pdGVyTGltaXRJbm5lciA9IHN0eWxlSnNvbltcImxpbmUtbWl0ZXJsaW1pdC1pbm5lclwiXTtcclxuICAgICAgICAgICAgdGhpcy53aWR0aElubmVyID0gc3R5bGVKc29uW1wibGluZS13aWR0aC1pbm5lclwiXTtcclxuICAgICAgICAgICAgdGhpcy5saW5lQ2FwQ2VudGVyID0gc3R5bGVKc29uW1wibGluZS1jYXAtY2VudGVyXCJdO1xyXG4gICAgICAgICAgICB0aGlzLmNvbG9yQ2VudGVyID0gc3R5bGVKc29uW1wibGluZS1jb2xvci1jZW50ZXJcIl07XHJcbiAgICAgICAgICAgIHRoaXMuZGFzaEFycmF5Q2VudGVyID0gc3R5bGVKc29uW1wibGluZS1kYXNoYXJyYXktY2VudGVyXCJdO1xyXG4gICAgICAgICAgICB0aGlzLmxpbmVKb2luQ2VudGVyID0gc3R5bGVKc29uW1wibGluZS1qb2luLWNlbnRlclwiXTtcclxuICAgICAgICAgICAgdGhpcy5taXRlckxpbWl0Q2VudGVyID0gc3R5bGVKc29uW1wibGluZS1taXRlcmxpbWl0LWNlbnRlclwiXTtcclxuICAgICAgICAgICAgdGhpcy53aWR0aENlbnRlciA9IHN0eWxlSnNvbltcImxpbmUtd2lkdGgtY2VudGVyXCJdO1xyXG4gICAgICAgICAgICB0aGlzLm9uZXdheVN5bWJvbCA9IHN0eWxlSnNvbltcImxpbmUtb25ld2F5LXN5bWJvbFwiXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGluaXRpYWxpemVDb3JlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbG9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMub2xDb2xvciA9IEdlb1N0eWxlLnRvUkdCQUNvbG9yKHRoaXMuY29sb3IsIHRoaXMub3BhY2l0eSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmxpbmVTdHJva2Uuc2V0Q29sb3IodGhpcy5vbENvbG9yKTtcclxuICAgICAgICAgICAgdGhpcy5saW5lQ2FwRmlsbC5zZXRDb2xvcih0aGlzLm9sQ29sb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5kYXNoQXJyYXkpIHtcclxuICAgICAgICAgICAgbGV0IHRtcEFycmF5ID0gdGhpcy5kYXNoQXJyYXkuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBhIG9mIHRtcEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnRlZERhc2hBcnJheS5wdXNoKHBhcnNlRmxvYXQoYSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBEcmF3aW5nIGlubmVyXHJcbiAgICAgICAgaWYgKHRoaXMuY29sb3JJbm5lcikge1xyXG4gICAgICAgICAgICB0aGlzLm9sSW5uZXJDb2xvciA9IEdlb1N0eWxlLnRvUkdCQUNvbG9yKHRoaXMuY29sb3JJbm5lciwgdGhpcy5vcGFjaXR5KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubGluZUlubmVyU3Ryb2tlLnNldENvbG9yKHRoaXMub2xJbm5lckNvbG9yKTtcclxuICAgICAgICAgICAgdGhpcy5saW5lQ2FwSW5uZXJGaWxsLnNldENvbG9yKHRoaXMub2xJbm5lckNvbG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZGFzaEFycmF5SW5uZXIpIHtcclxuICAgICAgICAgICAgbGV0IHRtcEFycmF5ID0gdGhpcy5kYXNoQXJyYXlJbm5lci5zcGxpdChcIixcIik7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGEgb2YgdG1wQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udmVydGVkSW5uZXJEYXNoQXJyYXkucHVzaChwYXJzZUZsb2F0KGEpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRHJhd2luZyBjZW50ZXJcclxuICAgICAgICBpZiAodGhpcy5jb2xvckNlbnRlcikge1xyXG4gICAgICAgICAgICB0aGlzLm9sQ2VudGVyQ29sb3IgPSBHZW9TdHlsZS50b1JHQkFDb2xvcih0aGlzLmNvbG9yQ2VudGVyLCB0aGlzLm9wYWNpdHkpO1xyXG4gICAgICAgICAgICB0aGlzLmxpbmVDZW50ZXJTdHJva2Uuc2V0Q29sb3IodGhpcy5vbENlbnRlckNvbG9yKTtcclxuICAgICAgICAgICAgdGhpcy5saW5lQ2FwQ2VudGVyRmlsbC5zZXRDb2xvcih0aGlzLm9sQ2VudGVyQ29sb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5kYXNoQXJyYXlDZW50ZXIpIHtcclxuICAgICAgICAgICAgbGV0IHRtcEFycmF5ID0gdGhpcy5kYXNoQXJyYXlDZW50ZXIuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBhIG9mIHRtcEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnRlZENlbnRlckRhc2hBcnJheS5wdXNoKHBhcnNlRmxvYXQoYSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5vbmV3YXlTeW1ib2wpIHtcclxuICAgICAgICAgICAgdGhpcy5vbmV3YXlJY29uID0gbmV3IG9sLnN0eWxlLkljb24oe1xyXG4gICAgICAgICAgICAgICAgc3JjOiB0aGlzLm9uZXdheVN5bWJvbCxcclxuICAgICAgICAgICAgICAgIGltZ1NpemU6IFsxOCwgNV0sXHJcbiAgICAgICAgICAgICAgICBhbmNob3I6IFswLjUsIDAuNV0sXHJcbiAgICAgICAgICAgICAgICByb3RhdGVXaXRoVmlldzogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgICAgICAgICB0aGlzLm9uZXdheVN0eWxlID0gbmV3IG9sLnN0eWxlLlN0eWxlKHtcclxuICAgICAgICAgICAgICAgIGltYWdlOiB0aGlzLm9uZXdheUljb25cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldFRyYW5zZm9ybVZhbHVlcyh0cmFuc2Zvcm06IHN0cmluZyk6IGFueSB7XHJcbiAgICAgICAgLy8gZ2V0IHRyYW5zZm9ybSB2YWx1ZXMgd2hpY2ggbG9vayBsaWtlIHRyYW5zZm9ybSh2YWx1ZTEsIHZhbHVlMilcclxuICAgICAgICBsZXQgc3RhcnQgPSB0cmFuc2Zvcm0uaW5kZXhPZihcIihcIik7XHJcbiAgICAgICAgbGV0IGVuZCA9IHRyYW5zZm9ybS5pbmRleE9mKFwiKVwiKTtcclxuICAgICAgICBsZXQgdmFsdWVTdHJpbmcgPSB0cmFuc2Zvcm0uc3Vic3RyaW5nKHN0YXJ0ICsgMSwgZW5kKTtcclxuXHJcbiAgICAgICAgbGV0IHZhbHVlcyA9IFtdO1xyXG4gICAgICAgIGlmICh2YWx1ZVN0cmluZy5pbmNsdWRlcyhcIixcIikpIHtcclxuICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVTdHJpbmcuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlU3RyaW5nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2YWx1ZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29udmVydGVkU3R5bGVDb3JlKGZlYXR1cmU6IGFueSwgcmVzb2x1dGlvbjogbnVtYmVyLCBvcHRpb25zOiBhbnkpOiBvbC5zdHlsZS5TdHlsZVtdIHtcclxuICAgICAgICBsZXQgbGVuZ3RoID0gMDtcclxuICAgICAgICB0aGlzLnN0eWxlcyA9IFtdO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5jb2xvciAmJiB0aGlzLndpZHRoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9sTGluZUNhcHNNYXBbdGhpcy5saW5lQ2FwXSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saW5lU3Ryb2tlLnNldExpbmVDYXAodGhpcy5vbExpbmVDYXBzTWFwW3RoaXMubGluZUNhcF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVTdHJva2Uuc2V0Q29sb3IodGhpcy5vbENvbG9yKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGluZUNhcEZpbGwuc2V0Q29sb3IodGhpcy5vbENvbG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5kYXNoQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGluZVN0cm9rZS5zZXRMaW5lRGFzaCh0aGlzLmNvbnZlcnRlZERhc2hBcnJheSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMubGluZUpvaW4pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGluZVN0cm9rZS5zZXRMaW5lSm9pbih0aGlzLmxpbmVKb2luKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5taXRlckxpbWl0ICE9PSA0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVTdHJva2Uuc2V0TWl0ZXJMaW1pdCh0aGlzLm1pdGVyTGltaXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLndpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVTdHJva2Uuc2V0V2lkdGgodGhpcy53aWR0aCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFNldCBpbm5lclxyXG4gICAgICAgICAgICBpZiAodGhpcy5jb2xvcklubmVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVJbm5lclN0cm9rZS5zZXRDb2xvcih0aGlzLm9sSW5uZXJDb2xvcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVDYXBJbm5lckZpbGwuc2V0Q29sb3IodGhpcy5vbElubmVyQ29sb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRhc2hBcnJheUlubmVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVJbm5lclN0cm9rZS5zZXRMaW5lRGFzaCh0aGlzLmNvbnZlcnRlZElubmVyRGFzaEFycmF5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5saW5lSm9pbklubmVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVJbm5lclN0cm9rZS5zZXRMaW5lSm9pbih0aGlzLmxpbmVKb2luSW5uZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1pdGVyTGltaXRJbm5lciAhPT0gNCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saW5lSW5uZXJTdHJva2Uuc2V0TWl0ZXJMaW1pdCh0aGlzLm1pdGVyTGltaXRJbm5lcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMud2lkdGhJbm5lcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saW5lSW5uZXJTdHJva2Uuc2V0V2lkdGgodGhpcy53aWR0aElubmVyKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gU2V0IGNlbnRlclxyXG4gICAgICAgICAgICBpZiAodGhpcy5jb2xvckNlbnRlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saW5lQ2VudGVyU3Ryb2tlLnNldENvbG9yKHRoaXMub2xDZW50ZXJDb2xvcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVDYXBDZW50ZXJGaWxsLnNldENvbG9yKHRoaXMub2xDZW50ZXJDb2xvcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVDZW50ZXJTdHJva2Uuc2V0TGluZUNhcChcImJ1dHRcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuZGFzaEFycmF5Q2VudGVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVDZW50ZXJTdHJva2Uuc2V0TGluZURhc2godGhpcy5jb252ZXJ0ZWRDZW50ZXJEYXNoQXJyYXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxpbmVKb2luQ2VudGVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVDZW50ZXJTdHJva2Uuc2V0TGluZUpvaW4odGhpcy5saW5lSm9pbkNlbnRlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMubWl0ZXJMaW1pdENlbnRlciAhPT0gNCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saW5lQ2VudGVyU3Ryb2tlLnNldE1pdGVyTGltaXQodGhpcy5taXRlckxpbWl0Q2VudGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy53aWR0aENlbnRlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saW5lQ2VudGVyU3Ryb2tlLnNldFdpZHRoKHRoaXMud2lkdGhDZW50ZXIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgZ2VvbWV0cnlGdW5jdGlvbiA9IChmZWF0dXJlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZW9tZXRyeVRyYW5zZm9ybSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBnZW9tZXRyeSA9IHRoaXMuZ2V0R2VvbWV0cnkoZmVhdHVyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2VvbWV0cnlUcmFuc2Zvcm0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlcyA9IHRoaXMuZ2V0VHJhbnNmb3JtVmFsdWVzKHRoaXMuZ2VvbWV0cnlUcmFuc2Zvcm0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2VvbWV0cnlUcmFuc2Zvcm0uaW5kZXhPZihcInRyYW5zbGF0ZVwiKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkudHJhbnNsYXRlKCt2YWx1ZXNbMF0udHJpbSgpLCArdmFsdWVzWzFdLnRyaW0oKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5nZW9tZXRyeVRyYW5zZm9ybS5pbmRleE9mKFwic2NhbGVcIikgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5LnNjYWxlKCt2YWx1ZXNbMF0udHJpbSgpLCArdmFsdWVzWzFdLnRyaW0oKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5nZW9tZXRyeVRyYW5zZm9ybS5pbmRleE9mKFwicm90YXRlXCIpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2VudGVyID0gb2wuZXh0ZW50LmdldENlbnRlcihnZW9tZXRyeS5nZXRFeHRlbnQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYW5nbGUgPSArdmFsdWVzWzBdLnRyaW0oKSAqIE1hdGguUEkgLyAxODA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeS5yb3RhdGUoYW5nbGUsIGNlbnRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5nZW9tZXRyeVRyYW5zZm9ybS5pbmRleE9mKFwic2tld1wiKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5za2V3R2VvbWV0cnkoZ2VvbWV0cnksICt2YWx1ZXNbMF0udHJpbSgpLCArdmFsdWVzWzFdLnRyaW0oKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmVhdHVyZS5nZXRHZW9tZXRyeSgpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5saW5lU3R5bGUuc2V0R2VvbWV0cnkoZ2VvbWV0cnlGdW5jdGlvbik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnN0eWxlc1tsZW5ndGgrK10gPSB0aGlzLmxpbmVTdHlsZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdhbW1hICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5sYXllcikge1xyXG4gICAgICAgICAgICAgICAgbGV0IHN0eWxlR2FtbWEgPSB0aGlzLmdhbW1hO1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5sYXllci5vbihcInByZWNvbXBvc2VcIiwgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2dC5jb250ZXh0LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IHN0eWxlR2FtbWE7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZ0LmNvbnRleHQud2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gc3R5bGVHYW1tYTtcclxuICAgICAgICAgICAgICAgICAgICBldnQuY29udGV4dC5tb3pJbWFnZVNtb290aGluZ0VuYWJsZWQgPSBzdHlsZUdhbW1hO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2dC5jb250ZXh0Lm1zSW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gc3R5bGVHYW1tYTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5nZW9tZXRyeUxpbmVDYXBzLmluY2x1ZGVzKHRoaXMubGluZUNhcCkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBnZW9tZXRyeUZ1bmN0aW9uID0gKGZlYXR1cmUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZ2VvbWV0cnkgPSB0aGlzLmdldEdlb21ldHJ5KGZlYXR1cmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBHZW9MaW5lU3R5bGUuY3JlYXRlQW5jaG9yZWRHZW9tZXRyeShcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGluZUNhcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x1dGlvblxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMubGluZUNhcFN0eWxlLnNldEdlb21ldHJ5KGdlb21ldHJ5RnVuY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHlsZXNbbGVuZ3RoKytdID0gdGhpcy5saW5lQ2FwU3R5bGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIERyYXdpbmcgaW5uZXJcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29sb3JJbm5lciAmJiB0aGlzLndpZHRoSW5uZXIpIHtcclxuICAgICAgICAgICAgICAgIGxldCBnZW9tZXRyeUZ1bmN0aW9uID0gKGZlYXR1cmUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZ2VvbWV0cnkgPSB0aGlzLmdldEdlb21ldHJ5KGZlYXR1cmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmdlb21ldHJ5VHJhbnNmb3JtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZXMgPSB0aGlzLmdldFRyYW5zZm9ybVZhbHVlcyh0aGlzLmdlb21ldHJ5VHJhbnNmb3JtKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmdlb21ldHJ5VHJhbnNmb3JtLmluZGV4T2YoXCJ0cmFuc2xhdGVcIikgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5LnRyYW5zbGF0ZSgrdmFsdWVzWzBdLnRyaW0oKSwgK3ZhbHVlc1sxXS50cmltKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2VvbWV0cnlUcmFuc2Zvcm0uaW5kZXhPZihcInNjYWxlXCIpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeS5zY2FsZSgrdmFsdWVzWzBdLnRyaW0oKSwgK3ZhbHVlc1sxXS50cmltKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2VvbWV0cnlUcmFuc2Zvcm0uaW5kZXhPZihcInJvdGF0ZVwiKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNlbnRlciA9IG9sLmV4dGVudC5nZXRDZW50ZXIoZ2VvbWV0cnkuZ2V0RXh0ZW50KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFuZ2xlID0gK3ZhbHVlc1swXS50cmltKCkgKiBNYXRoLlBJIC8gMTgwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkucm90YXRlKGFuZ2xlLCBjZW50ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2VvbWV0cnlUcmFuc2Zvcm0uaW5kZXhPZihcInNrZXdcIikgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2tld0dlb21ldHJ5KGdlb21ldHJ5LCArdmFsdWVzWzBdLnRyaW0oKSwgK3ZhbHVlc1sxXS50cmltKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmZWF0dXJlLmdldEdlb21ldHJ5KCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saW5lSW5uZXJTdHlsZS5zZXRHZW9tZXRyeShnZW9tZXRyeUZ1bmN0aW9uKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGVzW2xlbmd0aCsrXSA9IHRoaXMubGluZUlubmVyU3R5bGU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2VvbWV0cnlMaW5lQ2Fwcy5pbmNsdWRlcyh0aGlzLmxpbmVDYXBJbm5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZ2VvbWV0cnlGdW5jdGlvbiA9IChmZWF0dXJlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBnZW9tZXRyeSA9IHRoaXMuZ2V0R2VvbWV0cnkoZmVhdHVyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBHZW9MaW5lU3R5bGUuY3JlYXRlQW5jaG9yZWRHZW9tZXRyeShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saW5lQ2FwSW5uZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndpZHRoSW5uZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHV0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmVDYXBJbm5lclN0eWxlLnNldEdlb21ldHJ5KGdlb21ldHJ5RnVuY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3R5bGVzW2xlbmd0aCsrXSA9IHRoaXMubGluZUNhcElubmVyU3R5bGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIERyYXdpbmcgY2VudGVyXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbG9yQ2VudGVyICYmIHRoaXMud2lkdGhDZW50ZXIpIHtcclxuICAgICAgICAgICAgICAgIGxldCBnZW9tZXRyeUZ1bmN0aW9uID0gKGZlYXR1cmUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZ2VvbWV0cnkgPSB0aGlzLmdldEdlb21ldHJ5KGZlYXR1cmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmdlb21ldHJ5VHJhbnNmb3JtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZXMgPSB0aGlzLmdldFRyYW5zZm9ybVZhbHVlcyh0aGlzLmdlb21ldHJ5VHJhbnNmb3JtKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmdlb21ldHJ5VHJhbnNmb3JtLmluZGV4T2YoXCJ0cmFuc2xhdGVcIikgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5LnRyYW5zbGF0ZSgrdmFsdWVzWzBdLnRyaW0oKSwgK3ZhbHVlc1sxXS50cmltKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2VvbWV0cnlUcmFuc2Zvcm0uaW5kZXhPZihcInNjYWxlXCIpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeS5zY2FsZSgrdmFsdWVzWzBdLnRyaW0oKSwgK3ZhbHVlc1sxXS50cmltKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2VvbWV0cnlUcmFuc2Zvcm0uaW5kZXhPZihcInJvdGF0ZVwiKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNlbnRlciA9IG9sLmV4dGVudC5nZXRDZW50ZXIoZ2VvbWV0cnkuZ2V0RXh0ZW50KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFuZ2xlID0gK3ZhbHVlc1swXS50cmltKCkgKiBNYXRoLlBJIC8gMTgwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkucm90YXRlKGFuZ2xlLCBjZW50ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2VvbWV0cnlUcmFuc2Zvcm0uaW5kZXhPZihcInNrZXdcIikgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2tld0dlb21ldHJ5KGdlb21ldHJ5LCArdmFsdWVzWzBdLnRyaW0oKSwgK3ZhbHVlc1sxXS50cmltKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmZWF0dXJlLmdldEdlb21ldHJ5KCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMubGluZUNlbnRlclN0eWxlLnNldEdlb21ldHJ5KGdlb21ldHJ5RnVuY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHlsZXNbbGVuZ3RoKytdID0gdGhpcy5saW5lQ2VudGVyU3R5bGU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2VvbWV0cnlMaW5lQ2Fwcy5pbmNsdWRlcyh0aGlzLmxpbmVDYXBDZW50ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGdlb21ldHJ5RnVuY3Rpb24gPSAoZmVhdHVyZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZ2VvbWV0cnkgPSB0aGlzLmdldEdlb21ldHJ5KGZlYXR1cmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gR2VvTGluZVN0eWxlLmNyZWF0ZUFuY2hvcmVkR2VvbWV0cnkoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGluZUNhcENlbnRlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2lkdGhDZW50ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHV0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmVDYXBDZW50ZXJTdHlsZS5zZXRHZW9tZXRyeShnZW9tZXRyeUZ1bmN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0eWxlc1tsZW5ndGgrK10gPSB0aGlzLmxpbmVDYXBDZW50ZXJTdHlsZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMub25ld2F5U3ltYm9sKSB7XHJcbiAgICAgICAgICAgIGxldCBmbGF0Q29vcmRpbmF0ZXMgPSBmZWF0dXJlLmdldEZsYXRDb29yZGluYXRlcygpO1xyXG4gICAgICAgICAgICBsZXQgbG9uZ2VzdCA9IDA7XHJcbiAgICAgICAgICAgIGxldCBsb25nZXN0SW5kZXg7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IGZsYXRDb29yZGluYXRlcy5sZW5ndGggLSA0OyBpICs9IDIpIHtcclxuICAgICAgICAgICAgICAgIGxldCBkWCA9IE1hdGguYWJzKGZsYXRDb29yZGluYXRlc1tpXSAtIGZsYXRDb29yZGluYXRlc1tpICsgMl0pO1xyXG4gICAgICAgICAgICAgICAgbGV0IGRZID0gTWF0aC5hYnMoZmxhdENvb3JkaW5hdGVzW2kgKyAxXSAtIGZsYXRDb29yZGluYXRlc1tpICsgM10pO1xyXG4gICAgICAgICAgICAgICAgbGV0IGRpc3RhbmNlID0gZFggKyBkWTtcclxuICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA+IGxvbmdlc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb25nZXN0ID0gZGlzdGFuY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9uZ2VzdEluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gW2ZsYXRDb29yZGluYXRlc1tsb25nZXN0SW5kZXhdLCBmbGF0Q29vcmRpbmF0ZXNbbG9uZ2VzdEluZGV4ICsgMV1dO1xyXG4gICAgICAgICAgICBsZXQgZW5kID0gW2ZsYXRDb29yZGluYXRlc1tsb25nZXN0SW5kZXggKyAyXSwgZmxhdENvb3JkaW5hdGVzW2xvbmdlc3RJbmRleCArIDNdXTtcclxuICAgICAgICAgICAgbGV0IGR4ID0gZW5kWzBdIC0gc3RhcnRbMF07XHJcbiAgICAgICAgICAgIGxldCBkeSA9IGVuZFsxXSAtIHN0YXJ0WzFdO1xyXG4gICAgICAgICAgICBsZXQgcm90YXRpb24gPSBNYXRoLmF0YW4yKGR5LCBkeCk7XHJcbiAgICAgICAgICAgIGxldCBjZW50ZXJQb2ludDogW251bWJlciwgbnVtYmVyXSA9IFsoc3RhcnRbMF0gKyBlbmRbMF0pICogMC41LCAoc3RhcnRbMV0gKyBlbmRbMV0pICogMC41XTtcclxuICAgICAgICAgICAgbGV0IGdlb21ldHJ5ID0gbmV3IG9sLmdlb20uUG9pbnQoY2VudGVyUG9pbnQsIFwiWFlcIik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uZXdheUljb24ucm90YXRpb25fID0gLXJvdGF0aW9uO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vbmV3YXlTdHlsZS5zZXRHZW9tZXRyeShnZW9tZXRyeSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3R5bGVzW2xlbmd0aCsrXSA9IHRoaXMub25ld2F5U3R5bGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5zdHlsZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0R2VvbWV0cnkoZmVhdHVyZTogYW55KSB7XHJcbiAgICAgICAgbGV0IHRtcEZsYXRDb29yZGluYXRlcyA9IGZlYXR1cmUuZ2V0RmxhdENvb3JkaW5hdGVzKCk7XHJcbiAgICAgICAgbGV0IHRtcENvb3JkaW5hdGVzOiBvbC5Db29yZGluYXRlW10gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRtcEZsYXRDb29yZGluYXRlcy5sZW5ndGg7IGkgKz0gMikge1xyXG4gICAgICAgICAgICB0bXBDb29yZGluYXRlcy5wdXNoKFt0bXBGbGF0Q29vcmRpbmF0ZXNbaV0sIHRtcEZsYXRDb29yZGluYXRlc1tpICsgMV1dKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBvbC5nZW9tLkxpbmVTdHJpbmcodG1wQ29vcmRpbmF0ZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjcmVhdGVBbmNob3JlZEdlb21ldHJ5KGdlb21ldHJ5OiBvbC5nZW9tLkdlb21ldHJ5LCBsaW5lQ2FwOiBzdHJpbmcsIGxpbmVXaWR0aDogbnVtYmVyLCByZXNvbHV0aW9uOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgc2VnbWVudHMgPSBHZW9MaW5lU3R5bGUuZ2V0VGVybWluYWxTZWdtZW50cyhnZW9tZXRyeSk7XHJcbiAgICAgICAgbGV0IGxpbmVhclJpbmc6IG9sLmdlb20uTGluZWFyUmluZyA9IHVuZGVmaW5lZDtcclxuICAgICAgICBsZXQgbXVsdGlQb2x5Z29uID0gbmV3IG9sLmdlb20uTXVsdGlQb2x5Z29uKFtdKTtcclxuICAgICAgICBmb3IgKGxldCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7XHJcbiAgICAgICAgICAgIGxldCBmaXJzdCA9IHNlZ21lbnRbMF07XHJcbiAgICAgICAgICAgIGxldCBsYXN0ID0gc2VnbWVudFsxXTtcclxuICAgICAgICAgICAgbGV0IGRlbHRhID0gbGluZVdpZHRoICogcmVzb2x1dGlvbiAvIDI7XHJcbiAgICAgICAgICAgIGxldCB0cmFuc2xhdGVEZWx0YSA9IChsaW5lV2lkdGggLSAxKSAqIHJlc29sdXRpb24gLyAyO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGxpbmVDYXApIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJ0cmlhbmdsZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVhclJpbmcgPSBuZXcgb2wuZ2VvbS5MaW5lYXJSaW5nKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgW2xhc3RbMF0sIGxhc3RbMV0gKyBkZWx0YV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFtsYXN0WzBdICsgZGVsdGEsIGxhc3RbMV1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbbGFzdFswXSwgbGFzdFsxXSAtIGRlbHRhXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgW2xhc3RbMF0sIGxhc3RbMV0gKyBkZWx0YV1cclxuICAgICAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJzcXVhcmVhbmNob3JcIjpcclxuICAgICAgICAgICAgICAgICAgICBkZWx0YSAqPSAxLjU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZWFyUmluZyA9IG5ldyBvbC5nZW9tLkxpbmVhclJpbmcoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBbbGFzdFswXSAtIGRlbHRhLCBsYXN0WzFdICsgZGVsdGFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbbGFzdFswXSArIGRlbHRhLCBsYXN0WzFdICsgZGVsdGFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbbGFzdFswXSArIGRlbHRhLCBsYXN0WzFdIC0gZGVsdGFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbbGFzdFswXSAtIGRlbHRhLCBsYXN0WzFdIC0gZGVsdGFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbbGFzdFswXSAtIGRlbHRhLCBsYXN0WzFdICsgZGVsdGFdXHJcbiAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwicm91bmRhbmNob3JcIjpcclxuICAgICAgICAgICAgICAgICAgICBkZWx0YSAqPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByYWRpdXNEZWx0YSA9IE1hdGguUEkgLyAxODtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY29vcmRpbmF0ZXM6IG9sLkNvb3JkaW5hdGVbXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByYWRpdXMgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzY7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZGluYXRlcy5wdXNoKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguY29zKHJhZGl1cykgKiBkZWx0YSArIGxhc3RbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnNpbihyYWRpdXMpICogZGVsdGEgKyBsYXN0WzFdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByYWRpdXMgKz0gcmFkaXVzRGVsdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLnB1c2goY29vcmRpbmF0ZXNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVhclJpbmcgPSBuZXcgb2wuZ2VvbS5MaW5lYXJSaW5nKGNvb3JkaW5hdGVzKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJkaWFtb25kYW5jaG9yXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsdGEgKj0gMS41O1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVhclJpbmcgPSBuZXcgb2wuZ2VvbS5MaW5lYXJSaW5nKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgW2xhc3RbMF0gLSBkZWx0YSwgbGFzdFsxXSArIGRlbHRhXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgW2xhc3RbMF0gKyBkZWx0YSwgbGFzdFsxXSArIGRlbHRhXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgW2xhc3RbMF0gKyBkZWx0YSwgbGFzdFsxXSAtIGRlbHRhXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgW2xhc3RbMF0gLSBkZWx0YSwgbGFzdFsxXSAtIGRlbHRhXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgW2xhc3RbMF0gLSBkZWx0YSwgbGFzdFsxXSArIGRlbHRhXVxyXG4gICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVhclJpbmcucm90YXRlKE1hdGguUEkgLyA0LCBsYXN0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJhcnJvd2FuY2hvclwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhICo9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZWFyUmluZyA9IG5ldyBvbC5nZW9tLkxpbmVhclJpbmcoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBbbGFzdFswXSwgbGFzdFsxXSArIGRlbHRhXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgW2xhc3RbMF0gKyBkZWx0YSAqIE1hdGguY29zKE1hdGguUEkgLyA2KSAqIDIsIGxhc3RbMV1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbbGFzdFswXSwgbGFzdFsxXSAtIGRlbHRhXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgW2xhc3RbMF0sIGxhc3RbMV0gKyBkZWx0YV1cclxuICAgICAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZmlyc3RbMF0gPT09IGxhc3RbMF0pIHtcclxuICAgICAgICAgICAgICAgIGlmIChmaXJzdFsxXSA+IGxhc3RbMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lYXJSaW5nLnJvdGF0ZSgtTWF0aC5QSSAvIDIsIGxhc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVhclJpbmcudHJhbnNsYXRlKDAsIC10cmFuc2xhdGVEZWx0YSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVhclJpbmcucm90YXRlKE1hdGguUEkgLyAyLCBsYXN0KTtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lYXJSaW5nLnRyYW5zbGF0ZSgwLCB0cmFuc2xhdGVEZWx0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlyc3RbMV0gPT09IGxhc3RbMV0pIHtcclxuICAgICAgICAgICAgICAgIGlmIChsYXN0WzBdIDwgZmlyc3RbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lYXJSaW5nLnJvdGF0ZShNYXRoLlBJLCBsYXN0KTtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lYXJSaW5nLnRyYW5zbGF0ZSgtdHJhbnNsYXRlRGVsdGEsIDApO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lYXJSaW5nLnRyYW5zbGF0ZSh0cmFuc2xhdGVEZWx0YSwgMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZHggPSBsYXN0WzBdIC0gZmlyc3RbMF07XHJcbiAgICAgICAgICAgICAgICBsZXQgZHkgPSBsYXN0WzFdIC0gZmlyc3RbMV07XHJcbiAgICAgICAgICAgICAgICBsZXQgcmFkaWFucyA9IE1hdGguYXRhbihkeSAvIGR4KTtcclxuICAgICAgICAgICAgICAgIGlmIChsYXN0WzBdID4gZmlyc3RbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lYXJSaW5nLnJvdGF0ZShyYWRpYW5zLCBsYXN0KTtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lYXJSaW5nLnRyYW5zbGF0ZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5jb3MocmFkaWFucykgKiB0cmFuc2xhdGVEZWx0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5zaW4ocmFkaWFucykgKiB0cmFuc2xhdGVEZWx0YVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVhclJpbmcucm90YXRlKHJhZGlhbnMgKyBNYXRoLlBJLCBsYXN0KTtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lYXJSaW5nLnRyYW5zbGF0ZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgLU1hdGguY29zKHJhZGlhbnMpICogdHJhbnNsYXRlRGVsdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC1NYXRoLnNpbihyYWRpYW5zKSAqIHRyYW5zbGF0ZURlbHRhXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IHBvbHlnb24gPSBuZXcgb2wuZ2VvbS5Qb2x5Z29uKFtdKTtcclxuICAgICAgICAgICAgcG9seWdvbi5hcHBlbmRMaW5lYXJSaW5nKGxpbmVhclJpbmcpO1xyXG4gICAgICAgICAgICBtdWx0aVBvbHlnb24uYXBwZW5kUG9seWdvbihwb2x5Z29uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG11bHRpUG9seWdvbjtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0VGVybWluYWxTZWdtZW50cyhnZW9tZXRyeTogb2wuZ2VvbS5HZW9tZXRyeSkge1xyXG4gICAgICAgIGxldCB0eXBlID0gZ2VvbWV0cnkuZ2V0VHlwZSgpO1xyXG4gICAgICAgIGxldCByZXN1bHRzID0gW107XHJcbiAgICAgICAgbGV0IGdlb21ldHJ5VHlwZSA9ICg8YW55Pm9sLmdlb20pLkdlb21ldHJ5VHlwZTtcclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBnZW9tZXRyeVR5cGUuTElORV9TVFJJTkc6XHJcbiAgICAgICAgICAgICAgICBsZXQgY29vcmRzID0gKDxhbnk+Z2VvbWV0cnkpLmdldENvb3JkaW5hdGVzKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3RhcnQgPSBbY29vcmRzWzFdLCBjb29yZHNbMF1dO1xyXG4gICAgICAgICAgICAgICAgbGV0IGVuZCA9IFtjb29yZHNbY29vcmRzLmxlbmd0aCAtIDJdLCBjb29yZHNbY29vcmRzLmxlbmd0aCAtIDFdXTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChzdGFydCk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goZW5kKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGdlb21ldHJ5VHlwZS5NVUxUSV9MSU5FX1NUUklORzpcclxuICAgICAgICAgICAgICAgIGxldCBsaW5lcyA9ICg8YW55Pmdlb21ldHJ5KS5nZXRMaW5lU3RyaW5ncygpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgbGluZSBvZiBsaW5lcykge1xyXG4gICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHJlc3VsdHMsIEdlb0xpbmVTdHlsZS5nZXRUZXJtaW5hbFNlZ21lbnRzKGxpbmUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGdlb21ldHJ5VHlwZS5HRU9NRVRSWV9DT0xMRUNUSU9OOlxyXG4gICAgICAgICAgICAgICAgbGV0IGdlb21ldHJpZXMgPSAoPGFueT5nZW9tZXRyeSkuZ2V0R2VvbWV0cmllcygpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZ2VvbSBvZiBnZW9tZXRyaWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkocmVzdWx0cywgR2VvTGluZVN0eWxlLmdldFRlcm1pbmFsU2VnbWVudHMoZ2VvbSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHRzO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgR2VvU3R5bGUgfSBmcm9tIFwiLi9nZW9TdHlsZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdlb1BvaW50U3R5bGUgZXh0ZW5kcyBHZW9TdHlsZSB7XHJcbiAgICBzdGF0aWMgbGluZWFyR3JhZGllbnREaWN0aW9uYXJ5OiB7IFtpbmRleDogc3RyaW5nXTogYW55IH0gPSB7fTtcclxuICAgIHN0YXRpYyByYWRpYWxHcmFkaWVudERpY3Rpb25hcnk6IHsgW2luZGV4OiBzdHJpbmddOiBhbnkgfSA9IHt9O1xyXG5cclxuICAgIGJydXNoT3B0aW9uczogYW55O1xyXG5cclxuICAgIGJydXNoVHlwZTogc3RyaW5nO1xyXG4gICAgZ2x5cGg6IHN0cmluZztcclxuICAgIGZpbGw6IHN0cmluZztcclxuICAgIGxpbmVhckdyYWRpZW50OiBzdHJpbmc7XHJcbiAgICByYWRpYWxHcmFkaWVudDogc3RyaW5nO1xyXG4gICAgZ2x5cGhOYW1lOiBzdHJpbmc7XHJcbiAgICBnbHlwaE1hc2tDb2xvcjogc3RyaW5nO1xyXG4gICAgZ2x5cGhNYXNrTWFyZ2luOiBzdHJpbmc7XHJcbiAgICBnbHlwaE1hc2tPdXRsaW5lQ29sb3I6IHN0cmluZ1xyXG4gICAgZ2x5cGhNYXNrT3V0bGluZVdpZHRoOiBudW1iZXI7XHJcbiAgICBnbHlwaE1hc2tUeXBlOiBzdHJpbmdcclxuICAgIG91dGxpbmVDb2xvcjogc3RyaW5nO1xyXG4gICAgb3V0bGluZVdpZHRoOiBudW1iZXI7XHJcbiAgICBzaXplOiBudW1iZXI7XHJcbiAgICBhbmdsZTogbnVtYmVyO1xyXG4gICAgZHg6IG51bWJlcjtcclxuICAgIGR5OiBudW1iZXI7XHJcbiAgICBwb2ludEZpbGU6IHN0cmluZztcclxuICAgIG9wYWNpdHk6IG51bWJlcjtcclxuICAgIHN5bWJvbFR5cGU6IHN0cmluZztcclxuICAgIHRyYW5zZm9ybTogc3RyaW5nO1xyXG4gICAgcG9pbnRUeXBlOiBzdHJpbmc7XHJcbiAgICBpbWFnZVN0eWxlOiBvbC5zdHlsZS5JbWFnZTtcclxuXHJcbiAgICAvLyBzdGF0aWMgZ2x5cGhDYWNoZTogYW55ID0ge307XHJcblxyXG4gICAgY29udmVydGVkR2x5cGhPdXRMaW5lQ29sb3I6IHN0cmluZztcclxuICAgIGNvbnZlcnRlZEdseXBoRmlsbDogYW55O1xyXG5cclxuICAgIHN0eWxlOiBvbC5zdHlsZS5TdHlsZTtcclxuICAgIHRleHRTdHlsZTogb2wuc3R5bGUuVGV4dDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzdHlsZUpzb24/OiBhbnkpIHtcclxuICAgICAgICBzdXBlcihzdHlsZUpzb24pO1xyXG4gICAgICAgIGlmIChzdHlsZUpzb24pIHtcclxuICAgICAgICAgICAgdGhpcy5nbHlwaCA9IHN0eWxlSnNvbltcInBvaW50LWdseXBoXCJdO1xyXG4gICAgICAgICAgICB0aGlzLmxpbmVhckdyYWRpZW50ID0gc3R5bGVKc29uW1wicG9pbnQtbGluZWFyLWdyYWRpZW50XCJdO1xyXG4gICAgICAgICAgICB0aGlzLnJhZGlhbEdyYWRpZW50ID0gc3R5bGVKc29uW1wicG9pbnQtcmFkaWFsLWdyYWRpZW50XCJdO1xyXG4gICAgICAgICAgICB0aGlzLmZpbGwgPSBzdHlsZUpzb25bXCJwb2ludC1maWxsXCJdO1xyXG4gICAgICAgICAgICB0aGlzLmdseXBoTmFtZSA9IHN0eWxlSnNvbltcInBvaW50LWdseXBoLW5hbWVcIl07XHJcbiAgICAgICAgICAgIHRoaXMuZ2x5cGhNYXNrQ29sb3IgPSBzdHlsZUpzb25bXCJwb2ludC1nbHlwaC1tYXNrLWNvbG9yXCJdO1xyXG4gICAgICAgICAgICB0aGlzLmdseXBoTWFza01hcmdpbiA9IHN0eWxlSnNvbltcInBvaW50LWdseXBoLW1hc2stbWFyZ2luXCJdO1xyXG4gICAgICAgICAgICB0aGlzLmdseXBoTWFza091dGxpbmVDb2xvciA9IHN0eWxlSnNvbltcInBvaW50LWdseXBoLW1hc2stb3V0bGluZS1jb2xvclwiXTtcclxuICAgICAgICAgICAgdGhpcy5nbHlwaE1hc2tPdXRsaW5lV2lkdGggPSBzdHlsZUpzb25bXCJwb2ludC1nbHlwaC1tYXNrLW91dGxpbmUtd2lkdGhcIl07XHJcbiAgICAgICAgICAgIHRoaXMuZ2x5cGhNYXNrVHlwZSA9IHN0eWxlSnNvbltcInBvaW50LWdseXBoLW1hc2stdHlwZVwiXTtcclxuICAgICAgICAgICAgdGhpcy5vdXRsaW5lQ29sb3IgPSBzdHlsZUpzb25bXCJwb2ludC1vdXRsaW5lLWNvbG9yXCJdO1xyXG4gICAgICAgICAgICB0aGlzLm91dGxpbmVXaWR0aCA9IHN0eWxlSnNvbltcInBvaW50LW91dGxpbmUtd2lkdGhcIl07XHJcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IHN0eWxlSnNvbltcInBvaW50LXNpemVcIl07XHJcbiAgICAgICAgICAgIHRoaXMuYW5nbGUgPSBzdHlsZUpzb25bXCJwb2ludC1yb3RhdGUtYW5nbGVcIl0gPyBzdHlsZUpzb25bXCJwb2ludC1yb3RhdGUtYW5nbGVcIl0gOiAwO1xyXG4gICAgICAgICAgICB0aGlzLmR4ID0gc3R5bGVKc29uW1wicG9pbnQtZHhcIl07XHJcbiAgICAgICAgICAgIHRoaXMuZHkgPSBzdHlsZUpzb25bXCJwb2ludC1keVwiXTtcclxuICAgICAgICAgICAgdGhpcy5wb2ludEZpbGUgPSBzdHlsZUpzb25bXCJwb2ludC1maWxlXCJdO1xyXG4gICAgICAgICAgICB0aGlzLm9wYWNpdHkgPSBzdHlsZUpzb25bXCJwb2ludC1vcGFjaXR5XCJdO1xyXG4gICAgICAgICAgICB0aGlzLnN5bWJvbFR5cGUgPSBzdHlsZUpzb25bXCJwb2ludC1zeW1ib2wtdHlwZVwiXTtcclxuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0gPSBzdHlsZUpzb25bXCJwb2ludC10cmFuc2Zvcm1cIl07XHJcbiAgICAgICAgICAgIHRoaXMucG9pbnRUeXBlID0gc3R5bGVKc29uW1wicG9pbnQtdHlwZVwiXTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm91dGxpbmVDb2xvcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb252ZXJ0ZWRHbHlwaE91dExpbmVDb2xvciA9IEdlb1N0eWxlLnRvUkdCQUNvbG9yKHRoaXMub3V0bGluZUNvbG9yLCB0aGlzLm9wYWNpdHkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5maWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnRlZEdseXBoRmlsbCA9IEdlb1N0eWxlLnRvUkdCQUNvbG9yKHRoaXMuZmlsbCwgdGhpcy5vcGFjaXR5KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubGluZWFyR3JhZGllbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChHZW9Qb2ludFN0eWxlLmxpbmVhckdyYWRpZW50RGljdGlvbmFyeS5oYXNPd25Qcm9wZXJ0eSh0aGlzLmxpbmVhckdyYWRpZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udmVydGVkR2x5cGhGaWxsID0gR2VvUG9pbnRTdHlsZS5saW5lYXJHcmFkaWVudERpY3Rpb25hcnlbdGhpcy5saW5lYXJHcmFkaWVudF07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udmVydGVkR2x5cGhGaWxsID0gR2VvU3R5bGUudG9PTExpbmVhckdyYWRpZW50KHRoaXMubGluZWFyR3JhZGllbnQsIHRoaXMub3BhY2l0eSwgdGhpcy5zaXplKTtcclxuICAgICAgICAgICAgICAgICAgICBHZW9Qb2ludFN0eWxlLmxpbmVhckdyYWRpZW50RGljdGlvbmFyeVt0aGlzLmxpbmVhckdyYWRpZW50XSA9IHRoaXMuY29udmVydGVkR2x5cGhGaWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5yYWRpYWxHcmFkaWVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKEdlb1BvaW50U3R5bGUucmFkaWFsR3JhZGllbnREaWN0aW9uYXJ5Lmhhc093blByb3BlcnR5KHRoaXMucmFkaWFsR3JhZGllbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb252ZXJ0ZWRHbHlwaEZpbGwgPSBHZW9Qb2ludFN0eWxlLnJhZGlhbEdyYWRpZW50RGljdGlvbmFyeVt0aGlzLnJhZGlhbEdyYWRpZW50XTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb252ZXJ0ZWRHbHlwaEZpbGwgPSBHZW9TdHlsZS50b09MUmFkaWFsR3JhZGllbnQodGhpcy5yYWRpYWxHcmFkaWVudCwgdGhpcy5vcGFjaXR5LCB0aGlzLnNpemUpO1xyXG4gICAgICAgICAgICAgICAgICAgIEdlb1BvaW50U3R5bGUucmFkaWFsR3JhZGllbnREaWN0aW9uYXJ5W3RoaXMucmFkaWFsR3JhZGllbnRdID0gdGhpcy5jb252ZXJ0ZWRHbHlwaEZpbGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbml0aWFsaXplQ29yZSgpIHtcclxuICAgICAgICB0aGlzLnN0eWxlID0gbmV3IG9sLnN0eWxlLlN0eWxlKCk7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnBvaW50VHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwic3ltYm9sXCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRTeW1ib2xTdHlsZSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJpbWFnZVwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbml0Qml0bWFwU3R5bGUoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZ2x5cGhcIjpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdEdseXBoU3R5bGUoKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMucG9pbnRUeXBlID09PSBcImdseXBoXCIpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZ2x5cGggJiYgdGhpcy5nbHlwaE5hbWUpIHtcclxuICAgICAgICAgICAgICAgICg8YW55PnRoaXMudGV4dFN0eWxlKS5sYWJlbCA9IHRoaXMuZ2V0R2x5cGhJbWFnZSh0aGlzLnRleHRTdHlsZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0eWxlLnNldEltYWdlKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHlsZS5zZXRUZXh0KHRoaXMudGV4dFN0eWxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zdHlsZS5zZXRJbWFnZSh0aGlzLmltYWdlU3R5bGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXRDb252ZXJ0ZWRTdHlsZUNvcmUoZmVhdHVyZTogYW55LCByZXNvbHV0aW9uOiBudW1iZXIsIG9wdGlvbnM6IGFueSk6IG9sLnN0eWxlLlN0eWxlW10ge1xyXG4gICAgICAgIGlmICh0aGlzLnBvaW50VHlwZSA9PT0gXCJnbHlwaFwiKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdseXBoICYmIHRoaXMuZ2x5cGhOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAoPGFueT50aGlzLnRleHRTdHlsZSkubGFiZWxQb3NpdGlvbiA9IGZlYXR1cmUuZ2V0RmxhdENvb3JkaW5hdGVzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBmZWF0dXJlWmluZGV4ID0gZmVhdHVyZVtcInRlbXBUcmVlWmluZGV4XCJdO1xyXG4gICAgICAgIGlmIChmZWF0dXJlWmluZGV4ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZmVhdHVyZVppbmRleCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc3R5bGUuc2V0WkluZGV4KGZlYXR1cmVaaW5kZXgpO1xyXG5cclxuICAgICAgICB0aGlzLnN0eWxlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc3R5bGVzWzBdID0gdGhpcy5zdHlsZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3R5bGVzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEdseXBoSW1hZ2UodGV4dFN0YXRlOiBhbnkpIHtcclxuICAgICAgICBsZXQgZm9udCA9IHRleHRTdGF0ZS5mb250XztcclxuICAgICAgICBsZXQgc3Ryb2tlQ29sb3I7XHJcbiAgICAgICAgbGV0IG91dGxpbmVXaWR0aCA9IDA7XHJcbiAgICAgICAgbGV0IHRleHRTdHJvayA9IHRleHRTdGF0ZS5nZXRTdHJva2UoKTtcclxuICAgICAgICBpZiAodGV4dFN0cm9rKSB7XHJcbiAgICAgICAgICAgIHN0cm9rZUNvbG9yID0gdGV4dFN0cm9rLmdldENvbG9yKCk7XHJcbiAgICAgICAgICAgIG91dGxpbmVXaWR0aCA9IHRleHRTdHJvay5nZXRXaWR0aCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHNjYWxlID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XHJcblxyXG4gICAgICAgIC8vIGhlcmVcclxuICAgICAgICBsZXQgd2lkdGggPSAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5UZXh0UmVwbGF5Lm1lYXN1cmVUZXh0V2lkdGhzKGZvbnQsIFt0ZXh0U3RhdGUudGV4dF9dLCBbXSkgKyBvdXRsaW5lV2lkdGggKiAyO1xyXG4gICAgICAgIGxldCBoZWlnaHQgPSAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5tZWFzdXJlVGV4dEhlaWdodChmb250KSArIG91dGxpbmVXaWR0aCAqIDI7XHJcblxyXG4gICAgICAgIGxldCB0bXBNYXNrTWFyZ2luID0gKHRoaXMuZ2x5cGhNYXNrTWFyZ2luID8gdGhpcy5nbHlwaE1hc2tNYXJnaW4gOiBcIjBcIikuc3BsaXQoJywnKTtcclxuICAgICAgICBsZXQgdG1wTWFza0hlaWdodE1hcmdpbiA9IDA7XHJcbiAgICAgICAgbGV0IHRtcE1hc2tXaWR0aE1hcmdpbiA9IDA7XHJcbiAgICAgICAgc3dpdGNoICh0bXBNYXNrTWFyZ2luLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICB0bXBNYXNrSGVpZ2h0TWFyZ2luID0gcGFyc2VJbnQodG1wTWFza01hcmdpblswXSkgKiAyO1xyXG4gICAgICAgICAgICAgICAgdG1wTWFza1dpZHRoTWFyZ2luID0gcGFyc2VJbnQodG1wTWFza01hcmdpblswXSkgKiAyO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIHRtcE1hc2tIZWlnaHRNYXJnaW4gPSBwYXJzZUludCh0bXBNYXNrTWFyZ2luWzBdKSAqIDI7XHJcbiAgICAgICAgICAgICAgICB0bXBNYXNrV2lkdGhNYXJnaW4gPSBwYXJzZUludCh0bXBNYXNrTWFyZ2luWzFdKSAqIDI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgdG1wTWFza0hlaWdodE1hcmdpbiA9IHBhcnNlSW50KHRtcE1hc2tNYXJnaW5bMF0pICsgcGFyc2VJbnQodG1wTWFza01hcmdpblsyXSk7XHJcbiAgICAgICAgICAgICAgICB0bXBNYXNrV2lkdGhNYXJnaW4gPSBwYXJzZUludCh0bXBNYXNrTWFyZ2luWzFdKSAqIDI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgdG1wTWFza0hlaWdodE1hcmdpbiA9IHBhcnNlSW50KHRtcE1hc2tNYXJnaW5bMF0pICsgcGFyc2VJbnQodG1wTWFza01hcmdpblsyXSk7XHJcbiAgICAgICAgICAgICAgICB0bXBNYXNrV2lkdGhNYXJnaW4gPSBwYXJzZUludCh0bXBNYXNrTWFyZ2luWzFdKSArIHBhcnNlSW50KHRtcE1hc2tNYXJnaW5bM10pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHRtcE1hc2tPdXRsaW5lV2lkdGggPSAodGhpcy5nbHlwaE1hc2tPdXRsaW5lV2lkdGggPyB0aGlzLmdseXBoTWFza091dGxpbmVXaWR0aCA6IDApICogMjtcclxuXHJcbiAgICAgICAgbGV0IHJlbmRlcldpZHRoID0gd2lkdGggKyB0bXBNYXNrV2lkdGhNYXJnaW47XHJcbiAgICAgICAgbGV0IHJlbmRlckhlaWdodCA9IGhlaWdodCArIHRtcE1hc2tXaWR0aE1hcmdpbjtcclxuXHJcbiAgICAgICAgbGV0IGNhbnZhc1dpZHRoID0gd2lkdGggKyB0bXBNYXNrV2lkdGhNYXJnaW4gKyB0bXBNYXNrT3V0bGluZVdpZHRoO1xyXG4gICAgICAgIGxldCBjYW52YXNIZWlnaHQgPSBoZWlnaHQgKyB0bXBNYXNrSGVpZ2h0TWFyZ2luICsgdG1wTWFza091dGxpbmVXaWR0aDtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRleHQgPSAoPGFueT5vbCkuZG9tLmNyZWF0ZUNhbnZhc0NvbnRleHQyRChjYW52YXNXaWR0aCAqIHNjYWxlLCBjYW52YXNIZWlnaHQgKiBzY2FsZSk7XHJcblxyXG4gICAgICAgIGlmIChzY2FsZSAhPT0gMSkgeyBjb250ZXh0LnNjYWxlKHNjYWxlLCBzY2FsZSk7IH1cclxuXHJcbiAgICAgICAgdGhpcy5kcmF3TWFzayhjb250ZXh0LCAwLCAwLCByZW5kZXJXaWR0aCwgcmVuZGVySGVpZ2h0KTtcclxuXHJcbiAgICAgICAgY29udGV4dC5mb250ID0gZm9udDtcclxuICAgICAgICBjb250ZXh0LnRleHRCYXNlbGluZSA9IFwibWlkZGxlXCI7XHJcbiAgICAgICAgY29udGV4dC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgICAgIGlmICh0ZXh0U3Ryb2spIHtcclxuICAgICAgICAgICAgaWYgKHN0cm9rZUNvbG9yICYmIG91dGxpbmVXaWR0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBzdHJva2VDb2xvcjtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gb3V0bGluZVdpZHRoICogKCg8YW55Pm9sLmhhcykuU0FGQVJJID8gc2NhbGUgOiAxKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlVGV4dCh0ZXh0U3RhdGUudGV4dF8sIGNhbnZhc1dpZHRoIC8gMiwgY2FudmFzSGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB0ZXh0RmlsbCA9IHRleHRTdGF0ZS5nZXRGaWxsKCk7XHJcbiAgICAgICAgaWYgKHRleHRGaWxsKSB7XHJcbiAgICAgICAgICAgIGxldCBjb2xvciA9IHRleHRGaWxsLmdldENvbG9yKCk7XHJcbiAgICAgICAgICAgIGlmIChjb2xvcikge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBjb2xvcjtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQodGV4dFN0YXRlLnRleHRfLCBjYW52YXNXaWR0aCAvIDIsIGNhbnZhc0hlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29udGV4dC5jYW52YXM7XHJcbiAgICB9XHJcblxyXG4gICAgZHJhd01hc2soY29udGV4dDogYW55LCB4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgZmlsbCA9IHVuZGVmaW5lZDtcclxuICAgICAgICBsZXQgc3Ryb2tlID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5nbHlwaE1hc2tDb2xvcikge1xyXG4gICAgICAgICAgICBmaWxsID0gbmV3IG9sLnN0eWxlLkZpbGwoKTtcclxuICAgICAgICAgICAgZmlsbC5zZXRDb2xvcihHZW9TdHlsZS50b1JHQkFDb2xvcih0aGlzLmdseXBoTWFza0NvbG9yLCB0aGlzLm9wYWNpdHkgPyB0aGlzLm9wYWNpdHkgOiAxKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5nbHlwaE1hc2tPdXRsaW5lQ29sb3IgJiYgdGhpcy5nbHlwaE1hc2tPdXRsaW5lV2lkdGgpIHtcclxuICAgICAgICAgICAgc3Ryb2tlID0gbmV3IG9sLnN0eWxlLlN0cm9rZSgpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5nbHlwaE1hc2tPdXRsaW5lQ29sb3IpIHtcclxuICAgICAgICAgICAgICAgIHN0cm9rZS5zZXRDb2xvcihHZW9TdHlsZS50b1JHQkFDb2xvcih0aGlzLmdseXBoTWFza091dGxpbmVDb2xvciwgdGhpcy5vcGFjaXR5ID8gdGhpcy5vcGFjaXR5IDogMSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdseXBoTWFza091dGxpbmVXaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgc3Ryb2tlLnNldFdpZHRoKHRoaXMuZ2x5cGhNYXNrT3V0bGluZVdpZHRoID8gdGhpcy5nbHlwaE1hc2tPdXRsaW5lV2lkdGggOiAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHN3aXRjaCAodGhpcy5nbHlwaE1hc2tUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0XCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJEZWZhdWx0XCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJyZWN0YW5nbGVcIjpcclxuICAgICAgICAgICAgY2FzZSBcIlJlY3RhbmdsZVwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3UmVjdGFuZ2xlKGNvbnRleHQsIHgsIHksIHdpZHRoLCBoZWlnaHQsIGZpbGwsIHN0cm9rZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInJvdW5kZWRDb3JuZXJzXCI6XHJcbiAgICAgICAgICAgIGNhc2UgXCJSb3VuZGVkQ29ybmVyc1wiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3Um91bmRSZWN0YW5nbGUoY29udGV4dCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgZmlsbCwgc3Ryb2tlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwicm91bmRlZEVuZHNcIjpcclxuICAgICAgICAgICAgY2FzZSBcIlJvdW5kZWRFbmRzXCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdSb3VuZGVkRW5kcyhjb250ZXh0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBmaWxsLCBzdHJva2UpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJjaXJjbGVcIjpcclxuICAgICAgICAgICAgY2FzZSBcIkNpcmNsZVwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3Q2lyY2xlKGNvbnRleHQsIHgsIHksIHdpZHRoLCBoZWlnaHQsIGZpbGwsIHN0cm9rZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZHJhd1JlY3RhbmdsZShjb250ZXh0OiBhbnksIHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgZmlsbDogb2wuc3R5bGUuRmlsbCwgc3Ryb2tlOiBvbC5zdHlsZS5TdHJva2UpIHtcclxuICAgICAgICBpZiAoZmlsbCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGZpbGwuZ2V0Q29sb3IoKTtcclxuICAgICAgICAgICAgY29udGV4dC5maWxsUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzdHJva2UpIHtcclxuICAgICAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSBzdHJva2UuZ2V0V2lkdGgoKTtcclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHN0cm9rZS5nZXRDb2xvcigpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZVJlY3QoeCArIHN0cm9rZS5nZXRXaWR0aCgpLCB5ICsgc3Ryb2tlLmdldFdpZHRoKCksIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRyYXdSb3VuZFJlY3RhbmdsZShjb250ZXh0OiBhbnksIHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgZmlsbDogb2wuc3R5bGUuRmlsbCwgc3Ryb2tlOiBvbC5zdHlsZS5TdHJva2UpIHtcclxuICAgICAgICBsZXQgcmFkaXVzID0gKHdpZHRoIDwgaGVpZ2h0ID8gd2lkdGggOiBoZWlnaHQpICogMC4zO1xyXG4gICAgICAgIC8vIHdpZHRoICo9IDAuOTtcclxuICAgICAgICAvLyBoZWlnaHQgKj0gMC44O1xyXG4gICAgICAgIGlmIChzdHJva2UpIHtcclxuICAgICAgICAgICAgeCA9IHggKyAoc3Ryb2tlLmdldFdpZHRoKCkgPyBzdHJva2UuZ2V0V2lkdGgoKSA6IDApO1xyXG4gICAgICAgICAgICB5ID0geSArIChzdHJva2UuZ2V0V2lkdGgoKSA/IHN0cm9rZS5nZXRXaWR0aCgpIDogMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQubW92ZVRvKHggKyByYWRpdXMsIHkpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKHggKyB3aWR0aCAtIHJhZGl1cywgeSk7XHJcbiAgICAgICAgY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyB3aWR0aCwgeSwgeCArIHdpZHRoLCB5ICsgcmFkaXVzKTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQgLSByYWRpdXMpO1xyXG4gICAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQsIHggKyB3aWR0aCAtIHJhZGl1cywgeSArIGhlaWdodCk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oeCArIHJhZGl1cywgeSArIGhlaWdodCk7XHJcbiAgICAgICAgY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHkgKyBoZWlnaHQsIHgsIHkgKyBoZWlnaHQgLSByYWRpdXMpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKHgsIHkgKyByYWRpdXMpO1xyXG4gICAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbyh4LCB5LCB4ICsgcmFkaXVzLCB5KTtcclxuICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG5cclxuICAgICAgICBpZiAoZmlsbCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGZpbGwuZ2V0Q29sb3IoKTtcclxuICAgICAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc3Ryb2tlKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gc3Ryb2tlLmdldFdpZHRoKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBzdHJva2UuZ2V0Q29sb3IoKTtcclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkcmF3Um91bmRlZEVuZHMoY29udGV4dDogYW55LCB4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGZpbGw6IG9sLnN0eWxlLkZpbGwsIHN0cm9rZTogb2wuc3R5bGUuU3Ryb2tlKSB7XHJcbiAgICAgICAgbGV0IHJhZGl1cyA9ICh3aWR0aCA8IGhlaWdodCA/IHdpZHRoIDogaGVpZ2h0KSAqIDAuMjtcclxuICAgICAgICAvLyB3aWR0aCAqPSAwLjk7XHJcbiAgICAgICAgLy8gaGVpZ2h0ICo9IDAuODtcclxuICAgICAgICBpZiAoc3Ryb2tlKSB7XHJcbiAgICAgICAgICAgIHggPSB4ICsgKHN0cm9rZS5nZXRXaWR0aCgpID8gc3Ryb2tlLmdldFdpZHRoKCkgOiAwKTtcclxuICAgICAgICAgICAgeSA9IHkgKyAoc3Ryb2tlLmdldFdpZHRoKCkgPyBzdHJva2UuZ2V0V2lkdGgoKSA6IDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyh4ICsgcmFkaXVzLCB5KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyh4ICsgd2lkdGggLSByYWRpdXMsIHkpO1xyXG4gICAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQgKiAwLjUsIHggKyB3aWR0aCAtIHJhZGl1cywgeSArIGhlaWdodCk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oeCArIHJhZGl1cywgeSArIGhlaWdodCk7XHJcbiAgICAgICAgY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHkgKyBoZWlnaHQgKiAwLjUsIHggKyByYWRpdXMsIHkpO1xyXG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcblxyXG4gICAgICAgIGlmIChmaWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbC5nZXRDb2xvcigpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHN0cm9rZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IHN0cm9rZS5nZXRXaWR0aCgpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gc3Ryb2tlLmdldENvbG9yKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZHJhd0NpcmNsZShjb250ZXh0OiBhbnksIHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgZmlsbDogb2wuc3R5bGUuRmlsbCwgc3Ryb2tlOiBvbC5zdHlsZS5TdHJva2UpIHtcclxuICAgICAgICBsZXQgcmFkaXVzID0gKHdpZHRoIDwgaGVpZ2h0ID8gd2lkdGggOiBoZWlnaHQpICogMC41XHJcbiAgICAgICAgLy8gd2lkdGggKj0gMC45O1xyXG4gICAgICAgIC8vIGhlaWdodCAqPSAwLjg7XHJcbiAgICAgICAgaWYgKHN0cm9rZSkge1xyXG4gICAgICAgICAgICB4ID0geCArIChzdHJva2UuZ2V0V2lkdGgoKSA/IHN0cm9rZS5nZXRXaWR0aCgpIDogMCk7XHJcbiAgICAgICAgICAgIHkgPSB5ICsgKHN0cm9rZS5nZXRXaWR0aCgpID8gc3Ryb2tlLmdldFdpZHRoKCkgOiAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5hcmMoeCArIHdpZHRoICogMC41LCB5ICsgaGVpZ2h0ICogMC41LCByYWRpdXMsIDAsIDIgKiBNYXRoLlBJLCBmYWxzZSk7XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuXHJcbiAgICAgICAgaWYgKGZpbGwpIHtcclxuICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBmaWxsLmdldENvbG9yKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHN0cm9rZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IHN0cm9rZS5nZXRXaWR0aCgpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gc3Ryb2tlLmdldENvbG9yKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIGluaXRTeW1ib2xTdHlsZSgpIHtcclxuICAgICAgICBsZXQgcmFkaXVzID0gdGhpcy5zaXplIC8gMjtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuc3ltYm9sVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiY2lyY2xlXCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlU3R5bGUgPSBuZXcgb2wuc3R5bGUuQ2lyY2xlKHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxsOiB0aGlzLmNvbnZlcnRlZEdseXBoRmlsbCAhPT0gdW5kZWZpbmVkID8gbmV3IG9sLnN0eWxlLkZpbGwoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHRoaXMuY29udmVydGVkR2x5cGhGaWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfSkpIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZTogdGhpcy5jb252ZXJ0ZWRHbHlwaE91dExpbmVDb2xvciAhPT0gdW5kZWZpbmVkICYmIHRoaXMub3V0bGluZVdpZHRoID4gMCA/IG5ldyBvbC5zdHlsZS5TdHJva2UoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHRoaXMuY29udmVydGVkR2x5cGhPdXRMaW5lQ29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLm91dGxpbmVXaWR0aFxyXG4gICAgICAgICAgICAgICAgICAgIH0pKSA6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IHJhZGl1c1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInNxdWFyZVwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZVN0eWxlID0gbmV3IG9sLnN0eWxlLlJlZ3VsYXJTaGFwZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogdGhpcy5jb252ZXJ0ZWRHbHlwaEZpbGwgIT09IHVuZGVmaW5lZCA/IG5ldyBvbC5zdHlsZS5GaWxsKCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbnZlcnRlZEdseXBoRmlsbFxyXG4gICAgICAgICAgICAgICAgICAgIH0pKSA6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHRoaXMuY29udmVydGVkR2x5cGhPdXRMaW5lQ29sb3IgIT09IHVuZGVmaW5lZCAmJiB0aGlzLm91dGxpbmVXaWR0aCA+IDAgPyBuZXcgb2wuc3R5bGUuU3Ryb2tlKCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbnZlcnRlZEdseXBoT3V0TGluZUNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5vdXRsaW5lV2lkdGhcclxuICAgICAgICAgICAgICAgICAgICB9KSkgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiA0LFxyXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogcmFkaXVzLFxyXG4gICAgICAgICAgICAgICAgICAgIGFuZ2xlOiBNYXRoLlBJIC8gNCArIHRoaXMuYW5nbGVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ0cmlhbmdsZVwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZVN0eWxlID0gbmV3IG9sLnN0eWxlLlJlZ3VsYXJTaGFwZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogdGhpcy5jb252ZXJ0ZWRHbHlwaEZpbGwgIT09IHVuZGVmaW5lZCA/IG5ldyBvbC5zdHlsZS5GaWxsKCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbnZlcnRlZEdseXBoRmlsbFxyXG4gICAgICAgICAgICAgICAgICAgIH0pKSA6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHRoaXMuY29udmVydGVkR2x5cGhPdXRMaW5lQ29sb3IgIT09IHVuZGVmaW5lZCAmJiB0aGlzLm91dGxpbmVXaWR0aCA+IDAgPyBuZXcgb2wuc3R5bGUuU3Ryb2tlKCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbnZlcnRlZEdseXBoT3V0TGluZUNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5vdXRsaW5lV2lkdGhcclxuICAgICAgICAgICAgICAgICAgICB9KSkgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiAzLFxyXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogcmFkaXVzLFxyXG4gICAgICAgICAgICAgICAgICAgIGFuZ2xlOiB0aGlzLmFuZ2xlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiY3Jvc3NcIjpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2VTdHlsZSA9IG5ldyBvbC5zdHlsZS5SZWd1bGFyU2hhcGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IHRoaXMuY29udmVydGVkR2x5cGhGaWxsICE9PSB1bmRlZmluZWQgPyBuZXcgb2wuc3R5bGUuRmlsbCgoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogdGhpcy5jb252ZXJ0ZWRHbHlwaEZpbGxcclxuICAgICAgICAgICAgICAgICAgICB9KSkgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiB0aGlzLmNvbnZlcnRlZEdseXBoT3V0TGluZUNvbG9yICE9PSB1bmRlZmluZWQgJiYgdGhpcy5vdXRsaW5lV2lkdGggPiAwID8gbmV3IG9sLnN0eWxlLlN0cm9rZSgoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogdGhpcy5jb252ZXJ0ZWRHbHlwaE91dExpbmVDb2xvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMub3V0bGluZVdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgfSkpIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvaW50czogNCxcclxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IHJhZGl1cyxcclxuICAgICAgICAgICAgICAgICAgICByYWRpdXMyOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGFuZ2xlOiB0aGlzLmFuZ2xlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZGlhbW9uZFwiOlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJkaWFtb25kMlwiOlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJzdGFyXCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlU3R5bGUgPSBuZXcgb2wuc3R5bGUuUmVndWxhclNoYXBlKHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxsOiB0aGlzLmNvbnZlcnRlZEdseXBoRmlsbCAhPT0gdW5kZWZpbmVkID8gbmV3IG9sLnN0eWxlLkZpbGwoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHRoaXMuY29udmVydGVkR2x5cGhGaWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfSkpIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZTogdGhpcy5jb252ZXJ0ZWRHbHlwaE91dExpbmVDb2xvciAhPT0gdW5kZWZpbmVkICYmIHRoaXMub3V0bGluZVdpZHRoID4gMCA/IG5ldyBvbC5zdHlsZS5TdHJva2UoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHRoaXMuY29udmVydGVkR2x5cGhPdXRMaW5lQ29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLm91dGxpbmVXaWR0aFxyXG4gICAgICAgICAgICAgICAgICAgIH0pKSA6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICBwb2ludHM6IDUsXHJcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiByYWRpdXMsXHJcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzMjogcmFkaXVzIC8gMi41LFxyXG4gICAgICAgICAgICAgICAgICAgIGFuZ2xlOiB0aGlzLmFuZ2xlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwic3RhcjJcIjpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGluaXRCaXRtYXBTdHlsZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5wb2ludEZpbGUpIHtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZVN0eWxlID0gbmV3IG9sLnN0eWxlLkljb24oKHtcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IHRoaXMub3BhY2l0eSB8fCAxLFxyXG4gICAgICAgICAgICAgICAgc3JjOiB0aGlzLnBvaW50RmlsZSxcclxuICAgICAgICAgICAgICAgIHJvdGF0aW9uOiB0aGlzLmFuZ2xlICogTWF0aC5QSSAvIDE4MCxcclxuICAgICAgICAgICAgICAgIG9mZnNldDogW3RoaXMuZHgsIC10aGlzLmR5XVxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdEdseXBoU3R5bGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2x5cGgpIHtcclxuICAgICAgICAgICAgdGhpcy50ZXh0U3R5bGUgPSBuZXcgb2wuc3R5bGUuVGV4dCgoe1xyXG4gICAgICAgICAgICAgICAgZm9udDogYCR7dGhpcy5zaXplfXB4ICR7dGhpcy5nbHlwaH1gLFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0WDogdGhpcy5keCxcclxuICAgICAgICAgICAgICAgIG9mZnNldFk6IHRoaXMuZHksXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLmdseXBoTmFtZSxcclxuICAgICAgICAgICAgICAgIGZpbGw6IHRoaXMuY29udmVydGVkR2x5cGhGaWxsICE9PSB1bmRlZmluZWQgPyBuZXcgb2wuc3R5bGUuRmlsbCgoe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbnZlcnRlZEdseXBoRmlsbFxyXG4gICAgICAgICAgICAgICAgfSkpIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiB0aGlzLmNvbnZlcnRlZEdseXBoT3V0TGluZUNvbG9yICE9PSB1bmRlZmluZWQgJiYgdGhpcy5vdXRsaW5lV2lkdGggPiAwID8gbmV3IG9sLnN0eWxlLlN0cm9rZSgoe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbnZlcnRlZEdseXBoT3V0TGluZUNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLm91dGxpbmVXaWR0aFxyXG4gICAgICAgICAgICAgICAgfSkpIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgcm90YXRpb246IHRoaXMuYW5nbGUgKiBNYXRoLlBJIC8gMTgwXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhcHBseVRyYW5zRm9ybShzdHlsZTogb2wuc3R5bGUuU3R5bGUpIHtcclxuICAgICAgICBsZXQgdHJhbnNmb3JtUmd4ID0gLyhbYS16XSspXFwoKC4qPylcXCkvaTtcclxuICAgICAgICBpZiAodGhpcy50cmFuc2Zvcm0gJiYgdHJhbnNmb3JtUmd4LnRlc3QodGhpcy50cmFuc2Zvcm0pKSB7XHJcbiAgICAgICAgICAgIGxldCBtYXRjaGVkUmVzdWx0cyA9IHRoaXMudHJhbnNmb3JtLm1hdGNoKHRyYW5zZm9ybVJneCk7XHJcbiAgICAgICAgICAgIGxldCB0cmFuc0Zvcm1UeXBlID0gbWF0Y2hlZFJlc3VsdHMubGVuZ3RoID4gMiA/IG1hdGNoZWRSZXN1bHRzWzFdIDogXCJcIjtcclxuICAgICAgICAgICAgbGV0IHRyYW5zRm9ybVZhbHVlID0gbWF0Y2hlZFJlc3VsdHMubGVuZ3RoID4gMiA/IG1hdGNoZWRSZXN1bHRzWzJdIDogXCJcIjtcclxuICAgICAgICAgICAgc3dpdGNoICh0cmFuc0Zvcm1UeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwicm90YXRlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUuZ2V0SW1hZ2UoKSAmJiBzdHlsZS5nZXRJbWFnZSgpLnNldFJvdGF0aW9uKHBhcnNlSW50KHRyYW5zRm9ybVZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUuZ2V0VGV4dCgpICYmIHN0eWxlLmdldFRleHQoKS5zZXRSb3RhdGlvbihwYXJzZUludCh0cmFuc0Zvcm1WYWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInNjYWxlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNjYWxlID0gcGFyc2VJbnQodHJhbnNGb3JtVmFsdWUuc3BsaXQoXCIsXCIpWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZS5nZXRJbWFnZSgpICYmIHN0eWxlLmdldEltYWdlKCkuc2V0U2NhbGUoc2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLmdldFRleHQoKSAmJiBzdHlsZS5nZXRUZXh0KCkuc2V0U2NhbGUoc2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInRyYW5zbGF0ZVwiOlxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBcIm5vdCBzdXBwb3J0IFwiICsgdGhpcy50cmFuc2Zvcm07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJcclxuaW1wb3J0IHsgR2VvU3R5bGUgfSBmcm9tIFwiLi9nZW9TdHlsZVwiO1xyXG5pbXBvcnQgeyBHZW9CcnVzaCB9IGZyb20gXCIuLi9zdHlsZS9nZW9CcnVzaFwiO1xyXG5cclxuaW1wb3J0IHsgVGV4dExhYmVsaW5nU3RyYXRlZ3kgfSBmcm9tIFwiLi90ZXh0TGFiZWxpbmdTdHJhdGVneVwiO1xyXG5pbXBvcnQgeyBEZXRlY3RUZXh0TGFiZWxpbmdTdHJhdGVneSB9IGZyb20gXCIuL2RldGVjdFRleHRMYWJlbGluZ1N0cmF0ZWd5XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgR2VvU2hpZWxkU3R5bGUgZXh0ZW5kcyBHZW9TdHlsZSB7XHJcbiAgICB0ZXh0QWxpZ25zID0gW1wibGVmdFwiLCBcInJpZ2h0XCIsIFwiY2VudGVyXCIsIFwiZW5kXCIsIFwic3RhcnRcIl07XHJcbiAgICBhbGlnbjogc3RyaW5nO1xyXG4gICAgLy8gYXZvaWRFZGdlczogYm9vbGVhbjtcclxuICAgIGRhdGVGb3JtYXQ6IHN0cmluZztcclxuICAgIGR4OiBudW1iZXI7XHJcbiAgICBkeTogbnVtYmVyO1xyXG4gICAgZmFjZU5hbWU6IHN0cmluZztcclxuICAgIGZpbGw6IHN0cmluZztcclxuICAgIGZvcmNlSG9yaXpvbnRhbEZvckxpbmU6IGJvb2xlYW47XHJcbiAgICBoYWxvRmlsbDogc3RyaW5nO1xyXG4gICAgaGFsb1JhZGl1czogbnVtYmVyO1xyXG4gICAgbWFyZ2luOiBudW1iZXI7XHJcbiAgICBtYXhDaGFyQW5nbGVEZWx0YTogc3RyaW5nO1xyXG4gICAgbWluRGlzdGFuY2U6IG51bWJlcjtcclxuICAgIG1pblBhZGRpbmc6IG51bWJlcjtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIGZvbnQ6IHN0cmluZztcclxuICAgIG51bWVyaWNGb3JtYXQ6IHN0cmluZztcclxuICAgIGFuZ2xlOiBudW1iZXI7XHJcbiAgICBvcGFjaXR5OiBudW1iZXI7XHJcbiAgICBvcmllbnRhdGlvbjogbnVtYmVyO1xyXG4gICAgcGxhY2VtZW50czogc3RyaW5nO1xyXG4gICAgcGxhY2VtZW50VHlwZTogc3RyaW5nO1xyXG4gICAgcG9seWdvbkxhYmVsaW5nTG9jYXRpb25Nb2RlOiBzdHJpbmc7XHJcbiAgICByYXRpbzogc3RyaW5nO1xyXG4gICAgc2l6ZTogbnVtYmVyO1xyXG4gICAgc3BhY2luZzogbnVtYmVyO1xyXG4gICAgc3BsaW5lVHlwZTogc3RyaW5nO1xyXG4gICAgdGV4dEZvcm1hdDogc3RyaW5nO1xyXG4gICAgd3JhcDogc3RyaW5nO1xyXG4gICAgd3JhcFdpZHRoOiBudW1iZXI7XHJcbiAgICBpY29uVHlwZTogc3RyaW5nO1xyXG4gICAgaWNvblNpemU6IG51bWJlcjtcclxuICAgIGljb25TcmM6IHN0cmluZztcclxuICAgIGljb25Db2xvcjogc3RyaW5nO1xyXG4gICAgaWNvbk91dGxpbmVDb2xvcjogc3RyaW5nO1xyXG4gICAgaWNvbk91dGxpbmVXaWR0aDogbnVtYmVyO1xyXG4gICAgaWNvblN5bWJvbFR5cGU6IHN0cmluZztcclxuXHJcbiAgICBjb252ZXJ0U3ltYm9sQ29sb3I6IHN0cmluZztcclxuICAgIGNvbnZlcnRTeW1ib2xPdXRsaW5lQ29sb3I6IHN0cmluZztcclxuXHJcbiAgICB0ZXh0U3R5bGU6IGFueTtcclxuICAgIHN0eWxlOiBhbnk7XHJcbiAgICBpbWFnZTogYW55O1xyXG4gICAgaW1hZ2VDYWNoZTogYW55O1xyXG4gICAgbGFiZWxJbmZvczogYW55O1xyXG5cclxuICAgIGNoYXJXaWR0aHM6IGFueTtcclxuXHJcbiAgICBzdGF0aWMgcG9pQ2FjaGUgPSBbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzdHlsZUpzb24/OiBhbnkpIHtcclxuICAgICAgICBzdXBlcihzdHlsZUpzb24pO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VDYWNoZSA9IFtdO1xyXG4gICAgICAgIHRoaXMubGFiZWxJbmZvcyA9ICBuZXcgKDxhbnk+b2wpLnN0cnVjdHMuTFJVQ2FjaGUoNTEyKTtcclxuICAgICAgICB0aGlzLmNoYXJXaWR0aHMgPSB7fTtcclxuXHJcbiAgICAgICAgaWYgKHN0eWxlSnNvbikge1xyXG4gICAgICAgICAgICB0aGlzLmljb25UeXBlID0gc3R5bGVKc29uW1wic2hpZWxkLWljb24tdHlwZVwiXTtcclxuICAgICAgICAgICAgdGhpcy5pY29uU3ltYm9sVHlwZSA9IHN0eWxlSnNvbltcInNoaWVsZC1pY29uLXN5bWJvbC10eXBlXCJdO1xyXG4gICAgICAgICAgICB0aGlzLmljb25TaXplID0gc3R5bGVKc29uW1wic2hpZWxkLWljb24tc2l6ZVwiXSA/IHN0eWxlSnNvbltcInNoaWVsZC1pY29uLXNpemVcIl0gOiAwO1xyXG4gICAgICAgICAgICB0aGlzLmljb25TcmMgPSBzdHlsZUpzb25bXCJzaGllbGQtaWNvbi1zcmNcIl07XHJcbiAgICAgICAgICAgIHRoaXMuaWNvbkNvbG9yID0gc3R5bGVKc29uW1wic2hpZWxkLWljb24tY29sb3JcIl07XHJcbiAgICAgICAgICAgIHRoaXMuaWNvbk91dGxpbmVDb2xvciA9IHN0eWxlSnNvbltcInNoaWVsZC1pY29uLW91dGxpbmUtY29sb3JcIl07XHJcbiAgICAgICAgICAgIHRoaXMuaWNvbk91dGxpbmVXaWR0aCA9IHN0eWxlSnNvbltcInNoaWVsZC1pY29uLW91dGxpbmUtd2lkdGhcIl0gPyBzdHlsZUpzb25bXCJzaGllbGQtaWNvbi1vdXRsaW5lLXdpZHRoXCJdIDogMDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmljb25TcmMpIHtcclxuICAgICAgICAgICAgICAgIGlmICghR2VvU2hpZWxkU3R5bGUucG9pQ2FjaGVbdGhpcy5pY29uU3JjXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbWFnZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlRWxlbWVudC5zcmMgPSB0aGlzLmljb25TcmM7XHJcbiAgICAgICAgICAgICAgICAgICAgR2VvU2hpZWxkU3R5bGUucG9pQ2FjaGVbdGhpcy5pY29uU3JjXSA9IGltYWdlRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gc3R5bGVKc29uW1wic2hpZWxkLW5hbWVcIl07XHJcbiAgICAgICAgICAgIHRoaXMuZm9udCA9IHN0eWxlSnNvbltcInNoaWVsZC1mb250XCJdO1xyXG4gICAgICAgICAgICB0aGlzLmFsaWduID0gc3R5bGVKc29uW1wic2hpZWxkLWFsaWduXCJdO1xyXG4gICAgICAgICAgICB0aGlzLmFuZ2xlID0gc3R5bGVKc29uW1wic2hpZWxkLXJvdGF0ZS1hbmdsZVwiXSA/IHN0eWxlSnNvbltcInNoaWVsZC1yb3RhdGUtYW5nbGVcIl0gOiAwO1xyXG5cclxuICAgICAgICAgICAgLy8gdGhpcy5hdm9pZEVkZ2VzID0gc3R5bGVKc29uW1wic2hpZWxkLWF2b2lkLWVkZ2VzXCJdO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGVGb3JtYXQgPSBzdHlsZUpzb25bXCJzaGllbGQtZGF0ZS1mb3JtYXRcIl07XHJcblxyXG4gICAgICAgICAgICAvLyBUT0RPXHJcbiAgICAgICAgICAgIHRoaXMuZHggPSBzdHlsZUpzb25bXCJzaGllbGQtZHhcIl0gPyBzdHlsZUpzb25bXCJzaGllbGQtZHhcIl0gOiAwO1xyXG4gICAgICAgICAgICB0aGlzLmR5ID0gc3R5bGVKc29uW1wic2hpZWxkLWR5XCJdID8gc3R5bGVKc29uW1wic2hpZWxkLWR5XCJdIDogMDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZmFjZU5hbWUgPSBzdHlsZUpzb25bXCJzaGllbGQtZmFjZS1uYW1lXCJdO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5maWxsID0gc3R5bGVKc29uW1wic2hpZWxkLWZpbGxcIl07XHJcblxyXG4gICAgICAgICAgICAvLyB0aGlzLmZvcmNlSG9yaXpvbnRhbEZvckxpbmUgPSBzdHlsZUpzb25bXCJzaGllbGQtZm9yY2UtaG9yaXpvbnRhbC1mb3ItbGluZVwiXTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaGFsb0ZpbGwgPSBzdHlsZUpzb25bXCJzaGllbGQtaGFsby1maWxsXCJdID8gc3R5bGVKc29uW1wic2hpZWxkLWhhbG8tZmlsbFwiXSA6IFwiVHJhbnNwYXJlbnRcIjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuaGFsb1JhZGl1cyA9IHN0eWxlSnNvbltcInNoaWVsZC1oYWxvLXJhZGl1c1wiXSA/IHN0eWxlSnNvbltcInNoaWVsZC1oYWxvLXJhZGl1c1wiXSA6IDA7XHJcblxyXG4gICAgICAgICAgICAvLyB1c2luZyBpbiBzdHJhdGVneVxyXG4gICAgICAgICAgICB0aGlzLm1hcmdpbiA9IHN0eWxlSnNvbltcInNoaWVsZC1tYXJnaW5cIl07XHJcblxyXG4gICAgICAgICAgICAvLyB0aGlzLm1heENoYXJBbmdsZURlbHRhID0gc3R5bGVKc29uW1wic2hpZWxkLW1heC1jaGFyLWFuZ2xlLWRlbHRhXCJdO1xyXG5cclxuICAgICAgICAgICAgLy8gdXNpbmcgaW4gc3RyYXRlZ3lcclxuICAgICAgICAgICAgdGhpcy5taW5EaXN0YW5jZSA9IHN0eWxlSnNvbltcInNoaWVsZC1taW4tZGlzdGFuY2VcIl07XHJcblxyXG4gICAgICAgICAgICAvLyB1c2luZyBpbiBzdHJhdGVneVxyXG4gICAgICAgICAgICB0aGlzLm1pblBhZGRpbmcgPSBzdHlsZUpzb25bXCJzaGllbGQtbWluLXBhZGRpbmdcIl07XHJcblxyXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBzdHlsZUpzb25bXCJzaGllbGQtbmFtZVwiXTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubnVtZXJpY0Zvcm1hdCA9IHN0eWxlSnNvbltcInNoaWVsZC1udW1lcmljLWZvcm1hdFwiXTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub3BhY2l0eSA9IHN0eWxlSnNvbltcInNoaWVsZC1vcGFjaXR5XCJdO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vcmllbnRhdGlvbiA9IHN0eWxlSnNvbltcInNoaWVsZC1vcmllbnRhdGlvblwiXTtcclxuXHJcbiAgICAgICAgICAgIC8vIHVzaW5nIGluIHN0cmF0ZWd5XHJcbiAgICAgICAgICAgIHRoaXMucGxhY2VtZW50cyA9IHN0eWxlSnNvbltcInNoaWVsZC1wbGFjZW1lbnRzXCJdID8gc3R5bGVKc29uW1wic2hpZWxkLXBsYWNlbWVudHNcIl0gOiBcIlVSLFUsVUwsQixCUixCTCxMLFJcIjtcclxuXHJcbiAgICAgICAgICAgIC8vIHVzaW5nIGluIHN0cmF0ZWd5XHJcbiAgICAgICAgICAgIHRoaXMucGxhY2VtZW50VHlwZSA9IHN0eWxlSnNvbltcInNoaWVsZC1wbGFjZW1lbnQtdHlwZVwiXSA/IHN0eWxlSnNvbltcInNoaWVsZC1wbGFjZW1lbnQtdHlwZVwiXSA6IFwiZGVmYXVsdFwiO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zaXplID0gc3R5bGVKc29uW1wic2hpZWxkLXNpemVcIl07XHJcblxyXG4gICAgICAgICAgICAvLyB1c2luZyBpbiBzdHJhdGVneVxyXG4gICAgICAgICAgICB0aGlzLnNwYWNpbmcgPSBzdHlsZUpzb25bXCJzaGllbGQtc3BhY2luZ1wiXSAhPT0gdW5kZWZpbmVkID8gc3R5bGVKc29uW1wic2hpZWxkLXNwYWNpbmdcIl0gOiAxMDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudGV4dEZvcm1hdCA9IHN0eWxlSnNvbltcInNoaWVsZC10ZXh0LWZvcm1hdFwiXTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud3JhcCA9IHN0eWxlSnNvbltcInNoaWVsZC13cmFwLWJlZm9yZVwiXSA/IHRydWUgOiBzdHlsZUpzb25bXCJzaGllbGQtd3JhcC1iZWZvcmVcIl07XHJcblxyXG4gICAgICAgICAgICB0aGlzLndyYXBXaWR0aCA9IHN0eWxlSnNvbltcInNoaWVsZC13cmFwLXdpZHRoXCJdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbml0aWFsaXplQ29yZSgpIHtcclxuICAgICAgICBsZXQgZm9udDtcclxuICAgICAgICBsZXQgc2l6ZTtcclxuXHJcbiAgICAgICAgdGhpcy50ZXh0U3R5bGUgPSBuZXcgb2wuc3R5bGUuVGV4dCh7XHJcbiAgICAgICAgICAgIHN0cm9rZTogbmV3IG9sLnN0eWxlLlN0cm9rZSgpXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRleHRBbGlnbnMuaW5kZXhPZih0aGlzLmFsaWduKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dFN0eWxlLnNldFRleHRBbGlnbih0aGlzLmFsaWduKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmZvbnQpIHtcclxuICAgICAgICAgICAgdGhpcy50ZXh0U3R5bGUuc2V0Rm9udCh0aGlzLmZvbnQgPyB0aGlzLmZvbnQgOiBcIjEwcHggc2Fucy1zZXJpZlwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmZpbGwpIHtcclxuICAgICAgICAgICAgdGhpcy50ZXh0U3R5bGUuZ2V0RmlsbCgpLnNldENvbG9yKEdlb1N0eWxlLnRvUkdCQUNvbG9yKHRoaXMuZmlsbCwgdGhpcy5vcGFjaXR5KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmhhbG9GaWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dFN0eWxlLmdldFN0cm9rZSgpLnNldENvbG9yKEdlb1N0eWxlLnRvUkdCQUNvbG9yKHRoaXMuaGFsb0ZpbGwsIHRoaXMub3BhY2l0eSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5oYWxvUmFkaXVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dFN0eWxlLmdldFN0cm9rZSgpLnNldFdpZHRoKHRoaXMuaGFsb1JhZGl1cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm9yaWVudGF0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dFN0eWxlLnNldFJvdGF0aW9uKHRoaXMub3JpZW50YXRpb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaWNvbkNvbG9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udmVydFN5bWJvbENvbG9yID0gR2VvU3R5bGUudG9SR0JBQ29sb3IodGhpcy5pY29uQ29sb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pY29uT3V0bGluZUNvbG9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udmVydFN5bWJvbE91dGxpbmVDb2xvciA9IEdlb1N0eWxlLnRvUkdCQUNvbG9yKHRoaXMuaWNvbk91dGxpbmVDb2xvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnN0eWxlID0gbmV3IG9sLnN0eWxlLlN0eWxlKHtcclxuICAgICAgICAgICAgdGV4dDogdGhpcy50ZXh0U3R5bGVcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbGV0IGNoYXJzID0gXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXCI7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJXaWR0aHNbY2hhcnNbaV1dID0gKDxhbnk+b2wucmVuZGVyLmNhbnZhcykubWVhc3VyZVRleHRXaWR0aCh0aGlzLmZvbnQsIGNoYXJzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGFyV2lkdGhzW1wiIFwiXSA9ICg8YW55Pm9sLnJlbmRlci5jYW52YXMpLm1lYXN1cmVUZXh0V2lkdGgodGhpcy5mb250LCBcIiBcIik7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gOTsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhcldpZHRoc1tpXSA9ICg8YW55Pm9sLnJlbmRlci5jYW52YXMpLm1lYXN1cmVUZXh0V2lkdGgodGhpcy5mb250LCBpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXRjaCAodGhpcy5pY29uVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiaW1hZ2VcIjpcclxuICAgICAgICAgICAgY2FzZSBcIkltYWdlXCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFNoaWxlZEltYWdlSWNvbigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJzeW1ib2xcIjpcclxuICAgICAgICAgICAgY2FzZSBcIlN5bWJvbFwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTaGllbGRTeW1ib2xJY29uKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29udmVydGVkU3R5bGVDb3JlKGZlYXR1cmU6IGFueSwgcmVzb2x1dGlvbjogbnVtYmVyLCBvcHRpb25zOiBhbnkpOiBvbC5zdHlsZS5TdHlsZVtdIHtcclxuICAgICAgICBsZXQgZmVhdHVyZVRleHQgPSBcIlwiO1xyXG4gICAgICAgIGlmICh0aGlzLm5hbWUpIHtcclxuICAgICAgICAgICAgZmVhdHVyZVRleHQgPSBmZWF0dXJlLmdldCh0aGlzLm5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmZWF0dXJlVGV4dCA9IHRoaXMuZm9ybWF0VGV4dChmZWF0dXJlVGV4dCk7XHJcbiAgICAgICAgaWYgKGZlYXR1cmVUZXh0ID09PSB1bmRlZmluZWQgfHwgZmVhdHVyZVRleHQgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy50ZXh0U3R5bGUuc2V0VGV4dChmZWF0dXJlVGV4dCk7XHJcblxyXG4gICAgICAgIGxldCBsYWJlbEluZm8gPSB0aGlzLmdldExhYmVsSW5mbyhmZWF0dXJlVGV4dCk7XHJcblxyXG4gICAgICAgIGxldCBmbGF0Q29vcmRpbmF0ZXMgPSB0aGlzLnNldExhYmVsUG9zaXRpb24oZmVhdHVyZSwgcmVzb2x1dGlvbiwgbGFiZWxJbmZvLCBvcHRpb25zLnN0cmF0ZWd5VHJlZSwgb3B0aW9ucy5mcmFtZVN0YXRlKTtcclxuICAgICAgICBpZiAoZmxhdENvb3JkaW5hdGVzID09PSB1bmRlZmluZWQgfHwgZmxhdENvb3JkaW5hdGVzLmxlbmd0aCA8IDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnN0eWxlLnNldEdlb21ldHJ5KG5ldyBvbC5nZW9tLlBvaW50KGZsYXRDb29yZGluYXRlcywgXCJYWVwiKSk7XHJcblxyXG4gICAgICAgIGxldCBsYWJlbGltYWdlID0gdGhpcy5nZXRJbWFnZShsYWJlbEluZm8pO1xyXG5cclxuICAgICAgICB0aGlzLnRleHRTdHlsZS5sYWJlbCA9IGxhYmVsaW1hZ2U7XHJcbiAgICAgICAgdGhpcy50ZXh0U3R5bGUubGFiZWxQb3NpdGlvbiA9IGZsYXRDb29yZGluYXRlcztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VDYWNoZVtmZWF0dXJlVGV4dF0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlQ2FjaGVbZmVhdHVyZVRleHRdID0gW107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZmVhdHVyZVppbmRleCA9IGZlYXR1cmVbXCJ0ZW1wVHJlZVppbmRleFwiXTtcclxuICAgICAgICBpZiAoZmVhdHVyZVppbmRleCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGZlYXR1cmVaaW5kZXggPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnN0eWxlLnNldFpJbmRleChmZWF0dXJlWmluZGV4KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFt0aGlzLnN0eWxlXTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRTaGllbGRTeW1ib2xJY29uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmljb25TeW1ib2xUeXBlICE9PSB1bmRlZmluZWQpIHtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5pY29uU3ltYm9sVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImNpcmNsZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2lyY2xlSWNvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInNxdWFyZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3F1YXJlSWNvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInRyaWFuZ2xlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRUcmlhbmdsZUljb24oKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJjcm9zc1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q3Jvc3NJY29uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwic3RhclwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3Rhckljb24oKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnN0eWxlLnNldEltYWdlKHRoaXMuaW1hZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRTdGFySWNvbigpIHtcclxuICAgICAgICBsZXQgZmlsbCA9IHVuZGVmaW5lZDtcclxuICAgICAgICBsZXQgc3Ryb2tlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGxldCByYWRpdXMgPSB0aGlzLmljb25TaXplICogMC41O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pY29uQ29sb3IpIHtcclxuICAgICAgICAgICAgZmlsbCA9IG5ldyBvbC5zdHlsZS5GaWxsKCh7IGNvbG9yOiB0aGlzLmNvbnZlcnRTeW1ib2xDb2xvciB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmljb25PdXRsaW5lQ29sb3IgfHwgdGhpcy5pY29uT3V0bGluZVdpZHRoKSB7XHJcbiAgICAgICAgICAgIHN0cm9rZSA9IG5ldyBvbC5zdHlsZS5TdHJva2UoKHtcclxuICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbnZlcnRTeW1ib2xPdXRsaW5lQ29sb3IsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5pY29uT3V0bGluZVdpZHRoXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaW1hZ2UgPSBuZXcgb2wuc3R5bGUuUmVndWxhclNoYXBlKHtcclxuICAgICAgICAgICAgZmlsbDogZmlsbCxcclxuICAgICAgICAgICAgc3Ryb2tlOiBzdHJva2UsXHJcbiAgICAgICAgICAgIHBvaW50czogNSxcclxuICAgICAgICAgICAgcmFkaXVzOiByYWRpdXMsXHJcbiAgICAgICAgICAgIHJhZGl1czI6IHJhZGl1cyAvIDIuNSxcclxuICAgICAgICAgICAgYW5nbGU6IHRoaXMuYW5nbGVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRDcm9zc0ljb24oKSB7XHJcbiAgICAgICAgbGV0IGZpbGwgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgbGV0IHN0cm9rZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICBsZXQgcmFkaXVzID0gdGhpcy5pY29uU2l6ZSAqIDAuNTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaWNvbkNvbG9yKSB7XHJcbiAgICAgICAgICAgIGZpbGwgPSBuZXcgb2wuc3R5bGUuRmlsbCgoeyBjb2xvcjogdGhpcy5jb252ZXJ0U3ltYm9sQ29sb3IgfSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pY29uT3V0bGluZUNvbG9yIHx8IHRoaXMuaWNvbk91dGxpbmVXaWR0aCkge1xyXG4gICAgICAgICAgICBzdHJva2UgPSBuZXcgb2wuc3R5bGUuU3Ryb2tlKCh7XHJcbiAgICAgICAgICAgICAgICBjb2xvcjogdGhpcy5jb252ZXJ0U3ltYm9sT3V0bGluZUNvbG9yLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMuaWNvbk91dGxpbmVXaWR0aFxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmltYWdlID0gbmV3IG9sLnN0eWxlLlJlZ3VsYXJTaGFwZSh7XHJcbiAgICAgICAgICAgIGZpbGw6IGZpbGwsXHJcbiAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlLFxyXG4gICAgICAgICAgICBwb2ludHM6IDQsXHJcbiAgICAgICAgICAgIHJhZGl1czogcmFkaXVzLFxyXG4gICAgICAgICAgICByYWRpdXMyOiAwLFxyXG4gICAgICAgICAgICBhbmdsZTogdGhpcy5hbmdsZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFRyaWFuZ2xlSWNvbigpIHtcclxuICAgICAgICBsZXQgZmlsbCA9IHVuZGVmaW5lZDtcclxuICAgICAgICBsZXQgc3Ryb2tlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGxldCByYWRpdXMgPSB0aGlzLmljb25TaXplICogMC41O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pY29uQ29sb3IpIHtcclxuICAgICAgICAgICAgZmlsbCA9IG5ldyBvbC5zdHlsZS5GaWxsKCh7IGNvbG9yOiB0aGlzLmNvbnZlcnRTeW1ib2xDb2xvciB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmljb25PdXRsaW5lQ29sb3IgfHwgdGhpcy5pY29uT3V0bGluZVdpZHRoKSB7XHJcbiAgICAgICAgICAgIHN0cm9rZSA9IG5ldyBvbC5zdHlsZS5TdHJva2UoKHtcclxuICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbnZlcnRTeW1ib2xPdXRsaW5lQ29sb3IsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5pY29uT3V0bGluZVdpZHRoXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaW1hZ2UgPSBuZXcgb2wuc3R5bGUuUmVndWxhclNoYXBlKHtcclxuICAgICAgICAgICAgZmlsbDogZmlsbCxcclxuICAgICAgICAgICAgc3Ryb2tlOiBzdHJva2UsXHJcbiAgICAgICAgICAgIHBvaW50czogMyxcclxuICAgICAgICAgICAgcmFkaXVzOiByYWRpdXMsXHJcbiAgICAgICAgICAgIGFuZ2xlOiB0aGlzLmFuZ2xlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0U3F1YXJlSWNvbigpIHtcclxuICAgICAgICBsZXQgZmlsbCA9IHVuZGVmaW5lZDtcclxuICAgICAgICBsZXQgc3Ryb2tlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGxldCByYWRpdXMgPSB0aGlzLmljb25TaXplICogMC41O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pY29uQ29sb3IpIHtcclxuICAgICAgICAgICAgZmlsbCA9IG5ldyBvbC5zdHlsZS5GaWxsKCh7IGNvbG9yOiB0aGlzLmNvbnZlcnRTeW1ib2xDb2xvciB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmljb25PdXRsaW5lQ29sb3IgfHwgdGhpcy5pY29uT3V0bGluZVdpZHRoKSB7XHJcbiAgICAgICAgICAgIHN0cm9rZSA9IG5ldyBvbC5zdHlsZS5TdHJva2UoKHtcclxuICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbnZlcnRTeW1ib2xPdXRsaW5lQ29sb3IsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5pY29uT3V0bGluZVdpZHRoXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaW1hZ2UgPSBuZXcgb2wuc3R5bGUuUmVndWxhclNoYXBlKHtcclxuICAgICAgICAgICAgZmlsbDogZmlsbCxcclxuICAgICAgICAgICAgc3Ryb2tlOiBzdHJva2UsXHJcbiAgICAgICAgICAgIHBvaW50czogNCxcclxuICAgICAgICAgICAgcmFkaXVzOiByYWRpdXMsXHJcbiAgICAgICAgICAgIGFuZ2xlOiBNYXRoLlBJIC8gNCArIHRoaXMuYW5nbGVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRDaXJjbGVJY29uKCkge1xyXG4gICAgICAgIGxldCBmaWxsID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGxldCBzdHJva2UgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgbGV0IHJhZGl1cyA9IHRoaXMuaWNvblNpemUgKiAwLjU7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmljb25Db2xvcikge1xyXG4gICAgICAgICAgICBmaWxsID0gbmV3IG9sLnN0eWxlLkZpbGwoKHsgY29sb3I6IHRoaXMuY29udmVydFN5bWJvbENvbG9yIH0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaWNvbk91dGxpbmVDb2xvciB8fCB0aGlzLmljb25PdXRsaW5lV2lkdGgpIHtcclxuICAgICAgICAgICAgc3Ryb2tlID0gbmV3IG9sLnN0eWxlLlN0cm9rZSgoe1xyXG4gICAgICAgICAgICAgICAgY29sb3I6IHRoaXMuY29udmVydFN5bWJvbE91dGxpbmVDb2xvcixcclxuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLmljb25PdXRsaW5lV2lkdGhcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5pbWFnZSA9IG5ldyBvbC5zdHlsZS5DaXJjbGUoe1xyXG4gICAgICAgICAgICBmaWxsOiBmaWxsLFxyXG4gICAgICAgICAgICBzdHJva2U6IHN0cm9rZSxcclxuICAgICAgICAgICAgcmFkaXVzOiByYWRpdXNcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRTaGlsZWRJbWFnZUljb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaWNvblNyYyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGxldCBwb2lJbWcgPSBHZW9TaGllbGRTdHlsZS5wb2lDYWNoZVt0aGlzLmljb25TcmNdO1xyXG4gICAgICAgICAgICBpZiAocG9pSW1nLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocG9pSW1nLm5hdHVyYWxXaWR0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2UgPSBuZXcgb2wuc3R5bGUuSWNvbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZzogcG9pSW1nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWdTaXplOiBbcG9pSW1nLndpZHRoLCBwb2lJbWcuaGVpZ2h0XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IHRoaXMuYW5nbGUgKiBNYXRoLlBJIC8gMTgwXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHlsZS5zZXRJbWFnZSh0aGlzLmltYWdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXRMYWJlbEluZm8odGV4dDogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IGtleT0gdGV4dDtcclxuICAgICAgICBpZiAoIXRoaXMubGFiZWxJbmZvcy5jb250YWluc0tleShrZXkpKSBcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBmb250ID0gdGhpcy5mb3JtYXRGb250KHRoaXMudGV4dFN0eWxlLmdldEZvbnQoKSk7XHJcbiAgICAgICAgICAgIHRleHQgPSB0aGlzLndyYXBUZXh0KHRleHQsIGZvbnQpO1xyXG4gICAgXHJcbiAgICAgICAgICAgIGxldCBmaWxsU3RhdGUgPSB0aGlzLnRleHRTdHlsZS5nZXRGaWxsKCk7XHJcbiAgICAgICAgICAgIGxldCBzdHJva2VTdGF0ZSA9IHRoaXMudGV4dFN0eWxlLmdldFN0cm9rZSgpO1xyXG4gICAgXHJcbiAgICAgICAgICAgIGxldCBwaXhlbFJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XHJcbiAgICAgICAgICAgIGxldCBzY2FsZSA9IHRoaXMudGV4dFN0eWxlLmdldFNjYWxlKCk7XHJcbiAgICAgICAgICAgIHNjYWxlID0gKHNjYWxlID8gc2NhbGUgOiAxKSAqIHBpeGVsUmF0aW87XHJcbiAgICBcclxuICAgICAgICAgICAgbGV0IGFsaWduID0gKDxhbnk+b2wucmVuZGVyKS5yZXBsYXkuVEVYVF9BTElHTlt0aGlzLnRleHRTdHlsZS5nZXRUZXh0QWxpZ24oKSB8fCAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5kZWZhdWx0VGV4dEFsaWduXTtcclxuICAgICAgICAgICAgbGV0IHN0cm9rZVdpZHRoID0gc3Ryb2tlU3RhdGUgJiYgc3Ryb2tlU3RhdGUuZ2V0V2lkdGgoKSA/IHN0cm9rZVN0YXRlLmdldFdpZHRoKCkgOiAwO1xyXG4gICAgXHJcbiAgICAgICAgICAgIGxldCBsaW5lcyA9IHRleHQuc3BsaXQoXCJcXG5cIik7XHJcbiAgICAgICAgICAgIGxldCBudW1MaW5lcyA9IGxpbmVzLmxlbmd0aDtcclxuICAgICAgICAgICAgbGV0IHdpZHRocyA9IFtdO1xyXG4gICAgXHJcbiAgICAgICAgICAgIC8vIGxldCB3aWR0aCA9ICg8YW55Pm9sLnJlbmRlci5jYW52YXMpLlRleHRSZXBsYXkubWVhc3VyZVRleHRXaWR0aHMoZm9udCwgbGluZXMsIHdpZHRocyk7XHJcbiAgICAgICAgICAgIGxldCB3aWR0aCA9IHRoaXMuZ2V0RXN0aW1hdGVkV2lkdGgoZm9udCwgbGluZXMsIHdpZHRocyk7XHJcbiAgICAgICAgICAgIGxldCByZW5kZXJXaWR0aCA9IHdpZHRoICsgc3Ryb2tlV2lkdGg7XHJcbiAgICBcclxuICAgICAgICAgICAgbGV0IGxpbmVIZWlnaHQgPSAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5tZWFzdXJlVGV4dEhlaWdodChmb250KTtcclxuICAgICAgICAgICAgbGV0IGhlaWdodCA9IGxpbmVIZWlnaHQgKiBudW1MaW5lcztcclxuICAgIFxyXG4gICAgICAgICAgICAvLyBpZiAodGhpcy5keCkgeyB0aGlzLnRleHRTdHlsZS5zZXRPZmZzZXRYKHRoaXMuZHggKyBoZWlnaHQgLyAyKTsgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5keCkgeyB0aGlzLnRleHRTdHlsZS5zZXRPZmZzZXRYKHRoaXMuZHgpOyB9XHJcbiAgICAgICAgICAgIC8vIGlmICh0aGlzLmR5KSB7IHRoaXMudGV4dFN0eWxlLnNldE9mZnNldFkodGhpcy5keSArIGhlaWdodCAvIDIpOyB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmR5KSB7IHRoaXMudGV4dFN0eWxlLnNldE9mZnNldFkodGhpcy5keSk7IH1cclxuICAgIFxyXG4gICAgICAgICAgICBsZXQgbGFiZWxXaWR0aCA9IE1hdGguY2VpbChyZW5kZXJXaWR0aCAqIHNjYWxlKTtcclxuICAgICAgICAgICAgbGV0IGxhYmVsSGVpZ2h0ID0gTWF0aC5jZWlsKChoZWlnaHQgKyBzdHJva2VXaWR0aCkgKiBzY2FsZSk7XHJcbiAgICBcclxuICAgICAgICAgICAgbGV0IGxhYmVsSW5mbyA9IHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBsYWJlbFdpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBsYWJlbEhlaWdodCxcclxuICAgICAgICAgICAgICAgIHNjYWxlOiBzY2FsZSxcclxuICAgICAgICAgICAgICAgIG51bUxpbmVzOiBudW1MaW5lcyxcclxuICAgICAgICAgICAgICAgIGxpbmVzOiBsaW5lcyxcclxuICAgICAgICAgICAgICAgIHdpZHRoczogd2lkdGhzLFxyXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodDogbGluZUhlaWdodCxcclxuICAgICAgICAgICAgICAgIGZvbnQ6IGZvbnRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5sYWJlbEluZm9zLnNldChrZXksbGFiZWxJbmZvKTtcclxuICAgICAgICB9ICAgICAgICBcclxuICAgICAgICByZXR1cm4gdGhpcy5sYWJlbEluZm9zLmdldChrZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldExhYmVsUG9zaXRpb24oZ2VvbWV0cnk6IGFueSwgcmVzb2x1dGlvbjogYW55LCBsYWJlbEluZm86IGFueSwgc3RyYXRlZ3lUcmVlOiBhbnksIGZyYW1lU3RhdGU6IG9seC5GcmFtZVN0YXRlKSB7XHJcbiAgICAgICAgbGV0IGdlb21ldHJ5VHlwZSA9IGdlb21ldHJ5LmdldFR5cGUoKTtcclxuICAgICAgICBsZXQgZmxhdENvb3JkaW5hdGVzO1xyXG4gICAgICAgIGxldCBpLCBpaTtcclxuXHJcbiAgICAgICAgbGV0IENvbnN0cnVjdG9yOiBhbnk7XHJcbiAgICAgICAgaWYgKHRoaXMucGxhY2VtZW50VHlwZSA9PT0gXCJkZWZhdWx0XCIpIHtcclxuICAgICAgICAgICAgQ29uc3RydWN0b3IgPSB0aGlzLkJBVENIX0NPTlNUUlVDVE9SU19ERUZBVUxUW2dlb21ldHJ5VHlwZV07XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBsYWNlbWVudFR5cGUgPT09IFwiZGV0ZWN0XCIpIHtcclxuICAgICAgICAgICAgQ29uc3RydWN0b3IgPSB0aGlzLkJBVENIX0NPTlNUUlVDVE9SU19ERVRFQ1RbZ2VvbWV0cnlUeXBlXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB0ZXh0TGFiZWxpbmdTdHJhdGVneSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xyXG5cclxuICAgICAgICBsZXQgd2lkdGggPSBsYWJlbEluZm8ud2lkdGg7XHJcbiAgICAgICAgbGV0IGhlaWdodCA9IGxhYmVsSW5mby5oZWlnaHQ7XHJcbiAgICAgICAgc3dpdGNoIChnZW9tZXRyeVR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAoPGFueT5vbC5nZW9tKS5HZW9tZXRyeVR5cGUuUE9JTlQ6XHJcbiAgICAgICAgICAgIGNhc2UgKDxhbnk+b2wuZ2VvbSkuR2VvbWV0cnlUeXBlLk1VTFRJX1BPSU5UOlxyXG4gICAgICAgICAgICAgICAgZmxhdENvb3JkaW5hdGVzID0gZ2VvbWV0cnkuZ2V0RmxhdENvb3JkaW5hdGVzKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAoPGFueT5vbC5nZW9tKS5HZW9tZXRyeVR5cGUuTElORV9TVFJJTkc6XHJcbiAgICAgICAgICAgICAgICBmbGF0Q29vcmRpbmF0ZXMgPSAvKiogQHR5cGUge29sLmdlb20uTGluZVN0cmluZ30gKi8gKGdlb21ldHJ5KS5nZXRGbGF0TWlkcG9pbnQoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICg8YW55Pm9sLmdlb20pLkdlb21ldHJ5VHlwZS5DSVJDTEU6XHJcbiAgICAgICAgICAgICAgICBmbGF0Q29vcmRpbmF0ZXMgPSAvKiogQHR5cGUge29sLmdlb20uQ2lyY2xlfSAqLyAoZ2VvbWV0cnkpLmdldENlbnRlcigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgKDxhbnk+b2wuZ2VvbSkuR2VvbWV0cnlUeXBlLk1VTFRJX0xJTkVfU1RSSU5HOlxyXG4gICAgICAgICAgICAgICAgZmxhdENvb3JkaW5hdGVzID0gLyoqIEB0eXBlIHtvbC5nZW9tLk11bHRpTGluZVN0cmluZ30gKi8gKGdlb21ldHJ5KS5nZXRGbGF0TWlkcG9pbnRzKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAoPGFueT5vbC5nZW9tKS5HZW9tZXRyeVR5cGUuUE9MWUdPTjpcclxuICAgICAgICAgICAgICAgIGZsYXRDb29yZGluYXRlcyA9IC8qKiBAdHlwZSB7b2wuZ2VvbS5Qb2x5Z29ufSAqLyAoZ2VvbWV0cnkpLmdldEZsYXRJbnRlcmlvclBvaW50KCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAoPGFueT5vbC5nZW9tKS5HZW9tZXRyeVR5cGUuTVVMVElfUE9MWUdPTjpcclxuICAgICAgICAgICAgICAgIGxldCBpbnRlcmlvclBvaW50cyA9IC8qKiBAdHlwZSB7b2wuZ2VvbS5NdWx0aVBvbHlnb259ICovIChnZW9tZXRyeSkuZ2V0RmxhdEludGVyaW9yUG9pbnRzKCk7XHJcbiAgICAgICAgICAgICAgICBmbGF0Q29vcmRpbmF0ZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0gaW50ZXJpb3JQb2ludHMubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRleHRTdHlsZS5vdmVyZmxvdyB8fCBpbnRlcmlvclBvaW50c1tpICsgMl0gLyByZXNvbHV0aW9uID49IHdpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYXRDb29yZGluYXRlcy5wdXNoKGludGVyaW9yUG9pbnRzW2ldLCBpbnRlcmlvclBvaW50c1tpICsgMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgIH1cclxuICAgICAgICBmbGF0Q29vcmRpbmF0ZXMgPSB0ZXh0TGFiZWxpbmdTdHJhdGVneS5tYXJrTG9jYXRpb24oZmxhdENvb3JkaW5hdGVzLCB3aWR0aCwgaGVpZ2h0LCByZXNvbHV0aW9uLCBnZW9tZXRyeVR5cGUsIHRoaXMsIHN0cmF0ZWd5VHJlZSwgZnJhbWVTdGF0ZSk7XHJcblxyXG4gICAgICAgIHJldHVybiBmbGF0Q29vcmRpbmF0ZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RXN0aW1hdGVkV2lkdGgoZm9udCwgbGluZXMsIHdpZHRocykge1xyXG4gICAgICAgIGxldCBudW1MaW5lcyA9IGxpbmVzLmxlbmd0aDtcclxuICAgICAgICBsZXQgd2lkdGggPSAwO1xyXG4gICAgICAgIGxldCBjdXJyZW50V2lkdGgsIGk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bUxpbmVzOyArK2kpIHtcclxuICAgICAgICAgICAgY3VycmVudFdpZHRoID0gMDtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBsaW5lc1tpXS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNoYXJXaWR0aCA9IHRoaXMuY2hhcldpZHRoc1tsaW5lc1tpXVtqXV07XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhcldpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFdpZHRoICs9IGNoYXJXaWR0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRXaWR0aCArPSB0aGlzLmNoYXJXaWR0aHNbXCJXXCJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdpZHRoID0gTWF0aC5tYXgod2lkdGgsIGN1cnJlbnRXaWR0aCk7XHJcbiAgICAgICAgICAgIHdpZHRocy5wdXNoKGN1cnJlbnRXaWR0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB3aWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRJbWFnZShsYWJlbEluZm86IGFueSkge1xyXG4gICAgICAgIGlmIChsYWJlbEluZm8ubGFiZWwgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBsZXQgY29udGV4dCA9ICg8YW55Pm9sKS5kb20uY3JlYXRlQ2FudmFzQ29udGV4dDJEKGxhYmVsSW5mby53aWR0aCwgbGFiZWxJbmZvLmhlaWdodCk7XHJcbiAgICAgICAgICAgIGxldCBsYWJlbCA9IGNvbnRleHQuY2FudmFzO1xyXG4gICAgICAgICAgICBpZiAobGFiZWxJbmZvLnNjYWxlICE9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnNjYWxlKGxhYmVsSW5mby5zY2FsZSwgbGFiZWxJbmZvLnNjYWxlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29udGV4dC5mb250ID0gbGFiZWxJbmZvLmZvbnQ7XHJcblxyXG4gICAgICAgICAgICBsZXQgc3Ryb2tlU3RhdGUgPSB0aGlzLnRleHRTdHlsZS5nZXRTdHJva2UoKTtcclxuICAgICAgICAgICAgbGV0IHN0cm9rZVdpZHRoID0gc3Ryb2tlU3RhdGUgJiYgc3Ryb2tlU3RhdGUuZ2V0V2lkdGgoKSA/IHN0cm9rZVN0YXRlLmdldFdpZHRoKCkgOiAwO1xyXG5cclxuICAgICAgICAgICAgbGV0IGZpbGxTdGF0ZSA9IHRoaXMudGV4dFN0eWxlLmdldEZpbGwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzdHJva2VTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHN0cm9rZVN0YXRlLmdldENvbG9yKCkgPyBzdHJva2VTdGF0ZS5nZXRDb2xvcigpIDogXCJUcmFuc3BhcmVudFwiO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSBzdHJva2VXaWR0aCAqICgoPGFueT5vbC5oYXMpLlNBRkFSSSA/IGxhYmVsSW5mby5zY2FsZSA6IDEpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lQ2FwID0gc3Ryb2tlU3RhdGUuZ2V0TGluZUNhcCgpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lSm9pbiA9IHN0cm9rZVN0YXRlLmdldExpbmVKb2luKCk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0Lm1pdGVyTGltaXQgPSBzdHJva2VTdGF0ZS5nZXRNaXRlckxpbWl0KCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbGluZURhc2ggPSBzdHJva2VTdGF0ZS5nZXRMaW5lRGFzaCgpO1xyXG4gICAgICAgICAgICAgICAgbGluZURhc2ggPSBsaW5lRGFzaCA/IGxpbmVEYXNoLnNsaWNlKCkgOiAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5kZWZhdWx0TGluZURhc2g7XHJcbiAgICAgICAgICAgICAgICBpZiAoKDxhbnk+b2wuaGFzKS5DQU5WQVNfTElORV9EQVNIICYmIGxpbmVEYXNoLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc2V0TGluZURhc2goc3Ryb2tlU3RhdGUuZ2V0TGluZURhc2goKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lRGFzaE9mZnNldCA9ICg8YW55PnN0cm9rZVN0YXRlKS5nZXRMaW5lRGFzaE9mZnNldCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChmaWxsU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbFN0YXRlLmdldENvbG9yKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29udGV4dC50ZXh0QmFzZWxpbmUgPSBcIm1pZGRsZVwiO1xyXG4gICAgICAgICAgICBjb250ZXh0LnRleHRBbGlnbiA9IFwiY2VudGVyXCI7XHJcbiAgICAgICAgICAgIGxldCBhbGlnbiA9ICg8YW55Pm9sLnJlbmRlcikucmVwbGF5LlRFWFRfQUxJR05bdGhpcy50ZXh0U3R5bGUuZ2V0VGV4dEFsaWduKCkgfHwgKDxhbnk+b2wucmVuZGVyLmNhbnZhcykuZGVmYXVsdFRleHRBbGlnbl07XHJcbiAgICAgICAgICAgIGxldCBsZWZ0UmlnaHQgPSAoMC41IC0gYWxpZ24pO1xyXG4gICAgICAgICAgICBsZXQgeCA9IGFsaWduICogbGFiZWwud2lkdGggLyBsYWJlbEluZm8uc2NhbGUgKyBsZWZ0UmlnaHQgKiBzdHJva2VXaWR0aDtcclxuICAgICAgICAgICAgbGV0IGk7XHJcbiAgICAgICAgICAgIGlmIChzdHJva2VTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxhYmVsSW5mby5udW1MaW5lczsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VUZXh0KGxhYmVsSW5mby5saW5lc1tpXSwgeCArIGxlZnRSaWdodCAqIGxhYmVsSW5mby53aWR0aHNbaV0sIDAuNSAqIChzdHJva2VXaWR0aCArIGxhYmVsSW5mby5saW5lSGVpZ2h0KSArIGkgKiBsYWJlbEluZm8ubGluZUhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGZpbGxTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxhYmVsSW5mby5udW1MaW5lczsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsVGV4dChsYWJlbEluZm8ubGluZXNbaV0sIHggKyBsZWZ0UmlnaHQgKiBsYWJlbEluZm8ud2lkdGhzW2ldLCAwLjUgKiAoc3Ryb2tlV2lkdGggKyBsYWJlbEluZm8ubGluZUhlaWdodCkgKyBpICogbGFiZWxJbmZvLmxpbmVIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxhYmVsSW5mb1tcImxhYmVsXCJdID0gbGFiZWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBsYWJlbEluZm9bXCJsYWJlbFwiXTtcclxuICAgIH1cclxuXHJcbiAgICBmb3JtYXRUZXh0KGZlYXR1cmVUZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICh0aGlzLm51bWVyaWNGb3JtYXQpIHtcclxuICAgICAgICAgICAgZmVhdHVyZVRleHQgPSB0aGlzLmdldFRleHRXaXRoTnVtZXJpY0Zvcm1hdChmZWF0dXJlVGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmRhdGVGb3JtYXQpIHtcclxuICAgICAgICAgICAgZmVhdHVyZVRleHQgPSB0aGlzLmdldFRleHRXaXRoRGF0ZUZvcm1hdChmZWF0dXJlVGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnRleHRGb3JtYXQpIHtcclxuICAgICAgICAgICAgZmVhdHVyZVRleHQgPSB0aGlzLmdldFRleHRXaXRoRm9ybWF0KGZlYXR1cmVUZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZlYXR1cmVUZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRUZXh0V2l0aE51bWVyaWNGb3JtYXQoZmVhdHVyZVRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHRtcEFyZ3VtZW50cyA9IHRoaXMubnVtZXJpY0Zvcm1hdC5zcGxpdChcIixcIik7XHJcbiAgICAgICAgbGV0IG51bWVyaWNGb3JtYXRPcHRpb25zID0ge307XHJcbiAgICAgICAgZm9yIChsZXQgdG1wQXJndW1lbnQgb2YgdG1wQXJndW1lbnRzKSB7XHJcbiAgICAgICAgICAgIGxldCBrZXlWYWx1ZVBhaXIgPSB0bXBBcmd1bWVudC5zcGxpdChcIjpcIik7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoa2V5VmFsdWVQYWlyWzBdLnRyaW0oKSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImxvY2FsZU1hdGNoZXJcIjpcclxuICAgICAgICAgICAgICAgICAgICAoPGFueT5udW1lcmljRm9ybWF0T3B0aW9ucykubG9jYWxlTWF0Y2hlciA9IGtleVZhbHVlUGFpclsxXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwic3R5bGVcIjpcclxuICAgICAgICAgICAgICAgICAgICAoPGFueT5udW1lcmljRm9ybWF0T3B0aW9ucykuc3R5bGUgPSBrZXlWYWx1ZVBhaXJbMV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImN1cnJlbmN5XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgKDxhbnk+bnVtZXJpY0Zvcm1hdE9wdGlvbnMpLmN1cnJlbmN5ID0ga2V5VmFsdWVQYWlyWzFdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJjdXJyZW5jeURpc3BsYXlcIjpcclxuICAgICAgICAgICAgICAgICAgICAoPGFueT5udW1lcmljRm9ybWF0T3B0aW9ucykuY3VycmVuY3lEaXNwbGF5ID0ga2V5VmFsdWVQYWlyWzFdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJ1c2VHcm91cGluZ1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICg8YW55Pm51bWVyaWNGb3JtYXRPcHRpb25zKS51c2VHcm91cGluZyA9IGtleVZhbHVlUGFpclsxXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwibWluaW11bUludGVnZXJEaWdpdHNcIjpcclxuICAgICAgICAgICAgICAgICAgICAoPGFueT5udW1lcmljRm9ybWF0T3B0aW9ucykubWluaW11bUludGVnZXJEaWdpdHMgPSBrZXlWYWx1ZVBhaXJbMV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIm1pbmltdW1GcmFjdGlvbkRpZ2l0c1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICg8YW55Pm51bWVyaWNGb3JtYXRPcHRpb25zKS5taW5pbXVtRnJhY3Rpb25EaWdpdHMgPSBrZXlWYWx1ZVBhaXJbMV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIm1heGltdW1GcmFjdGlvbkRpZ2l0c1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICg8YW55Pm51bWVyaWNGb3JtYXRPcHRpb25zKS5tYXhpbXVtRnJhY3Rpb25EaWdpdHMgPSBrZXlWYWx1ZVBhaXJbMV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIm1pbmltdW1TaWduaWZpY2FudERpZ2l0c1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICg8YW55Pm51bWVyaWNGb3JtYXRPcHRpb25zKS5taW5pbXVtU2lnbmlmaWNhbnREaWdpdHMgPSBrZXlWYWx1ZVBhaXJbMV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIm1heGltdW1TaWduaWZpY2FudERpZ2l0c1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICg8YW55Pm51bWVyaWNGb3JtYXRPcHRpb25zKS5tYXhpbXVtU2lnbmlmaWNhbnREaWdpdHMgPSBrZXlWYWx1ZVBhaXJbMV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBudW1lcmljID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KHRtcEFyZ3VtZW50c1swXSwgbnVtZXJpY0Zvcm1hdE9wdGlvbnMpO1xyXG5cclxuICAgICAgICByZXR1cm4gbnVtZXJpYy5mb3JtYXQoTnVtYmVyKGZlYXR1cmVUZXh0KSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0VGV4dFdpdGhEYXRlRm9ybWF0KGZlYXR1cmVUZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiAoPGFueT4obmV3IERhdGUoZmVhdHVyZVRleHQpKSkuZm9ybWF0KHRoaXMuZGF0ZUZvcm1hdCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0VGV4dFdpdGhGb3JtYXQoZmVhdHVyZVRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICg8YW55PlN0cmluZykuZm9ybWF0KGZlYXR1cmVUZXh0LCB0aGlzLnRleHRGb3JtYXQpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBvaW50R2VvbWV0cnkoZmVhdHVyZTogb2wuRmVhdHVyZSkge1xyXG4gICAgICAgIHJldHVybiBmZWF0dXJlLmdldEdlb21ldHJ5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgd3JhcFRleHQodGV4dDogc3RyaW5nLCBmb250OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCByZXN1bHRUZXh0OiBzdHJpbmc7XHJcblxyXG4gICAgICAgIGlmICh0ZXh0ICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIGxldCBsaW5lcyA9IFt0ZXh0XTtcclxuICAgICAgICAgICAgbGV0IHdpZHRocyA9IFtdO1xyXG4gICAgICAgICAgICAvLyBsZXQgd2lkdGggPSAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5UZXh0UmVwbGF5Lm1lYXN1cmVUZXh0V2lkdGhzKGZvbnQsIGxpbmVzLCB3aWR0aHMpO1xyXG4gICAgICAgICAgICBsZXQgd2lkdGggPSB0aGlzLmdldEVzdGltYXRlZFdpZHRoKGZvbnQsIGxpbmVzLCB3aWR0aHMpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGxldCB3cmFwV2lkdGggPSB0aGlzLndyYXBXaWR0aDtcclxuICAgICAgICAgICAgbGV0IHdyYXBDaGFyYWN0ZXIgPSBcIiBcIjtcclxuICAgICAgICAgICAgbGV0IGlzV3JhcEJlZm9yZSA9IHRoaXMud3JhcDtcclxuXHJcbiAgICAgICAgICAgIGlmICh3cmFwV2lkdGggPiAwICYmIHdpZHRoID4gd3JhcFdpZHRoICYmIHRleHQuaW5jbHVkZXMod3JhcENoYXJhY3RlcikpIHtcclxuICAgICAgICAgICAgICAgIGxldCB0ZXh0TGluZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGxpbmVzID0gdGV4dC5zcGxpdCh3cmFwQ2hhcmFjdGVyKTtcclxuICAgICAgICAgICAgICAgIGxldCB3cmFwTGluZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGxldCB3cmFwV2lkdGhTdW0gPSAwO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRtcFdyYXBXaWR0aDogbnVtYmVyO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpc1dyYXBCZWZvcmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBsaW5lIG9mIGxpbmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBMaW5lID0gW2xpbmVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0bXBXcmFwV2lkdGggPSAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5UZXh0UmVwbGF5Lm1lYXN1cmVUZXh0V2lkdGhzKGZvbnQsIHRtcExpbmUsIHdpZHRocyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcFdyYXBXaWR0aCA9IHRoaXMuZ2V0RXN0aW1hdGVkV2lkdGgoZm9udCwgdG1wTGluZSwgd2lkdGhzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBXaWR0aFN1bSArPSB0bXBXcmFwV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0bXBXcmFwV2lkdGggPiB3cmFwV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBMaW5lcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dExpbmVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cmFwV2lkdGhTdW0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3cmFwTGluZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdyYXBXaWR0aFN1bSA+IHdyYXBXaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBMaW5lcy5wdXNoKFwiXFxuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRMaW5lcy5wdXNoKHdyYXBMaW5lcy5qb2luKFwiXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cmFwTGluZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cmFwV2lkdGhTdW0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3cmFwTGluZXMucHVzaChcIiBcIiArIGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdyYXBMaW5lcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRMaW5lcy5wdXNoKHdyYXBMaW5lcy5qb2luKFwiXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGxpbmUgb2YgbGluZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd3JhcExpbmVzLnB1c2goXCIgXCIgKyBsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRtcExpbmUgPSBbbGluZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRtcFdyYXBXaWR0aCA9ICg8YW55Pm9sLnJlbmRlci5jYW52YXMpLlRleHRSZXBsYXkubWVhc3VyZVRleHRXaWR0aHMoZm9udCwgdG1wTGluZSwgd2lkdGhzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wV3JhcFdpZHRoID0gdGhpcy5nZXRFc3RpbWF0ZWRXaWR0aChmb250LCB0bXBMaW5lLCB3aWR0aHMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgd3JhcFdpZHRoU3VtICs9IHRtcFdyYXBXaWR0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3cmFwV2lkdGhTdW0gPiB3cmFwV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBMaW5lcy5wdXNoKFwiXFxuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dExpbmVzLnB1c2god3JhcExpbmVzLmpvaW4oXCJcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JhcExpbmVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cmFwV2lkdGhTdW0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAod3JhcExpbmVzLmxlbmd0aCA+IDApIHsgdGV4dExpbmVzLnB1c2god3JhcExpbmVzLmpvaW4oXCJcIikpOyB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmVzdWx0VGV4dCA9IHRleHRMaW5lcy5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdFRleHQubGFzdEluZGV4T2YoXCJcXG5cIikgPT09IHJlc3VsdFRleHQubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFRleHQgPSByZXN1bHRUZXh0LnN1YnN0cigwLCByZXN1bHRUZXh0Lmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0VGV4dCA9IHRleHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHRUZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIGZvcm1hdEZvbnQoZm9udDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgdG1wRm9udHMgPSBmb250LnNwbGl0KFwiIFwiKTtcclxuICAgICAgICBsZXQgZm9ybWF0ZWRGb250OiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICBpZiAodG1wRm9udHNbdG1wRm9udHMubGVuZ3RoIC0gMV0uaW5jbHVkZXMoXCJib2xkXCIpIHx8IHRtcEZvbnRzW3RtcEZvbnRzLmxlbmd0aCAtIDFdLmluY2x1ZGVzKFwiaXRhbGljXCIpKSB7XHJcbiAgICAgICAgICAgIGZvcm1hdGVkRm9udC5wdXNoKGAke3RtcEZvbnRzW3RtcEZvbnRzLmxlbmd0aCAtIDFdfSBgKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0bXBGb250cy5sZW5ndGggLSAxOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGZvcm1hdGVkRm9udC5wdXNoKGAke3RtcEZvbnRzW2ldfSBgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmb250O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZm9ybWF0ZWRGb250LmpvaW4oXCJcIikudHJpbSgpO1xyXG4gICAgfVxyXG5cclxuICAgIEJBVENIX0NPTlNUUlVDVE9SU19ERUZBVUxUID0ge1xyXG4gICAgICAgIFBvaW50OiBUZXh0TGFiZWxpbmdTdHJhdGVneSxcclxuICAgICAgICBNdWx0aVBvaW50OiBUZXh0TGFiZWxpbmdTdHJhdGVneSxcclxuICAgICAgICBMaW5lU3RyaW5nOiBUZXh0TGFiZWxpbmdTdHJhdGVneSxcclxuICAgICAgICBDaXJjbGU6IFRleHRMYWJlbGluZ1N0cmF0ZWd5LFxyXG4gICAgICAgIE11bHRpTGluZVN0cmluZzogVGV4dExhYmVsaW5nU3RyYXRlZ3ksXHJcbiAgICAgICAgUG9seWdvbjogVGV4dExhYmVsaW5nU3RyYXRlZ3ksXHJcbiAgICAgICAgTXVsdGlQb2x5Z29uOiBUZXh0TGFiZWxpbmdTdHJhdGVneVxyXG4gICAgfTtcclxuXHJcbiAgICBCQVRDSF9DT05TVFJVQ1RPUlNfREVURUNUID0ge1xyXG4gICAgICAgIFBvaW50OiBEZXRlY3RUZXh0TGFiZWxpbmdTdHJhdGVneSxcclxuICAgICAgICBNdWx0aVBvaW50OiBEZXRlY3RUZXh0TGFiZWxpbmdTdHJhdGVneSxcclxuICAgICAgICBMaW5lU3RyaW5nOiBEZXRlY3RUZXh0TGFiZWxpbmdTdHJhdGVneSxcclxuICAgICAgICBDaXJjbGU6IERldGVjdFRleHRMYWJlbGluZ1N0cmF0ZWd5LFxyXG4gICAgICAgIE11bHRpTGluZVN0cmluZzogRGV0ZWN0VGV4dExhYmVsaW5nU3RyYXRlZ3ksXHJcbiAgICAgICAgUG9seWdvbjogRGV0ZWN0VGV4dExhYmVsaW5nU3RyYXRlZ3ksXHJcbiAgICAgICAgTXVsdGlQb2x5Z29uOiBEZXRlY3RUZXh0TGFiZWxpbmdTdHJhdGVneVxyXG4gICAgfTtcclxufSIsImV4cG9ydCBjbGFzcyBHZW9TdHlsZSB7XHJcbiAgICBwdWJsaWMgaWQ6IHN0cmluZztcclxuICAgIHB1YmxpYyB1aWQ6YW55O1xyXG4gICAgcHVibGljIHZpc2libGU6IHRydWU7XHJcbiAgICBwdWJsaWMgc3R5bGVzOiBhbnlbXTtcclxuXHJcbiAgICBwdWJsaWMgaW5pdGlhbGl6ZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3Ioc3R5bGVKc29uPzogb2JqZWN0KSB7XHJcbiAgICAgICAgdGhpcy5zdHlsZXMgPSBbXTtcclxuICAgICAgICBpZiAoc3R5bGVKc29uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaWQgPSBzdHlsZUpzb25bXCJpZFwiXTtcclxuICAgICAgICAgICAgdGhpcy51aWQ9ICg8YW55Pm9sKS5nZXRVaWQodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMudmlzaWJsZSA9IHN0eWxlSnNvbltcInZpc2libGVcIl0gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBzdHlsZUpzb25bXCJ2aXNpYmxlXCJdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbml0aWFsaXplKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxpemVDb3JlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbml0aWFsaXplQ29yZSgpIHtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTdHlsZXMoZmVhdHVyZTogb2wuRmVhdHVyZSwgcmVzb2x1dGlvbjogbnVtYmVyLCBvcHRpb25zOiBhbnkpOiBvbC5zdHlsZS5TdHlsZVtdIHtcclxuICAgICAgICBsZXQgcmVzdWx0cyA9IFtdO1xyXG4gICAgICAgIGlmICh0aGlzLnZpc2libGUpIHtcclxuICAgICAgICAgICAgcmVzdWx0cyA9IHRoaXMuZ2V0Q29udmVydGVkU3R5bGUoZmVhdHVyZSwgcmVzb2x1dGlvbiwgb3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHRzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENvbnZlcnRlZFN0eWxlKGZlYXR1cmU6IG9sLkZlYXR1cmUsIHJlc29sdXRpb246IG51bWJlciwgb3B0aW9uczogYW55KTogb2wuc3R5bGUuU3R5bGVbXSB7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsaXplKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29udmVydGVkU3R5bGVDb3JlKGZlYXR1cmUsIHJlc29sdXRpb24sIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENvbnZlcnRlZFN0eWxlQ29yZShmZWF0dXJlOiBvbC5GZWF0dXJlLCByZXNvbHV0aW9uOiBudW1iZXIsIG9wdGlvbnM6IGFueSk6IG9sLnN0eWxlLlN0eWxlW10ge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICBza2V3R2VvbWV0cnkoZ2VvbWV0cnk6IGFueSwgeERlZzogbnVtYmVyLCB5RGVnOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgY2VudGVyID0gb2wuZXh0ZW50LmdldENlbnRlcihnZW9tZXRyeS5nZXRFeHRlbnQoKSk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ2VvbWV0cnkuZmxhdENvb3JkaW5hdGVzLmxlbmd0aDsgaSArPSAyKSB7XHJcbiAgICAgICAgICAgIGxldCB4ID0gZ2VvbWV0cnkuZmxhdENvb3JkaW5hdGVzW2ldO1xyXG4gICAgICAgICAgICBsZXQgeSA9IGdlb21ldHJ5LmZsYXRDb29yZGluYXRlc1tpICsgMV07XHJcbiAgICAgICAgICAgIGxldCByeCA9IHRoaXMuc2tld1goeCwgeSwgY2VudGVyWzBdLCBjZW50ZXJbMV0sIHhEZWcpO1xyXG4gICAgICAgICAgICBsZXQgcnkgPSB0aGlzLnNrZXdZKHgsIHksIGNlbnRlclswXSwgY2VudGVyWzFdLCB5RGVnKTtcclxuICAgICAgICAgICAgZ2VvbWV0cnkuZmxhdENvb3JkaW5hdGVzW2ldID0gcng7XHJcbiAgICAgICAgICAgIGdlb21ldHJ5LmZsYXRDb29yZGluYXRlc1tpICsgMV0gPSByeTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2tld1goeDogbnVtYmVyLCB5OiBudW1iZXIsIGN4OiBudW1iZXIsIGN5OiBudW1iZXIsIHhEZWc6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IHJ4ID0geDtcclxuXHJcbiAgICAgICAgaWYgKHhEZWcgIT09IDApIHtcclxuICAgICAgICAgICAgbGV0IHhSZXNvbHV0aW9uID0gTWF0aC50YW4oMS4wICogeERlZyAqIE1hdGguUEkgLyAxODApO1xyXG4gICAgICAgICAgICBsZXQgZGlzdGFuY2U7XHJcblxyXG4gICAgICAgICAgICBpZiAoeCA+IGN4KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeSA+IGN5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSB4UmVzb2x1dGlvbiAqIE1hdGguYWJzKHkgLSBjeSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gMCAtIHhSZXNvbHV0aW9uICogTWF0aC5hYnMoeSAtIGN5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh5ID4gY3kpIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IHhSZXNvbHV0aW9uICogTWF0aC5hYnMoeSAtIGN5KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSAwIC0geFJlc29sdXRpb24gKiBNYXRoLmFicyh5IC0gY3kpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByeCArPSBNYXRoLnJvdW5kKGRpc3RhbmNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByeDtcclxuICAgIH1cclxuXHJcbiAgICBza2V3WSh4OiBudW1iZXIsIHk6IG51bWJlciwgY3g6IG51bWJlciwgY3k6IG51bWJlciwgeURlZzogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBsZXQgcnkgPSB5O1xyXG5cclxuICAgICAgICBpZiAoeURlZyAhPT0gMCkge1xyXG4gICAgICAgICAgICBsZXQgeVJlc29sdXRpb24gPSBNYXRoLnRhbigxLjAgKiB5RGVnICogTWF0aC5QSSAvIDE4MCk7XHJcbiAgICAgICAgICAgIGxldCBkaXN0YW5jZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh5ID4gY3kpIHtcclxuICAgICAgICAgICAgICAgIGlmICh4ID4gY3gpIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IHlSZXNvbHV0aW9uICogTWF0aC5hYnMoeCAtIGN4KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSAwIC0geVJlc29sdXRpb24gKiBNYXRoLmFicyh4IC0gY3gpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHggPiBjeCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlID0geVJlc29sdXRpb24gKiBNYXRoLmFicyh4IC0gY3gpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IDAgLSB5UmVzb2x1dGlvbiAqIE1hdGguYWJzKHggLSBjeCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJ5ICs9IE1hdGgucm91bmQoZGlzdGFuY2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJ5O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0b1JHQkFDb2xvcihjb2xvciwgb3BhY2l0eSA9IDEpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmIChjb2xvci5pbmRleE9mKFwiI1wiKSA9PT0gMCkge1xyXG4gICAgICAgICAgICBsZXQgYXJyYXk6IG51bWJlcltdO1xyXG4gICAgICAgICAgICBsZXQgcjogbnVtYmVyO1xyXG4gICAgICAgICAgICBsZXQgZzogbnVtYmVyO1xyXG4gICAgICAgICAgICBsZXQgYjogbnVtYmVyO1xyXG4gICAgICAgICAgICBsZXQgYTogbnVtYmVyO1xyXG4gICAgICAgICAgICBpZiAoY29sb3IubGVuZ3RoID09PSA0KSB7XHJcbiAgICAgICAgICAgICAgICByID0gKyhcIjB4XCIgKyBjb2xvci5zdWJzdHIoMSwgMSkgKyBjb2xvci5zdWJzdHIoMSwgMSkpO1xyXG4gICAgICAgICAgICAgICAgZyA9ICsoXCIweFwiICsgY29sb3Iuc3Vic3RyKDIsIDEpICsgY29sb3Iuc3Vic3RyKDIsIDEpKTtcclxuICAgICAgICAgICAgICAgIGIgPSArKFwiMHhcIiArIGNvbG9yLnN1YnN0cigzLCAxKSArIGNvbG9yLnN1YnN0cigzLCAxKSk7XHJcbiAgICAgICAgICAgICAgICBhID0gb3BhY2l0eTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHIgPSArKFwiMHhcIiArIGNvbG9yLnN1YnN0cigxLCAyKSk7XHJcbiAgICAgICAgICAgICAgICBnID0gKyhcIjB4XCIgKyBjb2xvci5zdWJzdHIoMywgMikpO1xyXG4gICAgICAgICAgICAgICAgYiA9ICsoXCIweFwiICsgY29sb3Iuc3Vic3RyKDUsIDIpKTtcclxuICAgICAgICAgICAgICAgIGEgPSBvcGFjaXR5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFycmF5ID0gW3IsIGcsIGIsIGFdO1xyXG4gICAgICAgICAgICBpZiAoIWlzTmFOKHIpICYmICFpc05hTihnKSAmJiAhaXNOYU4oYikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcInJnYmEoXCIgKyBhcnJheS5qb2luKFwiLFwiKSArIFwiKVwiO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwicmdiYSgwLDAsMCwwKVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb2xvci5pbmRleE9mKFwicmdiKFwiKSA9PT0gMCkge1xyXG4gICAgICAgICAgICBjb2xvciA9IGNvbG9yLnJlcGxhY2UoXCJyZ2IoXCIsIFwicmdiYShcIik7XHJcbiAgICAgICAgICAgIGNvbG9yID0gY29sb3Iuc3Vic3RyaW5nKDAsIGNvbG9yLmxlbmd0aCAtIDEpICsgXCIsXCIgKyBvcGFjaXR5ICsgXCIpXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb2xvci5pbmRleE9mKFwiYXJnYihcIikgPT09IDApIHtcclxuICAgICAgICAgICAgY29sb3IgPSBjb2xvci5yZXBsYWNlKFwiYXJnYihcIiwgXCJcIikucmVwbGFjZShcIilcIiwgXCJcIik7XHJcbiAgICAgICAgICAgIGxldCBhcnJheSA9IGNvbG9yLnNwbGl0KFwiLFwiKTtcclxuICAgICAgICAgICAgbGV0IGEgPSBhcnJheS5zaGlmdCgpO1xyXG4gICAgICAgICAgICBhcnJheS5wdXNoKGEpO1xyXG4gICAgICAgICAgICBjb2xvciA9IFwicmdiYShcIiArIGFycmF5LmpvaW4oXCIsXCIpICsgXCIpXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHRvT0xMaW5lYXJHcmFkaWVudChjb2xvciwgb3BhY2l0eSA9IDEsIHNpemUpIHtcclxuICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcclxuICAgICAgICBsZXQgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgY29udGV4dC5yZWN0KDAsIDAsIHNpemUsIHNpemUpO1xyXG5cclxuICAgICAgICBsZXQgZ3JkID0gY29udGV4dC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCBzaXplLCBzaXplKTtcclxuICAgICAgICBsZXQgY29sb3JTdG9wcyA9IGNvbG9yLnNwbGl0KFwiLFwiKTtcclxuICAgICAgICBmb3IgKGxldCBjb2xvclN0b3Agb2YgY29sb3JTdG9wcykge1xyXG4gICAgICAgICAgICBjb2xvclN0b3AgPSBjb2xvclN0b3AudHJpbSgpO1xyXG4gICAgICAgICAgICBsZXQgdG1wQ29sb3JTdG9wID0gY29sb3JTdG9wLnN1YnN0cigxLCBjb2xvclN0b3AubGVuZ3RoIC0gMik7XHJcbiAgICAgICAgICAgIGxldCBjcyA9IHRtcENvbG9yU3RvcC5zcGxpdChcIjpcIik7XHJcbiAgICAgICAgICAgIGdyZC5hZGRDb2xvclN0b3AoTnVtYmVyKGNzWzBdLnRyaW0oKSksIHRoaXMudG9SR0JBQ29sb3IoY3NbMV0udHJpbSgpLCBvcGFjaXR5KSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZ3JkO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0b09MUmFkaWFsR3JhZGllbnQoY29sb3IsIG9wYWNpdHkgPSAxLCBzaXplKSB7XHJcbiAgICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgbGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIGNvbnRleHQucmVjdCgwLCAwLCBzaXplLCBzaXplKTtcclxuXHJcbiAgICAgICAgbGV0IGdyZCA9IGNvbnRleHQuY3JlYXRlUmFkaWFsR3JhZGllbnQoc2l6ZSAvIDIsIHNpemUgLyAyLCAwLCBzaXplIC8gMiwgc2l6ZSAvIDIsIHNpemUgLyAyKTtcclxuICAgICAgICBsZXQgY29sb3JTdG9wcyA9IGNvbG9yLnNwbGl0KFwiLFwiKTtcclxuICAgICAgICBmb3IgKGxldCBjb2xvclN0b3Agb2YgY29sb3JTdG9wcykge1xyXG4gICAgICAgICAgICBjb2xvclN0b3AgPSBjb2xvclN0b3AudHJpbSgpO1xyXG4gICAgICAgICAgICBsZXQgdG1wQ29sb3JTdG9wID0gY29sb3JTdG9wLnN1YnN0cigxLCBjb2xvclN0b3AubGVuZ3RoIC0gMik7XHJcbiAgICAgICAgICAgIGxldCBjcyA9IHRtcENvbG9yU3RvcC5zcGxpdChcIjpcIik7XHJcbiAgICAgICAgICAgIGdyZC5hZGRDb2xvclN0b3AoTnVtYmVyKGNzWzBdLnRyaW0oKSksIHRoaXMudG9SR0JBQ29sb3IoY3NbMV0udHJpbSgpLCBvcGFjaXR5KSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZ3JkO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEdlb0ZpbHRlckl0ZW0gfSBmcm9tIFwiLi4vZmlsdGVyL2dlb0ZpbHRlckl0ZW1cIjtcclxuaW1wb3J0IHsgR2VvWm9vbUZpbHRlciB9IGZyb20gXCIuLi9maWx0ZXIvZ2VvWm9vbUZpbHRlclwiO1xyXG5pbXBvcnQgeyBHZW9TdHJpbmdBdHRyaWJ1dGVGaWx0ZXIgfSBmcm9tIFwiLi4vZmlsdGVyL2dlb1N0cmluZ0F0dHJpYnV0ZUZpbHRlclwiO1xyXG5pbXBvcnQgeyBHZW9SZWdleEZpbHRlciB9IGZyb20gXCIuLi9maWx0ZXIvZ2VvUmVnZXhGaWx0ZXJcIjtcclxuaW1wb3J0IHsgR2VvTnVtYmVyQXR0cmlidXRlRmlsdGVyIH0gZnJvbSBcIi4uL2ZpbHRlci9nZW9OdW1iZXJBdHRyaWJ1dGVGaWx0ZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBHZW9TdHlsZVByb3BlcnR5IHtcclxuICAgIHB1YmxpYyBzdHlsZUpzb25WYWx1ZTogYW55O1xyXG4gICAgcHVibGljIGRlZmF1bHRWYWx1ZTogYW55O1xyXG5cclxuICAgIHB1YmxpYyB2YWx1ZTogYW55O1xyXG4gICAgcHVibGljIGNvbmRpdGlvbnM6IGFueTtcclxuICAgIHB1YmxpYyB2YWx1ZXM6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzdHlsZUpzb25WYWx1ZSwgZGVmYXVsdFZhbHVlPykge1xyXG4gICAgICAgIHRoaXMuc3R5bGVKc29uVmFsdWUgPSBzdHlsZUpzb25WYWx1ZTtcclxuICAgICAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaW5pdGlhbGl6ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5zdHlsZUpzb25WYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5zdHlsZUpzb25WYWx1ZSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb25kaXRpb25zID0gW107XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgbmFtZSBpbiB0aGlzLnN0eWxlSnNvblZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbHRlcnMgPSB0aGlzLmNyZWF0ZUZpbHRlcihuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmRpdGlvbnMucHVzaChmaWx0ZXJzKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlcy5wdXNoKHRoaXMuaW5pdGlhbGl6ZVZhbHVlKHRoaXMuc3R5bGVKc29uVmFsdWVbbmFtZV0pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5pbml0aWFsaXplVmFsdWUodGhpcy5kZWZhdWx0VmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpbml0aWFsaXplVmFsdWUodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzQ29uZGl0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvbnMgJiYgdGhpcy5jb25kaXRpb25zLmxlbmd0aCA+IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFZhbHVlKGNvbHVtblZhbHVlPykge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbmRpdGlvbnMgJiYgdGhpcy5jb25kaXRpb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgaWYgKGNvbHVtblZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWF0Y2hlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuY29uZGl0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWx0ZXJHcm91cCA9IHRoaXMuY29uZGl0aW9uc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGZpbHRlckdyb3VwLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaWx0ZXJzID0gZmlsdGVyR3JvdXBbal07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBncm91cE1hdGNoZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGZpbHRlcnMubGVuZ3RoOyBrKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaWx0ZXIgPSBmaWx0ZXJzW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJhd0ZlYXR1cmUgPSB7IHByb3BlcnRpZXM6IGNvbHVtblZhbHVlIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbHRlci5tYXRjaE9MRmVhdHVyZShyYXdGZWF0dXJlLCAwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwTWF0Y2hlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChncm91cE1hdGNoZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY3JlYXRlRmlsdGVyKGZpbHRlclN0cmluZykge1xyXG4gICAgICAgIGxldCBmaWx0ZXJHcm91cCA9IFtdO1xyXG4gICAgICAgIGlmIChmaWx0ZXJTdHJpbmcpIHtcclxuICAgICAgICAgICAgbGV0IGZpbHRlclN0cmluZ3MgPSBmaWx0ZXJTdHJpbmcuc3BsaXQoXCJ8XCIpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbHRlclN0cmluZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBmaWx0ZXJTdHIgPSBmaWx0ZXJTdHJpbmdzW2ldO1xyXG4gICAgICAgICAgICAgICAgbGV0IGV4cHJlc3Npb24gPSBcIihcXFxcdys/PX4nLis/Jyl8KFxcXFx3Kz9bPD4hPV0qJ1teO10rPycpfChcXFxcdys/Wzw+IT1dKlteO10rKVwiO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChleHByZXNzaW9uLCBcImdcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0cyA9IGZpbHRlclN0ci5tYXRjaChyZWdleCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmFuZ2VGaWx0ZXJzID0ge307XHJcbiAgICAgICAgICAgICAgICBsZXQgZmlsdGVycyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBnZW9ab29tRmlsdGVyOiBHZW9ab29tRmlsdGVyO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaWx0ZXJJdGVtID0gR2VvRmlsdGVySXRlbS5jcmVhdGVGaWx0ZXJJdGVtKHJlc3VsdHNbaV0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlckl0ZW0udmFsdWUuaW5kZXhPZihcIn4nXCIpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2gobmV3IEdlb1JlZ2V4RmlsdGVyKFtmaWx0ZXJJdGVtXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZpbHRlckl0ZW0ua2V5ID09PSBcInpvb21cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdlb1pvb21GaWx0ZXIgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb1pvb21GaWx0ZXIgPSBuZXcgR2VvWm9vbUZpbHRlcihbXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9ab29tRmlsdGVyLmFkZEZpbHRlckl0ZW0oZmlsdGVySXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsdGVySXRlbS52YWx1ZS5pbmNsdWRlcyhcIidcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnMucHVzaChuZXcgR2VvU3RyaW5nQXR0cmlidXRlRmlsdGVyKFtmaWx0ZXJJdGVtXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VGaWx0ZXJzW2ZpbHRlckl0ZW0ua2V5XSA9IHJhbmdlRmlsdGVyc1tmaWx0ZXJJdGVtLmtleV0gfHwgbmV3IEdlb051bWJlckF0dHJpYnV0ZUZpbHRlcihbXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZUZpbHRlcnNbZmlsdGVySXRlbS5rZXldLmFkZEZpbHRlckl0ZW0oZmlsdGVySXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBuYW1lIGluIHJhbmdlRmlsdGVycykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcnMucHVzaChyYW5nZUZpbHRlcnNbbmFtZV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZmlsdGVyR3JvdXAucHVzaChmaWx0ZXJzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmlsdGVyR3JvdXA7XHJcbiAgICB9XHJcbn1cclxuIiwiXHJcbmltcG9ydCB7IEdlb1N0eWxlIH0gZnJvbSBcIi4vZ2VvU3R5bGVcIjtcclxuaW1wb3J0IHsgR2VvU3R5bGVQcm9wZXJ0eSB9IGZyb20gXCIuL2dlb1N0eWxlUHJvcGVydHlcIjtcclxuaW1wb3J0IHsgR2VvQnJ1c2ggfSBmcm9tIFwiLi4vc3R5bGUvZ2VvQnJ1c2hcIjtcclxuaW1wb3J0IHsgVGV4dExhYmVsaW5nU3RyYXRlZ3kgfSBmcm9tIFwiLi90ZXh0TGFiZWxpbmdTdHJhdGVneVwiO1xyXG5pbXBvcnQgeyBEZXRlY3RUZXh0TGFiZWxpbmdTdHJhdGVneSB9IGZyb20gXCIuL2RldGVjdFRleHRMYWJlbGluZ1N0cmF0ZWd5XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgR2VvVGV4dFN0eWxlIGV4dGVuZHMgR2VvU3R5bGUge1xyXG4gICAgc3RhdGljIHBsYWNlbWVudHNOYW1lID0gXCJ0ZXh0LXBsYWNlbWVudHNcIjtcclxuXHJcbiAgICB0ZXh0QWxpZ25zID0gW1wibGVmdFwiLCBcInJpZ2h0XCIsIFwiY2VudGVyXCIsIFwiZW5kXCIsIFwic3RhcnRcIl07XHJcbiAgICB0ZXh0QmFzZWxpbmUgPSBbXCJib3R0b21cIiwgXCJ0b3BcIiwgXCJtaWRkbGVcIiwgXCJhbHBoYWJldGljXCIsIFwiaGFuZ2luZ1wiLCBcImlkZW9ncmFwaGljXCJdO1xyXG4gICAgdGV4dFRyYW5zZm9ybXMgPSBbXCJkZWZhdWx0XCIsIFwidXBwZXJjYXNlXCIsIFwibG93ZXJjYXNlXCJdO1xyXG5cclxuICAgIHByb3BlcnR5UGxhY2VtZW50czogR2VvU3R5bGVQcm9wZXJ0eTtcclxuXHJcbiAgICBhbGlnbjogc3RyaW5nO1xyXG4gICAgYmFzZWxpbmU6IHN0cmluZztcclxuICAgIGF2b2lkRWRnZTogYm9vbGVhbjtcclxuICAgIGRhdGVGb3JtYXQ6IHN0cmluZztcclxuICAgIGR4OiBudW1iZXI7XHJcbiAgICBkeTogbnVtYmVyO1xyXG4gICAgZm9udDogc3RyaW5nO1xyXG4gICAgZmlsbDogc3RyaW5nO1xyXG4gICAgZm9yY2VIb3Jpem9udGFsRm9yTGluZTogYm9vbGVhbjtcclxuICAgIGhhbG9GaWxsOiBzdHJpbmc7XHJcbiAgICBoYWxvUmFkaXVzOiBudW1iZXI7XHJcbiAgICBtYXJnaW46IG51bWJlcjtcclxuICAgIG1hc2tDb2xvcjogc3RyaW5nO1xyXG4gICAgbWFza01hcmdpbjogc3RyaW5nO1xyXG4gICAgbWFza091dGxpbmVDb2xvcjogc3RyaW5nO1xyXG4gICAgbWFza091dGxpbmVXaWR0aDogbnVtYmVyO1xyXG4gICAgbWFza1R5cGU6IHN0cmluZztcclxuICAgIG1heENoYXJBbmdsZTogbnVtYmVyO1xyXG4gICAgbWluRGlzdGFuY2U6IG51bWJlcjtcclxuICAgIG1pblBhZGRpbmc6IG51bWJlcjtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIG51bWVyaWNGb3JtYXQ6IHN0cmluZztcclxuICAgIG9wYWNpdHk6IG51bWJlcjtcclxuICAgIHJvdGF0ZUFuZ2xlOiBudW1iZXI7XHJcbiAgICBwbGFjZW1lbnRzOiBzdHJpbmc7XHJcbiAgICBwbGFjZW1lbnRUeXBlOiBzdHJpbmc7XHJcbiAgICBwb2x5Z29uTGFiZWxpbmdMb2NhdGlvbjogc3RyaW5nO1xyXG4gICAgc3BhY2luZzogbnVtYmVyO1xyXG4gICAgc3BsaW5lVHlwZTogc3RyaW5nO1xyXG4gICAgdGV4dEZvcm1hdDogc3RyaW5nO1xyXG4gICAgd3JhcEJlZm9yZTogc3RyaW5nO1xyXG4gICAgd3JhcFdpZHRoOiBudW1iZXI7XHJcbiAgICB0ZXh0VHJhbnNmb3JtOiBzdHJpbmc7XHJcbiAgICBsZXR0ZXJTcGFjaW5nOiBudW1iZXI7XHJcblxyXG4gICAgbGFiZWxJbmZvczogYW55O1xyXG4gICAgZHJhd25NYXNrOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgY2hhcldpZHRoczogYW55O1xyXG5cclxuICAgIGZpbGxDb2xvcjogYW55O1xyXG4gICAgaGFsb0ZpbGxDb2xvcjogYW55O1xyXG5cclxuICAgIHN0eWxlOiBvbC5zdHlsZS5TdHlsZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzdHlsZUpzb24/OiBhbnkpIHtcclxuICAgICAgICBzdXBlcihzdHlsZUpzb24pO1xyXG4gICAgICAgIHRoaXMubGFiZWxJbmZvcyA9IG5ldyAoPGFueT5vbCkuc3RydWN0cy5MUlVDYWNoZSg1MTIpO1xyXG4gICAgICAgIHRoaXMuY2hhcldpZHRocyA9IHt9O1xyXG5cclxuICAgICAgICBpZiAoc3R5bGVKc29uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWxpZ24gPSBzdHlsZUpzb25bXCJ0ZXh0LWFsaWduXCJdO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2VsaW5lID0gc3R5bGVKc29uW1widGV4dC1iYXNlLWxpbmVcIl07XHJcbiAgICAgICAgICAgIHRoaXMuZHggPSBzdHlsZUpzb25bXCJ0ZXh0LWR4XCJdO1xyXG4gICAgICAgICAgICB0aGlzLmR5ID0gc3R5bGVKc29uW1widGV4dC1keVwiXTtcclxuICAgICAgICAgICAgdGhpcy5mb250ID0gc3R5bGVKc29uW1widGV4dC1mb250XCJdO1xyXG4gICAgICAgICAgICB0aGlzLmZpbGwgPSBzdHlsZUpzb25bXCJ0ZXh0LWZpbGxcIl07XHJcbiAgICAgICAgICAgIHRoaXMuZm9yY2VIb3Jpem9udGFsRm9yTGluZSA9IHN0eWxlSnNvbltcInRleHQtZm9yY2UtaG9yaXpvbnRhbC1mb3ItbGluZVwiXTtcclxuICAgICAgICAgICAgdGhpcy5oYWxvRmlsbCA9IHN0eWxlSnNvbltcInRleHQtaGFsby1maWxsXCJdO1xyXG4gICAgICAgICAgICB0aGlzLmhhbG9SYWRpdXMgPSBzdHlsZUpzb25bXCJ0ZXh0LWhhbG8tcmFkaXVzXCJdO1xyXG4gICAgICAgICAgICB0aGlzLm1hcmdpbiA9IHN0eWxlSnNvbltcInRleHQtbWFyZ2luXCJdO1xyXG4gICAgICAgICAgICB0aGlzLm1hc2tDb2xvciA9IHN0eWxlSnNvbltcInRleHQtbWFzay1jb2xvclwiXTtcclxuICAgICAgICAgICAgdGhpcy5tYXNrTWFyZ2luID0gc3R5bGVKc29uW1widGV4dC1tYXNrLW1hcmdpblwiXTtcclxuICAgICAgICAgICAgdGhpcy5tYXNrT3V0bGluZUNvbG9yID0gc3R5bGVKc29uW1widGV4dC1tYXNrLW91dGxpbmUtY29sb3JcIl07XHJcbiAgICAgICAgICAgIHRoaXMubWFza091dGxpbmVXaWR0aCA9IHN0eWxlSnNvbltcInRleHQtbWFzay1vdXRsaW5lLXdpZHRoXCJdO1xyXG4gICAgICAgICAgICB0aGlzLm1hc2tUeXBlID0gc3R5bGVKc29uW1widGV4dC1tYXNrLXR5cGVcIl07XHJcbiAgICAgICAgICAgIHRoaXMubWF4Q2hhckFuZ2xlID0gc3R5bGVKc29uW1widGV4dC1tYXgtY2hhci1hbmdsZVwiXTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubWluRGlzdGFuY2UgPSBzdHlsZUpzb25bXCJ0ZXh0LW1pbi1kaXN0YW5jZVwiXTtcclxuICAgICAgICAgICAgdGhpcy5taW5QYWRkaW5nID0gc3R5bGVKc29uW1widGV4dC1taW4tcGFkZGluZ1wiXTtcclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gc3R5bGVKc29uW1widGV4dC1uYW1lXCJdO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vcGFjaXR5ID0gc3R5bGVKc29uW1widGV4dC1vcGFjaXR5XCJdO1xyXG4gICAgICAgICAgICB0aGlzLnJvdGF0ZUFuZ2xlID0gc3R5bGVKc29uW1widGV4dC1yb3RhdGUtYW5nbGVcIl07XHJcbiAgICAgICAgICAgIHRoaXMucHJvcGVydHlQbGFjZW1lbnRzID0gbmV3IEdlb1N0eWxlUHJvcGVydHkoc3R5bGVKc29uW0dlb1RleHRTdHlsZS5wbGFjZW1lbnRzTmFtZV0sIFwiVSxCLEwsUlwiKTtcclxuICAgICAgICAgICAgdGhpcy5wbGFjZW1lbnRUeXBlID0gc3R5bGVKc29uW1widGV4dC1wbGFjZW1lbnQtdHlwZVwiXSA/IHN0eWxlSnNvbltcInRleHQtcGxhY2VtZW50LXR5cGVcIl0gOiBcImRlZmF1bHRcIjtcclxuICAgICAgICAgICAgdGhpcy5zcGFjaW5nID0gc3R5bGVKc29uW1widGV4dC1zcGFjaW5nXCJdICE9PSB1bmRlZmluZWQgPyBzdHlsZUpzb25bXCJ0ZXh0LXNwYWNpbmdcIl0gOiAxMDtcclxuICAgICAgICAgICAgdGhpcy53cmFwQmVmb3JlID0gc3R5bGVKc29uW1widGV4dC13cmFwLWJlZm9yZVwiXSA/IHRydWUgOiBzdHlsZUpzb25bXCJ0ZXh0LXdyYXAtYmVmb3JlXCJdO1xyXG4gICAgICAgICAgICB0aGlzLndyYXBXaWR0aCA9IHN0eWxlSnNvbltcInRleHQtd3JhcC13aWR0aFwiXTtcclxuICAgICAgICAgICAgdGhpcy50ZXh0Rm9ybWF0ID0gc3R5bGVKc29uW1widGV4dC10ZXh0LWZvcm1hdFwiXTtcclxuICAgICAgICAgICAgdGhpcy5kYXRlRm9ybWF0ID0gc3R5bGVKc29uW1widGV4dC1kYXRlLWZvcm1hdFwiXTtcclxuICAgICAgICAgICAgdGhpcy5udW1lcmljRm9ybWF0ID0gc3R5bGVKc29uW1widGV4dC1udW1lcmljLWZvcm1hdFwiXTtcclxuICAgICAgICAgICAgdGhpcy50ZXh0VHJhbnNmb3JtID0gc3R5bGVKc29uW1widGV4dC1sZXR0ZXItY2FzZVwiXTtcclxuICAgICAgICAgICAgdGhpcy5sZXR0ZXJTcGFjaW5nID0gc3R5bGVKc29uW1widGV4dC1sZXR0ZXItc3BhY2luZ1wiXTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRPRE9cclxuICAgICAgICAgICAgdGhpcy5hdm9pZEVkZ2UgPSBzdHlsZUpzb25bXCJ0ZXh0LWF2b2lkLWVkZ2VcIl07XHJcbiAgICAgICAgICAgIC8vIFRPRE9cclxuICAgICAgICAgICAgdGhpcy5zcGxpbmVUeXBlID0gc3R5bGVKc29uW1widGV4dC1zcGxpbmUtdHlwZVwiXTtcclxuICAgICAgICAgICAgLy8gVE9ET1xyXG4gICAgICAgICAgICB0aGlzLnBvbHlnb25MYWJlbGluZ0xvY2F0aW9uID0gc3R5bGVKc29uW1widGV4dC1wb2x5Z29uLWxhYmVsaW5nLWxvY2F0aW9uXCJdO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGxldCBjaGFycyA9IFwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlwiO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJXaWR0aHNbY2hhcnNbaV1dID0gKDxhbnk+b2wucmVuZGVyLmNhbnZhcykubWVhc3VyZVRleHRXaWR0aCh0aGlzLmZvbnQsIGNoYXJzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNoYXJXaWR0aHNbXCIgXCJdID0gKDxhbnk+b2wucmVuZGVyLmNhbnZhcykubWVhc3VyZVRleHRXaWR0aCh0aGlzLmZvbnQsIFwiIFwiKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gOTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJXaWR0aHNbaV0gPSAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5tZWFzdXJlVGV4dFdpZHRoKHRoaXMuZm9udCwgaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdGlhbGl6ZUNvcmUoKSB7XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0eVBsYWNlbWVudHMuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgIHRoaXMucGxhY2VtZW50cyA9IHRoaXMucHJvcGVydHlQbGFjZW1lbnRzLmdldFZhbHVlKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmZpbGwpIHtcclxuICAgICAgICAgICAgdGhpcy5maWxsQ29sb3IgPSBHZW9TdHlsZS50b1JHQkFDb2xvcih0aGlzLmZpbGwsIHRoaXMub3BhY2l0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmhhbG9GaWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFsb0ZpbGxDb2xvciA9IEdlb1N0eWxlLnRvUkdCQUNvbG9yKHRoaXMuaGFsb0ZpbGwsIHRoaXMub3BhY2l0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBmaWxsID0gbmV3IG9sLnN0eWxlLkZpbGwoKTtcclxuICAgICAgICBsZXQgc3Ryb2tlID0gbmV3IG9sLnN0eWxlLlN0cm9rZSgpO1xyXG4gICAgICAgIGxldCB0ZXh0U3R5bGUgPSBuZXcgb2wuc3R5bGUuVGV4dCh7XHJcbiAgICAgICAgICAgIGZpbGw6IGZpbGwsXHJcbiAgICAgICAgICAgIHN0cm9rZTogc3Ryb2tlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuc3R5bGUgPSBuZXcgb2wuc3R5bGUuU3R5bGUoe1xyXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0U3R5bGVcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGV4dEFsaWducy5pbmRleE9mKHRoaXMuYWxpZ24pID49IDApIHtcclxuICAgICAgICAgICAgdGV4dFN0eWxlLnNldFRleHRBbGlnbih0aGlzLmFsaWduKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMudGV4dEJhc2VsaW5lLmluZGV4T2YodGhpcy5iYXNlbGluZSkgPj0gMCkge1xyXG4gICAgICAgICAgICB0ZXh0U3R5bGUuc2V0VGV4dEJhc2VsaW5lKHRoaXMuYmFzZWxpbmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5keCkge1xyXG4gICAgICAgICAgICB0ZXh0U3R5bGUuc2V0T2Zmc2V0WCh0aGlzLmR4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZHkpIHtcclxuICAgICAgICAgICAgdGV4dFN0eWxlLnNldE9mZnNldFkodGhpcy5keSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmZvbnQpIHtcclxuICAgICAgICAgICAgdGV4dFN0eWxlLnNldEZvbnQodGhpcy5mb250KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZmlsbENvbG9yKSB7XHJcbiAgICAgICAgICAgIGZpbGwuc2V0Q29sb3IodGhpcy5maWxsQ29sb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5oYWxvRmlsbENvbG9yKSB7XHJcbiAgICAgICAgICAgIHN0cm9rZS5zZXRDb2xvcih0aGlzLmhhbG9GaWxsQ29sb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5oYWxvUmFkaXVzKSB7XHJcbiAgICAgICAgICAgIHN0cm9rZS5zZXRXaWR0aCh0aGlzLmhhbG9SYWRpdXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5oYWxvRmlsbENvbG9yID09PSB1bmRlZmluZWQgJiYgdGhpcy5oYWxvUmFkaXVzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGV4dFN0eWxlLnNldFN0cm9rZSh1bmRlZmluZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMucm90YXRlQW5nbGUpIHtcclxuICAgICAgICAgICAgdGV4dFN0eWxlLnNldFJvdGF0aW9uKHRoaXMucm90YXRlQW5nbGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5tYXhDaGFyQW5nbGUgPj0gMCkge1xyXG4gICAgICAgICAgICAoPGFueT50ZXh0U3R5bGUpLnNldE1heEFuZ2xlKHRoaXMubWF4Q2hhckFuZ2xlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMudGV4dFRyYW5zZm9ybXMuaW5jbHVkZXModGhpcy50ZXh0VHJhbnNmb3JtKSkge1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFRPRE86IGludmFsaWQgaW5wdXRzLlxyXG4gICAgICAgICAgICB0aGlzLnRleHRUcmFuc2Zvcm0gPSB0aGlzLnRleHRUcmFuc2Zvcm1zWzBdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXRDb252ZXJ0ZWRTdHlsZUNvcmUoZmVhdHVyZTogYW55LCByZXNvbHV0aW9uOiBudW1iZXIsIG9wdGlvbnM6IGFueSk6IG9sLnN0eWxlLlN0eWxlW10ge1xyXG4gICAgICAgIGxldCB0ZXh0U3R5bGVzID0gW107XHJcbiAgICAgICAgbGV0IGZlYXR1cmVUZXh0ID0gXCJcIjtcclxuICAgICAgICBsZXQgZmVhdHVyZVByb3BlcnRpZXMgPSBmZWF0dXJlLmdldFByb3BlcnRpZXMoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMubmFtZSkge1xyXG4gICAgICAgICAgICBmZWF0dXJlVGV4dCA9IGZlYXR1cmUuZ2V0KHRoaXMubmFtZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBIHdvcmthcm91bmQgZm9yIHRoZSBsYW5ndWFnZSwgcmVtb3ZlIHRoZSBkYXRhIHVwZGF0ZVxyXG4gICAgICAgIGlmICgoZmVhdHVyZVRleHQgPT09IHVuZGVmaW5lZCB8fCBmZWF0dXJlVGV4dCA9PT0gXCJcIikgJiYgdGhpcy5uYW1lLmluZGV4T2YoXCJuYW1lX1wiKSA9PT0gMCkge1xyXG4gICAgICAgICAgICBmZWF0dXJlVGV4dCA9IGZlYXR1cmUuZ2V0KFwibmFtZVwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm51bWVyaWNGb3JtYXQpIHtcclxuICAgICAgICAgICAgZmVhdHVyZVRleHQgPSB0aGlzLmdldFRleHRXaXRoTnVtZXJpY0Zvcm1hdChmZWF0dXJlVGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmRhdGVGb3JtYXQpIHtcclxuICAgICAgICAgICAgZmVhdHVyZVRleHQgPSB0aGlzLmdldFRleHRXaXRoRGF0ZUZvcm1hdChmZWF0dXJlVGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnRleHRGb3JtYXQpIHtcclxuICAgICAgICAgICAgZmVhdHVyZVRleHQgPSB0aGlzLmdldFRleHRXaXRoRm9ybWF0KGZlYXR1cmVUZXh0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChmZWF0dXJlVGV4dCA9PT0gdW5kZWZpbmVkIHx8IGZlYXR1cmVUZXh0ID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0U3R5bGVzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZmVhdHVyZVRleHQgPSB0aGlzLmdldFRleHRUcmFuc2Zvcm0oZmVhdHVyZVRleHQpO1xyXG5cclxuICAgICAgICB0aGlzLnBsYWNlbWVudHMgPSB0aGlzLnByb3BlcnR5UGxhY2VtZW50cy5nZXRWYWx1ZShmZWF0dXJlUHJvcGVydGllcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3R5bGUuZ2V0VGV4dCgpLnNldFRleHQoZmVhdHVyZVRleHQpO1xyXG4gICAgICAgIGlmICh0aGlzLnNldExhYmVsUG9zaXRpb24oZmVhdHVyZVRleHQsIGZlYXR1cmUsIHJlc29sdXRpb24sIHRoaXMuc3R5bGUuZ2V0VGV4dCgpLCBvcHRpb25zLnN0cmF0ZWd5VHJlZSwgb3B0aW9ucy5mcmFtZVN0YXRlKSkge1xyXG4gICAgICAgICAgICBsZXQgZmVhdHVyZVppbmRleCA9IGZlYXR1cmVbXCJ0ZW1wVHJlZVppbmRleFwiXTtcclxuICAgICAgICAgICAgaWYgKGZlYXR1cmVaaW5kZXggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgZmVhdHVyZVppbmRleCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zdHlsZS5zZXRaSW5kZXgoZmVhdHVyZVppbmRleCk7XHJcblxyXG4gICAgICAgICAgICB0ZXh0U3R5bGVzLnB1c2godGhpcy5zdHlsZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGV4dFN0eWxlcztcclxuICAgIH1cclxuXHJcbiAgICBzZXRMYWJlbFBvc2l0aW9uKHRleHQ6IHN0cmluZywgZ2VvbWV0cnk6IGFueSwgcmVzb2x1dGlvbjogYW55LCB0ZXh0U3RhdGU6IG9sLnN0eWxlLlRleHQsIHN0cmF0ZWd5VHJlZTogYW55LCBmcmFtZVN0YXRlOiBvbHguRnJhbWVTdGF0ZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCBmbGF0Q29vcmRpbmF0ZXM7XHJcblxyXG4gICAgICAgIGxldCBnZW9tZXRyeVR5cGUgPSBnZW9tZXRyeS5nZXRUeXBlKCk7XHJcbiAgICAgICAgaWYgKChnZW9tZXRyeVR5cGUgPT09ICg8YW55Pm9sLmdlb20pLkdlb21ldHJ5VHlwZS5MSU5FX1NUUklORyB8fCBnZW9tZXRyeVR5cGUgPT09ICg8YW55Pm9sLmdlb20pLkdlb21ldHJ5VHlwZS5NVUxUSV9MSU5FX1NUUklORykgJiYgIXRoaXMuZm9yY2VIb3Jpem9udGFsRm9yTGluZSkge1xyXG4gICAgICAgICAgICBsZXQgZ2VvbWV0cnlUeXBlID0gZ2VvbWV0cnkuZ2V0VHlwZSgpO1xyXG4gICAgICAgICAgICBmbGF0Q29vcmRpbmF0ZXMgPSBnZW9tZXRyeS5nZXRGbGF0Q29vcmRpbmF0ZXMoKTtcclxuICAgICAgICAgICAgaWYgKGZsYXRDb29yZGluYXRlcyA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiBmYWxzZTsgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBsYWJlbEluZm8gPSB0aGlzLmdldExhYmVsSW5mbyh0ZXh0LCB0ZXh0U3RhdGUpO1xyXG4gICAgICAgICAgICBsZXQgbGFiZWxXaWR0aCA9IGxhYmVsSW5mby5sYWJlbFdpZHRoO1xyXG4gICAgICAgICAgICBsZXQgbGFiZWxIZWlnaHQgPSBsYWJlbEluZm8ubGFiZWxIZWlnaHQ7XHJcbiAgICAgICAgICAgIGxldCBzY2FsZSA9IGxhYmVsSW5mby5zY2FsZTtcclxuICAgICAgICAgICAgbGV0IGZvbnQgPSBsYWJlbEluZm8uZm9udDtcclxuICAgICAgICAgICAgbGV0IHN0cm9rZVdpZHRoID0gbGFiZWxJbmZvLnN0cm9rZVdpZHRoO1xyXG4gICAgICAgICAgICBsZXQgbnVtTGluZXMgPSBsYWJlbEluZm8ubnVtTGluZXM7XHJcbiAgICAgICAgICAgIGxldCBsaW5lcyA9IGxhYmVsSW5mby5saW5lcztcclxuICAgICAgICAgICAgbGV0IGxpbmVIZWlnaHQgPSBsYWJlbEluZm8ubGluZUhlaWdodDtcclxuICAgICAgICAgICAgbGV0IHJlbmRlcldpZHRoID0gbGFiZWxJbmZvLnJlbmRlcldpZHRoO1xyXG4gICAgICAgICAgICBsZXQgaGVpZ2h0ID0gbGFiZWxJbmZvLmhlaWdodDtcclxuICAgICAgICAgICAgbGV0IHdpZHRocyA9IGxhYmVsSW5mby53aWR0aHM7XHJcblxyXG4gICAgICAgICAgICBsZXQgQ29uc3RydWN0b3I6IGFueTtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGxhY2VtZW50VHlwZSA9PT0gXCJkZWZhdWx0XCIpIHtcclxuICAgICAgICAgICAgICAgIENvbnN0cnVjdG9yID0gdGhpcy5CQVRDSF9DT05TVFJVQ1RPUlNfREVGQVVMVFtnZW9tZXRyeVR5cGVdO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucGxhY2VtZW50VHlwZSA9PT0gXCJkZXRlY3RcIikge1xyXG4gICAgICAgICAgICAgICAgQ29uc3RydWN0b3IgPSB0aGlzLkJBVENIX0NPTlNUUlVDVE9SU19ERVRFQ1RbZ2VvbWV0cnlUeXBlXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgdGV4dExhYmVsaW5nU3RyYXRlZ3kgPSBuZXcgQ29uc3RydWN0b3IoKTtcclxuICAgICAgICAgICAgbGV0IHRtcExhYmVsV2lkdGggPSBsYWJlbFdpZHRoIC8gd2luZG93LmRldmljZVBpeGVsUmF0aW87XHJcbiAgICAgICAgICAgIGxldCB0bXBMYWJlbEhlaWdodCA9IGxhYmVsSGVpZ2h0IC8gd2luZG93LmRldmljZVBpeGVsUmF0aW87XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKGdlb21ldHJ5VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAoPGFueT5vbC5nZW9tKS5HZW9tZXRyeVR5cGUuUE9JTlQ6XHJcbiAgICAgICAgICAgICAgICAgICAgZmxhdENvb3JkaW5hdGVzID0gZ2VvbWV0cnkuZ2V0RmxhdENvb3JkaW5hdGVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICg8YW55Pm9sLmdlb20pLkdlb21ldHJ5VHlwZS5NVUxUSV9QT0lOVDpcclxuICAgICAgICAgICAgICAgICAgICBmbGF0Q29vcmRpbmF0ZXMgPSBnZW9tZXRyeS5nZXRDZW50ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgKDxhbnk+b2wuZ2VvbSkuR2VvbWV0cnlUeXBlLkxJTkVfU1RSSU5HOlxyXG4gICAgICAgICAgICAgICAgICAgIGZsYXRDb29yZGluYXRlcyA9IC8qKiBAdHlwZSB7b2wuZ2VvbS5MaW5lU3RyaW5nfSAqLyAoZ2VvbWV0cnkpLmdldEZsYXRNaWRwb2ludCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAoPGFueT5vbC5nZW9tKS5HZW9tZXRyeVR5cGUuQ0lSQ0xFOlxyXG4gICAgICAgICAgICAgICAgICAgIGZsYXRDb29yZGluYXRlcyA9IC8qKiBAdHlwZSB7b2wuZ2VvbS5DaXJjbGV9ICovIChnZW9tZXRyeSkuZ2V0Q2VudGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICg8YW55Pm9sLmdlb20pLkdlb21ldHJ5VHlwZS5NVUxUSV9MSU5FX1NUUklORzpcclxuICAgICAgICAgICAgICAgICAgICBmbGF0Q29vcmRpbmF0ZXMgPSAvKiogQHR5cGUge29sLmdlb20uTXVsdGlMaW5lU3RyaW5nfSAqLyAoZ2VvbWV0cnkpLmdldEZsYXRNaWRwb2ludHMoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgKDxhbnk+b2wuZ2VvbSkuR2VvbWV0cnlUeXBlLlBPTFlHT046XHJcbiAgICAgICAgICAgICAgICAgICAgZmxhdENvb3JkaW5hdGVzID0gLyoqIEB0eXBlIHtvbC5nZW9tLlBvbHlnb259ICovIChnZW9tZXRyeSkuZ2V0RmxhdEludGVyaW9yUG9pbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgKDxhbnk+b2wuZ2VvbSkuR2VvbWV0cnlUeXBlLk1VTFRJX1BPTFlHT046XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGludGVyaW9yUG9pbnRzID0gLyoqIEB0eXBlIHtvbC5nZW9tLk11bHRpUG9seWdvbn0gKi8gKGdlb21ldHJ5KS5nZXRGbGF0TWlkcG9pbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmxhdENvb3JkaW5hdGVzID0gdGV4dExhYmVsaW5nU3RyYXRlZ3kubWFya0xvY2F0aW9uKGZsYXRDb29yZGluYXRlcywgdG1wTGFiZWxXaWR0aCwgdG1wTGFiZWxIZWlnaHQsIHJlc29sdXRpb24sIGdlb21ldHJ5VHlwZSwgdGhpcywgc3RyYXRlZ3lUcmVlLCBmcmFtZVN0YXRlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmbGF0Q29vcmRpbmF0ZXMgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gZmFsc2U7IH1cclxuXHJcbiAgICAgICAgICAgIHZhciBsYWJlbEltYWdlID0gdGhpcy5nZXRJbWFnZSh0ZXh0U3RhdGUsIGxhYmVsV2lkdGgsIGxhYmVsSGVpZ2h0LCBzY2FsZSwgZm9udCwgc3Ryb2tlV2lkdGgsIG51bUxpbmVzLCBsaW5lcywgbGluZUhlaWdodCwgcmVuZGVyV2lkdGgsIGhlaWdodCwgd2lkdGhzKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChsYWJlbEltYWdlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgKDxhbnk+dGV4dFN0YXRlKS5sYWJlbCA9IGxhYmVsSW1hZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICg8YW55PnRleHRTdGF0ZSkubGFiZWxQb3NpdGlvbiA9IGZsYXRDb29yZGluYXRlcztcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGFiZWxJbmZvKHRleHQ6IHN0cmluZywgdGV4dFN0YXRlOiBvbC5zdHlsZS5UZXh0KSB7XHJcbiAgICAgICAgdmFyIGtleSA9IHRleHQgKyB0aGlzLnVpZDtcclxuICAgICAgICBpZiAoIXRoaXMubGFiZWxJbmZvcy5jb250YWluc0tleShrZXkpKSB7XHJcbiAgICAgICAgICAgIGxldCBmb250ID0gdGV4dFN0YXRlLmdldEZvbnQoKTtcclxuICAgICAgICAgICAgdGV4dCA9IHRoaXMud3JhcFRleHQodGV4dCwgZm9udCk7XHJcblxyXG4gICAgICAgICAgICBsZXQgc3Ryb2tlU3RhdGUgPSB0ZXh0U3RhdGUuZ2V0U3Ryb2tlKCk7XHJcbiAgICAgICAgICAgIGxldCBzdHJva2VXaWR0aCA9IHN0cm9rZVN0YXRlICYmIHN0cm9rZVN0YXRlLmdldFdpZHRoKCkgPyBzdHJva2VTdGF0ZS5nZXRXaWR0aCgpIDogMDtcclxuICAgICAgICAgICAgbGV0IGxpbmVzID0gdGV4dC5zcGxpdChcIlxcblwiKTtcclxuICAgICAgICAgICAgbGV0IG51bUxpbmVzID0gbGluZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICBsZXQgdGV4dFNjYWxlID0gdGV4dFN0YXRlLmdldFNjYWxlKCk7XHJcbiAgICAgICAgICAgIHRleHRTY2FsZSA9IHRleHRTY2FsZSA9PT0gdW5kZWZpbmVkID8gMSA6IHRleHRTY2FsZTtcclxuICAgICAgICAgICAgbGV0IHNjYWxlID0gdGV4dFNjYWxlICogd2luZG93LmRldmljZVBpeGVsUmF0aW87XHJcbiAgICAgICAgICAgIGxldCB3aWR0aHMgPSBbXTtcclxuICAgICAgICAgICAgbGV0IHdpZHRoID0gdGhpcy5nZXRFc3RpbWF0ZWRXaWR0aChmb250LCBsaW5lcywgd2lkdGhzLCB0aGlzLmxldHRlclNwYWNpbmcpO1xyXG4gICAgICAgICAgICBsZXQgbGluZUhlaWdodCA9ICg8YW55Pm9sLnJlbmRlci5jYW52YXMpLm1lYXN1cmVUZXh0SGVpZ2h0KGZvbnQpO1xyXG4gICAgICAgICAgICBsZXQgdG1wTWFza01hcmdpbiA9ICh0aGlzLm1hc2tNYXJnaW4gPyB0aGlzLm1hc2tNYXJnaW4gOiBcIjBcIikuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgbGV0IHRtcE1hc2tIZWlnaHRNYXJnaW4gPSAwO1xyXG4gICAgICAgICAgICBsZXQgdG1wTWFza1dpZHRoTWFyZ2luID0gMDtcclxuICAgICAgICAgICAgc3dpdGNoICh0bXBNYXNrTWFyZ2luLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE1hc2tIZWlnaHRNYXJnaW4gPSBwYXJzZUludCh0bXBNYXNrTWFyZ2luWzBdKSAqIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wTWFza1dpZHRoTWFyZ2luID0gcGFyc2VJbnQodG1wTWFza01hcmdpblswXSkgKiAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE1hc2tIZWlnaHRNYXJnaW4gPSBwYXJzZUludCh0bXBNYXNrTWFyZ2luWzBdKSAqIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wTWFza1dpZHRoTWFyZ2luID0gcGFyc2VJbnQodG1wTWFza01hcmdpblsxXSkgKiAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE1hc2tIZWlnaHRNYXJnaW4gPSBwYXJzZUludCh0bXBNYXNrTWFyZ2luWzBdKSArIHBhcnNlSW50KHRtcE1hc2tNYXJnaW5bMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE1hc2tXaWR0aE1hcmdpbiA9IHBhcnNlSW50KHRtcE1hc2tNYXJnaW5bMV0pICogMjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICB0bXBNYXNrSGVpZ2h0TWFyZ2luID0gcGFyc2VJbnQodG1wTWFza01hcmdpblswXSkgKyBwYXJzZUludCh0bXBNYXNrTWFyZ2luWzJdKTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBNYXNrV2lkdGhNYXJnaW4gPSBwYXJzZUludCh0bXBNYXNrTWFyZ2luWzFdKSArIHBhcnNlSW50KHRtcE1hc2tNYXJnaW5bM10pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubWFza1R5cGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hc2tUeXBlLnRvTG93ZXJDYXNlKCkgPT09IFwiY2lyY2xlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXBNYXNrSGVpZ2h0TWFyZ2luID0gdG1wTWFza0hlaWdodE1hcmdpbiA+IHRtcE1hc2tXaWR0aE1hcmdpbiA/IHRtcE1hc2tIZWlnaHRNYXJnaW4gOiB0bXBNYXNrV2lkdGhNYXJnaW47XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wTWFza1dpZHRoTWFyZ2luID0gdG1wTWFza0hlaWdodE1hcmdpbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgaGVpZ2h0ID0gbGluZUhlaWdodCAqIG51bUxpbmVzICsgc3Ryb2tlV2lkdGggKyB0bXBNYXNrSGVpZ2h0TWFyZ2luO1xyXG4gICAgICAgICAgICBsZXQgcmVuZGVyV2lkdGggPSB3aWR0aCArIHN0cm9rZVdpZHRoICsgdG1wTWFza1dpZHRoTWFyZ2luO1xyXG4gICAgICAgICAgICBsZXQgdG1wTWFza091dGxpbmVXaWR0aCA9ICh0aGlzLm1hc2tPdXRsaW5lV2lkdGggPyB0aGlzLm1hc2tPdXRsaW5lV2lkdGggOiAwKTtcclxuICAgICAgICAgICAgbGV0IGxhYmVsV2lkdGggPSBNYXRoLmNlaWwoKHJlbmRlcldpZHRoICsgdG1wTWFza091dGxpbmVXaWR0aCAqIDMpICogMS4xICogc2NhbGUpO1xyXG4gICAgICAgICAgICBsZXQgbGFiZWxIZWlnaHQgPSBNYXRoLmNlaWwoKGhlaWdodCArIHRtcE1hc2tPdXRsaW5lV2lkdGggKiAzKSAqIDEuMSAqIHNjYWxlKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBsYWJlbEluZm8gPSB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbFdpZHRoOiBsYWJlbFdpZHRoLFxyXG4gICAgICAgICAgICAgICAgbGFiZWxIZWlnaHQ6IGxhYmVsSGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgc2NhbGU6IHNjYWxlLFxyXG4gICAgICAgICAgICAgICAgZm9udDogZm9udCxcclxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiBzdHJva2VXaWR0aCxcclxuICAgICAgICAgICAgICAgIG51bUxpbmVzOiBudW1MaW5lcyxcclxuICAgICAgICAgICAgICAgIGxpbmVzOiBsaW5lcyxcclxuICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IGxpbmVIZWlnaHQsXHJcbiAgICAgICAgICAgICAgICByZW5kZXJXaWR0aDogcmVuZGVyV2lkdGgsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICAgICAgICAgIHdpZHRoczogd2lkdGhzXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMubGFiZWxJbmZvcy5zZXQoa2V5LCBsYWJlbEluZm8pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGFiZWxJbmZvcy5nZXQoa2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRFc3RpbWF0ZWRXaWR0aChmb250LCBsaW5lcywgd2lkdGhzLCBsZXR0ZXJTcGFjaW5nKSB7XHJcbiAgICAgICAgbGV0IG51bUxpbmVzID0gbGluZXMubGVuZ3RoO1xyXG4gICAgICAgIGxldCB3aWR0aCA9IDA7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRXaWR0aCwgaTtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtTGluZXM7ICsraSkge1xyXG4gICAgICAgICAgICBjdXJyZW50V2lkdGggPSAwO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxpbmVzW2ldLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2hhcldpZHRoID0gdGhpcy5jaGFyV2lkdGhzW2xpbmVzW2ldW2pdXTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGFyV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50V2lkdGggKz0gY2hhcldpZHRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFdpZHRoICs9IHRoaXMuY2hhcldpZHRoc1tcIldcIl07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGxldHRlclNwYWNpbmcpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRXaWR0aCA9IGN1cnJlbnRXaWR0aCArIChsaW5lc1tpXS5sZW5ndGggLSAxKSAqIGxldHRlclNwYWNpbmc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgd2lkdGggPSBNYXRoLm1heCh3aWR0aCwgY3VycmVudFdpZHRoKTtcclxuICAgICAgICAgICAgd2lkdGhzLnB1c2goY3VycmVudFdpZHRoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHdpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEltYWdlKHRleHRTdGF0ZTogb2wuc3R5bGUuVGV4dCwgbGFiZWxXaWR0aDogbnVtYmVyLCBsYWJlbEhlaWdodDogbnVtYmVyLCBzY2FsZTogbnVtYmVyLCBmb250OiBzdHJpbmcsIHN0cm9rZVdpZHRoOiBudW1iZXIsIG51bUxpbmVzOiBhbnksIGxpbmVzOiBhbnksIGxpbmVIZWlnaHQ6IG51bWJlciwgcmVuZGVyV2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIHdpZHRoczogYW55KSB7XHJcbiAgICAgICAgdmFyIGxhYmVsQ2FjaGUgPSAoPGFueT5vbCkucmVuZGVyLmNhbnZhcy5sYWJlbENhY2hlO1xyXG4gICAgICAgIHZhciBrZXkgPSB0aGlzLnVpZCAhPT0gdW5kZWZpbmVkID8gdGhpcy51aWQgOiAoPGFueT5vbCkuZ2V0VWlkKHRoaXMpO1xyXG4gICAgICAgIGtleSArPSBsaW5lcy50b1N0cmluZygpO1xyXG4gICAgICAgIGlmICghbGFiZWxDYWNoZS5jb250YWluc0tleShrZXkpKSB7XHJcbiAgICAgICAgICAgIGxldCBmaWxsU3RhdGUgPSB0ZXh0U3RhdGUuZ2V0RmlsbCgpO1xyXG4gICAgICAgICAgICBsZXQgc3Ryb2tlU3RhdGUgPSB0ZXh0U3RhdGUuZ2V0U3Ryb2tlKCk7XHJcbiAgICAgICAgICAgIGxldCBsYWJlbDtcclxuXHJcbiAgICAgICAgICAgIGxldCBhbGlnbiA9ICg8YW55Pm9sLnJlbmRlcikucmVwbGF5LlRFWFRfQUxJR05bdGV4dFN0YXRlLmdldFRleHRBbGlnbigpIHx8ICg8YW55Pm9sLnJlbmRlci5jYW52YXMpLmRlZmF1bHRUZXh0QWxpZ25dO1xyXG5cclxuICAgICAgICAgICAgbGV0IGNvbnRleHQgPSAoPGFueT5vbCkuZG9tLmNyZWF0ZUNhbnZhc0NvbnRleHQyRChsYWJlbFdpZHRoLCBsYWJlbEhlaWdodCk7XHJcbiAgICAgICAgICAgIGxhYmVsID0gY29udGV4dC5jYW52YXM7XHJcbiAgICAgICAgICAgIGxhYmVsQ2FjaGUuc2V0KGtleSwgbGFiZWwpO1xyXG4gICAgICAgICAgICBsYWJlbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgIC8vIEZvciBsZXR0ZXJTcGFjaW5nIHdlIG5lZWQgYXBwXHJcbiAgICAgICAgICAgIGxldCBib2R5O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZXR0ZXJTcGFjaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJib2R5XCIpWzBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJvZHkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9keS5hcHBlbmRDaGlsZChsYWJlbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsYWJlbC5zdHlsZS5sZXR0ZXJTcGFjaW5nID0gdGhpcy5sZXR0ZXJTcGFjaW5nICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dCA9IGxhYmVsLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHNjYWxlICE9PSAxKSB7IGNvbnRleHQuc2NhbGUoc2NhbGUsIHNjYWxlKTsgfVxyXG4gICAgICAgICAgICBjb250ZXh0LmZvbnQgPSBmb250O1xyXG4gICAgICAgICAgICBpZiAoc3Ryb2tlU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBzdHJva2VTdGF0ZS5nZXRDb2xvcigpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSBzdHJva2VXaWR0aCAqICgoPGFueT5vbC5oYXMpLlNBRkFSSSA/IHNjYWxlIDogMSk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVDYXAgPSBzdHJva2VTdGF0ZS5nZXRMaW5lQ2FwKCk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVKb2luID0gc3Ryb2tlU3RhdGUuZ2V0TGluZUpvaW4oKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQubWl0ZXJMaW1pdCA9IHN0cm9rZVN0YXRlLmdldE1pdGVyTGltaXQoKTtcclxuICAgICAgICAgICAgICAgIGxldCBsaW5lRGFzaCA9IHN0cm9rZVN0YXRlLmdldExpbmVEYXNoKCk7XHJcbiAgICAgICAgICAgICAgICBsaW5lRGFzaCA9IGxpbmVEYXNoID8gbGluZURhc2guc2xpY2UoKSA6ICg8YW55Pm9sLnJlbmRlci5jYW52YXMpLmRlZmF1bHRMaW5lRGFzaDtcclxuICAgICAgICAgICAgICAgIGlmICgoPGFueT5vbC5oYXMpLkNBTlZBU19MSU5FX0RBU0ggJiYgbGluZURhc2gubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zZXRMaW5lRGFzaChzdHJva2VTdGF0ZS5nZXRMaW5lRGFzaCgpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVEYXNoT2Zmc2V0ID0gKDxhbnk+c3Ryb2tlU3RhdGUpLmdldExpbmVEYXNoT2Zmc2V0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZHJhd01hc2soY29udGV4dCwgMCwgMCwgcmVuZGVyV2lkdGgsIGhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5tYXNrVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWFza1R5cGUudG9Mb3dlckNhc2UoKSA9PT0gXCJjaXJjbGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzY2FsZSAhPT0gMSkgeyBjb250ZXh0LnNjYWxlKHNjYWxlLCBzY2FsZSk7IH1cclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZvbnQgPSBmb250O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHJva2VTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gc3Ryb2tlU3RhdGUuZ2V0Q29sb3IoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSBzdHJva2VXaWR0aCAqICgoPGFueT5vbC5oYXMpLlNBRkFSSSA/IHNjYWxlIDogMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZUNhcCA9IHN0cm9rZVN0YXRlLmdldExpbmVDYXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lSm9pbiA9IHN0cm9rZVN0YXRlLmdldExpbmVKb2luKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubWl0ZXJMaW1pdCA9IHN0cm9rZVN0YXRlLmdldE1pdGVyTGltaXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmVEYXNoID0gc3Ryb2tlU3RhdGUuZ2V0TGluZURhc2goKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZURhc2ggPSBsaW5lRGFzaCA/IGxpbmVEYXNoLnNsaWNlKCkgOiAoPGFueT5vbC5yZW5kZXIuY2FudmFzKS5kZWZhdWx0TGluZURhc2g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoPGFueT5vbC5oYXMpLkNBTlZBU19MSU5FX0RBU0ggJiYgbGluZURhc2gubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNldExpbmVEYXNoKHN0cm9rZVN0YXRlLmdldExpbmVEYXNoKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lRGFzaE9mZnNldCA9ICg8YW55PnN0cm9rZVN0YXRlKS5nZXRMaW5lRGFzaE9mZnNldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0LnRleHRCYXNlbGluZSA9IFwibWlkZGxlXCI7XHJcbiAgICAgICAgICAgIGNvbnRleHQudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICAgICAgICAgICAgbGV0IGxlZnRSaWdodCA9IDAuNSAtIGFsaWduO1xyXG4gICAgICAgICAgICBsZXQgeCA9IGFsaWduICogbGFiZWwud2lkdGggLyBzY2FsZSArIGxlZnRSaWdodCAqIHN0cm9rZVdpZHRoO1xyXG4gICAgICAgICAgICBsZXQgaTtcclxuICAgICAgICAgICAgbGV0IHRtcE1hc2tNYXJnaW4gPSAodGhpcy5tYXNrTWFyZ2luID8gdGhpcy5tYXNrTWFyZ2luIDogXCIwXCIpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgIGxldCB0bXBNYXNrT3V0bGluZVdpZHRoID0gdGhpcy5tYXNrT3V0bGluZVdpZHRoID8gdGhpcy5tYXNrT3V0bGluZVdpZHRoIDogMDtcclxuICAgICAgICAgICAgaWYgKHN0cm9rZVN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3Ryb2tlU3RhdGUuZ2V0Q29sb3IoKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBzdHJva2VTdGF0ZS5nZXRDb2xvcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gdGhpcy5oYWxvUmFkaXVzID8gdGhpcy5oYWxvUmFkaXVzIDogMDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtTGluZXM7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kcmF3bk1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlVGV4dChsaW5lc1tpXSwgeCArIGxlZnRSaWdodCAqIHdpZHRoc1tpXSAqIDEuMiAtIHN0cm9rZVdpZHRoICogMS4yICsgdG1wTWFza091dGxpbmVXaWR0aCAqIDAuNSAvIDEuMiAtICh0bXBNYXNrTWFyZ2luWzNdID8gcGFyc2VJbnQodG1wTWFza01hcmdpblsxXSkgLSBwYXJzZUludCh0bXBNYXNrTWFyZ2luWzNdKSA6IDApICogMC41LCB0aGlzLm1hc2tUeXBlLnRvTG93ZXJDYXNlKCkgPT09IFwiY2lyY2xlXCIgPyBjb250ZXh0LmNhbnZhcy5oZWlnaHQgLyBzY2FsZSAqIDAuNSAtICh0bXBNYXNrTWFyZ2luWzJdID8gcGFyc2VJbnQodG1wTWFza01hcmdpblsyXSkgLSBwYXJzZUludCh0bXBNYXNrTWFyZ2luWzBdKSA6IDApIDogc3Ryb2tlV2lkdGggKyAoaSArIDEpICogbGluZUhlaWdodCAqIDAuNSArIHBhcnNlSW50KHRtcE1hc2tNYXJnaW5bMF0pICsgdG1wTWFza091dGxpbmVXaWR0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVRleHQobGluZXNbaV0sIHggKyBsZWZ0UmlnaHQgKiB3aWR0aHNbaV0gKiAxLjIgLSAodG1wTWFza01hcmdpblszXSA/IHBhcnNlSW50KHRtcE1hc2tNYXJnaW5bMV0pIC0gcGFyc2VJbnQodG1wTWFza01hcmdpblszXSkgOiAwKSAqIDAuNSwgMC41ICogKHN0cm9rZVdpZHRoICsgbGluZUhlaWdodCkgKyBpICogbGluZUhlaWdodCAqIDEuMiAtICsgcGFyc2VJbnQodG1wTWFza01hcmdpblswXSkgKyAodGhpcy5tYXNrT3V0bGluZVdpZHRoID8gdGhpcy5tYXNrT3V0bGluZVdpZHRoIDogMCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChmaWxsU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChmaWxsU3RhdGUuZ2V0Q29sb3IoKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbFN0YXRlLmdldENvbG9yKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bUxpbmVzOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZHJhd25NYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxUZXh0KGxpbmVzW2ldLCB4ICsgbGVmdFJpZ2h0ICogd2lkdGhzW2ldICogMS4yIC0gc3Ryb2tlV2lkdGggKiAxLjIgKyB0bXBNYXNrT3V0bGluZVdpZHRoICogMC41IC8gMS4yIC0gKHRtcE1hc2tNYXJnaW5bM10gPyBwYXJzZUludCh0bXBNYXNrTWFyZ2luWzFdKSAtIHBhcnNlSW50KHRtcE1hc2tNYXJnaW5bM10pIDogMCkgKiAwLjUsIHRoaXMubWFza1R5cGUudG9Mb3dlckNhc2UoKSA9PT0gXCJjaXJjbGVcIiA/IGNvbnRleHQuY2FudmFzLmhlaWdodCAvIHNjYWxlICogMC41IC0gKHRtcE1hc2tNYXJnaW5bMl0gPyBwYXJzZUludCh0bXBNYXNrTWFyZ2luWzJdKSAtIHBhcnNlSW50KHRtcE1hc2tNYXJnaW5bMF0pIDogMCkgOiBzdHJva2VXaWR0aCArIChpICsgMSkgKiBsaW5lSGVpZ2h0ICogMC41ICsgcGFyc2VJbnQodG1wTWFza01hcmdpblswXSkgKyB0bXBNYXNrT3V0bGluZVdpZHRoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQobGluZXNbaV0sIHggKyBsZWZ0UmlnaHQgKiB3aWR0aHNbaV0gKiAxLjIgLSAodG1wTWFza01hcmdpblszXSA/IHBhcnNlSW50KHRtcE1hc2tNYXJnaW5bMV0pIC0gcGFyc2VJbnQodG1wTWFza01hcmdpblszXSkgOiAwKSAqIDAuNSwgMC41ICogKHN0cm9rZVdpZHRoICsgbGluZUhlaWdodCkgKyBpICogbGluZUhlaWdodCAqIDEuMiArIHBhcnNlSW50KHRtcE1hc2tNYXJnaW5bMF0pICsgKHRoaXMubWFza091dGxpbmVXaWR0aCA/IHRoaXMubWFza091dGxpbmVXaWR0aCA6IDApKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5sZXR0ZXJTcGFjaW5nICYmIGJvZHkpIHtcclxuICAgICAgICAgICAgICAgIGJvZHkucmVtb3ZlQ2hpbGQobGFiZWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbGFiZWxDYWNoZS5nZXQoa2V5KTtcclxuICAgIH1cclxuXHJcbiAgICB3cmFwVGV4dCh0ZXh0OiBzdHJpbmcsIGZvbnQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHJlc3VsdFRleHQ6IHN0cmluZztcclxuXHJcbiAgICAgICAgaWYgKHRleHQgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgbGV0IGxpbmVzID0gW3RleHRdO1xyXG4gICAgICAgICAgICBsZXQgd2lkdGhzID0gW107XHJcbiAgICAgICAgICAgIGxldCB3aWR0aCA9IHRoaXMuZ2V0RXN0aW1hdGVkV2lkdGgoZm9udCwgbGluZXMsIHdpZHRocywgdGhpcy5sZXR0ZXJTcGFjaW5nKTtcclxuXHJcbiAgICAgICAgICAgIGxldCB3cmFwV2lkdGggPSB0aGlzLndyYXBXaWR0aDtcclxuICAgICAgICAgICAgbGV0IHdyYXBDaGFyYWN0ZXIgPSBcIiBcIjtcclxuICAgICAgICAgICAgbGV0IGlzV3JhcEJlZm9yZSA9IHRoaXMud3JhcEJlZm9yZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh3cmFwV2lkdGggPiAwICYmIHdpZHRoID4gd3JhcFdpZHRoICYmIHRleHQuaW5jbHVkZXMod3JhcENoYXJhY3RlcikpIHtcclxuICAgICAgICAgICAgICAgIGxldCB0ZXh0TGluZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGxpbmVzID0gdGV4dC5zcGxpdCh3cmFwQ2hhcmFjdGVyKTtcclxuICAgICAgICAgICAgICAgIGxldCB3cmFwTGluZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGxldCB3cmFwV2lkdGhTdW0gPSAwO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRtcFdyYXBXaWR0aDogbnVtYmVyO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpc1dyYXBCZWZvcmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBsaW5lIG9mIGxpbmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBMaW5lID0gW2xpbmVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBXcmFwV2lkdGggPSB0aGlzLmdldEVzdGltYXRlZFdpZHRoKGZvbnQsIHRtcExpbmUsIHdpZHRocywgdGhpcy5sZXR0ZXJTcGFjaW5nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBXaWR0aFN1bSArPSB0bXBXcmFwV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0bXBXcmFwV2lkdGggPiB3cmFwV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBMaW5lcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dExpbmVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cmFwV2lkdGhTdW0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3cmFwTGluZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdyYXBXaWR0aFN1bSA+IHdyYXBXaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBMaW5lcy5wdXNoKFwiXFxuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRMaW5lcy5wdXNoKHdyYXBMaW5lcy5qb2luKFwiXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cmFwTGluZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cmFwV2lkdGhTdW0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3cmFwTGluZXMucHVzaChcIiBcIiArIGxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdyYXBMaW5lcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRMaW5lcy5wdXNoKHdyYXBMaW5lcy5qb2luKFwiXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGxpbmUgb2YgbGluZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd3JhcExpbmVzLnB1c2goXCIgXCIgKyBsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRtcExpbmUgPSBbbGluZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcFdyYXBXaWR0aCA9IHRoaXMuZ2V0RXN0aW1hdGVkV2lkdGgoZm9udCwgdG1wTGluZSwgd2lkdGhzLCB0aGlzLmxldHRlclNwYWNpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3cmFwV2lkdGhTdW0gKz0gdG1wV3JhcFdpZHRoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdyYXBXaWR0aFN1bSA+IHdyYXBXaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JhcExpbmVzLnB1c2goXCJcXG5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0TGluZXMucHVzaCh3cmFwTGluZXMuam9pbihcIlwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cmFwTGluZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBXaWR0aFN1bSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3cmFwTGluZXMubGVuZ3RoID4gMCkgeyB0ZXh0TGluZXMucHVzaCh3cmFwTGluZXMuam9pbihcIlwiKSk7IH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXN1bHRUZXh0ID0gdGV4dExpbmVzLmpvaW4oXCJcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0VGV4dC5sYXN0SW5kZXhPZihcIlxcblwiKSA9PT0gcmVzdWx0VGV4dC5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0VGV4dCA9IHJlc3VsdFRleHQuc3Vic3RyKDAsIHJlc3VsdFRleHQubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRUZXh0ID0gdGV4dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdFRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZHJhd01hc2soY29udGV4dDogYW55LCB4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgZmlsbCA9IHVuZGVmaW5lZDtcclxuICAgICAgICBsZXQgc3Ryb2tlID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5tYXNrQ29sb3IpIHtcclxuICAgICAgICAgICAgZmlsbCA9IG5ldyBvbC5zdHlsZS5GaWxsKCk7XHJcbiAgICAgICAgICAgIGZpbGwuc2V0Q29sb3IoR2VvU3R5bGUudG9SR0JBQ29sb3IodGhpcy5tYXNrQ29sb3IsIHRoaXMub3BhY2l0eSA/IHRoaXMub3BhY2l0eSA6IDEpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm1hc2tPdXRsaW5lQ29sb3IgJiYgdGhpcy5tYXNrT3V0bGluZVdpZHRoKSB7XHJcbiAgICAgICAgICAgIHN0cm9rZSA9IG5ldyBvbC5zdHlsZS5TdHJva2UoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubWFza091dGxpbmVDb2xvcikge1xyXG4gICAgICAgICAgICAgICAgc3Ryb2tlLnNldENvbG9yKEdlb1N0eWxlLnRvUkdCQUNvbG9yKHRoaXMubWFza091dGxpbmVDb2xvciwgdGhpcy5vcGFjaXR5ID8gdGhpcy5vcGFjaXR5IDogMSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1hc2tPdXRsaW5lV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIHN0cm9rZS5zZXRXaWR0aCh0aGlzLm1hc2tPdXRsaW5lV2lkdGggPyB0aGlzLm1hc2tPdXRsaW5lV2lkdGggOiAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMubWFza1R5cGUpIHtcclxuICAgICAgICAgICAgdGhpcy5kcmF3bk1hc2sgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhd25NYXNrID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzd2l0Y2ggKHRoaXMubWFza1R5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRcIjpcclxuICAgICAgICAgICAgY2FzZSBcIkRlZmF1bHRcIjpcclxuICAgICAgICAgICAgY2FzZSBcInJlY3RhbmdsZVwiOlxyXG4gICAgICAgICAgICBjYXNlIFwiUmVjdGFuZ2xlXCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdSZWN0YW5nbGUoY29udGV4dCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgZmlsbCwgc3Ryb2tlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwicm91bmRlZENvcm5lcnNcIjpcclxuICAgICAgICAgICAgY2FzZSBcIlJvdW5kZWRDb3JuZXJzXCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdSb3VuZFJlY3RhbmdsZShjb250ZXh0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBmaWxsLCBzdHJva2UpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJyb3VuZGVkRW5kc1wiOlxyXG4gICAgICAgICAgICBjYXNlIFwiUm91bmRlZEVuZHNcIjpcclxuICAgICAgICAgICAgICAgIHRoaXMuZHJhd1JvdW5kZWRFbmRzKGNvbnRleHQsIHgsIHksIHdpZHRoLCBoZWlnaHQsIGZpbGwsIHN0cm9rZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImNpcmNsZVwiOlxyXG4gICAgICAgICAgICBjYXNlIFwiQ2lyY2xlXCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdDaXJjbGUoY29udGV4dCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgZmlsbCwgc3Ryb2tlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBkcmF3UmVjdGFuZ2xlKGNvbnRleHQ6IGFueSwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBmaWxsOiBvbC5zdHlsZS5GaWxsLCBzdHJva2U6IG9sLnN0eWxlLlN0cm9rZSkge1xyXG4gICAgICAgIGlmIChmaWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbC5nZXRDb2xvcigpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KHggKyBzdHJva2UuZ2V0V2lkdGgoKSwgeSArIHN0cm9rZS5nZXRXaWR0aCgpLCB3aWR0aCArIHN0cm9rZS5nZXRXaWR0aCgpICogMiwgaGVpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzdHJva2UpIHtcclxuICAgICAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSBzdHJva2UuZ2V0V2lkdGgoKTtcclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHN0cm9rZS5nZXRDb2xvcigpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZVJlY3QoeCArIHN0cm9rZS5nZXRXaWR0aCgpLCB5ICsgc3Ryb2tlLmdldFdpZHRoKCksIHdpZHRoICsgc3Ryb2tlLmdldFdpZHRoKCkgKiAyLCBoZWlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBkcmF3Um91bmRSZWN0YW5nbGUoY29udGV4dDogYW55LCB4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGZpbGw6IG9sLnN0eWxlLkZpbGwsIHN0cm9rZTogb2wuc3R5bGUuU3Ryb2tlKSB7XHJcbiAgICAgICAgbGV0IHJhZGl1cyA9ICh3aWR0aCA8IGhlaWdodCA/IHdpZHRoIDogaGVpZ2h0KSAqIDAuMztcclxuICAgICAgICAvLyB3aWR0aCAqPSAwLjk7XHJcbiAgICAgICAgLy8gaGVpZ2h0ICo9IDAuODtcclxuICAgICAgICBpZiAoc3Ryb2tlKSB7XHJcbiAgICAgICAgICAgIHggPSB4ICsgKHN0cm9rZS5nZXRXaWR0aCgpID8gc3Ryb2tlLmdldFdpZHRoKCkgOiAwKTtcclxuICAgICAgICAgICAgeSA9IHkgKyAoc3Ryb2tlLmdldFdpZHRoKCkgPyBzdHJva2UuZ2V0V2lkdGgoKSA6IDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyh4ICsgcmFkaXVzICsgc3Ryb2tlLmdldFdpZHRoKCkgKiAyLCB5KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyh4ICsgd2lkdGggLSByYWRpdXMgKyBzdHJva2UuZ2V0V2lkdGgoKSAqIDIsIHkpO1xyXG4gICAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGggKyBzdHJva2UuZ2V0V2lkdGgoKSAqIDIsIHksIHggKyB3aWR0aCArIHN0cm9rZS5nZXRXaWR0aCgpICogMiwgeSArIHJhZGl1cyk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oeCArIHdpZHRoICsgc3Ryb2tlLmdldFdpZHRoKCkgKiAyLCB5ICsgaGVpZ2h0IC0gcmFkaXVzKTtcclxuICAgICAgICBjb250ZXh0LnF1YWRyYXRpY0N1cnZlVG8oeCArIHdpZHRoICsgc3Ryb2tlLmdldFdpZHRoKCkgKiAyLCB5ICsgaGVpZ2h0LCB4ICsgd2lkdGggLSByYWRpdXMgKyBzdHJva2UuZ2V0V2lkdGgoKSAqIDIsIHkgKyBoZWlnaHQpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKHggKyByYWRpdXMsIHkgKyBoZWlnaHQpO1xyXG4gICAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbyh4LCB5ICsgaGVpZ2h0LCB4LCB5ICsgaGVpZ2h0IC0gcmFkaXVzKTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyh4LCB5ICsgcmFkaXVzKTtcclxuICAgICAgICBjb250ZXh0LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSwgeCArIHJhZGl1cywgeSk7XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuXHJcbiAgICAgICAgaWYgKGZpbGwpIHtcclxuICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBmaWxsLmdldENvbG9yKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHN0cm9rZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IHN0cm9rZS5nZXRXaWR0aCgpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gc3Ryb2tlLmdldENvbG9yKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRyYXdSb3VuZGVkRW5kcyhjb250ZXh0OiBhbnksIHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgZmlsbDogb2wuc3R5bGUuRmlsbCwgc3Ryb2tlOiBvbC5zdHlsZS5TdHJva2UpIHtcclxuICAgICAgICBsZXQgcmFkaXVzID0gKHdpZHRoIDwgaGVpZ2h0ID8gd2lkdGggOiBoZWlnaHQpICogMC4yO1xyXG4gICAgICAgIC8vIHdpZHRoICo9IDAuOTtcclxuICAgICAgICAvLyBoZWlnaHQgKj0gMC44O1xyXG4gICAgICAgIGxldCBzdHJva2VXaWR0aCA9IChzdHJva2UuZ2V0V2lkdGgoKSA/IHN0cm9rZS5nZXRXaWR0aCgpIDogMCk7XHJcbiAgICAgICAgaWYgKHN0cm9rZSkge1xyXG4gICAgICAgICAgICB4ID0geCArIHN0cm9rZVdpZHRoO1xyXG4gICAgICAgICAgICB5ID0geSArIHN0cm9rZVdpZHRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyh4ICsgcmFkaXVzLCB5KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyh4ICsgd2lkdGggLSByYWRpdXMgKyBzdHJva2VXaWR0aCAqIDIsIHkpO1xyXG4gICAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGggKyBzdHJva2VXaWR0aCAqIDIsIHkgKyBoZWlnaHQgKiAwLjUsIHggKyB3aWR0aCAtIHJhZGl1cyArIHN0cm9rZVdpZHRoICogMiwgeSArIGhlaWdodCk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oeCArIHJhZGl1cywgeSArIGhlaWdodCk7XHJcbiAgICAgICAgY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHkgKyBoZWlnaHQgKiAwLjUsIHggKyByYWRpdXMsIHkpO1xyXG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcblxyXG4gICAgICAgIGlmIChmaWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbC5nZXRDb2xvcigpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHN0cm9rZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IHN0cm9rZS5nZXRXaWR0aCgpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gc3Ryb2tlLmdldENvbG9yKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRyYXdDaXJjbGUoY29udGV4dDogYW55LCB4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGZpbGw6IG9sLnN0eWxlLkZpbGwsIHN0cm9rZTogb2wuc3R5bGUuU3Ryb2tlKSB7XHJcbiAgICAgICAgY29udGV4dC5jYW52YXMud2lkdGggPSBjb250ZXh0LmNhbnZhcy53aWR0aCA+IGNvbnRleHQuY2FudmFzLmhlaWdodCA/IGNvbnRleHQuY2FudmFzLndpZHRoIDogY29udGV4dC5jYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgIGNvbnRleHQuY2FudmFzLmhlaWdodCA9IGNvbnRleHQuY2FudmFzLndpZHRoO1xyXG4gICAgICAgIGxldCByYWRpdXMgPSAwO1xyXG4gICAgICAgIGlmIChzdHJva2UpIHtcclxuICAgICAgICAgICAgcmFkaXVzIC09IHN0cm9rZS5nZXRXaWR0aCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByYWRpdXMgKz0gY29udGV4dC5jYW52YXMud2lkdGggKiAwLjU7XHJcblxyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5hcmMoeCArIGNvbnRleHQuY2FudmFzLndpZHRoICogMC41LCB5ICsgY29udGV4dC5jYW52YXMud2lkdGggKiAwLjUsIHJhZGl1cywgMCwgMiAqIE1hdGguUEksIGZhbHNlKTtcclxuICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG5cclxuICAgICAgICBpZiAoZmlsbCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGZpbGwuZ2V0Q29sb3IoKTtcclxuICAgICAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc3Ryb2tlKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gc3Ryb2tlLmdldFdpZHRoKCkgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHN0cm9rZS5nZXRDb2xvcigpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VGV4dFdpdGhOdW1lcmljRm9ybWF0KGZlYXR1cmVUZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCB0bXBBcmd1bWVudHMgPSB0aGlzLm51bWVyaWNGb3JtYXQuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgIGxldCBudW1lcmljRm9ybWF0T3B0aW9ucyA9IHt9O1xyXG4gICAgICAgIGZvciAobGV0IHRtcEFyZ3VtZW50IG9mIHRtcEFyZ3VtZW50cykge1xyXG4gICAgICAgICAgICBsZXQga2V5VmFsdWVQYWlyID0gdG1wQXJndW1lbnQuc3BsaXQoXCI6XCIpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGtleVZhbHVlUGFpclswXS50cmltKCkpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJsb2NhbGVNYXRjaGVyXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgKDxhbnk+bnVtZXJpY0Zvcm1hdE9wdGlvbnMpLmxvY2FsZU1hdGNoZXIgPSBrZXlWYWx1ZVBhaXJbMV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInN0eWxlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgKDxhbnk+bnVtZXJpY0Zvcm1hdE9wdGlvbnMpLnN0eWxlID0ga2V5VmFsdWVQYWlyWzFdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJjdXJyZW5jeVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICg8YW55Pm51bWVyaWNGb3JtYXRPcHRpb25zKS5jdXJyZW5jeSA9IGtleVZhbHVlUGFpclsxXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiY3VycmVuY3lEaXNwbGF5XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgKDxhbnk+bnVtZXJpY0Zvcm1hdE9wdGlvbnMpLmN1cnJlbmN5RGlzcGxheSA9IGtleVZhbHVlUGFpclsxXS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwidXNlR3JvdXBpbmdcIjpcclxuICAgICAgICAgICAgICAgICAgICAoPGFueT5udW1lcmljRm9ybWF0T3B0aW9ucykudXNlR3JvdXBpbmcgPSBrZXlWYWx1ZVBhaXJbMV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIm1pbmltdW1JbnRlZ2VyRGlnaXRzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgKDxhbnk+bnVtZXJpY0Zvcm1hdE9wdGlvbnMpLm1pbmltdW1JbnRlZ2VyRGlnaXRzID0ga2V5VmFsdWVQYWlyWzFdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJtaW5pbXVtRnJhY3Rpb25EaWdpdHNcIjpcclxuICAgICAgICAgICAgICAgICAgICAoPGFueT5udW1lcmljRm9ybWF0T3B0aW9ucykubWluaW11bUZyYWN0aW9uRGlnaXRzID0ga2V5VmFsdWVQYWlyWzFdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJtYXhpbXVtRnJhY3Rpb25EaWdpdHNcIjpcclxuICAgICAgICAgICAgICAgICAgICAoPGFueT5udW1lcmljRm9ybWF0T3B0aW9ucykubWF4aW11bUZyYWN0aW9uRGlnaXRzID0ga2V5VmFsdWVQYWlyWzFdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJtaW5pbXVtU2lnbmlmaWNhbnREaWdpdHNcIjpcclxuICAgICAgICAgICAgICAgICAgICAoPGFueT5udW1lcmljRm9ybWF0T3B0aW9ucykubWluaW11bVNpZ25pZmljYW50RGlnaXRzID0ga2V5VmFsdWVQYWlyWzFdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJtYXhpbXVtU2lnbmlmaWNhbnREaWdpdHNcIjpcclxuICAgICAgICAgICAgICAgICAgICAoPGFueT5udW1lcmljRm9ybWF0T3B0aW9ucykubWF4aW11bVNpZ25pZmljYW50RGlnaXRzID0ga2V5VmFsdWVQYWlyWzFdLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgbnVtZXJpYyA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCh0bXBBcmd1bWVudHNbMF0sIG51bWVyaWNGb3JtYXRPcHRpb25zKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG51bWVyaWMuZm9ybWF0KE51bWJlcihmZWF0dXJlVGV4dCkpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldFRleHRXaXRoRGF0ZUZvcm1hdChmZWF0dXJlVGV4dDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gKDxhbnk+KG5ldyBEYXRlKGZlYXR1cmVUZXh0KSkpLmZvcm1hdCh0aGlzLmRhdGVGb3JtYXQpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldFRleHRXaXRoRm9ybWF0KGZlYXR1cmVUZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiAoPGFueT5TdHJpbmcpLmZvcm1hdCh0aGlzLnRleHRGb3JtYXQsIGZlYXR1cmVUZXh0KTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRUZXh0VHJhbnNmb3JtKGZlYXR1cmVUZXh0OiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAoZmVhdHVyZVRleHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMudGV4dFRyYW5zZm9ybSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInVwcGVyY2FzZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVUZXh0ID0gZmVhdHVyZVRleHQudG9Mb2NhbGVVcHBlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJsb3dlcmNhc2VcIjpcclxuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlVGV4dCA9IGZlYXR1cmVUZXh0LnRvTG9jYWxlTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmZWF0dXJlVGV4dDtcclxuICAgIH1cclxuXHJcbiAgICBCQVRDSF9DT05TVFJVQ1RPUlNfREVGQVVMVCA9IHtcclxuICAgICAgICBQb2ludDogVGV4dExhYmVsaW5nU3RyYXRlZ3ksXHJcbiAgICAgICAgTXVsdGlQb2ludDogVGV4dExhYmVsaW5nU3RyYXRlZ3ksXHJcbiAgICAgICAgTGluZVN0cmluZzogVGV4dExhYmVsaW5nU3RyYXRlZ3ksXHJcbiAgICAgICAgQ2lyY2xlOiBUZXh0TGFiZWxpbmdTdHJhdGVneSxcclxuICAgICAgICBNdWx0aUxpbmVTdHJpbmc6IFRleHRMYWJlbGluZ1N0cmF0ZWd5LFxyXG4gICAgICAgIFBvbHlnb246IFRleHRMYWJlbGluZ1N0cmF0ZWd5LFxyXG4gICAgICAgIE11bHRpUG9seWdvbjogVGV4dExhYmVsaW5nU3RyYXRlZ3lcclxuICAgIH07XHJcblxyXG4gICAgQkFUQ0hfQ09OU1RSVUNUT1JTX0RFVEVDVCA9IHtcclxuICAgICAgICBQb2ludDogRGV0ZWN0VGV4dExhYmVsaW5nU3RyYXRlZ3ksXHJcbiAgICAgICAgTXVsdGlQb2ludDogRGV0ZWN0VGV4dExhYmVsaW5nU3RyYXRlZ3ksXHJcbiAgICAgICAgTGluZVN0cmluZzogRGV0ZWN0VGV4dExhYmVsaW5nU3RyYXRlZ3ksXHJcbiAgICAgICAgQ2lyY2xlOiBEZXRlY3RUZXh0TGFiZWxpbmdTdHJhdGVneSxcclxuICAgICAgICBNdWx0aUxpbmVTdHJpbmc6IERldGVjdFRleHRMYWJlbGluZ1N0cmF0ZWd5LFxyXG4gICAgICAgIFBvbHlnb246IERldGVjdFRleHRMYWJlbGluZ1N0cmF0ZWd5LFxyXG4gICAgICAgIE11bHRpUG9seWdvbjogRGV0ZWN0VGV4dExhYmVsaW5nU3RyYXRlZ3lcclxuICAgIH07XHJcbn1cclxuXHJcbig8YW55PlN0cmluZykuZm9ybWF0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgbGV0IHMgPSBhcmd1bWVudHNbMF07XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcclxuICAgICAgICBsZXQgcmVnID0gbmV3IFJlZ0V4cChcIlxcXFx7XCIgKyBpICsgXCJcXFxcfVwiLCBcImdtXCIpO1xyXG4gICAgICAgIHMgPSBzLnJlcGxhY2UocmVnLCBhcmd1bWVudHNbaSArIDFdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzO1xyXG59O1xyXG5cclxuKDxhbnk+RGF0ZS5wcm90b3R5cGUpLmZvcm1hdCA9IGZ1bmN0aW9uIChmbXQpIHtcclxuICAgIGxldCBvID0ge1xyXG4gICAgICAgIFwiTStcIjogdGhpcy5nZXRNb250aCgpICsgMSxcclxuICAgICAgICBcImQrXCI6IHRoaXMuZ2V0RGF0ZSgpLFxyXG4gICAgICAgIFwiaCtcIjogdGhpcy5nZXRIb3VycygpLFxyXG4gICAgICAgIFwibStcIjogdGhpcy5nZXRNaW51dGVzKCksXHJcbiAgICAgICAgXCJzK1wiOiB0aGlzLmdldFNlY29uZHMoKSxcclxuICAgICAgICBcInErXCI6IE1hdGguZmxvb3IoKHRoaXMuZ2V0TW9udGgoKSArIDMpIC8gMyksXHJcbiAgICAgICAgXCJTXCI6IHRoaXMuZ2V0TWlsbGlzZWNvbmRzKClcclxuICAgIH07XHJcbiAgICBpZiAoLyh5KykvLnRlc3QoZm10KSlcclxuICAgICAgICBmbXQgPSBmbXQucmVwbGFjZShSZWdFeHAuJDEsICh0aGlzLmdldEZ1bGxZZWFyKCkgKyBcIlwiKS5zdWJzdHIoNCAtIFJlZ0V4cC4kMS5sZW5ndGgpKTtcclxuICAgIGZvciAobGV0IGsgaW4gbylcclxuICAgICAgICBpZiAobmV3IFJlZ0V4cChcIihcIiArIGsgKyBcIilcIikudGVzdChmbXQpKVxyXG4gICAgICAgICAgICBmbXQgPSBmbXQucmVwbGFjZShSZWdFeHAuJDEsIChSZWdFeHAuJDEubGVuZ3RoID09PSAxKSA/IChvW2tdKSA6ICgoXCIwMFwiICsgb1trXSkuc3Vic3RyKChcIlwiICsgb1trXSkubGVuZ3RoKSkpO1xyXG4gICAgcmV0dXJuIGZtdDtcclxufTsiLCJpbXBvcnQgeyBHZW9UZXh0U3R5bGUgfSBmcm9tIFwiLi9nZW9UZXh0U3R5bGVcIjtcclxuaW1wb3J0IHsgY29vcmRpbmF0ZSB9IGZyb20gXCJvcGVubGF5ZXJzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVGV4dExhYmVsaW5nU3RyYXRlZ3kge1xyXG4gICAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgICBwdWJsaWMgbWFya0xvY2F0aW9uKGZsYXRDb29yZGluYXRlczogYW55LCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgcmVzb2x1dGlvbjogYW55LCBnZW9tZXRyeVR5cGU6IGFueSwgdGV4dFN0eWxlOiBHZW9UZXh0U3R5bGUsIHN0cmF0ZWd5VHJlZTogYW55LCBmcmFtZVN0YXRlOiBvbHguRnJhbWVTdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hcmtMb2NhdGlvbkNvcmUoZmxhdENvb3JkaW5hdGVzLCB3aWR0aCwgaGVpZ2h0LCByZXNvbHV0aW9uLCBnZW9tZXRyeVR5cGUsIHRleHRTdHlsZSwgc3RyYXRlZ3lUcmVlLCBmcmFtZVN0YXRlKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgbWFya0xvY2F0aW9uQ29yZShmbGF0Q29vcmRpbmF0ZXM6IGFueSwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIHJlc29sdXRpb246IGFueSwgZ2VvbWV0cnlUeXBlOiBhbnksIHRleHRTdHlsZTogR2VvVGV4dFN0eWxlLCBzdHJhdGVneVRyZWU6IGFueSwgZnJhbWVTdGF0ZTogb2x4LkZyYW1lU3RhdGUpIHtcclxuICAgICAgICBpZiAodGhpcy5pc092ZXJsYXBwaW5nKGZsYXRDb29yZGluYXRlcywgd2lkdGgsIGhlaWdodCwgdGV4dFN0eWxlLm1hcmdpbiwgdGV4dFN0eWxlLm1pbkRpc3RhbmNlLCB0ZXh0U3R5bGUubWluUGFkZGluZywgdGV4dFN0eWxlLnNwYWNpbmcsIHN0cmF0ZWd5VHJlZSwgZnJhbWVTdGF0ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmxhdENvb3JkaW5hdGVzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNPdmVybGFwcGluZyhmbGF0Q29vcmRpbmF0ZXM6IGFueSwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIG1hcmdpbjogbnVtYmVyLCBtaW5EaXN0YW5jZTogbnVtYmVyLCBtaW5QYWRkaW5nOiBudW1iZXIsIHNwYWNpbmc6IG51bWJlciwgc3RyYXRlZ3lUcmVlOiBhbnksIGZyYW1lU3RhdGU6IG9seC5GcmFtZVN0YXRlKSB7XHJcbiAgICAgICAgaWYgKGZsYXRDb29yZGluYXRlcyA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB0cnVlOyB9XHJcblxyXG4gICAgICAgIGxldCBkaXN0YW5jZSA9IChtYXJnaW4gPyBtYXJnaW4gOiAwKSArIChtaW5EaXN0YW5jZSA/IG1pbkRpc3RhbmNlIDogMCkgKyAobWluUGFkZGluZyA/IG1pblBhZGRpbmcgOiAwKSArIChzcGFjaW5nID8gc3BhY2luZyA6IDApO1xyXG5cclxuICAgICAgICBsZXQgY29vcmRpbmF0ZSA9IFtmbGF0Q29vcmRpbmF0ZXNbMF0sIGZsYXRDb29yZGluYXRlc1sxXV07XHJcbiAgICAgICAgbGV0IHNjcmVlbkNvb3JkaW5hdGVzID0gdGhpcy5jb252ZXJ0UGl4ZWxGcm9tQ29vcmRpbmF0ZShjb29yZGluYXRlLCBmcmFtZVN0YXRlKTtcclxuICAgICAgICBsZXQgbWluWCA9IHNjcmVlbkNvb3JkaW5hdGVzWzBdIC0gd2lkdGggLyAyIC0gZGlzdGFuY2UgKiAwLjU7XHJcbiAgICAgICAgbGV0IG1pblkgPSBzY3JlZW5Db29yZGluYXRlc1sxXSAtIGhlaWdodCAvIDIgLSBkaXN0YW5jZSAqIDAuNTtcclxuICAgICAgICBsZXQgbWF4WCA9IG1pblggKyB3aWR0aCArIGRpc3RhbmNlO1xyXG4gICAgICAgIGxldCBtYXhZID0gbWluWSArIGhlaWdodCArIGRpc3RhbmNlO1xyXG4gICAgICAgIGxldCBib3ggPSB7XHJcbiAgICAgICAgICAgIG1pblg6IG1pblgsXHJcbiAgICAgICAgICAgIG1pblk6IG1pblksXHJcbiAgICAgICAgICAgIG1heFg6IG1heFgsXHJcbiAgICAgICAgICAgIG1heFk6IG1heFlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghc3RyYXRlZ3lUcmVlLmNvbGxpZGVzKGJveCkpIHtcclxuICAgICAgICAgICAgc3RyYXRlZ3lUcmVlLmluc2VydChib3gpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29udmVydFBpeGVsRnJvbUNvb3JkaW5hdGUoY29vcmRpbmF0ZTogYW55LCBmcmFtZVN0YXRlOiBvbHguRnJhbWVTdGF0ZSkge1xyXG4gICAgICAgIGlmICghZnJhbWVTdGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoPGFueT5vbCkudHJhbnNmb3JtLmFwcGx5KCg8YW55PmZyYW1lU3RhdGUpLmNvb3JkaW5hdGVUb1BpeGVsVHJhbnNmb3JtLCBjb29yZGluYXRlLnNsaWNlKDAsIDIpKTtcclxuICAgIH1cclxufSIsImV4cG9ydCBjbGFzcyBUcmVlTm9kZTxUPiB7XHJcbiAgICBkYXRhOiBUO1xyXG4gICAgY2hpbGRyZW46IEFycmF5PFRyZWVOb2RlPFQ+PjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBUKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuID0gW107XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBTdHlsZUpzb25DYWNoZUl0ZW0gfSBmcm9tIFwiLi9zdHlsZUpzb25DYWNoZUl0ZW1cIjtcclxuaW1wb3J0IHsgVHJlZSB9IGZyb20gXCIuL3RyZWVcIjtcclxuaW1wb3J0IHsgVHJlZU5vZGUgfSBmcm9tIFwiLi90cmVlTm9kZVwiO1xyXG5pbXBvcnQgeyBHZW9UZXh0U3R5bGUgfSBmcm9tIFwiLi4vc3R5bGUvZ2VvVGV4dFN0eWxlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU3R5bGVKc29uQ2FjaGUge1xyXG4gICAgcHJpdmF0ZSBnZW9TdHlsZUdyb3VwQnlab29tOiBhbnlbXTtcclxuXHJcbiAgICBzdHlsZUpzb246IGFueTtcclxuICAgIGdlb1N0eWxlczogYW55O1xyXG4gICAgZ2VvVGV4dFN0eWxlSW5mbzphbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5nZW9TdHlsZUdyb3VwQnlab29tID0gW107XHJcbiAgICAgICAgdGhpcy5zdHlsZUpzb24gPSB7fTtcclxuICAgICAgICB0aGlzLmdlb1N0eWxlcyA9IHt9O1xyXG4gICAgICAgIHRoaXMuZ2VvVGV4dFN0eWxlSW5mbyA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIGFkZCh6b29tOiBudW1iZXIsIGRhdGFMYXllck5hbWU6IHN0cmluZywgdHJlZTogVHJlZTxTdHlsZUpzb25DYWNoZUl0ZW0+KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2VvU3R5bGVHcm91cEJ5Wm9vbVt6b29tXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2VvU3R5bGVHcm91cEJ5Wm9vbVt6b29tXSA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5nZW9TdHlsZUdyb3VwQnlab29tW3pvb21dID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5nZW9TdHlsZUdyb3VwQnlab29tW3pvb21dID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmdlb1N0eWxlR3JvdXBCeVpvb21bem9vbV1bZGF0YUxheWVyTmFtZV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmdlb1N0eWxlR3JvdXBCeVpvb21bem9vbV1bZGF0YUxheWVyTmFtZV0gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5nZW9TdHlsZUdyb3VwQnlab29tW3pvb21dW2RhdGFMYXllck5hbWVdLnB1c2godHJlZSk7XHJcblxyXG4gICAgICAgIHRoaXMucmVhZEdlb1N0eWxlRnJvbVRyZWUodHJlZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVhZEdlb1N0eWxlRnJvbVRyZWUodHJlZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRHZW9TdHlsZUZyb21UcmVlTm9kZSh0cmVlLnJvb3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlYWRHZW9TdHlsZUZyb21UcmVlTm9kZShub2RlKSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIGlmIChub2RlLmRhdGEuZ2VvU3R5bGUpIHtcclxuICAgICAgICAgICAgdGhpcy5nZW9TdHlsZXNbbm9kZS5kYXRhLmdlb1N0eWxlLmlkXSA9IG5vZGUuZGF0YS5nZW9TdHlsZTtcclxuICAgICAgICAgICAgLy8gZ2V0IHRoZSB3aWR0aHMgb2YgR2VvVGV4dFN0eWxlXHJcbiAgICAgICAgICAgIGlmKG5vZGUuZGF0YS5nZW9TdHlsZSBpbnN0YW5jZW9mIEdlb1RleHRTdHlsZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZW9UZXh0U3R5bGVJbmZvW25vZGUuZGF0YS5nZW9TdHlsZS5pZF09IG5vZGUuZGF0YS5nZW9TdHlsZS5jaGFyV2lkdGhzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChub2RlLmRhdGEuY2hpbGRyZW5HZW9TdHlsZXMgJiYgbm9kZS5kYXRhLmNoaWxkcmVuR2VvU3R5bGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLmRhdGEuY2hpbGRyZW5HZW9TdHlsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2VvU3R5bGVzW25vZGUuZGF0YS5jaGlsZHJlbkdlb1N0eWxlc1tpXS5pZF0gPSBub2RlLmRhdGEuY2hpbGRyZW5HZW9TdHlsZXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZihub2RlLmRhdGEuY2hpbGRyZW5HZW9TdHlsZXNbaV0gaW5zdGFuY2VvZiBHZW9UZXh0U3R5bGUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW9UZXh0U3R5bGVJbmZvW25vZGUuZGF0YS5jaGlsZHJlbkdlb1N0eWxlc1tpXS5pZF09IG5vZGUuZGF0YS5jaGlsZHJlbkdlb1N0eWxlc1tpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobm9kZS5jaGlsZHJlbiAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlYWRHZW9TdHlsZUZyb21UcmVlTm9kZShub2RlLmNoaWxkcmVuW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyKCkge1xyXG4gICAgICAgIHRoaXMuZ2VvU3R5bGVHcm91cEJ5Wm9vbS5sZW5ndGggPSAwO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEdlb0ZpbHRlciB9IGZyb20gXCIuLi9maWx0ZXIvZ2VvRmlsdGVyXCI7XHJcbmltcG9ydCB7IEdlb0ZpbHRlckl0ZW0gfSBmcm9tIFwiLi4vZmlsdGVyL2dlb0ZpbHRlckl0ZW1cIjtcclxuaW1wb3J0IHsgR2VvWm9vbUZpbHRlciB9IGZyb20gXCIuLi9maWx0ZXIvZ2VvWm9vbUZpbHRlclwiO1xyXG5pbXBvcnQgeyBHZW9TdHJpbmdBdHRyaWJ1dGVGaWx0ZXIgfSBmcm9tIFwiLi4vZmlsdGVyL2dlb1N0cmluZ0F0dHJpYnV0ZUZpbHRlclwiO1xyXG5pbXBvcnQgeyBHZW9SZWdleEZpbHRlciB9IGZyb20gXCIuLi9maWx0ZXIvZ2VvUmVnZXhGaWx0ZXJcIjtcclxuaW1wb3J0IHsgR2VvTnVtYmVyQXR0cmlidXRlRmlsdGVyIH0gZnJvbSBcIi4uL2ZpbHRlci9nZW9OdW1iZXJBdHRyaWJ1dGVGaWx0ZXJcIjtcclxuaW1wb3J0IHsgR2VvU3R5bGUgfSBmcm9tIFwiLi4vc3R5bGUvZ2VvU3R5bGVcIjtcclxuaW1wb3J0IHsgR2VvQXJlYVN0eWxlIH0gZnJvbSBcIi4uL3N0eWxlL2dlb0FyZWFTdHlsZVwiO1xyXG5pbXBvcnQgeyBHZW9MaW5lU3R5bGUgfSBmcm9tIFwiLi4vc3R5bGUvZ2VvTGluZVN0eWxlXCI7XHJcbmltcG9ydCB7IEdlb1BvaW50U3R5bGUgfSBmcm9tIFwiLi4vc3R5bGUvZ2VvUG9pbnRTdHlsZVwiO1xyXG5pbXBvcnQgeyBHZW9UZXh0U3R5bGUgfSBmcm9tIFwiLi4vc3R5bGUvZ2VvVGV4dFN0eWxlXCI7XHJcbmltcG9ydCB7IEdlb1NoaWVsZFN0eWxlIH0gZnJvbSBcIi4uL3N0eWxlL2dlb1NoaWVsZFN0eWxlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU3R5bGVKc29uQ2FjaGVJdGVtIHtcclxuICAgIHB1YmxpYyBkYXRhTGF5ZXJOYW1lOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgbWluWm9vbTogbnVtYmVyO1xyXG4gICAgcHVibGljIG1heFpvb206IG51bWJlcjtcclxuICAgIHB1YmxpYyB6SW5kZXg6IGFueTsgLy8gc3RyaW5nfHxudW1iZXJcclxuICAgIHB1YmxpYyBzdHlsZUZpcnN0OiBib29sZWFuO1xyXG4gICAgcHVibGljIGZpbHRlckdyb3VwOiBhbnk7IC8vIEFycmF5IG9mIGZpbHRlcnMsXHJcblxyXG4gICAgcHVibGljIGdlb1N0eWxlOiBHZW9TdHlsZTtcclxuICAgIHB1YmxpYyBjaGlsZHJlbkdlb1N0eWxlczogR2VvU3R5bGVbXTtcclxuICAgIHB1YmxpYyBzdWJTdHlsZUNhY2hlSXRlbXM6IFN0eWxlSnNvbkNhY2hlSXRlbVtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHN0eWxlSnNvbjogYW55LCBtaW5ab29tLCBtYXhab29tLCBkYXRhTGF5ZXJDb2x1bW5OYW1lKSB7XHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbkdlb1N0eWxlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc3ViU3R5bGVDYWNoZUl0ZW1zID0gW107XHJcbiAgICAgICAgdGhpcy5taW5ab29tID0gbWluWm9vbTtcclxuICAgICAgICB0aGlzLm1heFpvb20gPSBtYXhab29tO1xyXG4gICAgICAgIHRoaXMuekluZGV4ID0gc3R5bGVKc29uW1wiei1pbmRleFwiXTtcclxuICAgICAgICB0aGlzLnN0eWxlRmlyc3QgPSBzdHlsZUpzb25bXCJzdHlsZS1maXJzdFwiXTtcclxuICAgICAgICB0aGlzLmZpbHRlckdyb3VwID0gdGhpcy5jcmVhdGVGaWx0ZXJzKHN0eWxlSnNvbi5maWx0ZXIsIGRhdGFMYXllckNvbHVtbk5hbWUpIHx8IFtdO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlU3ViSXRlbXMoc3R5bGVKc29uLCBkYXRhTGF5ZXJDb2x1bW5OYW1lKTtcclxuICAgICAgICB0aGlzLmdlb1N0eWxlID0gdGhpcy5jcmVhdGVHZW9TdHlsZShzdHlsZUpzb24pO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlQ2hpbGRyZW5HZW9TdHlsZShzdHlsZUpzb24pO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUZpbHRlcnMoZmlsdGVyU3RyaW5nLCBkYXRhTGF5ZXJDb2x1bW5OYW1lKSB7XHJcbiAgICAgICAgbGV0IGZpbHRlckdyb3VwID0gW107XHJcbiAgICAgICAgbGV0IHRlbXBNaW5ab29tID0gdGhpcy5tYXhab29tO1xyXG4gICAgICAgIGxldCB0ZW1wTWF4Wm9vbSA9IHRoaXMubWluWm9vbTtcclxuICAgICAgICBpZiAoZmlsdGVyU3RyaW5nKSB7XHJcbiAgICAgICAgICAgIGxldCBmaWx0ZXJTdHJpbmdzID0gZmlsdGVyU3RyaW5nLnNwbGl0KFwifFwiKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWx0ZXJTdHJpbmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZmlsdGVyU3RyID0gZmlsdGVyU3RyaW5nc1tpXTtcclxuICAgICAgICAgICAgICAgIGxldCBleHByZXNzaW9uID0gXCIoXFxcXHcrPz1+Jy4rPycpfChcXFxcdys/Wzw+IT1dKidbXjtdKz8nKXwoXFxcXHcrP1s8PiE9XSpbXjtdKylcIjtcclxuICAgICAgICAgICAgICAgIGxldCByZWdleCA9IG5ldyBSZWdFeHAoZXhwcmVzc2lvbiwgXCJnXCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdHMgPSBmaWx0ZXJTdHIubWF0Y2gocmVnZXgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJhbmdlRmlsdGVycyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgbGV0IGZpbHRlcnMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgZ2VvWm9vbUZpbHRlcjogR2VvWm9vbUZpbHRlcjtcclxuICAgICAgICAgICAgICAgIGxldCBkYXRhTGF5ZXJOYW1lRmlsdGVyOiBHZW9TdHJpbmdBdHRyaWJ1dGVGaWx0ZXI7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdHNbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbHRlckl0ZW0gPSBHZW9GaWx0ZXJJdGVtLmNyZWF0ZUZpbHRlckl0ZW0ocmVzdWx0c1tpXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVySXRlbS52YWx1ZS5pbmRleE9mKFwifidcIikgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnMucHVzaChuZXcgR2VvUmVnZXhGaWx0ZXIoW2ZpbHRlckl0ZW1dKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsdGVySXRlbS5rZXkgPT09IFwiem9vbVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2VvWm9vbUZpbHRlciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvWm9vbUZpbHRlciA9IG5ldyBHZW9ab29tRmlsdGVyKFtdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb1pvb21GaWx0ZXIuYWRkRmlsdGVySXRlbShmaWx0ZXJJdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmaWx0ZXJJdGVtLnZhbHVlLmluY2x1ZGVzKFwiJ1wiKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJJdGVtLmtleSA9PT0gZGF0YUxheWVyQ29sdW1uTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhTGF5ZXJOYW1lRmlsdGVyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUxheWVyTmFtZUZpbHRlciA9IG5ldyBHZW9TdHJpbmdBdHRyaWJ1dGVGaWx0ZXIoW2ZpbHRlckl0ZW1dKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2gobmV3IEdlb1N0cmluZ0F0dHJpYnV0ZUZpbHRlcihbZmlsdGVySXRlbV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlRmlsdGVyc1tmaWx0ZXJJdGVtLmtleV0gPSByYW5nZUZpbHRlcnNbZmlsdGVySXRlbS5rZXldIHx8IG5ldyBHZW9OdW1iZXJBdHRyaWJ1dGVGaWx0ZXIoW10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VGaWx0ZXJzW2ZpbHRlckl0ZW0ua2V5XS5hZGRGaWx0ZXJJdGVtKGZpbHRlckl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgbWluWm9vbSBhbmQgbWF4Wm9vbSBieSBab29tRmlsdGVyXHJcbiAgICAgICAgICAgICAgICBpZiAoZ2VvWm9vbUZpbHRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcnMucHVzaChnZW9ab29tRmlsdGVyKTtcclxuICAgICAgICAgICAgICAgICAgICBnZW9ab29tRmlsdGVyLmluaXRpYWxpemUoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ2VvWm9vbUZpbHRlci5yYW5nZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWluWiA9ICtnZW9ab29tRmlsdGVyLnJhbmdlc1swXVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1heFogPSArZ2VvWm9vbUZpbHRlci5yYW5nZXNbMF1bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtaW5aIDw9IHRlbXBNaW5ab29tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wTWluWm9vbSA9IG1pblo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1heFogPj0gdGVtcE1heFpvb20pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBNYXhab29tID0gbWF4WjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHogPSArZ2VvWm9vbUZpbHRlci5hbGxvd2VkVmFsdWVzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeiA8PSB0ZW1wTWluWm9vbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcE1pblpvb20gPSB6O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh6ID49IHRlbXBNYXhab29tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wTWF4Wm9vbSA9IHo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIGRhdGFMYXllck5hbWVcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhTGF5ZXJOYW1lRmlsdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YUxheWVyTmFtZUZpbHRlci5pbml0aWFsaXplKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhTGF5ZXJOYW1lID0gZGF0YUxheWVyTmFtZUZpbHRlci5leHBlY3RlZFZhbHVlc1swXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IG5hbWUgaW4gcmFuZ2VGaWx0ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVycy5wdXNoKHJhbmdlRmlsdGVyc1tuYW1lXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJHcm91cC5wdXNoKGZpbHRlcnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0ZW1wTWF4Wm9vbSAhPT0gdGhpcy5taW5ab29tIHx8IHRlbXBNaW5ab29tICE9PSB0aGlzLm1heFpvb20pIHtcclxuICAgICAgICAgICAgdGhpcy5tYXhab29tID0gdGVtcE1heFpvb207XHJcbiAgICAgICAgICAgIHRoaXMubWluWm9vbSA9IHRlbXBNaW5ab29tO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmlsdGVyR3JvdXA7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlU3ViSXRlbXMoc3R5bGVKc29uLCBkYXRhTGF5ZXJDb2x1bW5OYW1lKSB7XHJcbiAgICAgICAgaWYgKHN0eWxlSnNvbi5zdHlsZSkge1xyXG4gICAgICAgICAgICAvLyBhcHBseSB0aGUgcHJvcGVydHkgdG8gc3ViIHN0eWxlLlxyXG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gc3R5bGVKc29uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSBcInN0eWxlXCIgJiYga2V5ICE9PSBcImZpbHRlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHlsZUpzb24uc3R5bGUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXBwbHkgdGhlIHByb3BlcnR5IHRvIHN1YiBzdHlsZSBpZiB0aGUgc3ViIHN0eWxlIGRvZXMgbm90IGluY2x1ZGVkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVKc29uLnN0eWxlW2ldW2tleV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gXCJpZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVKc29uLnN0eWxlW2ldW2tleV0gPSBzdHlsZUpzb25ba2V5XSArIFwiI1wiICsgaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVKc29uLnN0eWxlW2ldW2tleV0gPSBzdHlsZUpzb25ba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgc3ViSXRlbU1pblpvb207XHJcbiAgICAgICAgICAgIGxldCBzdWJJdGVtTWF4Wm9vbTtcclxuICAgICAgICAgICAgZm9yIChsZXQgc3ViU3R5bGUgb2Ygc3R5bGVKc29uLnN0eWxlKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3R5bGVKc29uQ2FjaGVTdWJJdGVtID0gbmV3IFN0eWxlSnNvbkNhY2hlSXRlbShzdWJTdHlsZSwgdGhpcy5taW5ab29tLCB0aGlzLm1heFpvb20sIGRhdGFMYXllckNvbHVtbk5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzdWJJdGVtTWF4Wm9vbSA9PT0gdW5kZWZpbmVkIHx8IHN0eWxlSnNvbkNhY2hlU3ViSXRlbS5tYXhab29tID4gc3ViSXRlbU1heFpvb20pIHtcclxuICAgICAgICAgICAgICAgICAgICBzdWJJdGVtTWF4Wm9vbSA9IHN0eWxlSnNvbkNhY2hlU3ViSXRlbS5tYXhab29tO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHN1Ykl0ZW1NaW5ab29tID09PSB1bmRlZmluZWQgfHwgc3R5bGVKc29uQ2FjaGVTdWJJdGVtLm1pblpvb20gPCBzdWJJdGVtTWluWm9vbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1Ykl0ZW1NaW5ab29tID0gc3R5bGVKc29uQ2FjaGVTdWJJdGVtLm1pblpvb207XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJTdHlsZUNhY2hlSXRlbXMucHVzaChzdHlsZUpzb25DYWNoZVN1Ykl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzdWJJdGVtTWluWm9vbSAmJiBzdWJJdGVtTWluWm9vbSA+IHRoaXMubWluWm9vbSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5taW5ab29tID0gc3ViSXRlbU1pblpvb207XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN1Ykl0ZW1NYXhab29tICYmIHN1Ykl0ZW1NYXhab29tIDwgdGhpcy5tYXhab29tKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1heFpvb20gPSBzdWJJdGVtTWF4Wm9vbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVHZW9TdHlsZShzdHlsZUpzb24pIHtcclxuICAgICAgICBsZXQgZ2VvU3R5bGU7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHN0eWxlSnNvbikge1xyXG4gICAgICAgICAgICBpZiAoa2V5ICE9PSBcInN0eWxlXCIgJiYga2V5ICE9PSBcImZpbHRlclwiKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQga2V5cyA9IGtleS5zcGxpdChcIi1cIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChrZXlzWzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJwb2x5Z29uXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9TdHlsZSA9IG5ldyBHZW9BcmVhU3R5bGUoc3R5bGVKc29uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibGluZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvU3R5bGUgPSBuZXcgR2VvTGluZVN0eWxlKHN0eWxlSnNvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInRleHRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb1N0eWxlID0gbmV3IEdlb1RleHRTdHlsZShzdHlsZUpzb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJwb2ludFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvU3R5bGUgPSBuZXcgR2VvUG9pbnRTdHlsZShzdHlsZUpzb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzaGllbGRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb1N0eWxlID0gbmV3IEdlb1NoaWVsZFN0eWxlKHN0eWxlSnNvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZ2VvU3R5bGU7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlQ2hpbGRyZW5HZW9TdHlsZShzdHlsZUpzb24pIHtcclxuICAgICAgICBpZiAoc3R5bGVKc29uW1wiY2hpbGRyZW5cIl0pIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHlsZUpzb25bXCJjaGlsZHJlblwiXS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkcmVuR2VvU3R5bGVKc29uID0gc3R5bGVKc29uW1wiY2hpbGRyZW5cIl1baV07XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRyZW5HZW9TdHlsZUpzb25bXCJpZFwiXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW5HZW9TdHlsZUpzb25bXCJpZFwiXSA9IHN0eWxlSnNvbltcImlkXCJdICsgXCIjY1wiICsgaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5HZW9TdHlsZXMucHVzaCh0aGlzLmNyZWF0ZUdlb1N0eWxlKGNoaWxkcmVuR2VvU3R5bGVKc29uKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVHJlZU5vZGUgfSBmcm9tIFwiLi90cmVlTm9kZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRyZWU8VD4ge1xyXG4gICAgbm9kZTogVHJlZU5vZGU8VD47XHJcbiAgICByb290OiBUcmVlTm9kZTxUPjtcclxuICAgIHRyZWVJbmRleDogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG5vZGU6IFRyZWVOb2RlPFQ+LCB0cmVlSW5kZXgpIHtcclxuICAgICAgICB0aGlzLm5vZGUgPSBub2RlO1xyXG4gICAgICAgIHRoaXMucm9vdCA9IG5vZGU7XHJcbiAgICAgICAgdGhpcy50cmVlSW5kZXggPSB0cmVlSW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgdHJhdmVyc2VOb2RlKGNhbGxiYWNrLCBzZWxlY3QpIHtcclxuICAgICAgICAoZnVuY3Rpb24gcmVjdXJzZShjdXJyZW50Tm9kZSkge1xyXG5cclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKGN1cnJlbnROb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnROb2RlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gY3VycmVudE5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlY3Vyc2UoY3VycmVudE5vZGUuY2hpbGRyZW5baV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgbm9kZSBpcyBtYXRjaGVkLCBhbmQgd2l0aG91dCBjaGlsZHJlblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdChjdXJyZW50Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gdHJ1ZTogdGhlIGN1cnJlbnROb2RlIGlzIG1hdGNoZWQuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBmYWxzZTogdGhlIGN1cnJlbnROb2RlIGlzIG5vdCBtYXRjaGVkLlxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSkodGhpcy5yb290KTtcclxuICAgIH1cclxufSIsImNvbnN0IGxvYWRTaGFkZXIgPSAoZ2wsIHR5cGUsIHNvdXJjZUNvZGUpID0+IHtcclxuICAgIGNvbnN0IHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcih0eXBlKTtcclxuICAgIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZUNvZGUpO1xyXG4gICAgZ2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xyXG4gICAgbGV0IGNvbXBpbGVkID0gZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpO1xyXG4gICAgaWYgKCFjb21waWxlZCkge1xyXG4gICAgICAgIGxldCBlcnJvciA9IGdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgZ2wuZGVsZXRlU2hhZGVyKHNoYWRlcik7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHNoYWRlcjtcclxufVxyXG5cclxuY29uc3QgY3JlYXRlUHJvZ3JhbSA9IChnbCwgdl9zaGFkZXJfc291cmNlLCBmX3NoYWRlcl9zb3VyY2UpID0+IHtcclxuICAgIGNvbnN0IHByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XHJcbiAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgbG9hZFNoYWRlcihnbCwgZ2wuVkVSVEVYX1NIQURFUiwgdl9zaGFkZXJfc291cmNlKSk7XHJcbiAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgbG9hZFNoYWRlcihnbCwgZ2wuRlJBR01FTlRfU0hBREVSLCBmX3NoYWRlcl9zb3VyY2UpKTtcclxuICAgIGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xyXG5cclxuICAgIGxldCBsaW5rZWQgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkxJTktfU1RBVFVTKTtcclxuICAgIGlmICghbGlua2VkKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZ2wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb2dyYW07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVByb2dyYW07IiwiaW1wb3J0IGNyZWF0ZVByb2dyYW0gZnJvbSAnLi9pbml0U2hhZGVyJztcclxuXHJcbmNvbnN0IHZfc2hhZGVyX3NvdXJjZSA9IGBcclxuICAgIGF0dHJpYnV0ZSB2ZWM0IGFfUG9zaXRpb247XHJcbiAgICBhdHRyaWJ1dGUgdmVjNCBhX0NvbG9yO1xyXG5cclxuICAgIHZhcnlpbmcgdmVjNCB2X0NvbG9yO1xyXG4gICAgdm9pZCBtYWluKCl7XHJcbiAgICAgICAgZ2xfUG9zaXRpb24gPSBhX1Bvc2l0aW9uO1xyXG4gICAgICAgIGdsX1BvaW50U2l6ZSA9IDEwLjA7XHJcbiAgICAgICAgdl9Db2xvciA9IGFfQ29sb3I7XHJcbiAgICB9XHJcbmA7XHJcblxyXG5jb25zdCBmX3NoYWRlcl9zb3VyY2UgPSBgXHJcbiAgICBwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcclxuICAgIHZhcnlpbmcgdmVjNCB2X0NvbG9yO1xyXG4gICAgdm9pZCBtYWluKCl7XHJcbiAgICAgICAgZ2xfRnJhZ0NvbG9yID0gdl9Db2xvcjtcclxuICAgIH1cclxuYDtcclxuXHJcbmNvbnN0IGRyYXdMaW5lU3RyaW5nID0gKGdsLCBkYXRhKSA9PiB7XHJcbiAgICBsZXQge1xyXG4gICAgICAgIHdlYmdsTGluZUluZGV4LFxyXG4gICAgICAgIHdlYmdsUHJvZ3JhbVxyXG4gICAgfSA9IGRhdGE7XHJcblxyXG4gICAgaWYod2ViZ2xQcm9ncmFtPT09dW5kZWZpbmVkKXtcclxuICAgICAgICB3ZWJnbFByb2dyYW0gPSBjcmVhdGVQcm9ncmFtKGdsLCB2X3NoYWRlcl9zb3VyY2UsIGZfc2hhZGVyX3NvdXJjZSk7XHJcbiAgICAgICAgKDxhbnk+b2wpLndlYmdsQ29udGV4dFsnbGluZVByb2dyYW0nXT13ZWJnbFByb2dyYW07XHJcbiAgICB9XHJcbiAgICBnbC51c2VQcm9ncmFtKHdlYmdsUHJvZ3JhbSk7XHJcbiAgICBjb25zdCBhX1Bvc2l0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24od2ViZ2xQcm9ncmFtLCAnYV9Qb3NpdGlvbicpO1xyXG4gICAgY29uc3QgYV9Db2xvciA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHdlYmdsUHJvZ3JhbSwgJ2FfQ29sb3InKTtcclxuXHJcbiAgICBcclxuICAgIGxldCBtdWx0aXBseUxpbmUgPSB3ZWJnbExpbmVJbmRleC5tdWx0aXBseUxpbmU7XHJcbiAgICBsZXQgbGluZXMgPSB3ZWJnbExpbmVJbmRleC5saW5lcztcclxuXHJcbiAgICBsZXQgYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XHJcbiAgICBsZXQgaW5kZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgIGxldCBjb2xvckJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgXHJcbiAgICBtdWx0aXBseUxpbmUuaW5kZXhBcnIuZm9yRWFjaCgodmFsLCBpbmRleCkgPT4ge1xyXG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXIpO1xyXG4gICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBtdWx0aXBseUxpbmUuY29vcmRpbmF0ZXNBcnJbaW5kZXhdLCBnbC5EWU5BTUlDX0RSQVcpO1xyXG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoYV9Qb3NpdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhX1Bvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGNvbG9yQnVmZmVyKTtcclxuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbXVsdGlwbHlMaW5lLmNvbG9yQXJyW2luZGV4XSwgZ2wuRFlOQU1JQ19EUkFXKTtcclxuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGFfQ29sb3IsIDQsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XHJcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoYV9Db2xvcik7XHJcblxyXG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGluZGV4QnVmZmVyKTtcclxuICAgICAgICBcclxuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB2YWwsIGdsLkRZTkFNSUNfRFJBVyk7XHJcbiAgICAgICAgZ2wuZHJhd0VsZW1lbnRzKDQsIHZhbC5sZW5ndGgsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGxpbmVzLmluZGV4QXJyLmZvckVhY2goKHZhbCwgaW5kZXgpID0+IHtcclxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyKTtcclxuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbGluZXMuY29vcmRpbmF0ZXNBcnJbaW5kZXhdLCBnbC5EWU5BTUlDX0RSQVcpO1xyXG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoYV9Qb3NpdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhX1Bvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGNvbG9yQnVmZmVyKTtcclxuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbGluZXMuY29sb3JBcnJbaW5kZXhdLCBnbC5EWU5BTUlDX0RSQVcpO1xyXG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoYV9Db2xvciwgNCwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhX0NvbG9yKTtcclxuXHJcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgaW5kZXhCdWZmZXIpO1xyXG4gICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHZhbCwgZ2wuRFlOQU1JQ19EUkFXKTtcclxuXHJcbiAgICAgICAgZ2wuZHJhd0VsZW1lbnRzKDEsIHZhbC5sZW5ndGgsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkcmF3TGluZVN0cmluZzsiLCJpbXBvcnQgY3JlYXRlUHJvZ3JhbSBmcm9tICcuL2luaXRTaGFkZXInO1xyXG5cclxuY29uc3Qgdl9zaGFkZXJfc291cmNlID0gYFxyXG4gICAgYXR0cmlidXRlIHZlYzQgYV9Qb3NpdGlvbjtcclxuICAgIGF0dHJpYnV0ZSB2ZWM0IGFfQ29sb3I7XHJcblxyXG4gICAgdmFyeWluZyB2ZWM0IHZfQ29sb3I7XHJcbiAgICB2b2lkIG1haW4oKXtcclxuICAgICAgICBnbF9Qb3NpdGlvbiA9IGFfUG9zaXRpb247XHJcbiAgICAgICAgZ2xfUG9pbnRTaXplID0gMS41O1xyXG4gICAgICAgIHZfQ29sb3IgPSBhX0NvbG9yO1xyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgZl9zaGFkZXJfc291cmNlID0gYFxyXG4gICAgcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XHJcblxyXG4gICAgdmFyeWluZyB2ZWM0IHZfQ29sb3I7XHJcbiAgICB2b2lkIG1haW4oKXtcclxuICAgICAgICBnbF9GcmFnQ29sb3IgPSB2X0NvbG9yO1xyXG4gICAgfVxyXG5gO1xyXG5cclxuY29uc3QgZHJhd1BvbHlnb25HbCA9IChnbCwgZGF0YSkgPT4ge1xyXG4gICAgbGV0IHtcclxuICAgICAgICB3ZWJnbEluZGV4T2JqLFxyXG4gICAgICAgIHdlYmdsUHJvZ3JhbVxyXG4gICAgfSA9IGRhdGE7XHJcblxyXG4gICAgaWYod2ViZ2xQcm9ncmFtPT09dW5kZWZpbmVkKXtcclxuICAgICAgICB3ZWJnbFByb2dyYW0gPSBjcmVhdGVQcm9ncmFtKGdsLCB2X3NoYWRlcl9zb3VyY2UsIGZfc2hhZGVyX3NvdXJjZSk7XHJcbiAgICAgICAgKDxhbnk+b2wpLndlYmdsQ29udGV4dFsncG9seVByb2dyYW0nXT13ZWJnbFByb2dyYW07XHJcbiAgICB9XHJcblxyXG4gICAgZ2wudXNlUHJvZ3JhbSh3ZWJnbFByb2dyYW0pO1xyXG4gICAgY29uc3QgYV9Qb3NpdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHdlYmdsUHJvZ3JhbSwgJ2FfUG9zaXRpb24nKTtcclxuICAgIGNvbnN0IGFfQ29sb3IgPSBnbC5nZXRBdHRyaWJMb2NhdGlvbih3ZWJnbFByb2dyYW0sICdhX0NvbG9yJyk7XHJcblxyXG4gICAgbGV0IGJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgbGV0IGNvbG9yQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XHJcbiAgICBsZXQgaW5kZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgIGdsLmdldEV4dGVuc2lvbignT0VTX2VsZW1lbnRfaW5kZXhfdWludCcpO1xyXG5cclxuICAgIHdlYmdsSW5kZXhPYmouaW5kZXhBcnIuZm9yRWFjaCgodmFsLCBpbmRleCkgPT4geyAgICAgICAgXHJcbiAgICAgICAgbGV0IGxlbmd0aD12YWwubGVuZ3RoO1xyXG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXIpO1xyXG4gICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCB3ZWJnbEluZGV4T2JqLmNvb3JkaW5hdGVzSW5kZXhBcnJbaW5kZXhdLCBnbC5EWU5BTUlDX0RSQVcpO1xyXG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoYV9Qb3NpdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhX1Bvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGNvbG9yQnVmZmVyKTtcclxuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgd2ViZ2xJbmRleE9iai5jb2xvckFycltpbmRleF0sIGdsLkRZTkFNSUNfRFJBVyk7XHJcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihhX0NvbG9yLCA0LCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xyXG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGFfQ29sb3IpO1xyXG5cclxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBpbmRleEJ1ZmZlcik7XHJcbiAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdmFsLCBnbC5EWU5BTUlDX0RSQVcpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGdsLmRyYXdFbGVtZW50cyg0LCBsZW5ndGgsIGdsLlVOU0lHTkVEX0lOVCwgMCk7ICAgICAgICBcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkcmF3UG9seWdvbkdsOyIsImV4cG9ydCBlbnVtIFZlY3RvclRpbGVMYXllclRocmVhZE1vZGV7XHJcbiAgICBEZWZhdWx0PTEsXHJcbiAgICBTaW5nbGVUaHJlYWQsXHJcbiAgICBTaW5nbGVCYWNrZ3JvdW5kV29ya2VyLFxyXG4gICAgTXVsdGlCYWNrZ3JvdW5kV29ya2VyXHJcbn0iLCJleHBvcnQgZnVuY3Rpb24gd2ViZ2xDYWN1bGF0ZSgpe1xyXG5cclxuICAgIG9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpe1xyXG4gICAgICBsZXQgZGF0YSA9IGUuZGF0YTtcclxuICAgICAgbGV0IHtcclxuICAgICAgICAgIHJlcGxheXNcclxuICAgICAgfSA9IGRhdGE7XHJcbiAgICAgIGxldCB3ZWJnbFBvbHlnb25JbmRleDtcclxuICAgICAgbGV0IHdlYmdsTGluZUluZGV4O1xyXG4gICAgICBcclxuICAgICAgZm9yKGxldCBrZXkgaW4gcmVwbGF5cyl7XHJcbiAgICAgICAgICBsZXQgcmVwbGF5ID0gcmVwbGF5c1trZXldO1xyXG4gICAgICAgICAgaWYocmVwbGF5LndlYmdsRHJhd1R5cGUgPT09ICdsaW5lU3RyaW5nUmVwbGF5Jyl7XHJcbiAgICAgICAgICAgIHdlYmdsTGluZUluZGV4ID0gZ2V0V2ViZ2xMaW5lSW5kZXgocmVwbGF5KTtcclxuICAgICAgICAgICAgZGVsZXRlIHJlcGxheS53ZWJnbEVuZHM7XHJcbiAgICAgICAgICAgIGRlbGV0ZSByZXBsYXkud2ViZ2xTdHlsZTtcclxuICAgICAgICAgICAgZGVsZXRlIHJlcGxheS53ZWJnbENvb3JkaW5hdGVzO1xyXG4gICAgICAgICAgfWVsc2UgaWYocmVwbGF5LndlYmdsRHJhd1R5cGUgPT09ICdwb2x5Z29uUmVwbGF5Jyl7XHJcbiAgICAgICAgICAgIHdlYmdsUG9seWdvbkluZGV4ID0gZ2V0V2ViZ2xJbmRleE9iaihyZXBsYXkpO1xyXG4gICAgICAgICAgICBkZWxldGUgcmVwbGF5LndlYmdsRW5kcztcclxuICAgICAgICAgICAgZGVsZXRlIHJlcGxheS53ZWJnbFN0eWxlO1xyXG4gICAgICAgICAgICBkZWxldGUgcmVwbGF5LndlYmdsQ29vcmRpbmF0ZXM7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHBvc3RNZXNzYWdlKHtcclxuICAgICAgICB3ZWJnbFBvbHlnb25JbmRleCxcclxuICAgICAgICB3ZWJnbExpbmVJbmRleCxcclxuICAgICAgICB1aWQ6IGRhdGEudWlkLFxyXG4gICAgICAgIG1lc3NhZ2VEYXRhOiBkYXRhLm1lc3NhZ2VEYXRhLFxyXG4gICAgICAgIG1ldGhvZEluZm86IGRhdGEubWV0aG9kSW5mb1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gcG9seWdvblxyXG4gICAgZnVuY3Rpb24gZ2V0V2ViZ2xJbmRleE9iaihkYXRhKSB7XHJcbiAgICAgIGxldCB7XHJcbiAgICAgICAgd2ViZ2xDb29yZGluYXRlcyxcclxuICAgICAgICB3ZWJnbEVuZHMsXHJcbiAgICAgICAgd2ViZ2xTdHlsZSAgICBcclxuICAgICAgfSA9IGRhdGE7XHJcblxyXG4gICAgICBsZXQgb2JqID0ge1xyXG4gICAgICAgICAgaW5kZXhBcnI6IFtdLFxyXG4gICAgICAgICAgY29vcmRpbmF0ZXNJbmRleEFycjogW10sXHJcbiAgICAgICAgICBjb2xvckFycjogW11cclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIGZvciAobGV0IGkgPSAwLCBwcmV2ID0gMCwgbGFzdEluZGV4ID0gMCwgaW5kZXggPSBbXSwgY29sb3IgPSBbXSwgbGVuZ3RoID0gd2ViZ2xFbmRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IGVuZCA9IHdlYmdsRW5kc1tpXTtcclxuICAgICAgICBsZXQgdGVtcEluZGV4ID0gZ2V0UG9seWdvbkluZGV4KHdlYmdsQ29vcmRpbmF0ZXMuc2xpY2UocHJldiwgZW5kKSk7XHJcbiAgICAgICAgbGV0IHQxID0gKHByZXYgLSBsYXN0SW5kZXgpICogMjtcclxuICAgICAgICBsZXQgdDIgPSAoZW5kIC0gbGFzdEluZGV4KSAqIDI7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IHdlYmdsQ29sb3IgPSBjb2xvclN0clRvV2ViZ2xDb2xvcih3ZWJnbFN0eWxlW2ldLmNvbG9yKTtcclxuICAgICAgICB3aGlsZSAodDEgPCB0Mikge1xyXG4gICAgICAgICAgICBjb2xvci5wdXNoKC4uLndlYmdsQ29sb3IpO1xyXG4gICAgICAgICAgICB0MSArPSA0O1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGlmICh0ZW1wSW5kZXgubGVuZ3RoID4gMCB8fCBpID09PWxlbmd0aCAtMSkge1xyXG4gICAgICAgICAgICB0ZW1wSW5kZXggPSB0ZW1wSW5kZXgubWFwKHZhbCA9PiB2YWwgKyAocHJldiAtIGxhc3RJbmRleCkgLyAyKTtcclxuICAgICAgICAgICAgaW5kZXgucHVzaCguLi50ZW1wSW5kZXgpO1xyXG4gICAgICAgICAgICAvLyBpZiAoY29sb3IubGVuZ3RoID4gMjUwMDAwMDAwIHx8IGkgPT09IGxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgaWYgKGkgPT09IGxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgIG9iai5pbmRleEFyci5wdXNoKG5ldyBVaW50MzJBcnJheShbLi4uaW5kZXhdKSk7XHJcbiAgICAgICAgICAgICAgICBvYmouY29sb3JBcnIucHVzaChuZXcgRmxvYXQzMkFycmF5KFsuLi5jb2xvcl0pKTtcclxuICAgICAgICAgICAgICAgIG9iai5jb29yZGluYXRlc0luZGV4QXJyLnB1c2gobmV3IEZsb2F0MzJBcnJheSh3ZWJnbENvb3JkaW5hdGVzLnNsaWNlLmFwcGx5KHdlYmdsQ29vcmRpbmF0ZXMsIFtsYXN0SW5kZXgsIGVuZF0pKSk7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbGFzdEluZGV4ID0gZW5kO1xyXG4gICAgICAgICAgICAgICAgaW5kZXgubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgICAgIGNvbG9yLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcHJldiA9IGVuZDtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZnVuY3Rpb24gZ2V0UG9seWdvbkluZGV4KGNvb3JkaW5hdGVzKSB7XHJcbiAgICAgICAgbGV0IGFyciA9IGVhcmN1dChjb29yZGluYXRlcyk7XHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZnVuY3Rpb24gY29sb3JTdHJUb1dlYmdsQ29sb3Ioc3RyKSB7XHJcbiAgICAgICAgbGV0IGNvbG9yID0gW107XHJcbiAgICAgICAgbGV0IHN0ckNvbG9yID0gc3RyLm1hdGNoKC9bXFxkXFwuXSsvbWcpO1xyXG4gICAgICAgIGlmKCtzdHJDb2xvclszXSAhPT0gMSl7XHJcbiAgICAgICAgICAgIGNvbnN0IEExID0gK3N0ckNvbG9yWzNdO1xyXG4gICAgICAgICAgICBjb25zdCBSMyA9ICtzdHJDb2xvclswXSAqIEExICsgMjQwICogKDEgLSBBMSk7IC8vMjQwICAyMzggIDIzMlxyXG4gICAgICAgICAgICBjb25zdCBHMyA9ICtzdHJDb2xvclsxXSAqIEExICsgMjM4ICogKDEgLSBBMSk7IC8vMjQwICAyMzggIDIzMlxyXG4gICAgICAgICAgICBjb25zdCBCMyA9ICtzdHJDb2xvclsyXSAqIEExICsgMjMyICogKDEgLSBBMSk7IC8vMjQwICAyMzggIDIzMlxyXG4gICAgICAgICAgICBjb25zdCBBMyA9IDE7XHJcbiAgICAgICAgICAgIHN0ckNvbG9yWzBdID0gUjMudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgc3RyQ29sb3JbMV0gPSBHMy50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBzdHJDb2xvclsyXSA9IEIzLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHN0ckNvbG9yWzNdID0gQTMudG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBjb2xvciA9IHN0ckNvbG9yLm1hcCgodmFsLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IDMpIHJldHVybiArdmFsIC8gMjU1O1xyXG4gICAgXHJcbiAgICAgICAgICAgIHJldHVybiArdmFsO1xyXG4gICAgICAgIH0pO1xyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIGNvbG9yO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBsaW5lU3RyaW5nXHJcbiAgICBmdW5jdGlvbiBnZXRQYXRoT2Zmc2V0KHBvaW50cywgb2Zmc2V0KSB7XHJcbiAgICAgICAgdmFyIGxlbiA9IHBvaW50cy5sZW5ndGggLyAyO1xyXG4gICAgICAgIHZhciBjb3VudCA9IGxlbiAqIDMgKiAyO1xyXG4gICAgICAgIHZhciBwb3NpdGlvbiA9IFtdO1xyXG4gICAgICAgIHZhciBwb3NpdGlvblByZXYgPSBbXTtcclxuICAgICAgICB2YXIgcG9zaXRpb25OZXh0ID0gW107XHJcbiAgICAgICAgaWYobGVuPT09MiAmJiBwb2ludHNbMF09PT1wb2ludHNbMl0gJiYgcG9pbnRzWzFdPT09cG9pbnRzWzNdKXtcclxuICAgICAgICAgIHJldHVybiBbW10sW11dO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgaW5kaWNlc0NvdW50ID0gMyAqIDIgKiAobGVuIC0gMSk7XHJcbiAgICAgICAgdmFyIHRyaWFuZ2xlT2Zmc2V0ID0gMDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICB2YXIgaTMgPSBpICogMyAqIDI7XHJcbiAgICAgICAgICB2YXIgaTQgPSBpICogNCAqIDI7XHJcbiAgICAgICAgICB2YXIgcG9pbnRYID0gcG9pbnRzWzIgKiBpXTtcclxuICAgICAgICAgIHZhciBwb2ludFkgPSBwb2ludHNbMiAqIGkgKyAxXVxyXG4gICAgICAgICAgaWYocG9pbnRYPT09cG9pbnRzWzIqaSsyXSAmJiBwb2ludFk9PT1wb2ludHNbMippKzNdKXtcclxuICAgICAgICAgICAgaW5kaWNlc0NvdW50LT02O1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHBvc2l0aW9uW2kzICsgMF0gPSBwb2ludFg7XHJcbiAgICAgICAgICBwb3NpdGlvbltpMyArIDFdID0gcG9pbnRZO1xyXG4gICAgICAgICAgcG9zaXRpb25baTMgKyAyXSA9IDA7XHJcbiAgICAgICAgICBwb3NpdGlvbltpMyArIDNdID0gcG9pbnRYO1xyXG4gICAgICAgICAgcG9zaXRpb25baTMgKyA0XSA9IHBvaW50WTtcclxuICAgICAgICAgIHBvc2l0aW9uW2kzICsgNV0gPSAwO1xyXG4gICAgICAgICAgaWYgKGkgPCBjb3VudCAtIDEpIHtcclxuICAgICAgICAgICAgdmFyIGkzcCA9IGkzICsgNjtcclxuICAgICAgICAgICAgcG9zaXRpb25OZXh0W2kzcCArIDBdID0gcG9pbnRYO1xyXG4gICAgICAgICAgICBwb3NpdGlvbk5leHRbaTNwICsgMV0gPSBwb2ludFk7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uTmV4dFtpM3AgKyAyXSA9IDA7XHJcbiAgICAgIFxyXG4gICAgICAgICAgICBwb3NpdGlvbk5leHRbaTNwICsgM10gPSBwb2ludFg7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uTmV4dFtpM3AgKyA0XSA9IHBvaW50WTtcclxuICAgICAgICAgICAgcG9zaXRpb25OZXh0W2kzcCArIDVdID0gMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChpID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgaTNuID0gaTMgLSA2O1xyXG4gICAgICAgICAgICBwb3NpdGlvblByZXZbaTNuICsgMF0gPSBwb2ludFg7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uUHJldltpM24gKyAxXSA9IHBvaW50WTtcclxuICAgICAgICAgICAgcG9zaXRpb25QcmV2W2kzbiArIDJdID0gMDtcclxuICAgICAgXHJcbiAgICAgICAgICAgIHBvc2l0aW9uUHJldltpM24gKyAzXSA9IHBvaW50WDtcclxuICAgICAgICAgICAgcG9zaXRpb25QcmV2W2kzbiArIDRdID0gcG9pbnRZO1xyXG4gICAgICAgICAgICBwb3NpdGlvblByZXZbaTNuICsgNV0gPSAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgXHJcbiAgICAgICAgdmFyIGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoaW5kaWNlc0NvdW50KTtcclxuICAgICAgICB2YXIgZW5kID0gY291bnQgLSAxO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA2OyBpKyspIHtcclxuICAgICAgICAgIHBvc2l0aW9uTmV4dFtpXSA9IHBvc2l0aW9uTmV4dFtpICsgNl07XHJcbiAgICAgICAgICBwb3NpdGlvblByZXZbZW5kIC0gaV0gPSBwb3NpdGlvblByZXZbZW5kIC0gaSAtIDZdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW5kaWNlc0NvdW50OyBpKyspIHtcclxuICAgICAgICAgIGlmIChpICUgMiA9PSAwKSB7XHJcbiAgICAgICAgICAgIGluZGljZXNbdHJpYW5nbGVPZmZzZXQrK10gPSBpO1xyXG4gICAgICAgICAgICBpbmRpY2VzW3RyaWFuZ2xlT2Zmc2V0KytdID0gaSArIDE7XHJcbiAgICAgICAgICAgIGluZGljZXNbdHJpYW5nbGVPZmZzZXQrK10gPSBpICsgMjtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGluZGljZXNbdHJpYW5nbGVPZmZzZXQrK10gPSBpICsgMTtcclxuICAgICAgICAgICAgaW5kaWNlc1t0cmlhbmdsZU9mZnNldCsrXSA9IGk7XHJcbiAgICAgICAgICAgIGluZGljZXNbdHJpYW5nbGVPZmZzZXQrK10gPSBpICsgMjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAgIHZhciBjb29yZGluYXRlcyA9IGdldFBhdGhDb29yZGluYXRlKHBvc2l0aW9uLCBwb3NpdGlvbk5leHQsIHBvc2l0aW9uUHJldiwgb2Zmc2V0KVxyXG4gICAgICAgIHJldHVybiBbY29vcmRpbmF0ZXMsIGluZGljZXNdXHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGdldFdlYmdsTGluZUluZGV4KGRhdGEpIHtcclxuICAgICAgICBsZXQge1xyXG4gICAgICAgICAgICB3ZWJnbENvb3JkaW5hdGVzLFxyXG4gICAgICAgICAgICB3ZWJnbEVuZHMsXHJcbiAgICAgICAgICAgIHdlYmdsU3R5bGUgICAgXHJcbiAgICAgICAgfSA9IGRhdGE7IFxyXG4gICAgICAgIHZhciBsaW5lcyA9IHtcclxuICAgICAgICAgICAgaW5kZXhBcnI6IFtdLFxyXG4gICAgICAgICAgICBjb29yZGluYXRlc0FycjogW10sXHJcbiAgICAgICAgICAgIGNvbG9yQXJyOiBbXVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbXVsdGlwbHlMaW5lID0ge1xyXG4gICAgICAgICAgICBpbmRleEFycjogW10sXHJcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzQXJyOiBbXSxcclxuICAgICAgICAgICAgY29sb3JBcnI6IFtdXHJcbiAgICAgICAgfSAgICAgICAgXHJcbiAgICAgICAgdmFyIGxpbmVBcnIgPSBbXTtcclxuICAgICAgICB2YXIgbGluZUluZGV4QXJyID0gW107XHJcbiAgICAgICAgdmFyIGxpbmVDb2xvckFyciA9IFtdO1xyXG4gICAgXHJcbiAgICAgICAgdmFyIG11dGlMaW5lQXJyID0gW107XHJcbiAgICAgICAgdmFyIG11dGlMaW5lSW5kZXhBcnIgPSBbXTtcclxuICAgICAgICB2YXIgbXV0aUxpbmVDb2xvckFyciA9IFtdO1xyXG4gICAgICAgIC8vIEZJWE1FIG5lZWRzIGEgdmFyeWluZyBpbnN0ZWFkIG9mIGNvbnN0YW50XHJcbiAgICAgICAgdmFyIGNhbnZhc1NpemUgPSBbNTEyLCA1MTJdO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gd2ViZ2xFbmRzLmxlbmd0aCwgcHJldkVuZCA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG5cclxuICAgICAgICAgICAgdmFyIGNvb3JkID0gd2ViZ2xDb29yZGluYXRlcy5zbGljZShwcmV2RW5kLCB3ZWJnbEVuZHNbaV0pO1xyXG4gICAgICAgICAgICB2YXIgd2ViZ2xDb2xvciA9IGNvbG9yU3RyVG9XZWJnbENvbG9yKHdlYmdsU3R5bGVbaV0uc3Ryb2tlU3R5bGUpO1xyXG4gICAgXHJcbiAgICAgICAgICAgIGlmICh3ZWJnbFN0eWxlW2ldLmxpbmVXaWR0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxhc3RMZW5ndGggPSBsaW5lQXJyLmxlbmd0aCAvIDI7XHJcbiAgICAgICAgICAgICAgICBsaW5lQXJyID0gbGluZUFyci5jb25jYXQoY29vcmQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRMZW5ndGggPSBsaW5lQXJyLmxlbmd0aCAvIDI7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIHdoaWxlIChsYXN0TGVuZ3RoIDwgY3VycmVudExlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lSW5kZXhBcnIucHVzaChsYXN0TGVuZ3RoKyssIGxhc3RMZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVDb2xvckFyci5wdXNoKC4uLndlYmdsQ29sb3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGluZUNvbG9yQXJyLnB1c2goLi4ud2ViZ2xDb2xvcik7ICAvL2xhc3QgdGltZVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAvLyBpZiAobGluZUNvbG9yQXJyLmxlbmd0aCA+IDI1MDAwMDAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgbGluZXMuaW5kZXhBcnIucHVzaChuZXcgVWludDE2QXJyYXkobGluZUluZGV4QXJyKSk7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgbGluZXMuY29vcmRpbmF0ZXNBcnIucHVzaChuZXcgRmxvYXQzMkFycmF5KGxpbmVBcnIpKTtcclxuICAgICAgICAgICAgICAgIC8vICAgICBsaW5lcy5jb2xvckFyci5wdXNoKG5ldyBGbG9hdDMyQXJyYXkobGluZUNvbG9yQXJyKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gICAgIGxpbmVJbmRleEFyciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIGxpbmVBcnIgPSBbXTtcclxuICAgICAgICAgICAgICAgIC8vICAgICBsaW5lQ29sb3JBcnIgPSBbXTtcclxuICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh3ZWJnbFN0eWxlW2ldLmxpbmVXaWR0aCAhPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoSGFsZiA9IHdlYmdsU3R5bGVbaV0ubGluZVdpZHRoIC8gKGNhbnZhc1NpemVbMF0gLyAyKSAvIDI7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGFzdExlbmd0aCA9IChtdXRpTGluZUFyci5sZW5ndGgpIC8gMjtcclxuICAgICAgICAgICAgICAgIHZhciBbdGVtcENvb3JkaW5hdGVzLCB0ZW1wSW5kZXhdID0gZ2V0UGF0aE9mZnNldChjb29yZCwgd2lkdGhIYWxmKTtcclxuICAgICAgICAgICAgICAgIG11dGlMaW5lQXJyID0gbXV0aUxpbmVBcnIuY29uY2F0KHRlbXBDb29yZGluYXRlcyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudExlbmd0aCA9IG11dGlMaW5lQXJyLmxlbmd0aCAvIDI7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSB0ZW1wSW5kZXgubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBtdXRpTGluZUluZGV4QXJyLnB1c2gobGFzdExlbmd0aCArIHRlbXBJbmRleFtpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIHdoaWxlIChsYXN0TGVuZ3RoKysgPCBjdXJyZW50TGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbXV0aUxpbmVDb2xvckFyci5wdXNoKC4uLndlYmdsQ29sb3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgICAgICAvLyBpZiAobXV0aUxpbmVBcnIubGVuZ3RoID4gMjUwMDAwMDAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgbXVsdGlwbHlMaW5lLmluZGV4QXJyLnB1c2gobmV3IFVpbnQxNkFycmF5KG11dGlMaW5lSW5kZXhBcnIpKTtcclxuICAgICAgICAgICAgICAgIC8vICAgICBtdWx0aXBseUxpbmUuY29vcmRpbmF0ZXNBcnIucHVzaChuZXcgRmxvYXQzMkFycmF5KG11dGlMaW5lQXJyKSk7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgbXVsdGlwbHlMaW5lLmNvbG9yQXJyLnB1c2gobmV3IEZsb2F0MzJBcnJheShtdXRpTGluZUNvbG9yQXJyKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gICAgIG11dGlMaW5lSW5kZXhBcnIgPSBbXTtcclxuICAgICAgICAgICAgICAgIC8vICAgICBtdXRpTGluZUFyciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIG11dGlMaW5lQ29sb3JBcnIgPSBbXTtcclxuICAgICAgICAgICAgICAgIC8vIH0gICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICBwcmV2RW5kID0gd2ViZ2xFbmRzW2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsaW5lcy5pbmRleEFyci5wdXNoKG5ldyBVaW50MTZBcnJheShsaW5lSW5kZXhBcnIpKTtcclxuICAgICAgICBsaW5lcy5jb29yZGluYXRlc0Fyci5wdXNoKG5ldyBGbG9hdDMyQXJyYXkobGluZUFycikpO1xyXG4gICAgICAgIGxpbmVzLmNvbG9yQXJyLnB1c2gobmV3IEZsb2F0MzJBcnJheShsaW5lQ29sb3JBcnIpKTtcclxuXHJcbiAgICAgICAgbGluZUluZGV4QXJyID0gW107XHJcbiAgICAgICAgbGluZUFyciA9IFtdO1xyXG4gICAgICAgIGxpbmVDb2xvckFyciA9IFtdO1xyXG5cclxuICAgICAgICBpZiAobXV0aUxpbmVJbmRleEFyci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIG11bHRpcGx5TGluZS5pbmRleEFyci5wdXNoKG5ldyBVaW50MTZBcnJheShtdXRpTGluZUluZGV4QXJyKSk7XHJcbiAgICAgICAgICAgIG11bHRpcGx5TGluZS5jb29yZGluYXRlc0Fyci5wdXNoKG5ldyBGbG9hdDMyQXJyYXkobXV0aUxpbmVBcnIpKTtcclxuICAgICAgICAgICAgbXVsdGlwbHlMaW5lLmNvbG9yQXJyLnB1c2gobmV3IEZsb2F0MzJBcnJheShtdXRpTGluZUNvbG9yQXJyKSk7XHJcblxyXG4gICAgICAgICAgICBtdXRpTGluZUluZGV4QXJyID0gbnVsbDtcclxuICAgICAgICAgICAgbXV0aUxpbmVBcnIgPSBudWxsO1xyXG4gICAgICAgICAgICBtdXRpTGluZUNvbG9yQXJyID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG11bHRpcGx5TGluZSxcclxuICAgICAgICAgICAgbGluZXNcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0UGF0aENvb3JkaW5hdGUoYV9wb3NpdGlvbiwgYV9wb3NpdGlvbk5leHQsIGFfcG9zaXRpb25QcmV2LCBhX29mZnNldCkge1xyXG4gICAgICAgIHZhciBwb2ludHNzID0gW107XHJcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFfcG9zaXRpb24ubGVuZ3RoO1xyXG4gICAgICAgIHZhciBmbGFnID0gMTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAzKSB7XHJcbiAgICAgICAgICB2YXIgY3VyciA9IHsgeDogYV9wb3NpdGlvbltpXSwgeTogYV9wb3NpdGlvbltpICsgMV0gfVxyXG4gICAgICAgICAgdmFyIG5leHQgPSB7IHg6IGFfcG9zaXRpb25OZXh0W2ldLCB5OiBhX3Bvc2l0aW9uTmV4dFtpICsgMV0gfVxyXG4gICAgICAgICAgdmFyIHByZXYgPSB7IHg6IGFfcG9zaXRpb25QcmV2W2ldLCB5OiBhX3Bvc2l0aW9uUHJldltpICsgMV0gfVxyXG4gICAgICAgICAgdmFyIGRpciwgbGVuID0gYV9vZmZzZXQgKiBmbGFnO1xyXG4gICAgICAgICAgaWYgKGN1cnIueCA9PT0gcHJldi54ICYmIGN1cnIueSA9PT0gcHJldi55KSB7XHJcbiAgICAgICAgICAgIGRpciA9IG5vcm1hbGl6ZShuZXh0LnggLSBjdXJyLngsIG5leHQueSAtIGN1cnIueSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmIChjdXJyLnggPT09IG5leHQueCAmJiBjdXJyLnkgPT09IG5leHQueSkge1xyXG4gICAgICAgICAgICBkaXIgPSBub3JtYWxpemUoY3Vyci54IC0gcHJldi54LCBjdXJyLnkgLSBwcmV2LnkpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGRpcjEgPSBub3JtYWxpemUoY3Vyci54IC0gcHJldi54LCBjdXJyLnkgLSBwcmV2LnkpXHJcbiAgICAgICAgICAgIHZhciBkaXIyID0gbm9ybWFsaXplKG5leHQueCAtIGN1cnIueCwgbmV4dC55IC0gY3Vyci55KVxyXG4gICAgICAgICAgICBkaXIgPSBub3JtYWxpemUoZGlyMS54ICsgZGlyMi54LCBkaXIxLnkgKyBkaXIyLnkpO1xyXG4gICAgICAgICAgICB2YXIgbWl0ZXIgPSAxLjAgLyBNYXRoLm1heChkaXIueCAqIGRpcjEueCArIGRpci55ICogZGlyMS55LCAwLjUpO1xyXG4gICAgICAgICAgICBsZW4gKj0gbWl0ZXI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBkaXIgPSB7IHg6IC1kaXIueSAqIGxlbiwgeTogZGlyLnggKiBsZW4gfTtcclxuICAgICAgICAgIHBvaW50c3MucHVzaChjdXJyLnggKyBkaXIueCk7XHJcbiAgICAgICAgICBwb2ludHNzLnB1c2goY3Vyci55ICsgZGlyLnkpO1xyXG4gICAgICAgICAgZmxhZyAqPSAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBvaW50c3NcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBub3JtYWxpemUoeCwgeSkge1xyXG4gICAgICAgIHZhciBtID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xyXG4gICAgICAgIHJldHVybiB7IHg6IHggLyBtLCB5OiB5IC8gbSB9XHJcbiAgICB9ICAgICAgICBcclxuXHJcbiAgICAvKipcclxuICAgICAqIGVhcmN1dFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBlYXJjdXQoZGF0YSwgaG9sZUluZGljZXMsIGRpbSkge1xyXG5cclxuICAgICAgICBkaW0gPSBkaW0gfHwgMjtcclxuXHJcbiAgICAgICAgdmFyIGhhc0hvbGVzID0gaG9sZUluZGljZXMgJiYgaG9sZUluZGljZXMubGVuZ3RoLFxyXG4gICAgICAgICAgICBvdXRlckxlbiA9IGhhc0hvbGVzID8gaG9sZUluZGljZXNbMF0gKiBkaW0gOiBkYXRhLmxlbmd0aCxcclxuICAgICAgICAgICAgb3V0ZXJOb2RlID0gbGlua2VkTGlzdChkYXRhLCAwLCBvdXRlckxlbiwgZGltLCB0cnVlKSxcclxuICAgICAgICAgICAgdHJpYW5nbGVzID0gW107XHJcblxyXG4gICAgICAgIGlmICghb3V0ZXJOb2RlKSByZXR1cm4gdHJpYW5nbGVzO1xyXG5cclxuICAgICAgICB2YXIgbWluWCwgbWluWSwgbWF4WCwgbWF4WSwgeCwgeSwgaW52U2l6ZTtcclxuXHJcbiAgICAgICAgaWYgKGhhc0hvbGVzKSBvdXRlck5vZGUgPSBlbGltaW5hdGVIb2xlcyhkYXRhLCBob2xlSW5kaWNlcywgb3V0ZXJOb2RlLCBkaW0pO1xyXG5cclxuICAgICAgICAvLyBpZiB0aGUgc2hhcGUgaXMgbm90IHRvbyBzaW1wbGUsIHdlJ2xsIHVzZSB6LW9yZGVyIGN1cnZlIGhhc2ggbGF0ZXI7IGNhbGN1bGF0ZSBwb2x5Z29uIGJib3hcclxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiA4MCAqIGRpbSkge1xyXG4gICAgICAgICAgICBtaW5YID0gbWF4WCA9IGRhdGFbMF07XHJcbiAgICAgICAgICAgIG1pblkgPSBtYXhZID0gZGF0YVsxXTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBkaW07IGkgPCBvdXRlckxlbjsgaSArPSBkaW0pIHtcclxuICAgICAgICAgICAgICAgIHggPSBkYXRhW2ldO1xyXG4gICAgICAgICAgICAgICAgeSA9IGRhdGFbaSArIDFdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHggPCBtaW5YKSBtaW5YID0geDtcclxuICAgICAgICAgICAgICAgIGlmICh5IDwgbWluWSkgbWluWSA9IHk7XHJcbiAgICAgICAgICAgICAgICBpZiAoeCA+IG1heFgpIG1heFggPSB4O1xyXG4gICAgICAgICAgICAgICAgaWYgKHkgPiBtYXhZKSBtYXhZID0geTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gbWluWCwgbWluWSBhbmQgaW52U2l6ZSBhcmUgbGF0ZXIgdXNlZCB0byB0cmFuc2Zvcm0gY29vcmRzIGludG8gaW50ZWdlcnMgZm9yIHotb3JkZXIgY2FsY3VsYXRpb25cclxuICAgICAgICAgICAgaW52U2l6ZSA9IE1hdGgubWF4KG1heFggLSBtaW5YLCBtYXhZIC0gbWluWSk7XHJcbiAgICAgICAgICAgIGludlNpemUgPSBpbnZTaXplICE9PSAwID8gMSAvIGludlNpemUgOiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZWFyY3V0TGlua2VkKG91dGVyTm9kZSwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJpYW5nbGVzO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNyZWF0ZSBhIGNpcmN1bGFyIGRvdWJseSBsaW5rZWQgbGlzdCBmcm9tIHBvbHlnb24gcG9pbnRzIGluIHRoZSBzcGVjaWZpZWQgd2luZGluZyBvcmRlclxyXG4gICAgZnVuY3Rpb24gbGlua2VkTGlzdChkYXRhLCBzdGFydCwgZW5kLCBkaW0sIGNsb2Nrd2lzZSkge1xyXG4gICAgICAgIHZhciBpLCBsYXN0O1xyXG5cclxuICAgICAgICBpZiAoY2xvY2t3aXNlID09PSAoc2lnbmVkQXJlYShkYXRhLCBzdGFydCwgZW5kLCBkaW0pID4gMCkpIHtcclxuICAgICAgICAgICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gZGltKSBsYXN0ID0gaW5zZXJ0Tm9kZShpLCBkYXRhW2ldLCBkYXRhW2kgKyAxXSwgbGFzdCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZm9yIChpID0gZW5kIC0gZGltOyBpID49IHN0YXJ0OyBpIC09IGRpbSkgbGFzdCA9IGluc2VydE5vZGUoaSwgZGF0YVtpXSwgZGF0YVtpICsgMV0sIGxhc3QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGxhc3QgJiYgZXF1YWxzKGxhc3QsIGxhc3QubmV4dCkpIHtcclxuICAgICAgICAgICAgcmVtb3ZlTm9kZShsYXN0KTtcclxuICAgICAgICAgICAgbGFzdCA9IGxhc3QubmV4dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBsYXN0O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGVsaW1pbmF0ZSBjb2xpbmVhciBvciBkdXBsaWNhdGUgcG9pbnRzXHJcbiAgICBmdW5jdGlvbiBmaWx0ZXJQb2ludHMoc3RhcnQsIGVuZCkge1xyXG4gICAgICAgIGlmICghc3RhcnQpIHJldHVybiBzdGFydDtcclxuICAgICAgICBpZiAoIWVuZCkgZW5kID0gc3RhcnQ7XHJcblxyXG4gICAgICAgIHZhciBwID0gc3RhcnQsXHJcbiAgICAgICAgICAgIGFnYWluO1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgYWdhaW4gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmICghcC5zdGVpbmVyICYmIChlcXVhbHMocCwgcC5uZXh0KSB8fCBhcmVhKHAucHJldiwgcCwgcC5uZXh0KSA9PT0gMCkpIHtcclxuICAgICAgICAgICAgICAgIHJlbW92ZU5vZGUocCk7XHJcbiAgICAgICAgICAgICAgICBwID0gZW5kID0gcC5wcmV2O1xyXG4gICAgICAgICAgICAgICAgaWYgKHAgPT09IHAubmV4dCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBhZ2FpbiA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcCA9IHAubmV4dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gd2hpbGUgKGFnYWluIHx8IHAgIT09IGVuZCk7XHJcblxyXG4gICAgICAgIHJldHVybiBlbmQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbWFpbiBlYXIgc2xpY2luZyBsb29wIHdoaWNoIHRyaWFuZ3VsYXRlcyBhIHBvbHlnb24gKGdpdmVuIGFzIGEgbGlua2VkIGxpc3QpXHJcbiAgICBmdW5jdGlvbiBlYXJjdXRMaW5rZWQoZWFyLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgcGFzcykge1xyXG4gICAgICAgIGlmICghZWFyKSByZXR1cm47XHJcblxyXG4gICAgICAgIC8vIGludGVybGluayBwb2x5Z29uIG5vZGVzIGluIHotb3JkZXJcclxuICAgICAgICBpZiAoIXBhc3MgJiYgaW52U2l6ZSkgaW5kZXhDdXJ2ZShlYXIsIG1pblgsIG1pblksIGludlNpemUpO1xyXG5cclxuICAgICAgICB2YXIgc3RvcCA9IGVhcixcclxuICAgICAgICAgICAgcHJldiwgbmV4dDtcclxuXHJcbiAgICAgICAgLy8gaXRlcmF0ZSB0aHJvdWdoIGVhcnMsIHNsaWNpbmcgdGhlbSBvbmUgYnkgb25lXHJcbiAgICAgICAgd2hpbGUgKGVhci5wcmV2ICE9PSBlYXIubmV4dCkge1xyXG4gICAgICAgICAgICBwcmV2ID0gZWFyLnByZXY7XHJcbiAgICAgICAgICAgIG5leHQgPSBlYXIubmV4dDtcclxuXHJcbiAgICAgICAgICAgIGlmIChpbnZTaXplID8gaXNFYXJIYXNoZWQoZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplKSA6IGlzRWFyKGVhcikpIHtcclxuICAgICAgICAgICAgICAgIC8vIGN1dCBvZmYgdGhlIHRyaWFuZ2xlXHJcbiAgICAgICAgICAgICAgICB0cmlhbmdsZXMucHVzaChwcmV2LmkgLyBkaW0pO1xyXG4gICAgICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2goZWFyLmkgLyBkaW0pO1xyXG4gICAgICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2gobmV4dC5pIC8gZGltKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZW1vdmVOb2RlKGVhcik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gc2tpcHBpbmcgdGhlIG5leHQgdmVydGljZSBsZWFkcyB0byBsZXNzIHNsaXZlciB0cmlhbmdsZXNcclxuICAgICAgICAgICAgICAgIGVhciA9IG5leHQubmV4dDtcclxuICAgICAgICAgICAgICAgIHN0b3AgPSBuZXh0Lm5leHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVhciA9IG5leHQ7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiB3ZSBsb29wZWQgdGhyb3VnaCB0aGUgd2hvbGUgcmVtYWluaW5nIHBvbHlnb24gYW5kIGNhbid0IGZpbmQgYW55IG1vcmUgZWFyc1xyXG4gICAgICAgICAgICBpZiAoZWFyID09PSBzdG9wKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0cnkgZmlsdGVyaW5nIHBvaW50cyBhbmQgc2xpY2luZyBhZ2FpblxyXG4gICAgICAgICAgICAgICAgaWYgKCFwYXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGZpbHRlclBvaW50cyhlYXIpLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBkaWRuJ3Qgd29yaywgdHJ5IGN1cmluZyBhbGwgc21hbGwgc2VsZi1pbnRlcnNlY3Rpb25zIGxvY2FsbHlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFzcyA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVhciA9IGN1cmVMb2NhbEludGVyc2VjdGlvbnMoZWFyLCB0cmlhbmdsZXMsIGRpbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIDIpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGFzIGEgbGFzdCByZXNvcnQsIHRyeSBzcGxpdHRpbmcgdGhlIHJlbWFpbmluZyBwb2x5Z29uIGludG8gdHdvXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhc3MgPT09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzcGxpdEVhcmN1dChlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBjaGVjayB3aGV0aGVyIGEgcG9seWdvbiBub2RlIGZvcm1zIGEgdmFsaWQgZWFyIHdpdGggYWRqYWNlbnQgbm9kZXNcclxuICAgIGZ1bmN0aW9uIGlzRWFyKGVhcikge1xyXG4gICAgICAgIHZhciBhID0gZWFyLnByZXYsXHJcbiAgICAgICAgICAgIGIgPSBlYXIsXHJcbiAgICAgICAgICAgIGMgPSBlYXIubmV4dDtcclxuXHJcbiAgICAgICAgaWYgKGFyZWEoYSwgYiwgYykgPj0gMCkgcmV0dXJuIGZhbHNlOyAvLyByZWZsZXgsIGNhbid0IGJlIGFuIGVhclxyXG5cclxuICAgICAgICAvLyBub3cgbWFrZSBzdXJlIHdlIGRvbid0IGhhdmUgb3RoZXIgcG9pbnRzIGluc2lkZSB0aGUgcG90ZW50aWFsIGVhclxyXG4gICAgICAgIHZhciBwID0gZWFyLm5leHQubmV4dDtcclxuXHJcbiAgICAgICAgd2hpbGUgKHAgIT09IGVhci5wcmV2KSB7XHJcbiAgICAgICAgICAgIGlmIChwb2ludEluVHJpYW5nbGUoYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgcC54LCBwLnkpICYmXHJcbiAgICAgICAgICAgICAgICBhcmVhKHAucHJldiwgcCwgcC5uZXh0KSA+PSAwKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIHAgPSBwLm5leHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpc0Vhckhhc2hlZChlYXIsIG1pblgsIG1pblksIGludlNpemUpIHtcclxuICAgICAgICB2YXIgYSA9IGVhci5wcmV2LFxyXG4gICAgICAgICAgICBiID0gZWFyLFxyXG4gICAgICAgICAgICBjID0gZWFyLm5leHQ7XHJcblxyXG4gICAgICAgIGlmIChhcmVhKGEsIGIsIGMpID49IDApIHJldHVybiBmYWxzZTsgLy8gcmVmbGV4LCBjYW4ndCBiZSBhbiBlYXJcclxuXHJcbiAgICAgICAgLy8gdHJpYW5nbGUgYmJveDsgbWluICYgbWF4IGFyZSBjYWxjdWxhdGVkIGxpa2UgdGhpcyBmb3Igc3BlZWRcclxuICAgICAgICB2YXIgbWluVFggPSBhLnggPCBiLnggPyAoYS54IDwgYy54ID8gYS54IDogYy54KSA6IChiLnggPCBjLnggPyBiLnggOiBjLngpLFxyXG4gICAgICAgICAgICBtaW5UWSA9IGEueSA8IGIueSA/IChhLnkgPCBjLnkgPyBhLnkgOiBjLnkpIDogKGIueSA8IGMueSA/IGIueSA6IGMueSksXHJcbiAgICAgICAgICAgIG1heFRYID0gYS54ID4gYi54ID8gKGEueCA+IGMueCA/IGEueCA6IGMueCkgOiAoYi54ID4gYy54ID8gYi54IDogYy54KSxcclxuICAgICAgICAgICAgbWF4VFkgPSBhLnkgPiBiLnkgPyAoYS55ID4gYy55ID8gYS55IDogYy55KSA6IChiLnkgPiBjLnkgPyBiLnkgOiBjLnkpO1xyXG5cclxuICAgICAgICAvLyB6LW9yZGVyIHJhbmdlIGZvciB0aGUgY3VycmVudCB0cmlhbmdsZSBiYm94O1xyXG4gICAgICAgIHZhciBtaW5aID0gek9yZGVyKG1pblRYLCBtaW5UWSwgbWluWCwgbWluWSwgaW52U2l6ZSksXHJcbiAgICAgICAgICAgIG1heFogPSB6T3JkZXIobWF4VFgsIG1heFRZLCBtaW5YLCBtaW5ZLCBpbnZTaXplKTtcclxuXHJcbiAgICAgICAgdmFyIHAgPSBlYXIucHJldlosXHJcbiAgICAgICAgICAgIG4gPSBlYXIubmV4dFo7XHJcblxyXG4gICAgICAgIC8vIGxvb2sgZm9yIHBvaW50cyBpbnNpZGUgdGhlIHRyaWFuZ2xlIGluIGJvdGggZGlyZWN0aW9uc1xyXG4gICAgICAgIHdoaWxlIChwICYmIHAueiA+PSBtaW5aICYmIG4gJiYgbi56IDw9IG1heFopIHtcclxuICAgICAgICAgICAgaWYgKHAgIT09IGVhci5wcmV2ICYmIHAgIT09IGVhci5uZXh0ICYmXHJcbiAgICAgICAgICAgICAgICBwb2ludEluVHJpYW5nbGUoYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgcC54LCBwLnkpICYmXHJcbiAgICAgICAgICAgICAgICBhcmVhKHAucHJldiwgcCwgcC5uZXh0KSA+PSAwKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIHAgPSBwLnByZXZaO1xyXG5cclxuICAgICAgICAgICAgaWYgKG4gIT09IGVhci5wcmV2ICYmIG4gIT09IGVhci5uZXh0ICYmXHJcbiAgICAgICAgICAgICAgICBwb2ludEluVHJpYW5nbGUoYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgbi54LCBuLnkpICYmXHJcbiAgICAgICAgICAgICAgICBhcmVhKG4ucHJldiwgbiwgbi5uZXh0KSA+PSAwKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIG4gPSBuLm5leHRaO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbG9vayBmb3IgcmVtYWluaW5nIHBvaW50cyBpbiBkZWNyZWFzaW5nIHotb3JkZXJcclxuICAgICAgICB3aGlsZSAocCAmJiBwLnogPj0gbWluWikge1xyXG4gICAgICAgICAgICBpZiAocCAhPT0gZWFyLnByZXYgJiYgcCAhPT0gZWFyLm5leHQgJiZcclxuICAgICAgICAgICAgICAgIHBvaW50SW5UcmlhbmdsZShhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSkgJiZcclxuICAgICAgICAgICAgICAgIGFyZWEocC5wcmV2LCBwLCBwLm5leHQpID49IDApIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgcCA9IHAucHJldlo7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBsb29rIGZvciByZW1haW5pbmcgcG9pbnRzIGluIGluY3JlYXNpbmcgei1vcmRlclxyXG4gICAgICAgIHdoaWxlIChuICYmIG4ueiA8PSBtYXhaKSB7XHJcbiAgICAgICAgICAgIGlmIChuICE9PSBlYXIucHJldiAmJiBuICE9PSBlYXIubmV4dCAmJlxyXG4gICAgICAgICAgICAgICAgcG9pbnRJblRyaWFuZ2xlKGEueCwgYS55LCBiLngsIGIueSwgYy54LCBjLnksIG4ueCwgbi55KSAmJlxyXG4gICAgICAgICAgICAgICAgYXJlYShuLnByZXYsIG4sIG4ubmV4dCkgPj0gMCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBuID0gbi5uZXh0WjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGdvIHRocm91Z2ggYWxsIHBvbHlnb24gbm9kZXMgYW5kIGN1cmUgc21hbGwgbG9jYWwgc2VsZi1pbnRlcnNlY3Rpb25zXHJcbiAgICBmdW5jdGlvbiBjdXJlTG9jYWxJbnRlcnNlY3Rpb25zKHN0YXJ0LCB0cmlhbmdsZXMsIGRpbSkge1xyXG4gICAgICAgIHZhciBwID0gc3RhcnQ7XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICB2YXIgYSA9IHAucHJldixcclxuICAgICAgICAgICAgICAgIGIgPSBwLm5leHQubmV4dDtcclxuXHJcbiAgICAgICAgICAgIGlmICghZXF1YWxzKGEsIGIpICYmIGludGVyc2VjdHMoYSwgcCwgcC5uZXh0LCBiKSAmJiBsb2NhbGx5SW5zaWRlKGEsIGIpICYmIGxvY2FsbHlJbnNpZGUoYiwgYSkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB0cmlhbmdsZXMucHVzaChhLmkgLyBkaW0pO1xyXG4gICAgICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2gocC5pIC8gZGltKTtcclxuICAgICAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGIuaSAvIGRpbSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHR3byBub2RlcyBpbnZvbHZlZFxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlTm9kZShwKTtcclxuICAgICAgICAgICAgICAgIHJlbW92ZU5vZGUocC5uZXh0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBwID0gc3RhcnQgPSBiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHAgPSBwLm5leHQ7XHJcbiAgICAgICAgfSB3aGlsZSAocCAhPT0gc3RhcnQpO1xyXG5cclxuICAgICAgICByZXR1cm4gcDtcclxuICAgIH1cclxuXHJcbiAgICAvLyB0cnkgc3BsaXR0aW5nIHBvbHlnb24gaW50byB0d28gYW5kIHRyaWFuZ3VsYXRlIHRoZW0gaW5kZXBlbmRlbnRseVxyXG4gICAgZnVuY3Rpb24gc3BsaXRFYXJjdXQoc3RhcnQsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplKSB7XHJcbiAgICAgICAgLy8gbG9vayBmb3IgYSB2YWxpZCBkaWFnb25hbCB0aGF0IGRpdmlkZXMgdGhlIHBvbHlnb24gaW50byB0d29cclxuICAgICAgICB2YXIgYSA9IHN0YXJ0O1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgdmFyIGIgPSBhLm5leHQubmV4dDtcclxuICAgICAgICAgICAgd2hpbGUgKGIgIT09IGEucHJldikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGEuaSAhPT0gYi5pICYmIGlzVmFsaWREaWFnb25hbChhLCBiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNwbGl0IHRoZSBwb2x5Z29uIGluIHR3byBieSB0aGUgZGlhZ29uYWxcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IHNwbGl0UG9seWdvbihhLCBiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZmlsdGVyIGNvbGluZWFyIHBvaW50cyBhcm91bmQgdGhlIGN1dHNcclxuICAgICAgICAgICAgICAgICAgICBhID0gZmlsdGVyUG9pbnRzKGEsIGEubmV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYyA9IGZpbHRlclBvaW50cyhjLCBjLm5leHQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBydW4gZWFyY3V0IG9uIGVhY2ggaGFsZlxyXG4gICAgICAgICAgICAgICAgICAgIGVhcmN1dExpbmtlZChhLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGMsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBiID0gYi5uZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGEgPSBhLm5leHQ7XHJcbiAgICAgICAgfSB3aGlsZSAoYSAhPT0gc3RhcnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGxpbmsgZXZlcnkgaG9sZSBpbnRvIHRoZSBvdXRlciBsb29wLCBwcm9kdWNpbmcgYSBzaW5nbGUtcmluZyBwb2x5Z29uIHdpdGhvdXQgaG9sZXNcclxuICAgIGZ1bmN0aW9uIGVsaW1pbmF0ZUhvbGVzKGRhdGEsIGhvbGVJbmRpY2VzLCBvdXRlck5vZGUsIGRpbSkge1xyXG4gICAgICAgIHZhciBxdWV1ZSA9IFtdLFxyXG4gICAgICAgICAgICBpLCBsZW4sIHN0YXJ0LCBlbmQsIGxpc3Q7XHJcblxyXG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGhvbGVJbmRpY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0ID0gaG9sZUluZGljZXNbaV0gKiBkaW07XHJcbiAgICAgICAgICAgIGVuZCA9IGkgPCBsZW4gLSAxID8gaG9sZUluZGljZXNbaSArIDFdICogZGltIDogZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgICAgIGxpc3QgPSBsaW5rZWRMaXN0KGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBpZiAobGlzdCA9PT0gbGlzdC5uZXh0KSBsaXN0LnN0ZWluZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGdldExlZnRtb3N0KGxpc3QpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHF1ZXVlLnNvcnQoY29tcGFyZVgpO1xyXG5cclxuICAgICAgICAvLyBwcm9jZXNzIGhvbGVzIGZyb20gbGVmdCB0byByaWdodFxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBlbGltaW5hdGVIb2xlKHF1ZXVlW2ldLCBvdXRlck5vZGUpO1xyXG4gICAgICAgICAgICBvdXRlck5vZGUgPSBmaWx0ZXJQb2ludHMob3V0ZXJOb2RlLCBvdXRlck5vZGUubmV4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb3V0ZXJOb2RlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNvbXBhcmVYKGEsIGIpIHtcclxuICAgICAgICByZXR1cm4gYS54IC0gYi54O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGZpbmQgYSBicmlkZ2UgYmV0d2VlbiB2ZXJ0aWNlcyB0aGF0IGNvbm5lY3RzIGhvbGUgd2l0aCBhbiBvdXRlciByaW5nIGFuZCBhbmQgbGluayBpdFxyXG4gICAgZnVuY3Rpb24gZWxpbWluYXRlSG9sZShob2xlLCBvdXRlck5vZGUpIHtcclxuICAgICAgICBvdXRlck5vZGUgPSBmaW5kSG9sZUJyaWRnZShob2xlLCBvdXRlck5vZGUpO1xyXG4gICAgICAgIGlmIChvdXRlck5vZGUpIHtcclxuICAgICAgICAgICAgdmFyIGIgPSBzcGxpdFBvbHlnb24ob3V0ZXJOb2RlLCBob2xlKTtcclxuICAgICAgICAgICAgZmlsdGVyUG9pbnRzKGIsIGIubmV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIERhdmlkIEViZXJseSdzIGFsZ29yaXRobSBmb3IgZmluZGluZyBhIGJyaWRnZSBiZXR3ZWVuIGhvbGUgYW5kIG91dGVyIHBvbHlnb25cclxuICAgIGZ1bmN0aW9uIGZpbmRIb2xlQnJpZGdlKGhvbGUsIG91dGVyTm9kZSkge1xyXG4gICAgICAgIHZhciBwID0gb3V0ZXJOb2RlLFxyXG4gICAgICAgICAgICBoeCA9IGhvbGUueCxcclxuICAgICAgICAgICAgaHkgPSBob2xlLnksXHJcbiAgICAgICAgICAgIHF4ID0gLUluZmluaXR5LFxyXG4gICAgICAgICAgICBtO1xyXG5cclxuICAgICAgICAvLyBmaW5kIGEgc2VnbWVudCBpbnRlcnNlY3RlZCBieSBhIHJheSBmcm9tIHRoZSBob2xlJ3MgbGVmdG1vc3QgcG9pbnQgdG8gdGhlIGxlZnQ7XHJcbiAgICAgICAgLy8gc2VnbWVudCdzIGVuZHBvaW50IHdpdGggbGVzc2VyIHggd2lsbCBiZSBwb3RlbnRpYWwgY29ubmVjdGlvbiBwb2ludFxyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgaWYgKGh5IDw9IHAueSAmJiBoeSA+PSBwLm5leHQueSAmJiBwLm5leHQueSAhPT0gcC55KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgeCA9IHAueCArIChoeSAtIHAueSkgKiAocC5uZXh0LnggLSBwLngpIC8gKHAubmV4dC55IC0gcC55KTtcclxuICAgICAgICAgICAgICAgIGlmICh4IDw9IGh4ICYmIHggPiBxeCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHF4ID0geDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeCA9PT0gaHgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGh5ID09PSBwLnkpIHJldHVybiBwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaHkgPT09IHAubmV4dC55KSByZXR1cm4gcC5uZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBtID0gcC54IDwgcC5uZXh0LnggPyBwIDogcC5uZXh0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHAgPSBwLm5leHQ7XHJcbiAgICAgICAgfSB3aGlsZSAocCAhPT0gb3V0ZXJOb2RlKTtcclxuXHJcbiAgICAgICAgaWYgKCFtKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKGh4ID09PSBxeCkgcmV0dXJuIG0ucHJldjsgLy8gaG9sZSB0b3VjaGVzIG91dGVyIHNlZ21lbnQ7IHBpY2sgbG93ZXIgZW5kcG9pbnRcclxuXHJcbiAgICAgICAgLy8gbG9vayBmb3IgcG9pbnRzIGluc2lkZSB0aGUgdHJpYW5nbGUgb2YgaG9sZSBwb2ludCwgc2VnbWVudCBpbnRlcnNlY3Rpb24gYW5kIGVuZHBvaW50O1xyXG4gICAgICAgIC8vIGlmIHRoZXJlIGFyZSBubyBwb2ludHMgZm91bmQsIHdlIGhhdmUgYSB2YWxpZCBjb25uZWN0aW9uO1xyXG4gICAgICAgIC8vIG90aGVyd2lzZSBjaG9vc2UgdGhlIHBvaW50IG9mIHRoZSBtaW5pbXVtIGFuZ2xlIHdpdGggdGhlIHJheSBhcyBjb25uZWN0aW9uIHBvaW50XHJcblxyXG4gICAgICAgIHZhciBzdG9wID0gbSxcclxuICAgICAgICAgICAgbXggPSBtLngsXHJcbiAgICAgICAgICAgIG15ID0gbS55LFxyXG4gICAgICAgICAgICB0YW5NaW4gPSBJbmZpbml0eSxcclxuICAgICAgICAgICAgdGFuO1xyXG5cclxuICAgICAgICBwID0gbS5uZXh0O1xyXG5cclxuICAgICAgICB3aGlsZSAocCAhPT0gc3RvcCkge1xyXG4gICAgICAgICAgICBpZiAoaHggPj0gcC54ICYmIHAueCA+PSBteCAmJiBoeCAhPT0gcC54ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRJblRyaWFuZ2xlKGh5IDwgbXkgPyBoeCA6IHF4LCBoeSwgbXgsIG15LCBoeSA8IG15ID8gcXggOiBoeCwgaHksIHAueCwgcC55KSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHRhbiA9IE1hdGguYWJzKGh5IC0gcC55KSAvIChoeCAtIHAueCk7IC8vIHRhbmdlbnRpYWxcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoKHRhbiA8IHRhbk1pbiB8fCAodGFuID09PSB0YW5NaW4gJiYgcC54ID4gbS54KSkgJiYgbG9jYWxseUluc2lkZShwLCBob2xlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG0gPSBwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRhbk1pbiA9IHRhbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcCA9IHAubmV4dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBtO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGludGVybGluayBwb2x5Z29uIG5vZGVzIGluIHotb3JkZXJcclxuICAgIGZ1bmN0aW9uIGluZGV4Q3VydmUoc3RhcnQsIG1pblgsIG1pblksIGludlNpemUpIHtcclxuICAgICAgICB2YXIgcCA9IHN0YXJ0O1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgaWYgKHAueiA9PT0gbnVsbCkgcC56ID0gek9yZGVyKHAueCwgcC55LCBtaW5YLCBtaW5ZLCBpbnZTaXplKTtcclxuICAgICAgICAgICAgcC5wcmV2WiA9IHAucHJldjtcclxuICAgICAgICAgICAgcC5uZXh0WiA9IHAubmV4dDtcclxuICAgICAgICAgICAgcCA9IHAubmV4dDtcclxuICAgICAgICB9IHdoaWxlIChwICE9PSBzdGFydCk7XHJcblxyXG4gICAgICAgIHAucHJldloubmV4dFogPSBudWxsO1xyXG4gICAgICAgIHAucHJldlogPSBudWxsO1xyXG5cclxuICAgICAgICBzb3J0TGlua2VkKHApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNpbW9uIFRhdGhhbSdzIGxpbmtlZCBsaXN0IG1lcmdlIHNvcnQgYWxnb3JpdGhtXHJcbiAgICAvLyBodHRwOi8vd3d3LmNoaWFyay5ncmVlbmVuZC5vcmcudWsvfnNndGF0aGFtL2FsZ29yaXRobXMvbGlzdHNvcnQuaHRtbFxyXG4gICAgZnVuY3Rpb24gc29ydExpbmtlZChsaXN0KSB7XHJcbiAgICAgICAgdmFyIGksIHAsIHEsIGUsIHRhaWwsIG51bU1lcmdlcywgcFNpemUsIHFTaXplLFxyXG4gICAgICAgICAgICBpblNpemUgPSAxO1xyXG5cclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIHAgPSBsaXN0O1xyXG4gICAgICAgICAgICBsaXN0ID0gbnVsbDtcclxuICAgICAgICAgICAgdGFpbCA9IG51bGw7XHJcbiAgICAgICAgICAgIG51bU1lcmdlcyA9IDA7XHJcblxyXG4gICAgICAgICAgICB3aGlsZSAocCkge1xyXG4gICAgICAgICAgICAgICAgbnVtTWVyZ2VzKys7XHJcbiAgICAgICAgICAgICAgICBxID0gcDtcclxuICAgICAgICAgICAgICAgIHBTaXplID0gMDtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpblNpemU7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBTaXplKys7XHJcbiAgICAgICAgICAgICAgICAgICAgcSA9IHEubmV4dFo7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFxKSBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHFTaXplID0gaW5TaXplO1xyXG5cclxuICAgICAgICAgICAgICAgIHdoaWxlIChwU2l6ZSA+IDAgfHwgKHFTaXplID4gMCAmJiBxKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocFNpemUgIT09IDAgJiYgKHFTaXplID09PSAwIHx8ICFxIHx8IHAueiA8PSBxLnopKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwID0gcC5uZXh0WjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcFNpemUtLTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gcTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcSA9IHEubmV4dFo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHFTaXplLS07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFpbCkgdGFpbC5uZXh0WiA9IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBsaXN0ID0gZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2WiA9IHRhaWw7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFpbCA9IGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcCA9IHE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRhaWwubmV4dFogPSBudWxsO1xyXG4gICAgICAgICAgICBpblNpemUgKj0gMjtcclxuXHJcbiAgICAgICAgfSB3aGlsZSAobnVtTWVyZ2VzID4gMSk7XHJcblxyXG4gICAgICAgIHJldHVybiBsaXN0O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHotb3JkZXIgb2YgYSBwb2ludCBnaXZlbiBjb29yZHMgYW5kIGludmVyc2Ugb2YgdGhlIGxvbmdlciBzaWRlIG9mIGRhdGEgYmJveFxyXG4gICAgZnVuY3Rpb24gek9yZGVyKHgsIHksIG1pblgsIG1pblksIGludlNpemUpIHtcclxuICAgICAgICAvLyBjb29yZHMgYXJlIHRyYW5zZm9ybWVkIGludG8gbm9uLW5lZ2F0aXZlIDE1LWJpdCBpbnRlZ2VyIHJhbmdlXHJcbiAgICAgICAgeCA9IDMyNzY3ICogKHggLSBtaW5YKSAqIGludlNpemU7XHJcbiAgICAgICAgeSA9IDMyNzY3ICogKHkgLSBtaW5ZKSAqIGludlNpemU7XHJcblxyXG4gICAgICAgIHggPSAoeCB8ICh4IDw8IDgpKSAmIDB4MDBGRjAwRkY7XHJcbiAgICAgICAgeCA9ICh4IHwgKHggPDwgNCkpICYgMHgwRjBGMEYwRjtcclxuICAgICAgICB4ID0gKHggfCAoeCA8PCAyKSkgJiAweDMzMzMzMzMzO1xyXG4gICAgICAgIHggPSAoeCB8ICh4IDw8IDEpKSAmIDB4NTU1NTU1NTU7XHJcblxyXG4gICAgICAgIHkgPSAoeSB8ICh5IDw8IDgpKSAmIDB4MDBGRjAwRkY7XHJcbiAgICAgICAgeSA9ICh5IHwgKHkgPDwgNCkpICYgMHgwRjBGMEYwRjtcclxuICAgICAgICB5ID0gKHkgfCAoeSA8PCAyKSkgJiAweDMzMzMzMzMzO1xyXG4gICAgICAgIHkgPSAoeSB8ICh5IDw8IDEpKSAmIDB4NTU1NTU1NTU7XHJcblxyXG4gICAgICAgIHJldHVybiB4IHwgKHkgPDwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZmluZCB0aGUgbGVmdG1vc3Qgbm9kZSBvZiBhIHBvbHlnb24gcmluZ1xyXG4gICAgZnVuY3Rpb24gZ2V0TGVmdG1vc3Qoc3RhcnQpIHtcclxuICAgICAgICB2YXIgcCA9IHN0YXJ0LFxyXG4gICAgICAgICAgICBsZWZ0bW9zdCA9IHN0YXJ0O1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgaWYgKHAueCA8IGxlZnRtb3N0LngpIGxlZnRtb3N0ID0gcDtcclxuICAgICAgICAgICAgcCA9IHAubmV4dDtcclxuICAgICAgICB9IHdoaWxlIChwICE9PSBzdGFydCk7XHJcblxyXG4gICAgICAgIHJldHVybiBsZWZ0bW9zdDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjaGVjayBpZiBhIHBvaW50IGxpZXMgd2l0aGluIGEgY29udmV4IHRyaWFuZ2xlXHJcbiAgICBmdW5jdGlvbiBwb2ludEluVHJpYW5nbGUoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgcHgsIHB5KSB7XHJcbiAgICAgICAgcmV0dXJuIChjeCAtIHB4KSAqIChheSAtIHB5KSAtIChheCAtIHB4KSAqIChjeSAtIHB5KSA+PSAwICYmXHJcbiAgICAgICAgICAgIChheCAtIHB4KSAqIChieSAtIHB5KSAtIChieCAtIHB4KSAqIChheSAtIHB5KSA+PSAwICYmXHJcbiAgICAgICAgICAgIChieCAtIHB4KSAqIChjeSAtIHB5KSAtIChjeCAtIHB4KSAqIChieSAtIHB5KSA+PSAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNoZWNrIGlmIGEgZGlhZ29uYWwgYmV0d2VlbiB0d28gcG9seWdvbiBub2RlcyBpcyB2YWxpZCAobGllcyBpbiBwb2x5Z29uIGludGVyaW9yKVxyXG4gICAgZnVuY3Rpb24gaXNWYWxpZERpYWdvbmFsKGEsIGIpIHtcclxuICAgICAgICByZXR1cm4gYS5uZXh0LmkgIT09IGIuaSAmJiBhLnByZXYuaSAhPT0gYi5pICYmICFpbnRlcnNlY3RzUG9seWdvbihhLCBiKSAmJlxyXG4gICAgICAgICAgICBsb2NhbGx5SW5zaWRlKGEsIGIpICYmIGxvY2FsbHlJbnNpZGUoYiwgYSkgJiYgbWlkZGxlSW5zaWRlKGEsIGIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHNpZ25lZCBhcmVhIG9mIGEgdHJpYW5nbGVcclxuICAgIGZ1bmN0aW9uIGFyZWEocCwgcSwgcikge1xyXG4gICAgICAgIHJldHVybiAocS55IC0gcC55KSAqIChyLnggLSBxLngpIC0gKHEueCAtIHAueCkgKiAoci55IC0gcS55KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjaGVjayBpZiB0d28gcG9pbnRzIGFyZSBlcXVhbFxyXG4gICAgZnVuY3Rpb24gZXF1YWxzKHAxLCBwMikge1xyXG4gICAgICAgIHJldHVybiBwMS54ID09PSBwMi54ICYmIHAxLnkgPT09IHAyLnk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY2hlY2sgaWYgdHdvIHNlZ21lbnRzIGludGVyc2VjdFxyXG4gICAgZnVuY3Rpb24gaW50ZXJzZWN0cyhwMSwgcTEsIHAyLCBxMikge1xyXG4gICAgICAgIGlmICgoZXF1YWxzKHAxLCBxMSkgJiYgZXF1YWxzKHAyLCBxMikpIHx8XHJcbiAgICAgICAgICAgIChlcXVhbHMocDEsIHEyKSAmJiBlcXVhbHMocDIsIHExKSkpIHJldHVybiB0cnVlO1xyXG4gICAgICAgIHJldHVybiBhcmVhKHAxLCBxMSwgcDIpID4gMCAhPT0gYXJlYShwMSwgcTEsIHEyKSA+IDAgJiZcclxuICAgICAgICAgICAgYXJlYShwMiwgcTIsIHAxKSA+IDAgIT09IGFyZWEocDIsIHEyLCBxMSkgPiAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNoZWNrIGlmIGEgcG9seWdvbiBkaWFnb25hbCBpbnRlcnNlY3RzIGFueSBwb2x5Z29uIHNlZ21lbnRzXHJcbiAgICBmdW5jdGlvbiBpbnRlcnNlY3RzUG9seWdvbihhLCBiKSB7XHJcbiAgICAgICAgdmFyIHAgPSBhO1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgaWYgKHAuaSAhPT0gYS5pICYmIHAubmV4dC5pICE9PSBhLmkgJiYgcC5pICE9PSBiLmkgJiYgcC5uZXh0LmkgIT09IGIuaSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGludGVyc2VjdHMocCwgcC5uZXh0LCBhLCBiKSkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIHAgPSBwLm5leHQ7XHJcbiAgICAgICAgfSB3aGlsZSAocCAhPT0gYSk7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjaGVjayBpZiBhIHBvbHlnb24gZGlhZ29uYWwgaXMgbG9jYWxseSBpbnNpZGUgdGhlIHBvbHlnb25cclxuICAgIGZ1bmN0aW9uIGxvY2FsbHlJbnNpZGUoYSwgYikge1xyXG4gICAgICAgIHJldHVybiBhcmVhKGEucHJldiwgYSwgYS5uZXh0KSA8IDAgP1xyXG4gICAgICAgICAgICBhcmVhKGEsIGIsIGEubmV4dCkgPj0gMCAmJiBhcmVhKGEsIGEucHJldiwgYikgPj0gMCA6XHJcbiAgICAgICAgICAgIGFyZWEoYSwgYiwgYS5wcmV2KSA8IDAgfHwgYXJlYShhLCBhLm5leHQsIGIpIDwgMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjaGVjayBpZiB0aGUgbWlkZGxlIHBvaW50IG9mIGEgcG9seWdvbiBkaWFnb25hbCBpcyBpbnNpZGUgdGhlIHBvbHlnb25cclxuICAgIGZ1bmN0aW9uIG1pZGRsZUluc2lkZShhLCBiKSB7XHJcbiAgICAgICAgdmFyIHAgPSBhLFxyXG4gICAgICAgICAgICBpbnNpZGUgPSBmYWxzZSxcclxuICAgICAgICAgICAgcHggPSAoYS54ICsgYi54KSAvIDIsXHJcbiAgICAgICAgICAgIHB5ID0gKGEueSArIGIueSkgLyAyO1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgaWYgKCgocC55ID4gcHkpICE9PSAocC5uZXh0LnkgPiBweSkpICYmIHAubmV4dC55ICE9PSBwLnkgJiZcclxuICAgICAgICAgICAgICAgICAgICAocHggPCAocC5uZXh0LnggLSBwLngpICogKHB5IC0gcC55KSAvIChwLm5leHQueSAtIHAueSkgKyBwLngpKVxyXG4gICAgICAgICAgICAgICAgaW5zaWRlID0gIWluc2lkZTtcclxuICAgICAgICAgICAgcCA9IHAubmV4dDtcclxuICAgICAgICB9IHdoaWxlIChwICE9PSBhKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGluc2lkZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBsaW5rIHR3byBwb2x5Z29uIHZlcnRpY2VzIHdpdGggYSBicmlkZ2U7IGlmIHRoZSB2ZXJ0aWNlcyBiZWxvbmcgdG8gdGhlIHNhbWUgcmluZywgaXQgc3BsaXRzIHBvbHlnb24gaW50byB0d287XHJcbiAgICAvLyBpZiBvbmUgYmVsb25ncyB0byB0aGUgb3V0ZXIgcmluZyBhbmQgYW5vdGhlciB0byBhIGhvbGUsIGl0IG1lcmdlcyBpdCBpbnRvIGEgc2luZ2xlIHJpbmdcclxuICAgIGZ1bmN0aW9uIHNwbGl0UG9seWdvbihhLCBiKSB7XHJcbiAgICAgICAgdmFyIGEyID0gbmV3IE5vZGUoYS5pLCBhLngsIGEueSksXHJcbiAgICAgICAgICAgIGIyID0gbmV3IE5vZGUoYi5pLCBiLngsIGIueSksXHJcbiAgICAgICAgICAgIGFuID0gYS5uZXh0LFxyXG4gICAgICAgICAgICBicCA9IGIucHJldjtcclxuXHJcbiAgICAgICAgYS5uZXh0ID0gYjtcclxuICAgICAgICBiLnByZXYgPSBhO1xyXG5cclxuICAgICAgICBhMi5uZXh0ID0gYW47XHJcbiAgICAgICAgYW4ucHJldiA9IGEyO1xyXG5cclxuICAgICAgICBiMi5uZXh0ID0gYTI7XHJcbiAgICAgICAgYTIucHJldiA9IGIyO1xyXG5cclxuICAgICAgICBicC5uZXh0ID0gYjI7XHJcbiAgICAgICAgYjIucHJldiA9IGJwO1xyXG5cclxuICAgICAgICByZXR1cm4gYjI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY3JlYXRlIGEgbm9kZSBhbmQgb3B0aW9uYWxseSBsaW5rIGl0IHdpdGggcHJldmlvdXMgb25lIChpbiBhIGNpcmN1bGFyIGRvdWJseSBsaW5rZWQgbGlzdClcclxuICAgIGZ1bmN0aW9uIGluc2VydE5vZGUoaSwgeCwgeSwgbGFzdCkge1xyXG4gICAgICAgIHZhciBwID0gbmV3IE5vZGUoaSwgeCwgeSk7XHJcblxyXG4gICAgICAgIGlmICghbGFzdCkge1xyXG4gICAgICAgICAgICBwLnByZXYgPSBwO1xyXG4gICAgICAgICAgICBwLm5leHQgPSBwO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBwLm5leHQgPSBsYXN0Lm5leHQ7XHJcbiAgICAgICAgICAgIHAucHJldiA9IGxhc3Q7XHJcbiAgICAgICAgICAgIGxhc3QubmV4dC5wcmV2ID0gcDtcclxuICAgICAgICAgICAgbGFzdC5uZXh0ID0gcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHA7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlTm9kZShwKSB7XHJcbiAgICAgICAgcC5uZXh0LnByZXYgPSBwLnByZXY7XHJcbiAgICAgICAgcC5wcmV2Lm5leHQgPSBwLm5leHQ7XHJcblxyXG4gICAgICAgIGlmIChwLnByZXZaKSBwLnByZXZaLm5leHRaID0gcC5uZXh0WjtcclxuICAgICAgICBpZiAocC5uZXh0WikgcC5uZXh0Wi5wcmV2WiA9IHAucHJldlo7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gTm9kZShpLCB4LCB5KSB7XHJcbiAgICAgICAgLy8gdmVydGljZSBpbmRleCBpbiBjb29yZGluYXRlcyBhcnJheVxyXG4gICAgICAgIHRoaXMuaSA9IGk7XHJcblxyXG4gICAgICAgIC8vIHZlcnRleCBjb29yZGluYXRlc1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuXHJcbiAgICAgICAgLy8gcHJldmlvdXMgYW5kIG5leHQgdmVydGljZSBub2RlcyBpbiBhIHBvbHlnb24gcmluZ1xyXG4gICAgICAgIHRoaXMucHJldiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5uZXh0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gei1vcmRlciBjdXJ2ZSB2YWx1ZVxyXG4gICAgICAgIHRoaXMueiA9IG51bGw7XHJcblxyXG4gICAgICAgIC8vIHByZXZpb3VzIGFuZCBuZXh0IG5vZGVzIGluIHotb3JkZXJcclxuICAgICAgICB0aGlzLnByZXZaID0gbnVsbDtcclxuICAgICAgICB0aGlzLm5leHRaID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy8gaW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBpcyBhIHN0ZWluZXIgcG9pbnRcclxuICAgICAgICB0aGlzLnN0ZWluZXIgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyByZXR1cm4gYSBwZXJjZW50YWdlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgcG9seWdvbiBhcmVhIGFuZCBpdHMgdHJpYW5ndWxhdGlvbiBhcmVhO1xyXG4gICAgLy8gdXNlZCB0byB2ZXJpZnkgY29ycmVjdG5lc3Mgb2YgdHJpYW5ndWxhdGlvblxyXG4gICAgZWFyY3V0LmRldmlhdGlvbiA9IGZ1bmN0aW9uIChkYXRhLCBob2xlSW5kaWNlcywgZGltLCB0cmlhbmdsZXMpIHtcclxuICAgICAgICB2YXIgaGFzSG9sZXMgPSBob2xlSW5kaWNlcyAmJiBob2xlSW5kaWNlcy5sZW5ndGg7XHJcbiAgICAgICAgdmFyIG91dGVyTGVuID0gaGFzSG9sZXMgPyBob2xlSW5kaWNlc1swXSAqIGRpbSA6IGRhdGEubGVuZ3RoO1xyXG5cclxuICAgICAgICB2YXIgcG9seWdvbkFyZWEgPSBNYXRoLmFicyhzaWduZWRBcmVhKGRhdGEsIDAsIG91dGVyTGVuLCBkaW0pKTtcclxuICAgICAgICBpZiAoaGFzSG9sZXMpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGhvbGVJbmRpY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBob2xlSW5kaWNlc1tpXSAqIGRpbTtcclxuICAgICAgICAgICAgICAgIHZhciBlbmQgPSBpIDwgbGVuIC0gMSA/IGhvbGVJbmRpY2VzW2kgKyAxXSAqIGRpbSA6IGRhdGEubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgcG9seWdvbkFyZWEgLT0gTWF0aC5hYnMoc2lnbmVkQXJlYShkYXRhLCBzdGFydCwgZW5kLCBkaW0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHRyaWFuZ2xlc0FyZWEgPSAwO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0cmlhbmdsZXMubGVuZ3RoOyBpICs9IDMpIHtcclxuICAgICAgICAgICAgdmFyIGEgPSB0cmlhbmdsZXNbaV0gKiBkaW07XHJcbiAgICAgICAgICAgIHZhciBiID0gdHJpYW5nbGVzW2kgKyAxXSAqIGRpbTtcclxuICAgICAgICAgICAgdmFyIGMgPSB0cmlhbmdsZXNbaSArIDJdICogZGltO1xyXG4gICAgICAgICAgICB0cmlhbmdsZXNBcmVhICs9IE1hdGguYWJzKFxyXG4gICAgICAgICAgICAgICAgKGRhdGFbYV0gLSBkYXRhW2NdKSAqIChkYXRhW2IgKyAxXSAtIGRhdGFbYSArIDFdKSAtXHJcbiAgICAgICAgICAgICAgICAoZGF0YVthXSAtIGRhdGFbYl0pICogKGRhdGFbYyArIDFdIC0gZGF0YVthICsgMV0pKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwb2x5Z29uQXJlYSA9PT0gMCAmJiB0cmlhbmdsZXNBcmVhID09PSAwID8gMCA6XHJcbiAgICAgICAgICAgIE1hdGguYWJzKCh0cmlhbmdsZXNBcmVhIC0gcG9seWdvbkFyZWEpIC8gcG9seWdvbkFyZWEpO1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBzaWduZWRBcmVhKGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSkge1xyXG4gICAgICAgIHZhciBzdW0gPSAwO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSBzdGFydCwgaiA9IGVuZCAtIGRpbTsgaSA8IGVuZDsgaSArPSBkaW0pIHtcclxuICAgICAgICAgICAgc3VtICs9IChkYXRhW2pdIC0gZGF0YVtpXSkgKiAoZGF0YVtpICsgMV0gKyBkYXRhW2ogKyAxXSk7XHJcbiAgICAgICAgICAgIGogPSBpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3VtO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHR1cm4gYSBwb2x5Z29uIGluIGEgbXVsdGktZGltZW5zaW9uYWwgYXJyYXkgZm9ybSAoZS5nLiBhcyBpbiBHZW9KU09OKSBpbnRvIGEgZm9ybSBFYXJjdXQgYWNjZXB0c1xyXG4gICAgZWFyY3V0LmZsYXR0ZW4gPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHZhciBkaW0gPSBkYXRhWzBdWzBdLmxlbmd0aCxcclxuICAgICAgICAgICAgcmVzdWx0ID0ge3ZlcnRpY2VzOiBbXSwgaG9sZXM6IFtdLCBkaW1lbnNpb25zOiBkaW19LFxyXG4gICAgICAgICAgICBob2xlSW5kZXggPSAwO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkYXRhW2ldLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBkID0gMDsgZCA8IGRpbTsgZCsrKSByZXN1bHQudmVydGljZXMucHVzaChkYXRhW2ldW2pdW2RdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGhvbGVJbmRleCArPSBkYXRhW2kgLSAxXS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQuaG9sZXMucHVzaChob2xlSW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG59IiwiZXhwb3J0IGNsYXNzIFdlYmdsTWFuYWdlciB7XHJcbiAgICB3b3JrZXJDYWxsYmFjazogYW55O1xyXG4gICAgd29ya2VyOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7ICAgICAgIFxyXG4gICAgICAgIHRoaXMud29ya2VyID0ge307XHJcbiAgICAgICAgdGhpcy53b3JrZXJDYWxsYmFjayA9IHt9O1xyXG4gICAgICAgIHRoaXMuaW5pdFdvcmtlcnMoKTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0V29ya2VycygpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBsZXQgY2FsbEJhY2sgPSB0aGlzLndvcmtlckNhbGxiYWNrO1xyXG5cclxuICAgICAgICAgICAgbGV0IHNvdXJjZSA9ICcoJyArIHdpbmRvd1tcIndlYmdsQ2FjdWxhdGVcIl0gKyAnKSgpJztcclxuICAgICAgICAgICAgbGV0IGJsb2IgPSBuZXcgQmxvYihbc291cmNlXSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLndvcmtlciA9IG5ldyBXb3JrZXIod2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYikpO1xyXG4gICAgICAgICAgICB0aGlzLndvcmtlci5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkgeyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGxldCBkYXRhID0gZS5kYXRhO1xyXG4gICAgICAgICAgICAgICAgbGV0IHVpZCA9IGRhdGEudWlkO1xyXG4gICAgICAgICAgICAgICAgbGV0IHdlYmdsQ2FsbEJhY2sgPSBjYWxsQmFja1t1aWRdO1xyXG4gICAgICAgICAgICAgICAgLy8gYWRkIHdlYmdsSW5kZXhPYmogdG8gZGF0YT8/PyB3ZWJnbEluZGV4T2JqIGlzIHRoZSByZXN1bHQgb2YgZWFyY3V0XHJcbiAgICAgICAgICAgICAgICBpZiAod2ViZ2xDYWxsQmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXBsYXkgPSBkYXRhLm1lc3NhZ2VEYXRhLnJlcGxheXNbMF07ICBcclxuICAgICAgICAgICAgICAgICAgICBpZihyZXBsYXkpICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXBsYXkuUG9seWdvbiAmJiAocmVwbGF5LlBvbHlnb24ud2ViZ2xJbmRleE9iaiA9IGRhdGEud2ViZ2xQb2x5Z29uSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXBsYXkuTGluZVN0cmluZyAmJiAocmVwbGF5LkxpbmVTdHJpbmcud2ViZ2xJbmRleE9iaiA9IGRhdGEud2ViZ2xMaW5lSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWJnbENhbGxCYWNrKGRhdGEubWVzc2FnZURhdGEsIGRhdGEubWV0aG9kSW5mbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGNhbGxCYWNrW3VpZF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0gICBcclxuICAgIH1cclxuXHJcbiAgICBwb3N0TWVzc2FnZShkYXRhKSB7XHJcbiAgICAgICAgbGV0IHsgIFxyXG4gICAgICAgICAgICByZXBsYXlzLCAgICAgICAgICBcclxuICAgICAgICAgICAgdWlkLFxyXG4gICAgICAgICAgICBjYWxsQmFjayxcclxuICAgICAgICAgICAgbWVzc2FnZURhdGEsXHJcbiAgICAgICAgICAgIG1ldGhvZEluZm9cclxuICAgICAgICB9ID0gZGF0YTtcclxuXHJcbiAgICAgICAgaWYgKGNhbGxCYWNrKSB7XHJcbiAgICAgICAgICAgIHRoaXMud29ya2VyQ2FsbGJhY2tbdWlkXSA9IGNhbGxCYWNrOyAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcG9zdE1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgIHJlcGxheXMsXHJcbiAgICAgICAgICAgIHVpZDogdWlkLFxyXG4gICAgICAgICAgICBtZXNzYWdlRGF0YSxcclxuICAgICAgICAgICAgbWV0aG9kSW5mb1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLndvcmtlci5wb3N0TWVzc2FnZShwb3N0TWVzc2FnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy53b3JrZXIudGVybWluYXRlKCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBWZWN0b3JUaWxlTGF5ZXJUaHJlYWRNb2RlIH0gZnJvbSBcIi4vdmVjdG9yVGlsZUxheWVyVGhyZWFkTW9kZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFdvcmtlck1hbmFnZXIge1xyXG4gICAgd29ya2VyQ291bnQ6IG51bWJlcjtcclxuICAgIHdvcmtlcnM6IFdvcmtlcltdO1xyXG4gICAgY3VycmVudFdvcmtlckluZGV4O1xyXG5cclxuICAgIGluaXRlZDogYm9vbGVhbjtcclxuICAgIHdvcmtlckNhbGxiYWNrOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IodGhyZWFkTW9kZSwgd29ya2VyQ291bnQ6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aHJlYWRNb2RlID09PSBWZWN0b3JUaWxlTGF5ZXJUaHJlYWRNb2RlLlNpbmdsZUJhY2tncm91bmRXb3JrZXIpIHtcclxuICAgICAgICAgICAgdGhpcy53b3JrZXJDb3VudCA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoaXNOYU4od29ya2VyQ291bnQpIHx8IHdvcmtlckNvdW50IDw9IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud29ya2VyQ291bnQgPSBNYXRoLm1heChNYXRoLmZsb29yKHdpbmRvdy5uYXZpZ2F0b3IuaGFyZHdhcmVDb25jdXJyZW5jeSAvIDIpLCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHBhc3NlZCBieSBwYXJtXHJcbiAgICAgICAgICAgICAgICB0aGlzLndvcmtlckNvdW50ID0gd29ya2VyQ291bnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jdXJyZW50V29ya2VySW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMud29ya2VycyA9IFtdO1xyXG4gICAgICAgIHRoaXMud29ya2VyQ2FsbGJhY2sgPSB7fTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0V29ya2VycygpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBsZXQgY2FsbGJhY2tzID0gdGhpcy53b3JrZXJDYWxsYmFjaztcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLndvcmtlckNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBzb3VyY2UgPSAnKCcgKyB3aW5kb3dbXCJvbEluaXRcIl0gKyAnKSgpJztcclxuICAgICAgICAgICAgICAgIGxldCBibG9iID0gbmV3IEJsb2IoW3NvdXJjZV0pO1xyXG4gICAgICAgICAgICAgICAgbGV0IHdvcmtlciA9IG5ldyBXb3JrZXIod2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYikpO1xyXG4gICAgICAgICAgICAgICAgd29ya2VyLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1ldGhvZEluZm8gPSBlLmRhdGFbXCJtZXRob2RJbmZvXCJdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlRGF0YSA9IGUuZGF0YVtcIm1lc3NhZ2VEYXRhXCJdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1aWQgPSBtZXRob2RJbmZvLnVpZDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2FsbGJhY2sgPSBjYWxsYmFja3NbdWlkXTtcclxuICAgICAgICAgICAgICAgICAgICBpZihtZXRob2RJbmZvLm1ldGhvZE5hbWUgPT09ICdjcmVhdGVSZXBsYXknKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlcGxheXMgPSBtZXNzYWdlRGF0YS5yZXBsYXlzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAoPGFueT53aW5kb3cpLndlYmdsTWFuYWdlci5wb3N0TWVzc2FnZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYXlzOiByZXBsYXlzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdWlkOiB1aWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsQmFjazogY2FsbGJhY2ssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlRGF0YTogbWVzc2FnZURhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RJbmZvOiBtZXRob2RJbmZvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgIFxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhtZXNzYWdlRGF0YSwgbWV0aG9kSW5mbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgY2FsbGJhY2tzW3VpZF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLndvcmtlcnMucHVzaCh3b3JrZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHBvc3RNZXNzYWdlKHVpZDogc3RyaW5nLCBtZXRob2ROYW1lOiBzdHJpbmcsIG1lc3NhZ2VEYXRhLCBjYWxsYmFja0luZm8sIHdvcmtlckluZGV4KSB7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygd29ya2VySW5kZXggIT09IFwibnVtYmVyXCIgfHwgaXNOYU4od29ya2VySW5kZXgpIHx8IHdvcmtlckluZGV4ID49IHRoaXMud29ya2Vycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgd29ya2VySW5kZXggPSB0aGlzLmN1cnJlbnRXb3JrZXJJbmRleCA9ICh0aGlzLmN1cnJlbnRXb3JrZXJJbmRleCArIDEpICUgdGhpcy53b3JrZXJzLmxlbmd0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBtZXRob2RJbmZvID0ge1xyXG4gICAgICAgICAgICB1aWQ6IHVpZCxcclxuICAgICAgICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcclxuICAgICAgICAgICAgd29ya2VySWQ6IHdvcmtlckluZGV4XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKGNhbGxiYWNrSW5mbykge1xyXG4gICAgICAgICAgICB0aGlzLndvcmtlckNhbGxiYWNrW3VpZF0gPSBjYWxsYmFja0luZm87XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcG9zdE1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgIG1ldGhvZEluZm86IG1ldGhvZEluZm8sXHJcbiAgICAgICAgICAgIG1lc3NhZ2VEYXRhOiBtZXNzYWdlRGF0YVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy53b3JrZXJzW3dvcmtlckluZGV4XS5wb3N0TWVzc2FnZShwb3N0TWVzc2FnZSk7XHJcbiAgICAgICAgcmV0dXJuIHdvcmtlckluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKCkge1xyXG4gICAgICAgIHRoaXMud29ya2VyQ2FsbGJhY2sgPSB7fTtcclxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy53b3JrZXJzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICB0aGlzLndvcmtlcnNbaW5kZXhdLnRlcm1pbmF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=